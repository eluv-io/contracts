// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"math/big"
	"reflect"
	"strings"

	c "github.com/eluv-io/contracts/contracts-go/events"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// Map of ABI names to *abi.ABI
// ABI names are constants starting with K_
var ParsedABIS = map[string]*abi.ABI{}

// Map of ABI names to *bind.BoundContract for log parsing only
// ABI names are constants starting with K_
var BoundContracts = map[string]*bind.BoundContract{}

// Map of Unique events names to *EventInfo.
// Unique events names are constants starting with E_
var UniqueEvents = map[string]*EventInfo{}

// Map of Unique events types to *EventInfo
var EventsByType = map[reflect.Type]*EventInfo{}

// Map of Unique events IDs to *EventInfo
var EventsByID = map[common.Hash]*EventInfo{}

// JSON returns a parsed ABI interface and error if it failed.
func JSON(reader io.Reader) (*abi.ABI, error) {
	dec := json.NewDecoder(reader)

	var anAbi abi.ABI
	if err := dec.Decode(&anAbi); err != nil {
		return nil, err
	}

	return &anAbi, nil
}

func parseABI(name string) (*abi.ABI, error) {
	sabi := ABIS[name]
	if sabi == "" {
		return nil, fmt.Errorf("no such ABI %s", name)
	}
	return JSON(strings.NewReader(sabi))
}

func ParsedABI(name string) (*abi.ABI, error) {
	pabi, ok := ParsedABIS[name]
	if ok {
		return pabi, nil
	}
	return parseABI(name)
}

func BoundContract(name string) *bind.BoundContract {
	bc, ok := BoundContracts[name]
	if !ok {
		anABI, err := ParsedABI(name)
		if err != nil {
			panic(err)
		}
		bc = bind.NewBoundContract(common.Address{}, *anABI, nil, nil, nil)
		BoundContracts[name] = bc
	}
	return bc
}

// Type names of contract binding
const (
	K_AccessIndexor           = "AccessIndexor"
	K_Accessible              = "Accessible"
	K_Address                 = "Address"
	K_Adminable               = "Adminable"
	K_BaseAccessControlGroup  = "BaseAccessControlGroup"
	K_BaseAccessWallet        = "BaseAccessWallet"
	K_BaseAccessWalletFactory = "BaseAccessWalletFactory"
	K_BaseContent             = "BaseContent"
	K_BaseContentFactory      = "BaseContentFactory"
	K_BaseContentSpace        = "BaseContentSpace"
	K_BaseContentType         = "BaseContentType"
	K_BaseGroupFactory        = "BaseGroupFactory"
	K_BaseLibrary             = "BaseLibrary"
	K_BaseLibraryFactory      = "BaseLibraryFactory"
	K_BaseTenantConsumerGroup = "BaseTenantConsumerGroup"
	K_BaseTenantFactory       = "BaseTenantFactory"
	K_BaseTenantSpace         = "BaseTenantSpace"
	K_BaseTypeFactory         = "BaseTypeFactory"
	K_Container               = "Container"
	K_Content                 = "Content"
	K_ContentFactoryHelper    = "ContentFactoryHelper"
	K_CounterObject           = "CounterObject"
	K_ERC721Proxy             = "ERC721Proxy"
	K_Editable                = "Editable"
	K_EncToken                = "EncToken"
	K_ExternalCall            = "ExternalCall"
	K_IAdmin                  = "IAdmin"
	K_ICheckAccess            = "ICheckAccess"
	K_IFactorySpace           = "IFactorySpace"
	K_IKmsSpace               = "IKmsSpace"
	K_INodeSpace              = "INodeSpace"
	K_IUserSpace              = "IUserSpace"
	K_KmsManager              = "KmsManager"
	K_MetaObject              = "MetaObject"
	K_Node                    = "Node"
	K_NodeSpace               = "NodeSpace"
	K_Ownable                 = "Ownable"
	K_Precompile              = "Precompile"
	K_TenantFuncsBase         = "TenantFuncsBase"
	K_Transactable            = "Transactable"
	K_UserSpace               = "UserSpace"
	K_Utils                   = "Utils"
	K_Verifier                = "Verifier"
	K_FactoryHelper           = "FactoryHelper"
	K_Strings                 = "Strings"
)

var ABIS = map[string]string{

	K_AccessIndexor:           AccessIndexorABI,
	K_Accessible:              AccessibleABI,
	K_Address:                 AddressABI,
	K_Adminable:               AdminableABI,
	K_BaseAccessControlGroup:  BaseAccessControlGroupABI,
	K_BaseAccessWallet:        BaseAccessWalletABI,
	K_BaseAccessWalletFactory: BaseAccessWalletFactoryABI,
	K_BaseContent:             BaseContentABI,
	K_BaseContentFactory:      BaseContentFactoryABI,
	K_BaseContentSpace:        BaseContentSpaceABI,
	K_BaseContentType:         BaseContentTypeABI,
	K_BaseGroupFactory:        BaseGroupFactoryABI,
	K_BaseLibrary:             BaseLibraryABI,
	K_BaseLibraryFactory:      BaseLibraryFactoryABI,
	K_BaseTenantConsumerGroup: BaseTenantConsumerGroupABI,
	K_BaseTenantFactory:       BaseTenantFactoryABI,
	K_BaseTenantSpace:         BaseTenantSpaceABI,
	K_BaseTypeFactory:         BaseTypeFactoryABI,
	K_Container:               ContainerABI,
	K_Content:                 ContentABI,
	K_ContentFactoryHelper:    ContentFactoryHelperABI,
	K_CounterObject:           CounterObjectABI,
	K_ERC721Proxy:             ERC721ProxyABI,
	K_Editable:                EditableABI,
	K_EncToken:                EncTokenABI,
	K_ExternalCall:            ExternalCallABI,
	K_IAdmin:                  IAdminABI,
	K_ICheckAccess:            ICheckAccessABI,
	K_IFactorySpace:           IFactorySpaceABI,
	K_IKmsSpace:               IKmsSpaceABI,
	K_INodeSpace:              INodeSpaceABI,
	K_IUserSpace:              IUserSpaceABI,
	K_KmsManager:              KmsManagerABI,
	K_MetaObject:              MetaObjectABI,
	K_Node:                    NodeABI,
	K_NodeSpace:               NodeSpaceABI,
	K_Ownable:                 OwnableABI,
	K_Precompile:              PrecompileABI,
	K_TenantFuncsBase:         TenantFuncsBaseABI,
	K_Transactable:            TransactableABI,
	K_UserSpace:               UserSpaceABI,
	K_Utils:                   UtilsABI,
	K_Verifier:                VerifierABI,
	K_FactoryHelper:           FactoryHelperABI,
	K_Strings:                 StringsABI,
}

// Unique events names.
// Unique events are events whose ID and name are unique across contracts.
const (
	E_AccessComplete           = "AccessComplete"
	E_AccessCompleteV3         = "AccessCompleteV3"
	E_AccessRequest            = "AccessRequest"
	E_AccessRequestStakeholder = "AccessRequestStakeholder"
	E_AccessRequestV3          = "AccessRequestV3"
	E_AccessRequestValue       = "AccessRequestValue"
	E_AccessorGroupAdded       = "AccessorGroupAdded"
	E_AccessorGroupRemoved     = "AccessorGroupRemoved"
	E_AddKMSLocator            = "AddKMSLocator"
	E_AddNode                  = "AddNode"
	E_AddTenantGroup           = "AddTenantGroup"
	E_ApplyGroups              = "ApplyGroups"
	E_ApproveContent           = "ApproveContent"
	E_ApproveContentRequest    = "ApproveContentRequest"
	E_BindUserWallet           = "BindUserWallet"
	E_BitSetAndGet             = "BitSetAndGet"
	E_CommitPending            = "CommitPending"
	E_ContentObjectCreate      = "ContentObjectCreate"
	E_ContentObjectCreated     = "ContentObjectCreated"
	E_ContentObjectDeleted     = "ContentObjectDeleted"
	E_ContentTypeAdded         = "ContentTypeAdded"
	E_ContentTypeRemoved       = "ContentTypeRemoved"
	E_ContributorGroupAdded    = "ContributorGroupAdded"
	E_ContributorGroupRemoved  = "ContributorGroupRemoved"
	E_CounterIncremented       = "CounterIncremented"
	E_CreateAccessWallet       = "CreateAccessWallet"
	E_CreateContent            = "CreateContent"
	E_CreateContentType        = "CreateContentType"
	E_CreateGroup              = "CreateGroup"
	E_CreateLibrary            = "CreateLibrary"
	E_CreateSpace              = "CreateSpace"
	E_EngageAccountLibrary     = "EngageAccountLibrary"
	E_ExecStatus               = "ExecStatus"
	E_FunctionsAdded           = "FunctionsAdded"
	E_GetAccessWallet          = "GetAccessWallet"
	E_InsufficientFunds        = "InsufficientFunds"
	E_Log                      = "Log"
	E_LogAddress               = "LogAddress"
	E_LogBool                  = "LogBool"
	E_LogBytes32               = "LogBytes32"
	E_LogInt256                = "LogInt256"
	E_LogUint256               = "LogUint256"
	E_ManagerAccessGranted     = "ManagerAccessGranted"
	E_ManagerAccessRevoked     = "ManagerAccessRevoked"
	E_MemberAdded              = "MemberAdded"
	E_MemberRevoked            = "MemberRevoked"
	E_NodeApproved             = "NodeApproved"
	E_NodeSubmitted            = "NodeSubmitted"
	E_OAuthStatusChanged       = "OAuthStatusChanged"
	E_ObjectMetaChanged        = "ObjectMetaChanged"
	E_Publish                  = "Publish"
	E_RemoveKMSLocator         = "RemoveKMSLocator"
	E_RemoveNode               = "RemoveNode"
	E_RemoveTenantGroup        = "RemoveTenantGroup"
	E_ReviewerGroupAdded       = "ReviewerGroupAdded"
	E_ReviewerGroupRemoved     = "ReviewerGroupRemoved"
	E_RightsChanged            = "RightsChanged"
	E_RunAccess                = "RunAccess"
	E_RunAccessCharge          = "RunAccessCharge"
	E_RunCreate                = "RunCreate"
	E_RunFinalize              = "RunFinalize"
	E_RunKill                  = "RunKill"
	E_RunStatusChange          = "RunStatusChange"
	E_SetAccessCharge          = "SetAccessCharge"
	E_SetContentContract       = "SetContentContract"
	E_SetContentType           = "SetContentType"
	E_SetFactory               = "SetFactory"
	E_SetFactoryManager        = "SetFactoryManager"
	E_SetKmsManager            = "SetKmsManager"
	E_SetNodeManager           = "SetNodeManager"
	E_SetStatusCode            = "SetStatusCode"
	E_SetUserManager           = "SetUserManager"
	E_TenantTransfer           = "TenantTransfer"
	E_UnauthorizedOperation    = "UnauthorizedOperation"
	E_UpdateKmsAddress         = "UpdateKmsAddress"
	E_UpdateRequest            = "UpdateRequest"
	E_VersionConfirm           = "VersionConfirm"
	E_VersionDelete            = "VersionDelete"
	E_VisibilityChanged        = "VisibilityChanged"
	E_WordGroupDeleted         = "WordGroupDeleted"
)

type EventInfo = c.EventInfo
type EventType = c.EventType

func init() {
	for name, _ := range ABIS {
		a, err := parseABI(name)
		if err == nil {
			ParsedABIS[name] = a
		}
	}
	var ev *EventInfo

	ev = &EventInfo{
		Name: "AccessComplete",
		ID:   common.HexToHash("0x2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac06"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*AccessComplete)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_AccessComplete] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "AccessCompleteV3",
		ID:   common.HexToHash("0xd3e5b1d14681444d8159fa85b57104b685f47fb9164fd82b7fafe4e123dcc3a1"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*AccessCompleteV3)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_AccessCompleteV3] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "AccessRequest",
		ID:   common.HexToHash("0x50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a06"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*AccessRequest)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_AccessRequest] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "AccessRequestStakeholder",
		ID:   common.HexToHash("0xb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b684"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*AccessRequestStakeholder)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_AccessRequestStakeholder] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "AccessRequestV3",
		ID:   common.HexToHash("0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*AccessRequestV3)(nil)),
				BoundContract: BoundContract(K_Accessible),
			},
		},
	}
	UniqueEvents[E_AccessRequestV3] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "AccessRequestValue",
		ID:   common.HexToHash("0x515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c38"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*AccessRequestValue)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_AccessRequestValue] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "AccessorGroupAdded",
		ID:   common.HexToHash("0x3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d411"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*AccessorGroupAdded)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_AccessorGroupAdded] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "AccessorGroupRemoved",
		ID:   common.HexToHash("0xc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f081"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*AccessorGroupRemoved)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_AccessorGroupRemoved] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "AddKMSLocator",
		ID:   common.HexToHash("0xdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*AddKMSLocator)(nil)),
				BoundContract: BoundContract(K_KmsManager),
			},
		},
	}
	UniqueEvents[E_AddKMSLocator] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "AddNode",
		ID:   common.HexToHash("0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*AddNode)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_AddNode] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "AddTenantGroup",
		ID:   common.HexToHash("0x145b7e243e91890686f5ba84dd1254f7497f549ffb955f4871b3d27d4137d471"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*AddTenantGroup)(nil)),
				BoundContract: BoundContract(K_BaseTenantSpace),
			},
		},
	}
	UniqueEvents[E_AddTenantGroup] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ApplyGroups",
		ID:   common.HexToHash("0xaf51ac2c635b218e7e5205267ea152c8c9f51fc74f818c332dcf630e82a3dc3f"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ApplyGroups)(nil)),
				BoundContract: BoundContract(K_TenantFuncsBase),
			},
		},
	}
	UniqueEvents[E_ApplyGroups] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ApproveContent",
		ID:   common.HexToHash("0x70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ApproveContent)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_ApproveContent] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ApproveContentRequest",
		ID:   common.HexToHash("0x0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ApproveContentRequest)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_ApproveContentRequest] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "BindUserWallet",
		ID:   common.HexToHash("0x05e3f3adaf96d565bb326088a1d8e0d78497549df2c99a8ab681e5fbc7a9b3f2"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*BindUserWallet)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_BindUserWallet] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "BitSetAndGet",
		ID:   common.HexToHash("0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*BitSetAndGet)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_BitSetAndGet] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "CommitPending",
		ID:   common.HexToHash("0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*CommitPending)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_CommitPending] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ContentObjectCreate",
		ID:   common.HexToHash("0xc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ContentObjectCreate)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_ContentObjectCreate] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ContentObjectCreated",
		ID:   common.HexToHash("0xadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ContentObjectCreated)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_ContentObjectCreated] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ContentObjectDeleted",
		ID:   common.HexToHash("0x36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ContentObjectDeleted)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_ContentObjectDeleted] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ContentTypeAdded",
		ID:   common.HexToHash("0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ContentTypeAdded)(nil)),
				BoundContract: BoundContract(K_BaseAccessWallet),
			},
		},
	}
	UniqueEvents[E_ContentTypeAdded] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ContentTypeRemoved",
		ID:   common.HexToHash("0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ContentTypeRemoved)(nil)),
				BoundContract: BoundContract(K_BaseAccessWallet),
			},
		},
	}
	UniqueEvents[E_ContentTypeRemoved] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ContributorGroupAdded",
		ID:   common.HexToHash("0x218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d61"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ContributorGroupAdded)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_ContributorGroupAdded] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ContributorGroupRemoved",
		ID:   common.HexToHash("0xbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ContributorGroupRemoved)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_ContributorGroupRemoved] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "CounterIncremented",
		ID:   common.HexToHash("0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*CounterIncremented)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_CounterIncremented] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "CreateAccessWallet",
		ID:   common.HexToHash("0x56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*CreateAccessWallet)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_CreateAccessWallet] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "CreateContent",
		ID:   common.HexToHash("0xa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*CreateContent)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_CreateContent] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "CreateContentType",
		ID:   common.HexToHash("0x9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*CreateContentType)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_CreateContentType] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "CreateGroup",
		ID:   common.HexToHash("0xa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*CreateGroup)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_CreateGroup] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "CreateLibrary",
		ID:   common.HexToHash("0x473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*CreateLibrary)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_CreateLibrary] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "CreateSpace",
		ID:   common.HexToHash("0x599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf54"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*CreateSpace)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_CreateSpace] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "EngageAccountLibrary",
		ID:   common.HexToHash("0x53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*EngageAccountLibrary)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_EngageAccountLibrary] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ExecStatus",
		ID:   common.HexToHash("0x583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefad"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ExecStatus)(nil)),
				BoundContract: BoundContract(K_BaseAccessWallet),
			},
		},
	}
	UniqueEvents[E_ExecStatus] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "FunctionsAdded",
		ID:   common.HexToHash("0x2fd37118a7338c6d45366419ced87ba93589ba1cca2489e8fb42b55de8874266"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*FunctionsAdded)(nil)),
				BoundContract: BoundContract(K_BaseTenantSpace),
			},
		},
	}
	UniqueEvents[E_FunctionsAdded] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "GetAccessWallet",
		ID:   common.HexToHash("0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*GetAccessWallet)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_GetAccessWallet] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "InsufficientFunds",
		ID:   common.HexToHash("0x03eb8b54a949acec2cd08fdb6d6bd4647a1f2c907d75d6900648effa92eb147f"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*InsufficientFunds)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_InsufficientFunds] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "Log",
		ID:   common.HexToHash("0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*Log)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_Log] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "LogAddress",
		ID:   common.HexToHash("0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*LogAddress)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_LogAddress] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "LogBool",
		ID:   common.HexToHash("0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*LogBool)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_LogBool] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "LogBytes32",
		ID:   common.HexToHash("0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*LogBytes32)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_LogBytes32] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "LogInt256",
		ID:   common.HexToHash("0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*LogInt256)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_LogInt256] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "LogUint256",
		ID:   common.HexToHash("0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*LogUint256)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_LogUint256] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ManagerAccessGranted",
		ID:   common.HexToHash("0x93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d61117"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ManagerAccessGranted)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_ManagerAccessGranted] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ManagerAccessRevoked",
		ID:   common.HexToHash("0x2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b95"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ManagerAccessRevoked)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_ManagerAccessRevoked] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "MemberAdded",
		ID:   common.HexToHash("0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*MemberAdded)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_MemberAdded] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "MemberRevoked",
		ID:   common.HexToHash("0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*MemberRevoked)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_MemberRevoked] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "NodeApproved",
		ID:   common.HexToHash("0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*NodeApproved)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_NodeApproved] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "NodeSubmitted",
		ID:   common.HexToHash("0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*NodeSubmitted)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_NodeSubmitted] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "OAuthStatusChanged",
		ID:   common.HexToHash("0x04c71e53d136838eea703132a77007b0526b9a7691cdb7a6017a93673f865cbb"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*OAuthStatusChanged)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_OAuthStatusChanged] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ObjectMetaChanged",
		ID:   common.HexToHash("0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ObjectMetaChanged)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_ObjectMetaChanged] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "Publish",
		ID:   common.HexToHash("0xad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*Publish)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_Publish] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RemoveKMSLocator",
		ID:   common.HexToHash("0x5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RemoveKMSLocator)(nil)),
				BoundContract: BoundContract(K_KmsManager),
			},
		},
	}
	UniqueEvents[E_RemoveKMSLocator] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RemoveNode",
		ID:   common.HexToHash("0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RemoveNode)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_RemoveNode] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RemoveTenantGroup",
		ID:   common.HexToHash("0xa4ba7d16ec48ae0b1af6cf3707ad062b11503d59527bca97e68886e7f6991456"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RemoveTenantGroup)(nil)),
				BoundContract: BoundContract(K_BaseTenantSpace),
			},
		},
	}
	UniqueEvents[E_RemoveTenantGroup] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ReviewerGroupAdded",
		ID:   common.HexToHash("0x1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ReviewerGroupAdded)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_ReviewerGroupAdded] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ReviewerGroupRemoved",
		ID:   common.HexToHash("0xdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ReviewerGroupRemoved)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_ReviewerGroupRemoved] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RightsChanged",
		ID:   common.HexToHash("0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RightsChanged)(nil)),
				BoundContract: BoundContract(K_AccessIndexor),
			},
		},
	}
	UniqueEvents[E_RightsChanged] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RunAccess",
		ID:   common.HexToHash("0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RunAccess)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_RunAccess] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RunAccessCharge",
		ID:   common.HexToHash("0xe1f170f83120da6c17cd0ed37a683fc996637c63d2c94a60c806d4cb7466f47b"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RunAccessCharge)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_RunAccessCharge] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RunCreate",
		ID:   common.HexToHash("0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RunCreate)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_RunCreate] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RunFinalize",
		ID:   common.HexToHash("0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RunFinalize)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_RunFinalize] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RunKill",
		ID:   common.HexToHash("0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RunKill)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_RunKill] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RunStatusChange",
		ID:   common.HexToHash("0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RunStatusChange)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_RunStatusChange] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "SetAccessCharge",
		ID:   common.HexToHash("0x4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a3"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*SetAccessCharge)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_SetAccessCharge] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "SetContentContract",
		ID:   common.HexToHash("0xa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb7"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*SetContentContract)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_SetContentContract] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "SetContentType",
		ID:   common.HexToHash("0x4f692e87baf302f7281e83eec109053efc2ca8e7bddfc6ce88c579cd9767f71f"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*SetContentType)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_SetContentType] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "SetFactory",
		ID:   common.HexToHash("0x1c893ef9379093af30f458b9e74d2aba13c499660b68dec5e29af7b199c188b9"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*SetFactory)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_SetFactory] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "SetFactoryManager",
		ID:   common.HexToHash("0xfa2af382c197e27affb4e04f89f42556c71015346416b56be15b3aee3c87f661"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*SetFactoryManager)(nil)),
				BoundContract: BoundContract(K_BaseTenantSpace),
			},
		},
	}
	UniqueEvents[E_SetFactoryManager] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "SetKmsManager",
		ID:   common.HexToHash("0x78cf028637abb89c0df6a78afd3d4403d03e5eb532390543d498bb346ee96477"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*SetKmsManager)(nil)),
				BoundContract: BoundContract(K_BaseTenantSpace),
			},
		},
	}
	UniqueEvents[E_SetKmsManager] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "SetNodeManager",
		ID:   common.HexToHash("0x9b77357b839fea8829ce30918f67eb91de08caa0e5272af43a86af5334b56177"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*SetNodeManager)(nil)),
				BoundContract: BoundContract(K_BaseTenantSpace),
			},
		},
	}
	UniqueEvents[E_SetNodeManager] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "SetStatusCode",
		ID:   common.HexToHash("0xda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a2"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*SetStatusCode)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_SetStatusCode] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "SetUserManager",
		ID:   common.HexToHash("0xc104e41939e1b09c10a83f97ac30b2d1f48605f4630aa8c64633501740ce0299"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*SetUserManager)(nil)),
				BoundContract: BoundContract(K_BaseTenantSpace),
			},
		},
	}
	UniqueEvents[E_SetUserManager] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "TenantTransfer",
		ID:   common.HexToHash("0x59d13df91c02dfa098820027bd861986b2712e8fa2e7e431fea189243656aebd"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*TenantTransfer)(nil)),
				BoundContract: BoundContract(K_TenantFuncsBase),
			},
		},
	}
	UniqueEvents[E_TenantTransfer] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "UnauthorizedOperation",
		ID:   common.HexToHash("0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*UnauthorizedOperation)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_UnauthorizedOperation] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "UpdateKmsAddress",
		ID:   common.HexToHash("0x74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*UpdateKmsAddress)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_UpdateKmsAddress] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "UpdateRequest",
		ID:   common.HexToHash("0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*UpdateRequest)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_UpdateRequest] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "VersionConfirm",
		ID:   common.HexToHash("0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*VersionConfirm)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_VersionConfirm] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "VersionDelete",
		ID:   common.HexToHash("0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*VersionDelete)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_VersionDelete] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "VisibilityChanged",
		ID:   common.HexToHash("0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*VisibilityChanged)(nil)),
				BoundContract: BoundContract(K_Accessible),
			},
		},
	}
	UniqueEvents[E_VisibilityChanged] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "WordGroupDeleted",
		ID:   common.HexToHash("0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*WordGroupDeleted)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_WordGroupDeleted] = ev
	EventsByType[ev.Types[0].Type] = ev

}

// Unique events structs

// AccessComplete event with ID 0x2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac06
type AccessComplete struct {
	RequestID            *big.Int
	ScorePct             *big.Int
	CustomContractResult bool
	Raw                  types.Log // Blockchain specific contextual infos
}

// AccessCompleteV3 event with ID 0xd3e5b1d14681444d8159fa85b57104b685f47fb9164fd82b7fafe4e123dcc3a1
type AccessCompleteV3 struct {
	RequestNonce         *big.Int
	CustomContractResult bool
	ParentAddress        common.Address
	ContextHash          [32]byte
	Accessor             common.Address
	RequestTimestamp     *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// AccessRequest event with ID 0x50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a06
type AccessRequest struct {
	RequestID    *big.Int
	Level        uint8
	ContentHash  string
	PkeRequestor string
	PkeAFGH      string
	Raw          types.Log // Blockchain specific contextual infos
}

// AccessRequestStakeholder event with ID 0xb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b684
type AccessRequestStakeholder struct {
	Stakeholder common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// AccessRequestV3 event with ID 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7
type AccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// AccessRequestValue event with ID 0x515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c38
type AccessRequestValue struct {
	CustomValue [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// AccessorGroupAdded event with ID 0x3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d411
type AccessorGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// AccessorGroupRemoved event with ID 0xc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f081
type AccessorGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// AddKMSLocator event with ID 0xdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319
type AddKMSLocator struct {
	Sender common.Address
	Status *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// AddNode event with ID 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4
type AddNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// AddTenantGroup event with ID 0x145b7e243e91890686f5ba84dd1254f7497f549ffb955f4871b3d27d4137d471
type AddTenantGroup struct {
	GroupId   [32]byte
	GroupAddr common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// ApplyGroups event with ID 0xaf51ac2c635b218e7e5205267ea152c8c9f51fc74f818c332dcf630e82a3dc3f
type ApplyGroups struct {
	To        common.Address
	NumGroups *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// ApproveContent event with ID 0x70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442
type ApproveContent struct {
	ContentAddress common.Address
	Approved       bool
	Note           string
	Raw            types.Log // Blockchain specific contextual infos
}

// ApproveContentRequest event with ID 0x0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a
type ApproveContentRequest struct {
	ContentAddress common.Address
	Submitter      common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// BindUserWallet event with ID 0x05e3f3adaf96d565bb326088a1d8e0d78497549df2c99a8ab681e5fbc7a9b3f2
type BindUserWallet struct {
	Wallet   common.Address
	UserAddr common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// BitSetAndGet event with ID 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d
type BitSetAndGet struct {
	Ident [32]byte
	Ord   uint8
	Prev  bool
	Raw   types.Log // Blockchain specific contextual infos
}

// CommitPending event with ID 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75
type CommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// ContentObjectCreate event with ID 0xc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19
type ContentObjectCreate struct {
	ContainingLibrary common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// ContentObjectCreated event with ID 0xadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878
type ContentObjectCreated struct {
	ContentAddress common.Address
	ContentType    common.Address
	SpaceAddress   common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// ContentObjectDeleted event with ID 0x36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e
type ContentObjectDeleted struct {
	ContentAddress common.Address
	SpaceAddress   common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// ContentTypeAdded event with ID 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7
type ContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// ContentTypeRemoved event with ID 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2
type ContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// ContributorGroupAdded event with ID 0x218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d61
type ContributorGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// ContributorGroupRemoved event with ID 0xbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c
type ContributorGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// CounterIncremented event with ID 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f
type CounterIncremented struct {
	Ident [32]byte
	Slot  uint8
	Val   uint32
	Raw   types.Log // Blockchain specific contextual infos
}

// CreateAccessWallet event with ID 0x56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca
type CreateAccessWallet struct {
	Wallet common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// CreateContent event with ID 0xa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce
type CreateContent struct {
	ContentAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// CreateContentType event with ID 0x9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8
type CreateContentType struct {
	ContentTypeAddress common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// CreateGroup event with ID 0xa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159
type CreateGroup struct {
	GroupAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// CreateLibrary event with ID 0x473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571
type CreateLibrary struct {
	LibraryAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// CreateSpace event with ID 0x599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf54
type CreateSpace struct {
	Version [32]byte
	Owner   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// EngageAccountLibrary event with ID 0x53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca
type EngageAccountLibrary struct {
	AccountAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// ExecStatus event with ID 0x583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefad
type ExecStatus struct {
	Guarantor common.Address
	Code      *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FunctionsAdded event with ID 0x2fd37118a7338c6d45366419ced87ba93589ba1cca2489e8fb42b55de8874266
type FunctionsAdded struct {
	Func4Bytes [][4]byte
	FuncAddr   common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// GetAccessWallet event with ID 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157
type GetAccessWallet struct {
	WalletAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// InsufficientFunds event with ID 0x03eb8b54a949acec2cd08fdb6d6bd4647a1f2c907d75d6900648effa92eb147f
type InsufficientFunds struct {
	AccessCharge   *big.Int
	AmountProvided *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// Log event with ID 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab
type Log struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// LogAddress event with ID 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e
type LogAddress struct {
	Label string
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// LogBool event with ID 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47
type LogBool struct {
	Label string
	B     bool
	Raw   types.Log // Blockchain specific contextual infos
}

// LogBytes32 event with ID 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7
type LogBytes32 struct {
	Label string
	B     [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// LogInt256 event with ID 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22
type LogInt256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// LogUint256 event with ID 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d
type LogUint256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// ManagerAccessGranted event with ID 0x93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d61117
type ManagerAccessGranted struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// ManagerAccessRevoked event with ID 0x2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b95
type ManagerAccessRevoked struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// MemberAdded event with ID 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914
type MemberAdded struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// MemberRevoked event with ID 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c
type MemberRevoked struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// NodeApproved event with ID 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54
type NodeApproved struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// NodeSubmitted event with ID 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d
type NodeSubmitted struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// OAuthStatusChanged event with ID 0x04c71e53d136838eea703132a77007b0526b9a7691cdb7a6017a93673f865cbb
type OAuthStatusChanged struct {
	Enabled bool
	Raw     types.Log // Blockchain specific contextual infos
}

// ObjectMetaChanged event with ID 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c
type ObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// Publish event with ID 0xad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4
type Publish struct {
	RequestStatus bool
	StatusCode    *big.Int
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// RemoveKMSLocator event with ID 0x5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c
type RemoveKMSLocator struct {
	Sender common.Address
	Status *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// RemoveNode event with ID 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d
type RemoveNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// RemoveTenantGroup event with ID 0xa4ba7d16ec48ae0b1af6cf3707ad062b11503d59527bca97e68886e7f6991456
type RemoveTenantGroup struct {
	GroupId   [32]byte
	GroupAddr common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// ReviewerGroupAdded event with ID 0x1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb
type ReviewerGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// ReviewerGroupRemoved event with ID 0xdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb
type ReviewerGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// RightsChanged event with ID 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4
type RightsChanged struct {
	Principal common.Address
	Entity    common.Address
	Aggregate uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// RunAccess event with ID 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58
type RunAccess struct {
	RequestNonce *big.Int
	Result       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// RunAccessCharge event with ID 0xe1f170f83120da6c17cd0ed37a683fc996637c63d2c94a60c806d4cb7466f47b
type RunAccessCharge struct {
	CalculatedAccessCharge *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// RunCreate event with ID 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b
type RunCreate struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// RunFinalize event with ID 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891
type RunFinalize struct {
	RequestNonce *big.Int
	Result       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// RunKill event with ID 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86
type RunKill struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// RunStatusChange event with ID 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff
type RunStatusChange struct {
	ProposedStatusCode *big.Int
	ReturnStatusCode   *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// SetAccessCharge event with ID 0x4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a3
type SetAccessCharge struct {
	AccessCharge *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// SetContentContract event with ID 0xa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb7
type SetContentContract struct {
	ContentContractAddress common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// SetContentType event with ID 0x4f692e87baf302f7281e83eec109053efc2ca8e7bddfc6ce88c579cd9767f71f
type SetContentType struct {
	ContentType            common.Address
	ContentContractAddress common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// SetFactory event with ID 0x1c893ef9379093af30f458b9e74d2aba13c499660b68dec5e29af7b199c188b9
type SetFactory struct {
	Factory common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// SetFactoryManager event with ID 0xfa2af382c197e27affb4e04f89f42556c71015346416b56be15b3aee3c87f661
type SetFactoryManager struct {
	NewManager  common.Address
	PrevManager common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// SetKmsManager event with ID 0x78cf028637abb89c0df6a78afd3d4403d03e5eb532390543d498bb346ee96477
type SetKmsManager struct {
	NewManager  common.Address
	PrevManager common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// SetNodeManager event with ID 0x9b77357b839fea8829ce30918f67eb91de08caa0e5272af43a86af5334b56177
type SetNodeManager struct {
	NewManager  common.Address
	PrevManager common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// SetStatusCode event with ID 0xda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a2
type SetStatusCode struct {
	StatusCode *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// SetUserManager event with ID 0xc104e41939e1b09c10a83f97ac30b2d1f48605f4630aa8c64633501740ce0299
type SetUserManager struct {
	NewManager  common.Address
	PrevManager common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// TenantTransfer event with ID 0x59d13df91c02dfa098820027bd861986b2712e8fa2e7e431fea189243656aebd
type TenantTransfer struct {
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// UnauthorizedOperation event with ID 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7
type UnauthorizedOperation struct {
	OperationCode *big.Int
	Candidate     common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// UpdateKmsAddress event with ID 0x74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608
type UpdateKmsAddress struct {
	AddressKms common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// UpdateRequest event with ID 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65
type UpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// VersionConfirm event with ID 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df
type VersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// VersionDelete event with ID 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51
type VersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// VisibilityChanged event with ID 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500
type VisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// WordGroupDeleted event with ID 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f
type WordGroupDeleted struct {
	Ident [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// AccessIndexorMetaData contains all meta data concerning the AccessIndexor contract.
var AccessIndexorMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentObjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"name\":\"setContentSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_OBJECT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccessGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_GROUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_LIBRARY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_CONFIRMED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContractRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getAccessGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessGroups\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentObjectRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasManagerAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_TENTATIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"others\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"indexType\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setEntityRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contracts\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setLibraryRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_NONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentTypeRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpLibraries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkDirectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentObjects\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAccessRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraries\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLibrariesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentObject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAccessGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentObjectsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setAccessGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"}],\"name\":\"getLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"principal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"aggregate\",\"type\":\"uint8\"}],\"name\":\"RightsChanged\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"18689733": "ACCESS_CONFIRMED()",
		"8232f3f1": "ACCESS_NONE()",
		"479a0c51": "ACCESS_TENTATIVE()",
		"091600e6": "CATEGORY_CONTENT_OBJECT()",
		"68a0469a": "CATEGORY_CONTENT_TYPE()",
		"6373a411": "CATEGORY_CONTRACT()",
		"12915a30": "CATEGORY_GROUP()",
		"16aed232": "CATEGORY_LIBRARY()",
		"d1aeb651": "TYPE_ACCESS()",
		"5d97b6c2": "TYPE_EDIT()",
		"96eba03d": "TYPE_SEE()",
		"30e66949": "accessGroups()",
		"15c0bac1": "checkAccessGroupRights(address,uint8)",
		"5faecb76": "checkContentObjectRights(address,uint8)",
		"fe538c5a": "checkContentTypeRights(address,uint8)",
		"a864dfa5": "checkContractRights(address,uint8)",
		"a00b38c4": "checkDirectRights(uint8,address,uint8)",
		"6813b6d1": "checkLibraryRights(address,uint8)",
		"7fb52f1a": "checkRights(uint8,address,uint8)",
		"d30f8cd0": "cleanUpAccessGroups()",
		"2fa5c842": "cleanUpAll()",
		"048bd529": "cleanUpContentObjects()",
		"85e0a200": "cleanUpContentTypes()",
		"92297d7b": "cleanUpLibraries()",
		"a980892d": "contentObjects()",
		"af570c04": "contentSpace()",
		"9f46133e": "contentTypes()",
		"7709bc78": "contractExists(address)",
		"6c0f79b6": "contracts()",
		"02d05d3f": "creator()",
		"2d474cbd": "getAccessGroup(uint256)",
		"304f4a7b": "getAccessGroupRights(address)",
		"0dc10d3f": "getAccessGroupsLength()",
		"cf8a7503": "getContentObject(uint256)",
		"69881c0c": "getContentObjectRights(address)",
		"ebe9314e": "getContentObjectsLength()",
		"aa3f6952": "getContentType(uint256)",
		"a4081d62": "getContentTypeRights(address)",
		"5c1d3059": "getContentTypesLength()",
		"6ebc8c86": "getContract(uint256)",
		"08d865d7": "getContractRights(address)",
		"fccc134f": "getContractsLength()",
		"cb86806d": "getLibrariesLength()",
		"d15d62a7": "getLibrary(uint256)",
		"fb52222c": "getLibraryRights(address)",
		"42e7ba7b": "hasManagerAccess(address)",
		"41c0e1b5": "kill()",
		"c4b1978d": "libraries()",
		"51a7fc87": "others()",
		"8da5cb5b": "owner()",
		"f17bda91": "setAccessGroupRights(address,uint8,uint8)",
		"b8ff1dba": "setAccessRights()",
		"3def5140": "setContentObjectRights(address,uint8,uint8)",
		"055af48f": "setContentSpace(address)",
		"8635adb5": "setContentTypeRights(address,uint8,uint8)",
		"224dcba0": "setContractRights(address,uint8,uint8)",
		"5d7cf830": "setEntityRights(uint8,address,uint8,uint8)",
		"7cbb7bf2": "setLibraryRights(address,uint8,uint8)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
	},
	Bin: "",
}

// AccessIndexorABI is the input ABI used to generate the binding from.
// Deprecated: Use AccessIndexorMetaData.ABI instead.
var AccessIndexorABI = AccessIndexorMetaData.ABI

// Deprecated: Use AccessIndexorMetaData.Sigs instead.
// AccessIndexorFuncSigs maps the 4-byte function signature to its string representation.
var AccessIndexorFuncSigs = AccessIndexorMetaData.Sigs

// AccessIndexorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccessIndexorMetaData.Bin instead.
var AccessIndexorBin = AccessIndexorMetaData.Bin

// DeployAccessIndexor deploys a new Ethereum contract, binding an instance of AccessIndexor to it.
func DeployAccessIndexor(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccessIndexor, error) {
	parsed, err := ParsedABI(K_AccessIndexor)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccessIndexorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccessIndexor{AccessIndexorCaller: AccessIndexorCaller{contract: contract}, AccessIndexorTransactor: AccessIndexorTransactor{contract: contract}, AccessIndexorFilterer: AccessIndexorFilterer{contract: contract}}, nil
}

// AccessIndexor is an auto generated Go binding around an Ethereum contract.
type AccessIndexor struct {
	AccessIndexorCaller     // Read-only binding to the contract
	AccessIndexorTransactor // Write-only binding to the contract
	AccessIndexorFilterer   // Log filterer for contract events
}

// AccessIndexorCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessIndexorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessIndexorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessIndexorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessIndexorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessIndexorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewAccessIndexor creates a new instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexor(address common.Address, backend bind.ContractBackend) (*AccessIndexor, error) {
	contract, err := bindAccessIndexor(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccessIndexor{AccessIndexorCaller: AccessIndexorCaller{contract: contract}, AccessIndexorTransactor: AccessIndexorTransactor{contract: contract}, AccessIndexorFilterer: AccessIndexorFilterer{contract: contract}}, nil
}

// NewAccessIndexorCaller creates a new read-only instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexorCaller(address common.Address, caller bind.ContractCaller) (*AccessIndexorCaller, error) {
	contract, err := bindAccessIndexor(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessIndexorCaller{contract: contract}, nil
}

// NewAccessIndexorTransactor creates a new write-only instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexorTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessIndexorTransactor, error) {
	contract, err := bindAccessIndexor(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessIndexorTransactor{contract: contract}, nil
}

// NewAccessIndexorFilterer creates a new log filterer instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexorFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessIndexorFilterer, error) {
	contract, err := bindAccessIndexor(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessIndexorFilterer{contract: contract}, nil
}

// bindAccessIndexor binds a generic wrapper to an already deployed contract.
func bindAccessIndexor(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_AccessIndexor)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) ACCESSCONFIRMED(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "ACCESS_CONFIRMED")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) ACCESSNONE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "ACCESS_NONE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) ACCESSTENTATIVE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "ACCESS_TENTATIVE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYCONTENTOBJECT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "CATEGORY_CONTENT_OBJECT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYCONTENTTYPE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "CATEGORY_CONTENT_TYPE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYCONTRACT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "CATEGORY_CONTRACT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYGROUP(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "CATEGORY_GROUP")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYLIBRARY(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "CATEGORY_LIBRARY")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) TYPEACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "TYPE_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) TYPEEDIT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "TYPE_EDIT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) TYPESEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "TYPE_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() view returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) AccessGroups(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "accessGroups")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) view returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckAccessGroupRights(opts *bind.CallOpts, group common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "checkAccessGroupRights", group, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) view returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckContentObjectRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "checkContentObjectRights", obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) view returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckContentTypeRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "checkContentTypeRights", obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) view returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckContractRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "checkContractRights", obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) view returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckDirectRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "checkDirectRights", index_type, obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) view returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckLibraryRights(opts *bind.CallOpts, lib common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "checkLibraryRights", lib, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) view returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "checkRights", index_type, obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() view returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) ContentObjects(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "contentObjects")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_AccessIndexor *AccessIndexorCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() view returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) ContentTypes(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "contentTypes")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) view returns(bool)
func (_AccessIndexor *AccessIndexorCaller) ContractExists(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "contractExists", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() view returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) Contracts(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "contracts")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_AccessIndexor *AccessIndexorCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) view returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetAccessGroup(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getAccessGroup", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetAccessGroupRights(opts *bind.CallOpts, group common.Address) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getAccessGroupRights", group)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() view returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetAccessGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getAccessGroupsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) view returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetContentObject(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getContentObject", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetContentObjectRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getContentObjectRights", obj)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() view returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetContentObjectsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getContentObjectsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) view returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetContentType(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getContentType", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetContentTypeRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getContentTypeRights", obj)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() view returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getContentTypesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) view returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetContract(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getContract", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetContractRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getContractRights", obj)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() view returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetContractsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getContractsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() view returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetLibrariesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getLibrariesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) view returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetLibrary(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getLibrary", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetLibraryRights(opts *bind.CallOpts, lib common.Address) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getLibraryRights", lib)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) view returns(bool)
func (_AccessIndexor *AccessIndexorCaller) HasManagerAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "hasManagerAccess", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() view returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) Libraries(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "libraries")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() view returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) Others(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "others")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_AccessIndexor *AccessIndexorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_AccessIndexor *AccessIndexorCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_AccessIndexor *AccessIndexorCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpAccessGroups(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpAccessGroups")
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpAll")
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpContentObjects(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpContentObjects")
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpContentTypes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpContentTypes")
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpLibraries(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpLibraries")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_AccessIndexor *AccessIndexorTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "kill")
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetAccessGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setAccessGroupRights", group, access_type, access)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_AccessIndexor *AccessIndexorTransactor) SetAccessRights(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setAccessRights")
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContentObjectRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContentObjectRights", obj, access_type, access)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContentSpace(opts *bind.TransactOpts, content_space common.Address) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContentSpace", content_space)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContentTypeRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContentTypeRights", obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContractRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContractRights", obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetEntityRights(opts *bind.TransactOpts, indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setEntityRights", indexType, obj, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetLibraryRights(opts *bind.TransactOpts, lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setLibraryRights", lib, access_type, access)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_AccessIndexor *AccessIndexorTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AccessIndexor *AccessIndexorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_AccessIndexor *AccessIndexorTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _AccessIndexor.contract.RawTransact(opts, calldata)
}

// AccessIndexorRightsChangedIterator is returned from FilterRightsChanged and is used to iterate over the raw logs and unpacked data for RightsChanged events raised by the AccessIndexor contract.
type AccessIndexorRightsChangedIterator struct {
	Event *AccessIndexorRightsChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessIndexorRightsChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessIndexorRightsChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessIndexorRightsChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessIndexorRightsChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessIndexorRightsChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessIndexorRightsChanged represents a RightsChanged event raised by the AccessIndexor contract.
type AccessIndexorRightsChanged struct {
	Principal common.Address
	Entity    common.Address
	Aggregate uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRightsChanged is a free log retrieval operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_AccessIndexor *AccessIndexorFilterer) FilterRightsChanged(opts *bind.FilterOpts) (*AccessIndexorRightsChangedIterator, error) {

	logs, sub, err := _AccessIndexor.contract.FilterLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return &AccessIndexorRightsChangedIterator{contract: _AccessIndexor.contract, event: "RightsChanged", logs: logs, sub: sub}, nil
}

// WatchRightsChanged is a free log subscription operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_AccessIndexor *AccessIndexorFilterer) WatchRightsChanged(opts *bind.WatchOpts, sink chan<- *AccessIndexorRightsChanged) (event.Subscription, error) {

	logs, sub, err := _AccessIndexor.contract.WatchLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessIndexorRightsChanged)
				if err := _AccessIndexor.contract.UnpackLog(event, "RightsChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRightsChanged is a log parse operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_AccessIndexor *AccessIndexorFilterer) ParseRightsChanged(log types.Log) (*AccessIndexorRightsChanged, error) {
	event := new(AccessIndexorRightsChanged)
	if err := _AccessIndexor.contract.UnpackLog(event, "RightsChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccessibleMetaData contains all meta data concerning the Accessible contract.
var AccessibleMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"97ac4fd2": "CAN_ACCESS()",
		"ef1d7dc2": "CAN_EDIT()",
		"100508a2": "CAN_SEE()",
		"1bf7a912": "accessRequestV3(bytes32[],address[])",
		"af570c04": "contentSpace()",
		"02d05d3f": "creator()",
		"95a078e8": "hasAccess(address)",
		"6380501f": "indexCategory()",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"aa024e8b": "setVisibility(uint8)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
		"29adec14": "visibility()",
	},
	Bin: "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060019081557f41636365737369626c653230323030363236313231363030504f0000000000006005556006805461ff001960ff1990911690921791909116905560028054600160a060020a031990811632179091556003805490911633179055610840806100b86000396000f3fe6080604052600436106100f35760003560e01c80636d2e4b1b1161008a578063aa024e8b11610059578063aa024e8b14610397578063af570c04146103c4578063ef1d7dc2146103d9578063f2fde38b146103ee576100f3565b80636d2e4b1b146103075780638da5cb5b1461033a57806395a078e81461034f57806397ac4fd214610382576100f3565b806341c0e1b5116100c657806341c0e1b5146102a157806354fd4d50146102b65780635f4fcae1146102dd5780636380501f146102f2576100f3565b806302d05d3f146100f5578063100508a2146101265780631bf7a9121461015157806329adec141461028c575b005b34801561010157600080fd5b5061010a610421565b60408051600160a060020a039092168252519081900360200190f35b34801561013257600080fd5b5061013b610430565b6040805160ff9092168252519081900360200190f35b6102786004803603604081101561016757600080fd5b81019060208101813564010000000081111561018257600080fd5b82018360208201111561019457600080fd5b803590602001918460208302840111640100000000831117156101b657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561020657600080fd5b82018360208201111561021857600080fd5b8035906020019184602083028401116401000000008311171561023a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610435945050505050565b604080519115158252519081900360200190f35b34801561029857600080fd5b5061013b6104d8565b3480156102ad57600080fd5b506100f36104e1565b3480156102c257600080fd5b506102cb610506565b60408051918252519081900360200190f35b3480156102e957600080fd5b506102cb61050c565b3480156102fe57600080fd5b5061013b610512565b34801561031357600080fd5b506100f36004803603602081101561032a57600080fd5b5035600160a060020a0316610520565b34801561034657600080fd5b5061010a61057b565b34801561035b57600080fd5b506102786004803603602081101561037257600080fd5b5035600160a060020a031661058a565b34801561038e57600080fd5b5061013b610722565b3480156103a357600080fd5b506100f3600480360360208110156103ba57600080fd5b503560ff16610727565b3480156103d057600080fd5b5061010a6107a5565b3480156103e557600080fd5b5061013b6107b4565b3480156103fa57600080fd5b506100f36004803603602081101561041157600080fd5b5035600160a060020a03166107b9565b600254600160a060020a031681565b600181565b60006104403361058a565b151561044b57600080fd5b604080513060601b602080830191909152426034808401829052845180850390910181526054840180865281519190930120600090811c9092526074830182905260948301919091523360b48301526103e80260d482015290517f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c79181900360f40190a150600192915050565b60065460ff1681565b600354600160a060020a031633146104f857600080fd5b600354600160a060020a0316ff5b60055481565b60015481565b600654610100900460ff1681565b600254600160a060020a0316331461053757600080fd5b600160a060020a038116151561054c57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600354600090600160a060020a03838116911614806105b15750600654600a60ff90911610155b156105be5750600161071d565b600654600061010090910460ff1611156107195760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b15801561063e57600080fd5b505afa158015610652573d6000803e3d6000fd5b505050506040513d602081101561066857600080fd5b5051600654604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b1580156106e457600080fd5b505afa1580156106f8573d6000803e3d6000fd5b505050506040513d602081101561070e57600080fd5b5051915061071d9050565b5060005b919050565b600a81565b600354600160a060020a0316331461073e57600080fd5b6006805460ff191660ff838116919091179182905560045460408051600160a060020a039092168083526020830152929091168183015290517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b600454600160a060020a031681565b606481565b600354600160a060020a031633146107d057600080fd5b600160a060020a03811615156107e557600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a723058201875015fed664fa495d821d5058fa76bbfab61bb7400c55e616c63cac82cf40e0029",
}

// AccessibleABI is the input ABI used to generate the binding from.
// Deprecated: Use AccessibleMetaData.ABI instead.
var AccessibleABI = AccessibleMetaData.ABI

// Deprecated: Use AccessibleMetaData.Sigs instead.
// AccessibleFuncSigs maps the 4-byte function signature to its string representation.
var AccessibleFuncSigs = AccessibleMetaData.Sigs

// AccessibleBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccessibleMetaData.Bin instead.
var AccessibleBin = AccessibleMetaData.Bin

// DeployAccessible deploys a new Ethereum contract, binding an instance of Accessible to it.
func DeployAccessible(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Accessible, error) {
	parsed, err := ParsedABI(K_Accessible)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccessibleBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Accessible{AccessibleCaller: AccessibleCaller{contract: contract}, AccessibleTransactor: AccessibleTransactor{contract: contract}, AccessibleFilterer: AccessibleFilterer{contract: contract}}, nil
}

// Accessible is an auto generated Go binding around an Ethereum contract.
type Accessible struct {
	AccessibleCaller     // Read-only binding to the contract
	AccessibleTransactor // Write-only binding to the contract
	AccessibleFilterer   // Log filterer for contract events
}

// AccessibleCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessibleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessibleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessibleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessibleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessibleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewAccessible creates a new instance of Accessible, bound to a specific deployed contract.
func NewAccessible(address common.Address, backend bind.ContractBackend) (*Accessible, error) {
	contract, err := bindAccessible(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Accessible{AccessibleCaller: AccessibleCaller{contract: contract}, AccessibleTransactor: AccessibleTransactor{contract: contract}, AccessibleFilterer: AccessibleFilterer{contract: contract}}, nil
}

// NewAccessibleCaller creates a new read-only instance of Accessible, bound to a specific deployed contract.
func NewAccessibleCaller(address common.Address, caller bind.ContractCaller) (*AccessibleCaller, error) {
	contract, err := bindAccessible(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessibleCaller{contract: contract}, nil
}

// NewAccessibleTransactor creates a new write-only instance of Accessible, bound to a specific deployed contract.
func NewAccessibleTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessibleTransactor, error) {
	contract, err := bindAccessible(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessibleTransactor{contract: contract}, nil
}

// NewAccessibleFilterer creates a new log filterer instance of Accessible, bound to a specific deployed contract.
func NewAccessibleFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessibleFilterer, error) {
	contract, err := bindAccessible(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessibleFilterer{contract: contract}, nil
}

// bindAccessible binds a generic wrapper to an already deployed contract.
func bindAccessible(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Accessible)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() view returns(uint8)
func (_Accessible *AccessibleCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Accessible.contract.Call(opts, &out, "CAN_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() view returns(uint8)
func (_Accessible *AccessibleCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Accessible.contract.Call(opts, &out, "CAN_EDIT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() view returns(uint8)
func (_Accessible *AccessibleCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Accessible.contract.Call(opts, &out, "CAN_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_Accessible *AccessibleCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Accessible.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_Accessible *AccessibleCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Accessible.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) view returns(bool)
func (_Accessible *AccessibleCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _Accessible.contract.Call(opts, &out, "hasAccess", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() view returns(uint8)
func (_Accessible *AccessibleCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Accessible.contract.Call(opts, &out, "indexCategory")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Accessible *AccessibleCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Accessible.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_Accessible *AccessibleCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Accessible.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_Accessible *AccessibleCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Accessible.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() view returns(uint8)
func (_Accessible *AccessibleCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Accessible.contract.Call(opts, &out, "visibility")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) payable returns(bool)
func (_Accessible *AccessibleTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _Accessible.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Accessible *AccessibleTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accessible.contract.Transact(opts, "kill")
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Accessible *AccessibleTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _Accessible.contract.Transact(opts, "setVisibility", _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Accessible *AccessibleTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Accessible.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Accessible *AccessibleTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Accessible.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Accessible *AccessibleTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Accessible.contract.RawTransact(opts, calldata)
}

// AccessibleAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the Accessible contract.
type AccessibleAccessRequestV3Iterator struct {
	Event *AccessibleAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessibleAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessibleAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessibleAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessibleAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessibleAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessibleAccessRequestV3 represents a AccessRequestV3 event raised by the Accessible contract.
type AccessibleAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Accessible *AccessibleFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*AccessibleAccessRequestV3Iterator, error) {

	logs, sub, err := _Accessible.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &AccessibleAccessRequestV3Iterator{contract: _Accessible.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Accessible *AccessibleFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *AccessibleAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _Accessible.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessibleAccessRequestV3)
				if err := _Accessible.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Accessible *AccessibleFilterer) ParseAccessRequestV3(log types.Log) (*AccessibleAccessRequestV3, error) {
	event := new(AccessibleAccessRequestV3)
	if err := _Accessible.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccessibleVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the Accessible contract.
type AccessibleVisibilityChangedIterator struct {
	Event *AccessibleVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessibleVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessibleVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessibleVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessibleVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessibleVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessibleVisibilityChanged represents a VisibilityChanged event raised by the Accessible contract.
type AccessibleVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Accessible *AccessibleFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*AccessibleVisibilityChangedIterator, error) {

	logs, sub, err := _Accessible.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &AccessibleVisibilityChangedIterator{contract: _Accessible.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Accessible *AccessibleFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *AccessibleVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _Accessible.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessibleVisibilityChanged)
				if err := _Accessible.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Accessible *AccessibleFilterer) ParseVisibilityChanged(log types.Log) (*AccessibleVisibilityChanged, error) {
	event := new(AccessibleVisibilityChanged)
	if err := _Accessible.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AddressMetaData contains all meta data concerning the Address contract.
var AddressMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[{\"name\":\"b\",\"type\":\"bytes\"}],\"name\":\"bytesToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"42526e4e": "bytesToAddress(bytes)",
	},
	Bin: "0x6101f8610030600b82828239805160001a6073146000811461002057610022565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806342526e4e1461003a575b600080fd5b6100e06004803603602081101561005057600080fd5b81019060208101813564010000000081111561006b57600080fd5b82018360208201111561007d57600080fd5b8035906020019184600183028401116401000000008311171561009f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610109945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600080805b83518110156101c5576000848281518110151561012757fe5b90602001015160f81c60f81b60f81c905060308160ff1610158015610150575060398160ff1611155b15610164576030810360ff16836010020192505b60418160ff161015801561017c5750605a8160ff1611155b15610190576037810360ff16836010020192505b60618160ff16101580156101a85750607a8160ff1611155b156101bc576057810360ff16836010020192505b5060010161010e565b509291505056fea165627a7a723058207c3ba87161db722ca1a0a5a1fd6dafa9b3df1286c598abf80fd234ffc04531900029",
}

// AddressABI is the input ABI used to generate the binding from.
// Deprecated: Use AddressMetaData.ABI instead.
var AddressABI = AddressMetaData.ABI

// Deprecated: Use AddressMetaData.Sigs instead.
// AddressFuncSigs maps the 4-byte function signature to its string representation.
var AddressFuncSigs = AddressMetaData.Sigs

// AddressBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AddressMetaData.Bin instead.
var AddressBin = AddressMetaData.Bin

// DeployAddress deploys a new Ethereum contract, binding an instance of Address to it.
func DeployAddress(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Address, error) {
	parsed, err := ParsedABI(K_Address)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AddressBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// Address is an auto generated Go binding around an Ethereum contract.
type Address struct {
	AddressCaller     // Read-only binding to the contract
	AddressTransactor // Write-only binding to the contract
	AddressFilterer   // Log filterer for contract events
}

// AddressCaller is an auto generated read-only Go binding around an Ethereum contract.
type AddressCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AddressTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AddressFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewAddress creates a new instance of Address, bound to a specific deployed contract.
func NewAddress(address common.Address, backend bind.ContractBackend) (*Address, error) {
	contract, err := bindAddress(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// NewAddressCaller creates a new read-only instance of Address, bound to a specific deployed contract.
func NewAddressCaller(address common.Address, caller bind.ContractCaller) (*AddressCaller, error) {
	contract, err := bindAddress(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AddressCaller{contract: contract}, nil
}

// NewAddressTransactor creates a new write-only instance of Address, bound to a specific deployed contract.
func NewAddressTransactor(address common.Address, transactor bind.ContractTransactor) (*AddressTransactor, error) {
	contract, err := bindAddress(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AddressTransactor{contract: contract}, nil
}

// NewAddressFilterer creates a new log filterer instance of Address, bound to a specific deployed contract.
func NewAddressFilterer(address common.Address, filterer bind.ContractFilterer) (*AddressFilterer, error) {
	contract, err := bindAddress(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AddressFilterer{contract: contract}, nil
}

// bindAddress binds a generic wrapper to an already deployed contract.
func bindAddress(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Address)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// BytesToAddress is a free data retrieval call binding the contract method 0x42526e4e.
//
// Solidity: function bytesToAddress(bytes b) view returns(address)
func (_Address *AddressCaller) BytesToAddress(opts *bind.CallOpts, b []byte) (common.Address, error) {
	var out []interface{}
	err := _Address.contract.Call(opts, &out, "bytesToAddress", b)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AdminableMetaData contains all meta data concerning the Adminable contract.
var AdminableMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
	Sigs: map[string]string{
		"af570c04": "contentSpace()",
		"02d05d3f": "creator()",
		"24d7806c": "isAdmin(address)",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
	},
	Bin: "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060015560028054600160a060020a03199081163217909155600380549091163317905561034b8061007b6000396000f3fe6080604052600436106100865760003560e01c80635f4fcae1116100595780635f4fcae11461013c5780636d2e4b1b146101515780638da5cb5b14610184578063af570c0414610199578063f2fde38b146101ae57610086565b806302d05d3f1461008857806324d7806c146100b957806341c0e1b51461010057806354fd4d5014610115575b005b34801561009457600080fd5b5061009d6101e1565b60408051600160a060020a039092168252519081900360200190f35b3480156100c557600080fd5b506100ec600480360360208110156100dc57600080fd5b5035600160a060020a03166101f0565b604080519115158252519081900360200190f35b34801561010c57600080fd5b5061008661021a565b34801561012157600080fd5b5061012a61023f565b60408051918252519081900360200190f35b34801561014857600080fd5b5061012a610245565b34801561015d57600080fd5b506100866004803603602081101561017457600080fd5b5035600160a060020a031661024b565b34801561019057600080fd5b5061009d6102a6565b3480156101a557600080fd5b5061009d6102b5565b3480156101ba57600080fd5b50610086600480360360208110156101d157600080fd5b5035600160a060020a03166102c4565b600254600160a060020a031681565b600354600090600160a060020a038381169116141561021157506001610215565b5060005b919050565b600354600160a060020a0316331461023157600080fd5b600354600160a060020a0316ff5b60005481565b60015481565b600254600160a060020a0316331461026257600080fd5b600160a060020a038116151561027757600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b600354600160a060020a031633146102db57600080fd5b600160a060020a03811615156102f057600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a72305820bb183256b266a5a20739d143877a2d335037757727ae9d266def50d11e0bdfef0029",
}

// AdminableABI is the input ABI used to generate the binding from.
// Deprecated: Use AdminableMetaData.ABI instead.
var AdminableABI = AdminableMetaData.ABI

// Deprecated: Use AdminableMetaData.Sigs instead.
// AdminableFuncSigs maps the 4-byte function signature to its string representation.
var AdminableFuncSigs = AdminableMetaData.Sigs

// AdminableBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AdminableMetaData.Bin instead.
var AdminableBin = AdminableMetaData.Bin

// DeployAdminable deploys a new Ethereum contract, binding an instance of Adminable to it.
func DeployAdminable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Adminable, error) {
	parsed, err := ParsedABI(K_Adminable)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AdminableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Adminable{AdminableCaller: AdminableCaller{contract: contract}, AdminableTransactor: AdminableTransactor{contract: contract}, AdminableFilterer: AdminableFilterer{contract: contract}}, nil
}

// Adminable is an auto generated Go binding around an Ethereum contract.
type Adminable struct {
	AdminableCaller     // Read-only binding to the contract
	AdminableTransactor // Write-only binding to the contract
	AdminableFilterer   // Log filterer for contract events
}

// AdminableCaller is an auto generated read-only Go binding around an Ethereum contract.
type AdminableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AdminableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AdminableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AdminableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewAdminable creates a new instance of Adminable, bound to a specific deployed contract.
func NewAdminable(address common.Address, backend bind.ContractBackend) (*Adminable, error) {
	contract, err := bindAdminable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Adminable{AdminableCaller: AdminableCaller{contract: contract}, AdminableTransactor: AdminableTransactor{contract: contract}, AdminableFilterer: AdminableFilterer{contract: contract}}, nil
}

// NewAdminableCaller creates a new read-only instance of Adminable, bound to a specific deployed contract.
func NewAdminableCaller(address common.Address, caller bind.ContractCaller) (*AdminableCaller, error) {
	contract, err := bindAdminable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AdminableCaller{contract: contract}, nil
}

// NewAdminableTransactor creates a new write-only instance of Adminable, bound to a specific deployed contract.
func NewAdminableTransactor(address common.Address, transactor bind.ContractTransactor) (*AdminableTransactor, error) {
	contract, err := bindAdminable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AdminableTransactor{contract: contract}, nil
}

// NewAdminableFilterer creates a new log filterer instance of Adminable, bound to a specific deployed contract.
func NewAdminableFilterer(address common.Address, filterer bind.ContractFilterer) (*AdminableFilterer, error) {
	contract, err := bindAdminable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AdminableFilterer{contract: contract}, nil
}

// bindAdminable binds a generic wrapper to an already deployed contract.
func bindAdminable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Adminable)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_Adminable *AdminableCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Adminable.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_Adminable *AdminableCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Adminable.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) view returns(bool)
func (_Adminable *AdminableCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _Adminable.contract.Call(opts, &out, "isAdmin", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Adminable *AdminableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Adminable.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_Adminable *AdminableCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Adminable.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_Adminable *AdminableCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Adminable.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Adminable *AdminableTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Adminable.contract.Transact(opts, "kill")
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Adminable *AdminableTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Adminable.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Adminable *AdminableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Adminable.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Adminable *AdminableTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Adminable.contract.RawTransact(opts, calldata)
}

// BaseAccessControlGroupMetaData contains all meta data concerning the BaseAccessControlGroup contract.
var BaseAccessControlGroupMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentObjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"name\":\"setContentSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_OBJECT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"grantAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccessGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_GROUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oauthEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_LIBRARY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_CONFIRMED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContractRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"setAndGetBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getAccessGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tenantAddr\",\"type\":\"address\"}],\"name\":\"setTenant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessGroups\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentObjectRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"hasManagerAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_TENTATIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"others\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"membersNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"indexType\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setEntityRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managersNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contracts\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"incrementCounter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"grantManagerAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"managersMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setLibraryRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_NONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentTypeRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"membersMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpLibraries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidates\",\"type\":\"address[]\"}],\"name\":\"grantAccessMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkDirectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setIsConsumerGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentObjects\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tenant\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAccessRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraries\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLibrariesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"revokeManagerAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentObject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAccessGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"},{\"name\":\"mgr\",\"type\":\"bool\"}],\"name\":\"hasAccessRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isConsumerGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"}],\"name\":\"deleteGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentObjectsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setAccessGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"}],\"name\":\"getLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setOAuthEnabled\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contentSpace\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"ManagerAccessGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"MemberRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"ManagerAccessRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operationCode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"UnauthorizedOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"OAuthStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"principal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"aggregate\",\"type\":\"uint8\"}],\"name\":\"RightsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint32\"}],\"name\":\"CounterIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ord\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"prev\",\"type\":\"bool\"}],\"name\":\"BitSetAndGet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"}],\"name\":\"WordGroupDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"18689733": "ACCESS_CONFIRMED()",
		"8232f3f1": "ACCESS_NONE()",
		"479a0c51": "ACCESS_TENTATIVE()",
		"97ac4fd2": "CAN_ACCESS()",
		"ef1d7dc2": "CAN_EDIT()",
		"100508a2": "CAN_SEE()",
		"091600e6": "CATEGORY_CONTENT_OBJECT()",
		"68a0469a": "CATEGORY_CONTENT_TYPE()",
		"6373a411": "CATEGORY_CONTRACT()",
		"12915a30": "CATEGORY_GROUP()",
		"16aed232": "CATEGORY_LIBRARY()",
		"d1aeb651": "TYPE_ACCESS()",
		"5d97b6c2": "TYPE_EDIT()",
		"96eba03d": "TYPE_SEE()",
		"30e66949": "accessGroups()",
		"1bf7a912": "accessRequestV3(bytes32[],address[])",
		"6e375427": "canCommit()",
		"14cfabb3": "canConfirm()",
		"81beeb64": "canEdit()",
		"15c0bac1": "checkAccessGroupRights(address,uint8)",
		"5faecb76": "checkContentObjectRights(address,uint8)",
		"fe538c5a": "checkContentTypeRights(address,uint8)",
		"a864dfa5": "checkContractRights(address,uint8)",
		"a00b38c4": "checkDirectRights(uint8,address,uint8)",
		"6813b6d1": "checkLibraryRights(address,uint8)",
		"7fb52f1a": "checkRights(uint8,address,uint8)",
		"d30f8cd0": "cleanUpAccessGroups()",
		"2fa5c842": "cleanUpAll()",
		"048bd529": "cleanUpContentObjects()",
		"85e0a200": "cleanUpContentTypes()",
		"92297d7b": "cleanUpLibraries()",
		"5f6a1301": "clearPending()",
		"9867db74": "commit(string)",
		"375a6e7c": "commitPending()",
		"446e8826": "confirmCommit()",
		"a980892d": "contentObjects()",
		"af570c04": "contentSpace()",
		"9f46133e": "contentTypes()",
		"7709bc78": "contractExists(address)",
		"6c0f79b6": "contracts()",
		"331b86c0": "countVersionHashes()",
		"02d05d3f": "creator()",
		"e57097c9": "deleteGroup(bytes32)",
		"e1a70717": "deleteVersion(string)",
		"2d474cbd": "getAccessGroup(uint256)",
		"304f4a7b": "getAccessGroupRights(address)",
		"0dc10d3f": "getAccessGroupsLength()",
		"30f846a2": "getBit(bytes32,uint8)",
		"cf8a7503": "getContentObject(uint256)",
		"69881c0c": "getContentObjectRights(address)",
		"ebe9314e": "getContentObjectsLength()",
		"aa3f6952": "getContentType(uint256)",
		"a4081d62": "getContentTypeRights(address)",
		"5c1d3059": "getContentTypesLength()",
		"6ebc8c86": "getContract(uint256)",
		"08d865d7": "getContractRights(address)",
		"fccc134f": "getContractsLength()",
		"e1954b61": "getCounter(bytes32,uint8)",
		"cb86806d": "getLibrariesLength()",
		"d15d62a7": "getLibrary(uint256)",
		"fb52222c": "getLibraryRights(address)",
		"ac55c906": "getMeta(bytes)",
		"0ae5e739": "grantAccess(address)",
		"9602a0b3": "grantAccessMany(address[])",
		"75861a95": "grantManagerAccess(address)",
		"95a078e8": "hasAccess(address)",
		"d8961c8d": "hasAccessRight(address,bool)",
		"67e5c3bf": "hasEditorRight(address)",
		"42e7ba7b": "hasManagerAccess(address)",
		"7558cbf0": "incrementCounter(bytes32,uint8)",
		"6380501f": "indexCategory()",
		"24d7806c": "isAdmin(address)",
		"dde12828": "isConsumerGroup()",
		"41c0e1b5": "kill()",
		"c4b1978d": "libraries()",
		"793f3f71": "managersMap(address)",
		"638d0290": "managersNum()",
		"872ea68a": "membersMap(address)",
		"55277a5b": "membersNum()",
		"12b39dd0": "oauthEnabled()",
		"e02dd9c2": "objectHash()",
		"40b87a26": "objectTimestamp()",
		"51a7fc87": "others()",
		"8da5cb5b": "owner()",
		"00821de3": "parentAddress()",
		"628449fd": "pendingHash()",
		"e542b7cb": "putMeta(bytes,bytes)",
		"85e68531": "revokeAccess(address)",
		"cdb849b7": "revokeManagerAccess(address)",
		"f17bda91": "setAccessGroupRights(address,uint8,uint8)",
		"b8ff1dba": "setAccessRights()",
		"24d7c18d": "setAndGetBit(bytes32,uint8)",
		"3def5140": "setContentObjectRights(address,uint8,uint8)",
		"055af48f": "setContentSpace(address)",
		"8635adb5": "setContentTypeRights(address,uint8,uint8)",
		"224dcba0": "setContractRights(address,uint8,uint8)",
		"5d7cf830": "setEntityRights(uint8,address,uint8,uint8)",
		"22e564eb": "setGroupRights(address,uint8,uint8)",
		"a3125255": "setIsConsumerGroup(bool)",
		"7cbb7bf2": "setLibraryRights(address,uint8,uint8)",
		"fba3779a": "setOAuthEnabled(bool)",
		"0fe1b5a2": "setRights(address,uint8,uint8)",
		"2e74a4de": "setTenant(address)",
		"aa024e8b": "setVisibility(uint8)",
		"adf07791": "tenant()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"c287e0ed": "updateRequest()",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
		"7ca8f618": "versionHashes(uint256)",
		"7886f747": "versionTimestamp(uint256)",
		"29adec14": "visibility()",
	},
	Bin: "0x7f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060019081557f416363657373496e6465786f723230323030393238313130303030504f0000006008556009805460ff1916821761ff0019166102001762ff00001916620300001763ff000000191663040000001764ff00000000191664050000000017905560e06040526080908152600a60a0819052606460c052620000cc9160036200026f565b507f41636365737369626c653230323030363236313231363030504f0000000000006024556025805461ff001960ff199091166001171690557f4564697461626c653230323030393238313130303030504f00000000000000006026557f42734163636573734374726c4772703230323130383039313530303030504f00602d553480156200015a57600080fd5b5060405160208062005053833981018060405260208110156200017c57600080fd5b505160028054600160a060020a03199081163217918290556003805482163317905560098054600b805460ff1990811660ff620100008504811691909117909255601380548216610100808604851691909117909155600f80548316848616179055601780548316630100000086048516179055601b8054831664010000000090950484169490941790935560048054600160a060020a039889169616959095179094556000602f819055949095168452603060205260409093208054831660019081179091556031556032805490921690915554602580549183900490931690910261ff00199091161790556200032d565b600183019183908215620002f75791602002820160005b83821115620002c657835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000286565b8015620002f55782816101000a81549060ff0219169055600101602081600001049283019260010302620002c6565b505b506200030592915062000309565b5090565b6200032a91905b808211156200030557805460ff1916815560010162000310565b90565b614d16806200033d6000396000f3fe6080604052600436106106dd5760003560e01c80636ebc8c8611610385578063aa024e8b116101dc578063d8961c8d1161010d578063ebe9314e116100ab578063fb52222c1161007a578063fb52222c14611b76578063fba3779a14611ba9578063fccc134f14611bd5578063fe538c5a14611bea576106dd565b8063ebe9314e14611ad5578063ef1d7dc214611aea578063f17bda9114611aff578063f2fde38b14611b43576106dd565b8063e1954b61116100e7578063e1954b6114611872578063e1a70717146118be578063e542b7cb14611971578063e57097c914611aab576106dd565b8063d8961c8d1461180d578063dde1282814611848578063e02dd9c21461185d576106dd565b8063c4b1978d1161017a578063cf8a750311610154578063cf8a7503146117a4578063d15d62a7146117ce578063d1aeb65114610869578063d30f8cd0146117f8576106dd565b8063c4b1978d14611747578063cb86806d1461175c578063cdb849b714611771576106dd565b8063adf07791116101b6578063adf07791146116f3578063af570c0414611708578063b8ff1dba1461171d578063c287e0ed14611732576106dd565b8063aa024e8b146115e9578063aa3f695214611616578063ac55c90614611640576106dd565b8063872ea68a116102b65780639867db7411610254578063a31252551161022e578063a312525514611539578063a4081d6214611565578063a864dfa514611598578063a980892d146115d4576106dd565b80639867db741461142b5780639f46133e146114de578063a00b38c4146114f3576106dd565b806395a078e81161029057806395a078e8146113335780639602a0b31461136657806396eba03d1461123557806397ac4fd214611416576106dd565b8063872ea68a146112d65780638da5cb5b1461130957806392297d7b1461131e576106dd565b80637cbb7bf2116103235780638232f3f1116102fd5780638232f3f11461123557806385e0a2001461124a57806385e685311461125f5780638635adb514611292576106dd565b80637cbb7bf2146111965780637fb52f1a146111da57806381beeb6414611220576106dd565b80637709bc781161035f5780637709bc78146110dc5780637886f7471461110f578063793f3f71146111395780637ca8f6181461116c576106dd565b80636ebc8c861461104c5780637558cbf01461107657806375861a95146110a9576106dd565b8063331b86c0116105395780635f4fcae11161046a57806367e5c3bf1161040857806369881c0c116103e257806369881c0c14610fbc5780636c0f79b614610fef5780636d2e4b1b146110045780636e37542714611037576106dd565b806367e5c3bf14610f385780636813b6d114610f6b57806368a0469a14610fa7576106dd565b8063628449fd11610444578063628449fd14610e6f5780636373a41114610ef95780636380501f14610f0e578063638d029014610f23576106dd565b80635f4fcae114610e095780635f6a130114610e1e5780635faecb7614610e33576106dd565b8063479a0c51116104d757806355277a5b116104b157806355277a5b14610d935780635c1d305914610da85780635d7cf83014610dbd5780635d97b6c214610922576106dd565b8063479a0c511461086957806351a7fc8714610d6957806354fd4d5014610d7e576106dd565b806340b87a261161051357806340b87a2614610d0457806341c0e1b514610d1957806342e7ba7b14610d2e578063446e882614610d61576106dd565b8063331b86c014610c96578063375a6e7c14610cab5780633def514014610cc0576106dd565b806316aed2321161061357806329adec14116105b15780632fa5c8421161058b5780632fa5c84214610bbe578063304f4a7b14610bfe57806330e6694914610c3157806330f846a214610c63576106dd565b806329adec1414610b4c5780632d474cbd14610b615780632e74a4de14610b8b576106dd565b8063224dcba0116105ed578063224dcba014610a5e57806322e564eb14610aa257806324d7806c14610ae657806324d7c18d14610b19576106dd565b806316aed2321461090d57806318689733146109225780631bf7a91214610937576106dd565b80630dc10d3f1161068057806312915a301161065a57806312915a301461087e57806312b39dd01461089357806314cfabb3146108bc57806315c0bac1146108d1576106dd565b80630dc10d3f146108105780630fe1b5a214610825578063100508a214610869576106dd565b8063055af48f116106bc578063055af48f1461074c57806308d865d71461077f578063091600e6146107c85780630ae5e739146107dd576106dd565b8062821de3146106df57806302d05d3f14610710578063048bd52914610725575b005b3480156106eb57600080fd5b506106f4611c26565b60408051600160a060020a039092168252519081900360200190f35b34801561071c57600080fd5b506106f4611c36565b34801561073157600080fd5b5061073a611c45565b60408051918252519081900360200190f35b34801561075857600080fd5b506106dd6004803603602081101561076f57600080fd5b5035600160a060020a0316611c56565b34801561078b57600080fd5b506107b2600480360360208110156107a257600080fd5b5035600160a060020a0316611c8f565b6040805160ff9092168252519081900360200190f35b3480156107d457600080fd5b506107b2611cb1565b3480156107e957600080fd5b506106dd6004803603602081101561080057600080fd5b5035600160a060020a0316611cba565b34801561081c57600080fd5b5061073a611d90565b34801561083157600080fd5b506106dd6004803603606081101561084857600080fd5b50600160a060020a038135169060ff60208201358116916040013516611d96565b34801561087557600080fd5b506107b2611e78565b34801561088a57600080fd5b506107b2611e7d565b34801561089f57600080fd5b506108a8611e8b565b604080519115158252519081900360200190f35b3480156108c857600080fd5b506108a8611e94565b3480156108dd57600080fd5b506108a8600480360360408110156108f457600080fd5b508035600160a060020a0316906020013560ff16611f31565b34801561091957600080fd5b506107b2611f53565b34801561092e57600080fd5b506107b2611f62565b6108a86004803603604081101561094d57600080fd5b81019060208101813564010000000081111561096857600080fd5b82018360208201111561097a57600080fd5b8035906020019184602083028401116401000000008311171561099c57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156109ec57600080fd5b8201836020820111156109fe57600080fd5b80359060200191846020830284011164010000000083111715610a2057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611f67945050505050565b348015610a6a57600080fd5b506106dd60048036036060811015610a8157600080fd5b50600160a060020a038135169060ff6020820135811691604001351661200a565b348015610aae57600080fd5b506106dd60048036036060811015610ac557600080fd5b50600160a060020a038135169060ff6020820135811691604001351661201c565b348015610af257600080fd5b506108a860048036036020811015610b0957600080fd5b5035600160a060020a03166124e0565b348015610b2557600080fd5b506108a860048036036040811015610b3c57600080fd5b508035906020013560ff16612520565b348015610b5857600080fd5b506107b2612540565b348015610b6d57600080fd5b506106f460048036036020811015610b8457600080fd5b5035612549565b348015610b9757600080fd5b506106dd60048036036020811015610bae57600080fd5b5035600160a060020a0316612576565b348015610bca57600080fd5b50610bd36125c1565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b348015610c0a57600080fd5b506107b260048036036020811015610c2157600080fd5b5035600160a060020a031661260c565b348015610c3d57600080fd5b50610c4661262a565b6040805160ff909316835260208301919091528051918290030190f35b348015610c6f57600080fd5b506108a860048036036040811015610c8657600080fd5b508035906020013560ff16612639565b348015610ca257600080fd5b5061073a6126a6565b348015610cb757600080fd5b506108a86126ac565b348015610ccc57600080fd5b506106dd60048036036060811015610ce357600080fd5b50600160a060020a038135169060ff602082013581169160400135166126b5565b348015610d1057600080fd5b5061073a6126c2565b348015610d2557600080fd5b506106dd6126c8565b348015610d3a57600080fd5b506108a860048036036020811015610d5157600080fd5b5035600160a060020a03166126ed565b6108a8612716565b348015610d7557600080fd5b50610c4661291a565b348015610d8a57600080fd5b5061073a612929565b348015610d9f57600080fd5b5061073a61292f565b348015610db457600080fd5b5061073a612935565b348015610dc957600080fd5b506106dd60048036036080811015610de057600080fd5b5060ff8135811691600160a060020a03602082013516916040820135811691606001351661293b565b348015610e1557600080fd5b5061073a612958565b348015610e2a57600080fd5b506106dd61295e565b348015610e3f57600080fd5b506108a860048036036040811015610e5657600080fd5b508035600160a060020a0316906020013560ff1661299c565b348015610e7b57600080fd5b50610e846129b0565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610ebe578181015183820152602001610ea6565b50505050905090810190601f168015610eeb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610f0557600080fd5b506107b2612a3e565b348015610f1a57600080fd5b506107b2612a4f565b348015610f2f57600080fd5b5061073a612a5d565b348015610f4457600080fd5b506108a860048036036020811015610f5b57600080fd5b5035600160a060020a0316612a63565b348015610f7757600080fd5b506108a860048036036040811015610f8e57600080fd5b508035600160a060020a0316906020013560ff16612a93565b348015610fb357600080fd5b506107b2612aad565b348015610fc857600080fd5b506107b260048036036020811015610fdf57600080fd5b5035600160a060020a0316612abd565b348015610ffb57600080fd5b50610c46612adb565b34801561101057600080fd5b506106dd6004803603602081101561102757600080fd5b5035600160a060020a0316612aea565b34801561104357600080fd5b506108a8612b38565b34801561105857600080fd5b506106f46004803603602081101561106f57600080fd5b5035612b49565b34801561108257600080fd5b506106dd6004803603604081101561109957600080fd5b508035906020013560ff16612b5b565b3480156110b557600080fd5b506106dd600480360360208110156110cc57600080fd5b5035600160a060020a0316612c5c565b3480156110e857600080fd5b506108a8600480360360208110156110ff57600080fd5b5035600160a060020a0316612d12565b34801561111b57600080fd5b5061073a6004803603602081101561113257600080fd5b5035612d1a565b34801561114557600080fd5b506108a86004803603602081101561115c57600080fd5b5035600160a060020a0316612d39565b34801561117857600080fd5b50610e846004803603602081101561118f57600080fd5b5035612d4e565b3480156111a257600080fd5b506106dd600480360360608110156111b957600080fd5b50600160a060020a038135169060ff60208201358116916040013516612dc2565b3480156111e657600080fd5b506108a8600480360360608110156111fd57600080fd5b5060ff8135811691600160a060020a036020820135169160409091013516612dcf565b34801561122c57600080fd5b506108a8612de6565b34801561124157600080fd5b506107b2612df1565b34801561125657600080fd5b5061073a612df6565b34801561126b57600080fd5b506106dd6004803603602081101561128257600080fd5b5035600160a060020a0316612e02565b34801561129e57600080fd5b506106dd600480360360608110156112b557600080fd5b50600160a060020a038135169060ff60208201358116916040013516612ec3565b3480156112e257600080fd5b506108a8600480360360208110156112f957600080fd5b5035600160a060020a0316612edd565b34801561131557600080fd5b506106f4612ef2565b34801561132a57600080fd5b5061073a612f01565b34801561133f57600080fd5b506108a86004803603602081101561135657600080fd5b5035600160a060020a0316612f0d565b34801561137257600080fd5b506106dd6004803603602081101561138957600080fd5b8101906020810181356401000000008111156113a457600080fd5b8201836020820111156113b657600080fd5b803590602001918460208302840111640100000000831117156113d857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506130a4945050505050565b34801561142257600080fd5b506107b26130d8565b34801561143757600080fd5b506106dd6004803603602081101561144e57600080fd5b81019060208101813564010000000081111561146957600080fd5b82018360208201111561147b57600080fd5b8035906020019184600183028401116401000000008311171561149d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506130dd945050505050565b3480156114ea57600080fd5b50610c4661320a565b3480156114ff57600080fd5b506108a86004803603606081101561151657600080fd5b5060ff8135811691600160a060020a036020820135169160409091013516613219565b34801561154557600080fd5b506106dd6004803603602081101561155c57600080fd5b50351515613248565b34801561157157600080fd5b506107b26004803603602081101561158857600080fd5b5035600160a060020a0316613279565b3480156115a457600080fd5b506108a8600480360360408110156115bb57600080fd5b508035600160a060020a0316906020013560ff16613297565b3480156115e057600080fd5b50610c466132b3565b3480156115f557600080fd5b506106dd6004803603602081101561160c57600080fd5b503560ff166132c2565b34801561162257600080fd5b506106f46004803603602081101561163957600080fd5b503561333c565b34801561164c57600080fd5b50610e846004803603602081101561166357600080fd5b81019060208101813564010000000081111561167e57600080fd5b82018360208201111561169057600080fd5b803590602001918460018302840111640100000000831117156116b257600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061334e945050505050565b3480156116ff57600080fd5b506106f46134f7565b34801561171457600080fd5b506106f461350c565b34801561172957600080fd5b506106dd61351b565b34801561173e57600080fd5b506106dd613610565b34801561175357600080fd5b50610c466136d2565b34801561176857600080fd5b5061073a6136e1565b34801561177d57600080fd5b506106dd6004803603602081101561179457600080fd5b5035600160a060020a03166136e7565b3480156117b057600080fd5b506106f4600480360360208110156117c757600080fd5b50356137a8565b3480156117da57600080fd5b506106f4600480360360208110156117f157600080fd5b50356137ba565b34801561180457600080fd5b5061073a6137cc565b34801561181957600080fd5b506108a86004803603604081101561183057600080fd5b50600160a060020a03813516906020013515156137d8565b34801561185457600080fd5b506108a86137fe565b34801561186957600080fd5b50610e8461380c565b34801561187e57600080fd5b506118a56004803603604081101561189557600080fd5b508035906020013560ff16613867565b6040805163ffffffff9092168252519081900360200190f35b3480156118ca57600080fd5b5061073a600480360360208110156118e157600080fd5b8101906020810181356401000000008111156118fc57600080fd5b82018360208201111561190e57600080fd5b8035906020019184600183028401116401000000008311171561193057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506138b9945050505050565b34801561197d57600080fd5b506106dd6004803603604081101561199457600080fd5b8101906020810181356401000000008111156119af57600080fd5b8201836020820111156119c157600080fd5b803590602001918460018302840111640100000000831117156119e357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050640100000000811115611a3657600080fd5b820183602082011115611a4857600080fd5b80359060200191846001830284011164010000000083111715611a6a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613d2a945050505050565b348015611ab757600080fd5b506106dd60048036036020811015611ace57600080fd5b5035613f21565b348015611ae157600080fd5b5061073a613f86565b348015611af657600080fd5b506107b2613f8c565b348015611b0b57600080fd5b506106dd60048036036060811015611b2257600080fd5b50600160a060020a038135169060ff60208201358116916040013516613f91565b348015611b4f57600080fd5b506106dd60048036036020811015611b6657600080fd5b5035600160a060020a0316613f9e565b348015611b8257600080fd5b506107b260048036036020811015611b9957600080fd5b5035600160a060020a0316613fec565b348015611bb557600080fd5b506106dd60048036036020811015611bcc57600080fd5b5035151561400a565b348015611be157600080fd5b5061073a614068565b348015611bf657600080fd5b506108a860048036036040811015611c0d57600080fd5b508035600160a060020a0316906020013560ff1661406e565b600454600160a060020a03165b90565b600254600160a060020a031681565b6000611c51600f614089565b905090565b600354600160a060020a03163314611c6d57600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a0381166000908152601c602052604090205460ff165b919050565b60095460ff1681565b611cc3336126ed565b80611ce85750603254610100900460ff168015611ce8575033600160a060020a038216145b1515611cf357600080fd5b600160a060020a0381166000908152602e602052604090205460ff161515611d4557600160a060020a0381166000908152602e60205260409020805460ff19166001908117909155602f805490910190555b60408051600160a060020a038316815290517fb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd9149181900360200190a1611d8d81600180611d96565b50565b60165490565b611d9e612de6565b1515611da957600080fd5b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd91602480820192602092909190829003018186803b158015611e1857600080fd5b505afa158015611e2c573d6000803e3d6000fd5b505050506040513d6020811015611e4257600080fd5b50519050600160a060020a0381161515611e6657611e6185858561201c565b611e71565b611e7181858561201c565b5050505050565b600181565b600954610100900460ff1681565b60325460ff1681565b60048054604080517f26683e14000000000000000000000000000000000000000000000000000000008152339381019390935251600092600160a060020a039092169182916326683e1491602480820192602092909190829003018186803b158015611eff57600080fd5b505afa158015611f13573d6000803e3d6000fd5b505050506040513d6020811015611f2957600080fd5b505191505090565b600954600090611f4a90610100900460ff168484612dcf565b90505b92915050565b60095462010000900460ff1681565b600281565b6000611f7233612f0d565b1515611f7d57600080fd5b604080513060601b602080830191909152426034808401829052845180850390910181526054840180865281519190930120600090811c9092526074830182905260948301919091523360b48301526103e80260d482015290517f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c79181900360f40190a150600192915050565b612017601b8484846141ce565b505050565b600083905080600160a060020a031663091600e66040518163ffffffff1660e01b815260040160206040518083038186803b15801561205a57600080fd5b505afa15801561206e573d6000803e3d6000fd5b505050506040513d602081101561208457600080fd5b5051602554610100900460ff9081169116141561212957604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691633def514091606480830192600092919082900301818387803b15801561210c57600080fd5b505af1158015612120573d6000803e3d6000fd5b505050506124da565b80600160a060020a03166312915a306040518163ffffffff1660e01b815260040160206040518083038186803b15801561216257600080fd5b505afa158015612176573d6000803e3d6000fd5b505050506040513d602081101561218c57600080fd5b5051602554610100900460ff9081169116141561221457604080517ff17bda9100000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163f17bda9191606480830192600092919082900301818387803b15801561210c57600080fd5b80600160a060020a03166316aed2326040518163ffffffff1660e01b815260040160206040518083038186803b15801561224d57600080fd5b505afa158015612261573d6000803e3d6000fd5b505050506040513d602081101561227757600080fd5b5051602554610100900460ff908116911614156122ff57604080517f7cbb7bf200000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691637cbb7bf291606480830192600092919082900301818387803b15801561210c57600080fd5b80600160a060020a03166368a0469a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561233857600080fd5b505afa15801561234c573d6000803e3d6000fd5b505050506040513d602081101561236257600080fd5b5051602554610100900460ff908116911614156123ea57604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691638635adb591606480830192600092919082900301818387803b15801561210c57600080fd5b80600160a060020a0316636373a4116040518163ffffffff1660e01b815260040160206040518083038186803b15801561242357600080fd5b505afa158015612437573d6000803e3d6000fd5b505050506040513d602081101561244d57600080fd5b5051602554610100900460ff908116911614156124d557604080517f224dcba000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163224dcba091606480830192600092919082900301818387803b15801561210c57600080fd5b600080fd5b50505050565b600354600090600160a060020a038381169116141561250157506001611cac565b50600160a060020a031660009081526030602052604090205460ff1690565b600061252b336124e0565b151561253657600080fd5b611f4a83836144e5565b60255460ff1681565b60158054600091908390811061255b57fe5b600091825260209091200154600160a060020a031692915050565b61257f336124e0565b151561258a57600080fd5b60328054600160a060020a03909216620100000275ffffffffffffffffffffffffffffffffffffffff000019909216919091179055565b60008060008060006125d3600b614089565b6125dd6013614089565b6125e7600f614089565b6125f16017614089565b6125fb601b614089565b945094509450945094509091929394565b600160a060020a031660009081526014602052604090205460ff1690565b60135460165460ff9091169082565b6000828152600760209081526040822060ff8481169290920490911690601f8416906001821b908190846008811061266d57fe5b600881049091015460046007909216919091026101000a90041663ffffffff161561269957600161269c565b60005b9695505050505050565b60295490565b602c5460ff1681565b612017600f8484846141ce565b60285481565b600354600160a060020a031633146126df57600080fd5b600354600160a060020a0316ff5b603254600090600160a060020a0383811662010000909204161480611f4d5750611f4d82612a63565b6000612720611e94565b151561272b57600080fd5b602c5460ff16151561273c57600080fd5b6000602780546001816001161561010002031660029004905011156127eb57602980546001818101808455600093909352602780546127b2937fcb7c14ce178f56e2e8d86ab33ebc0ae081ba8556a00cd122038841867181caac0192600261010091831615919091026000190190911604614b0c565b5050602854602a80546001810182556000919091527fbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d201555b602b805461280e9160279160026000196101006001841615020190911604614b0c565b504260285560408051602081019182905260009081905261283191602b91614b91565b50602c805460ff191690556004547fbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df90600160a060020a0316612872611c26565b60408051600160a060020a0380851682528316602082015260609181018281526027805460026000196101006001841615020190911604938301849052926080830190849080156129045780601f106128d957610100808354040283529160200191612904565b820191906000526020600020905b8154815290600101906020018083116128e757829003601f168201915b505094505050505060405180910390a150600190565b601f5460225460ff9091169082565b602d5481565b602f5481565b601a5490565b60ff8416156124da576124da612950856145f0565b8484846141ce565b60015481565b612966612b38565b151561297157600080fd5b60408051602081019182905260009081905261298f91602b91614b91565b50602c805460ff19169055565b600954600090611f4a9060ff168484612dcf565b602b805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015612a365780601f10612a0b57610100808354040283529160200191612a36565b820191906000526020600020905b815481529060010190602001808311612a1957829003601f168201915b505050505081565b600954640100000000900460ff1681565b602554610100900460ff1681565b60315481565b603254600090600160a060020a0383811662010000909204161415612a8a57506001611cac565b611f4d8261468d565b600954600090611f4a9062010000900460ff168484612dcf565b6009546301000000900460ff1681565b600160a060020a031660009081526010602052604090205460ff1690565b601b54601e5460ff9091169082565b600254600160a060020a03163314612b0157600080fd5b600160a060020a0381161515612b1657600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600354600160a060020a0316331490565b601d8054600091908390811061255b57fe5b612b64336124e0565b1515612b6f57600080fd5b600860ff821610612b7f57600080fd5b600082815260076020526040812060ff831660088110612b9b57fe5b600891828204019190066004029054906101000a900463ffffffff169050600760008481526020019081526020016000206000018260ff16600881101515612bdf57fe5b600881049091018054600163ffffffff60046007909516949094026101000a80830485169190910184168102908402199091161790556040805185815260ff8516602082015291831682820152517f77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f9181900360600190a1505050565b600354600160a060020a03163314612c7357600080fd5b600160a060020a03811660009081526030602052604081205460ff161515612cc557600160a060020a0382166000908152603060205260409020805460ff191660019081179091556031805490910190555b60408051600160a060020a038416815290517f93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d611179181900360200190a1612d0e8260026001611d96565b5050565b6000903b1190565b602a805482908110612d2857fe5b600091825260209091200154905081565b60306020526000908152604090205460ff1681565b6029805482908110612d5c57fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815293509091830182828015612a365780601f10612a0b57610100808354040283529160200191612a36565b612017600b8484846141ce565b6000612ddc848484613219565b90505b9392505050565b6000611c5133612a63565b600081565b6000611c516017614089565b612e0b336126ed565b151560011480612e23575033600160a060020a038216145b1515612e2e57600080fd5b600160a060020a0381166000908152602e602052604090205460ff1615612e7a57600160a060020a0381166000908152602e60205260409020805460ff19169055602f80546000190190555b60408051600160a060020a038316815290517f745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c9181900360200190a1611d8d8160016000611d96565b60095461201790612950906301000000900460ff166145f0565b602e6020526000908152604090205460ff1681565b600354600160a060020a031681565b6000611c51600b614089565b600354600090600160a060020a0383811691161480612f345750602554600a60ff90911610155b15612f4157506001611cac565b602554600061010090910460ff16111561309c5760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b158015612fc157600080fd5b505afa158015612fd5573d6000803e3d6000fd5b505050506040513d6020811015612feb57600080fd5b5051602554604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561306757600080fd5b505afa15801561307b573d6000803e3d6000fd5b505050506040513d602081101561309157600080fd5b50519150611cac9050565b506000611cac565b60005b8151811015612d0e576130d082828151811015156130c157fe5b90602001906020020151611cba565b6001016130a7565b600a81565b6130e5612b38565b15156130f057600080fd5b602c5460ff161561310057600080fd5b805160801161310e57600080fd5b805161312190602b906020840190614b91565b50602c805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316613165611c26565b60408051600160a060020a038085168252831660208201526060918101828152602b805460026000196101006001841615020190911604938301849052926080830190849080156131f75780601f106131cc576101008083540402835291602001916131f7565b820191906000526020600020905b8154815290600101906020018083116131da57829003601f168201915b505094505050505060405180910390a150565b601754601a5460ff9091169082565b600060ff84161561323e57613237613230856145f0565b84846147e7565b9050612ddf565b5060009392505050565b600354600160a060020a0316331461325f57600080fd5b603280549115156101000261ff0019909216919091179055565b600160a060020a031660009081526018602052604090205460ff1690565b600954600090611f4a90640100000000900460ff168484612dcf565b600f5460125460ff9091169082565b6132ca612de6565b15156132d557600080fd5b6025805460ff191660ff838116919091179182905560045460408051600160a060020a039092168083526020830152929091168183015290517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b60198054600091908390811061255b57fe5b6060602082511115156134055781518083015160008181526005602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845293949390918301828280156133f75780601f106133cc576101008083540402835291602001916133f7565b820191906000526020600020905b8154815290600101906020018083116133da57829003601f168201915b505050505092505050611cac565b6006826040518082805190602001908083835b602083106134375780518252601f199092019160209182019101613418565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156134eb5780601f106134c0576101008083540402835291602001916134eb565b820191906000526020600020905b8154815290600101906020018083116134ce57829003601f168201915b50505050509050919050565b603254620100009004600160a060020a031681565b600454600160a060020a031681565b3360008181526010602052604090205460ff16613536614bff565b600a60ff83811682810682168085526064909106819003821685038190038216604080860182905293546101009004831660020283166020808701829052600160a060020a03891660009081526010909152949094208054949092010191821660ff199093168317905590158015906135b0575060ff8316155b156135c0576135c0600f8561483b565b60408051308152600160a060020a038616602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a150505050565b613618612de6565b151561362357600080fd5b60408051602080825260278054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156136c25780601f10613697576101008083540402835291602001916136c2565b820191906000526020600020905b8154815290600101906020018083116136a557829003601f168201915b50509250505060405180910390a1565b600b54600e5460ff9091169082565b600e5490565b600354600160a060020a0316331480613708575033600160a060020a038216145b151561371357600080fd5b600160a060020a03811660009081526030602052604090205460ff161561375f57600160a060020a0381166000908152603060205260409020805460ff19169055603180546000190190555b60408051600160a060020a038316815290517f2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b959181900360200190a1611d8d8160026000611d96565b60118054600091908390811061255b57fe5b600d8054600091908390811061255b57fe5b6000611c516013614089565b6000600182151514156137f5576137ee83612a63565b9050611f4d565b6137ee83612f0d565b603254610100900460ff1681565b6027805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015612a365780601f10612a0b57610100808354040283529160200191612a36565b6000600860ff83161061387957600080fd5b600083815260076020526040902060ff83166008811061389557fe5b600891828204019190066004029054906101000a900463ffffffff16905092915050565b60006138c3612b38565b15156138ce57600080fd5b6000826040516020018082805190602001908083835b602083106139035780518252601f1990920191602091820191016138e4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012090506000602760405160200180828054600181600116156101000203166002900480156139a25780601f106139805761010080835404028352918201916139a2565b820191906000526020600020905b81548152906001019060200180831161398e575b505091505060405160208183030381529060405280519060200120905080821415613b795760295415156139f9576040805160208101918290526000908190526139ee91602791614b91565b506000602855613a9d565b600080805b602954811015613a515781602a82815481101515613a1857fe5b90600052602060002001541115613a4957809250602a81815481101515613a3b57fe5b906000526020600020015491505b6001016139fe565b506029805483908110613a6057fe5b9060005260206000200160279080546001816001161561010002031660029004613a8b929190614b0c565b506028819055613a9a826148d2565b50505b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168560006040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015613b32578181015183820152602001613b1a565b50505050905090810190601f168015613b5f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600092505050611cac565b60001960005b602954811015613c42576000602982815481101515613b9a57fe5b906000526020600020016040516020018082805460018160011615610100020316600290048015613c025780601f10613be0576101008083540402835291820191613c02565b820191906000526020600020905b815481529060010190602001808311613bee575b505091505060405160208183030381529060405280519060200120905080851415613c3957613c30826148d2565b81925050613c42565b50600101613b7f565b50600019811415613c5257600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a031686836040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015613ce6578181015183820152602001613cce565b50505050905090810190601f168015613d135780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1949350505050565b613d33336124e0565b1515613d3e57600080fd5b8151602010613d99578151808301516000818152600560205260408120919291613d6791614c1e565b600083511115613d925760008281526005602090815260409091208451613d9092860190614b91565b505b5050613e84565b6006826040518082805190602001908083835b60208310613dcb5780518252601f199092019160209182019101613dac565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220613e04925090506000614c1e565b600081511115613e8457806006836040518082805190602001908083835b60208310613e415780518252601f199092019160209182019101613e22565b51815160209384036101000a60001901801990921691161790529201948552506040519384900381019093208451613e829591949190910192509050614b91565b505b7fe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c826040518080602001828103825283818151815260200191508051906020019080838360005b83811015613ee3578181015183820152602001613ecb565b50505050905090810190601f168015613f105780820380516001836020036101000a031916815260200191505b509250505060405180910390a15050565b613f2a336124e0565b1515613f3557600080fd5b600081815260076020526040812090613f4e8282614c62565b50506040805182815290517f87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f9181900360200190a150565b60125490565b606481565b61201760138484846141ce565b600354600160a060020a03163314613fb557600080fd5b600160a060020a0381161515613fca57600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a03166000908152600c602052604090205460ff1690565b600354600160a060020a0316331461402157600080fd5b6032805482151560ff19909116811790915560408051918252517f04c71e53d136838eea703132a77007b0526b9a7691cdb7a6017a93673f865cbb9181900360200190a150565b601e5490565b600954600090611f4a906301000000900460ff168484612dcf565b600080805b83600301548110156141c7576140c884600201828154811015156140ae57fe5b600091825260209091200154600160a060020a0316612d12565b15156141be57600284018054829081106140de57fe5b60009182526020909120018054600160a060020a03191690556003840154600192909201916000190181146141ad5783600201600185600301540381548110151561412557fe5b600091825260209091200154600285018054600160a060020a03909216918390811061414d57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555083600201600185600301540381548110151561419357fe5b60009182526020909120018054600160a060020a03191690555b6003840180546000190190556141c2565b6001015b61408e565b5092915050565b6000600133600160a060020a0386161461428357604080517f67e5c3bf00000000000000000000000000000000000000000000000000000000815233600482015290518691600160a060020a038316916367e5c3bf91602480820192602092909190829003018186803b15801561424457600080fd5b505afa158015614258573d6000803e3d6000fd5b505050506040513d602081101561426e57600080fd5b5051915061427b336126ed565b92505061428f565b61428c326126ed565b91505b600160a060020a038516600090815260018701602052604090205460ff166142b5614bff565b600a60ff8381169182068116808452606490920682900381166020840181905284039190910381166040830152600090869081161580156142fa575085806142fa5750845b1561430457600191505b60ff8716158015906143135750855b8015614335575060018360ff8a166003811061432b57fe5b602002015160ff16145b1561434257506001905060025b60ff8716158015906143515750845b8015614374575060028360ff8a166003811061436957fe5b602002015160ff1614155b15614380575060019050805b60ff87161580159061438f5750855b80156143985750845b156143a557506001905060025b8115156143b157600080fd5b600a60ff8916600381106143c157fe5b602081049091015460ff601f9092166101000a9004811682029084908a16600381106143e957fe5b60ff9092166020929092020152600083600260200201518460016020020151856000602002015101019050808b60010160008c600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508060ff16600014158015614469575060ff8516155b15614478576144788b8b61483b565b60ff8116151561448e5761448c8b8b6149d1565b505b60408051308152600160a060020a038c16602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a15050505050505050505050565b6000828152600760209081526040822060ff8481169290920490911690601f8416906001821b9084908290856008811061451b57fe5b600881049091015460046007909216919091026101000a90041663ffffffff161561454757600161454a565b60005b90508015156145a35760008781526007602052604090208290856008811061456e57fe5b60088104909101805463ffffffff60046007909416939093026101000a80820484169094178316840292909302199092161790555b6040805188815260ff881660208201528215158183015290517f4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d9181900360600190a19695505050505050565b60095460009060ff8381169116141561460b5750600f611cac565b60095460ff83811661010090920416141561462857506013611cac565b60095460ff838116620100009092041614156146465750600b611cac565b60095460ff8381166401000000009092041614156146665750601b611cac565b60095460ff838116630100000090920416141561468557506017611cac565b50601f919050565b600354600090600160a060020a03838116911614806146b45750602554606460ff90911610155b156146c157506001611cac565b602554600061010090910460ff16111561309c5760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b15801561474157600080fd5b505afa158015614755573d6000803e3d6000fd5b505050506040513d602081101561476b57600080fd5b5051602554604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526002604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561306757600080fd5b600160a060020a038216600090815260018401602052604081205460ff90811690600a9084166003811061481757fe5b602081049091015460ff601f9092166101000a900481169116101590509392505050565b600282015460038301541015614894578082600201836003015481548110151561486157fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055506148c5565b60028201805460018101825560009182526020909120018054600160a060020a031916600160a060020a0383161790555b5060030180546001019055565b60298054829081106148e057fe5b9060005260206000200160006148f69190614c1e565b602a80548290811061490457fe5b60009182526020822001556029546000190181146149aa5760298054600019810190811061492e57fe5b9060005260206000200160298281548110151561494757fe5b906000526020600020019080546001816001161561010002031660029004614970929190614b0c565b50602a8054600019810190811061498357fe5b9060005260206000200154602a8281548110151561499d57fe5b6000918252602090912001555b60298054906149bd906000198301614c69565b50602a805490612d0e906000198301614c8d565b6000805b836003015481101561323e5782600160a060020a031684600201828154811015156149fc57fe5b600091825260209091200154600160a060020a03161415614b045760028401805482908110614a2757fe5b60009182526020909120018054600160a060020a03191690556003840154600019018114614aef57836002016001856003015403815481101515614a6757fe5b600091825260209091200154600285018054600160a060020a039092169183908110614a8f57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550836002016001856003015403815481101515614ad557fe5b60009182526020909120018054600160a060020a03191690555b50506003820180546000190190556001611f4d565b6001016149d5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614b455780548555614b81565b82800160010185558215614b8157600052602060002091601f016020900482015b82811115614b81578254825591600101919060010190614b66565b50614b8d929150614cad565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614bd257805160ff1916838001178555614b81565b82800160010185558215614b81579182015b82811115614b81578251825591602001919060010190614be4565b6060604051908101604052806003906020820280388339509192915050565b50805460018160011615610100020316600290046000825580601f10614c445750611d8d565b601f016020900490600052602060002090810190611d8d9190614cad565b5060009055565b81548183558181111561201757600083815260209020612017918101908301614cc7565b815481835581811115612017576000838152602090206120179181019083015b611c3391905b80821115614b8d5760008155600101614cb3565b611c3391905b80821115614b8d576000614ce18282614c1e565b50600101614ccd56fea165627a7a72305820bf8783d032a420c111a76e05bc2573f2f4ac043dca9bb68a53423bedc5007add0029",
}

// BaseAccessControlGroupABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseAccessControlGroupMetaData.ABI instead.
var BaseAccessControlGroupABI = BaseAccessControlGroupMetaData.ABI

// Deprecated: Use BaseAccessControlGroupMetaData.Sigs instead.
// BaseAccessControlGroupFuncSigs maps the 4-byte function signature to its string representation.
var BaseAccessControlGroupFuncSigs = BaseAccessControlGroupMetaData.Sigs

// BaseAccessControlGroupBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseAccessControlGroupMetaData.Bin instead.
var BaseAccessControlGroupBin = BaseAccessControlGroupMetaData.Bin

// DeployBaseAccessControlGroup deploys a new Ethereum contract, binding an instance of BaseAccessControlGroup to it.
func DeployBaseAccessControlGroup(auth *bind.TransactOpts, backend bind.ContractBackend, _contentSpace common.Address) (common.Address, *types.Transaction, *BaseAccessControlGroup, error) {
	parsed, err := ParsedABI(K_BaseAccessControlGroup)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseAccessControlGroupBin), backend, _contentSpace)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseAccessControlGroup{BaseAccessControlGroupCaller: BaseAccessControlGroupCaller{contract: contract}, BaseAccessControlGroupTransactor: BaseAccessControlGroupTransactor{contract: contract}, BaseAccessControlGroupFilterer: BaseAccessControlGroupFilterer{contract: contract}}, nil
}

// BaseAccessControlGroup is an auto generated Go binding around an Ethereum contract.
type BaseAccessControlGroup struct {
	BaseAccessControlGroupCaller     // Read-only binding to the contract
	BaseAccessControlGroupTransactor // Write-only binding to the contract
	BaseAccessControlGroupFilterer   // Log filterer for contract events
}

// BaseAccessControlGroupCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseAccessControlGroupCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessControlGroupTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseAccessControlGroupTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessControlGroupFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseAccessControlGroupFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseAccessControlGroup creates a new instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroup(address common.Address, backend bind.ContractBackend) (*BaseAccessControlGroup, error) {
	contract, err := bindBaseAccessControlGroup(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroup{BaseAccessControlGroupCaller: BaseAccessControlGroupCaller{contract: contract}, BaseAccessControlGroupTransactor: BaseAccessControlGroupTransactor{contract: contract}, BaseAccessControlGroupFilterer: BaseAccessControlGroupFilterer{contract: contract}}, nil
}

// NewBaseAccessControlGroupCaller creates a new read-only instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroupCaller(address common.Address, caller bind.ContractCaller) (*BaseAccessControlGroupCaller, error) {
	contract, err := bindBaseAccessControlGroup(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupCaller{contract: contract}, nil
}

// NewBaseAccessControlGroupTransactor creates a new write-only instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroupTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseAccessControlGroupTransactor, error) {
	contract, err := bindBaseAccessControlGroup(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupTransactor{contract: contract}, nil
}

// NewBaseAccessControlGroupFilterer creates a new log filterer instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroupFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseAccessControlGroupFilterer, error) {
	contract, err := bindBaseAccessControlGroup(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupFilterer{contract: contract}, nil
}

// bindBaseAccessControlGroup binds a generic wrapper to an already deployed contract.
func bindBaseAccessControlGroup(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseAccessControlGroup)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ACCESSCONFIRMED(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "ACCESS_CONFIRMED")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ACCESSNONE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "ACCESS_NONE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ACCESSTENTATIVE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "ACCESS_TENTATIVE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "CAN_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "CAN_EDIT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "CAN_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYCONTENTOBJECT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "CATEGORY_CONTENT_OBJECT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYCONTENTTYPE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "CATEGORY_CONTENT_TYPE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYCONTRACT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "CATEGORY_CONTRACT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYGROUP(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "CATEGORY_GROUP")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYLIBRARY(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "CATEGORY_LIBRARY")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) TYPEACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "TYPE_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) TYPEEDIT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "TYPE_EDIT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) TYPESEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "TYPE_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() view returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) AccessGroups(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "accessGroups")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "canCommit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "canConfirm")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "canEdit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckAccessGroupRights(opts *bind.CallOpts, group common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "checkAccessGroupRights", group, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckContentObjectRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "checkContentObjectRights", obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckContentTypeRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "checkContentTypeRights", obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckContractRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "checkContractRights", obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckDirectRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "checkDirectRights", index_type, obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckLibraryRights(opts *bind.CallOpts, lib common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "checkLibraryRights", lib, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "checkRights", index_type, obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "commitPending")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() view returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContentObjects(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "contentObjects")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() view returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContentTypes(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "contentTypes")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContractExists(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "contractExists", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() view returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Contracts(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "contracts")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() view returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "countVersionHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetAccessGroup(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getAccessGroup", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetAccessGroupRights(opts *bind.CallOpts, group common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getAccessGroupRights", group)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() view returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetAccessGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getAccessGroupsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetBit(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getBit", _ident, _ord)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentObject(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getContentObject", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentObjectRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getContentObjectRights", obj)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() view returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentObjectsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getContentObjectsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentType(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getContentType", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentTypeRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getContentTypeRights", obj)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() view returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getContentTypesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContract(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getContract", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContractRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getContractRights", obj)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() view returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContractsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getContractsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) view returns(uint32)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetCounter(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (uint32, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getCounter", _ident, _ord)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() view returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetLibrariesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getLibrariesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetLibrary(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getLibrary", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetLibraryRights(opts *bind.CallOpts, lib common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getLibraryRights", lib)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) view returns(bytes)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getMeta", key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "hasAccess", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasAccessRight is a free data retrieval call binding the contract method 0xd8961c8d.
//
// Solidity: function hasAccessRight(address candidate, bool mgr) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) HasAccessRight(opts *bind.CallOpts, candidate common.Address, mgr bool) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "hasAccessRight", candidate, mgr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address _candidate) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) HasEditorRight(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "hasEditorRight", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address _candidate) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) HasManagerAccess(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "hasManagerAccess", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "indexCategory")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "isAdmin", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsConsumerGroup is a free data retrieval call binding the contract method 0xdde12828.
//
// Solidity: function isConsumerGroup() view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) IsConsumerGroup(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "isConsumerGroup")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() view returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Libraries(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "libraries")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ManagersMap is a free data retrieval call binding the contract method 0x793f3f71.
//
// Solidity: function managersMap(address ) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ManagersMap(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "managersMap", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ManagersNum is a free data retrieval call binding the contract method 0x638d0290.
//
// Solidity: function managersNum() view returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ManagersNum(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "managersNum")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MembersMap is a free data retrieval call binding the contract method 0x872ea68a.
//
// Solidity: function membersMap(address ) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) MembersMap(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "membersMap", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// MembersNum is a free data retrieval call binding the contract method 0x55277a5b.
//
// Solidity: function membersNum() view returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) MembersNum(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "membersNum")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// OauthEnabled is a free data retrieval call binding the contract method 0x12b39dd0.
//
// Solidity: function oauthEnabled() view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) OauthEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "oauthEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() view returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "objectHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() view returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "objectTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() view returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Others(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "others")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "parentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() view returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "pendingHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Tenant is a free data retrieval call binding the contract method 0xadf07791.
//
// Solidity: function tenant() view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Tenant(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "tenant")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) view returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "versionHashes", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) view returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "versionTimestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "visibility")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) payable returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpAccessGroups(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpAccessGroups")
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpAll")
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpContentObjects(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpContentObjects")
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpContentTypes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpContentTypes")
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpLibraries(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpLibraries")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "clearPending")
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "commit", _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() payable returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "confirmCommit")
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) DeleteGroup(opts *bind.TransactOpts, _ident [32]byte) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "deleteGroup", _ident)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "deleteVersion", _versionHash)
}

// GrantAccess is a paid mutator transaction binding the contract method 0x0ae5e739.
//
// Solidity: function grantAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) GrantAccess(opts *bind.TransactOpts, candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "grantAccess", candidate)
}

// GrantAccessMany is a paid mutator transaction binding the contract method 0x9602a0b3.
//
// Solidity: function grantAccessMany(address[] candidates) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) GrantAccessMany(opts *bind.TransactOpts, candidates []common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "grantAccessMany", candidates)
}

// GrantManagerAccess is a paid mutator transaction binding the contract method 0x75861a95.
//
// Solidity: function grantManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) GrantManagerAccess(opts *bind.TransactOpts, manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "grantManagerAccess", manager)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) IncrementCounter(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "incrementCounter", _ident, _ord)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "kill")
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "putMeta", key, value)
}

// RevokeAccess is a paid mutator transaction binding the contract method 0x85e68531.
//
// Solidity: function revokeAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) RevokeAccess(opts *bind.TransactOpts, candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "revokeAccess", candidate)
}

// RevokeManagerAccess is a paid mutator transaction binding the contract method 0xcdb849b7.
//
// Solidity: function revokeManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) RevokeManagerAccess(opts *bind.TransactOpts, manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "revokeManagerAccess", manager)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetAccessGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setAccessGroupRights", group, access_type, access)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetAccessRights(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setAccessRights")
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetAndGetBit(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setAndGetBit", _ident, _ord)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContentObjectRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContentObjectRights", obj, access_type, access)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContentSpace(opts *bind.TransactOpts, content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContentSpace", content_space)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContentTypeRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContentTypeRights", obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContractRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContractRights", obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetEntityRights(opts *bind.TransactOpts, indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setEntityRights", indexType, obj, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetIsConsumerGroup is a paid mutator transaction binding the contract method 0xa3125255.
//
// Solidity: function setIsConsumerGroup(bool _enabled) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetIsConsumerGroup(opts *bind.TransactOpts, _enabled bool) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setIsConsumerGroup", _enabled)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetLibraryRights(opts *bind.TransactOpts, lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setLibraryRights", lib, access_type, access)
}

// SetOAuthEnabled is a paid mutator transaction binding the contract method 0xfba3779a.
//
// Solidity: function setOAuthEnabled(bool _enabled) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetOAuthEnabled(opts *bind.TransactOpts, _enabled bool) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setOAuthEnabled", _enabled)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetTenant is a paid mutator transaction binding the contract method 0x2e74a4de.
//
// Solidity: function setTenant(address _tenantAddr) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetTenant(opts *bind.TransactOpts, _tenantAddr common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setTenant", _tenantAddr)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setVisibility", _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "transferOwnership", newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "updateRequest")
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.RawTransact(opts, calldata)
}

// BaseAccessControlGroupAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupAccessRequestV3Iterator struct {
	Event *BaseAccessControlGroupAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupAccessRequestV3 represents a AccessRequestV3 event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseAccessControlGroupAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupAccessRequestV3Iterator{contract: _BaseAccessControlGroup.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupAccessRequestV3)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseAccessRequestV3(log types.Log) (*BaseAccessControlGroupAccessRequestV3, error) {
	event := new(BaseAccessControlGroupAccessRequestV3)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupBitSetAndGetIterator is returned from FilterBitSetAndGet and is used to iterate over the raw logs and unpacked data for BitSetAndGet events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupBitSetAndGetIterator struct {
	Event *BaseAccessControlGroupBitSetAndGet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupBitSetAndGetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupBitSetAndGet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupBitSetAndGet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupBitSetAndGetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupBitSetAndGetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupBitSetAndGet represents a BitSetAndGet event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupBitSetAndGet struct {
	Ident [32]byte
	Ord   uint8
	Prev  bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBitSetAndGet is a free log retrieval operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterBitSetAndGet(opts *bind.FilterOpts) (*BaseAccessControlGroupBitSetAndGetIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupBitSetAndGetIterator{contract: _BaseAccessControlGroup.contract, event: "BitSetAndGet", logs: logs, sub: sub}, nil
}

// WatchBitSetAndGet is a free log subscription operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchBitSetAndGet(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupBitSetAndGet) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupBitSetAndGet)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitSetAndGet is a log parse operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseBitSetAndGet(log types.Log) (*BaseAccessControlGroupBitSetAndGet, error) {
	event := new(BaseAccessControlGroupBitSetAndGet)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupCommitPendingIterator struct {
	Event *BaseAccessControlGroupCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupCommitPending represents a CommitPending event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseAccessControlGroupCommitPendingIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupCommitPendingIterator{contract: _BaseAccessControlGroup.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupCommitPending)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseCommitPending(log types.Log) (*BaseAccessControlGroupCommitPending, error) {
	event := new(BaseAccessControlGroupCommitPending)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupCounterIncrementedIterator is returned from FilterCounterIncremented and is used to iterate over the raw logs and unpacked data for CounterIncremented events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupCounterIncrementedIterator struct {
	Event *BaseAccessControlGroupCounterIncremented // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupCounterIncrementedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupCounterIncremented)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupCounterIncremented)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupCounterIncrementedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupCounterIncrementedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupCounterIncremented represents a CounterIncremented event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupCounterIncremented struct {
	Ident [32]byte
	Slot  uint8
	Val   uint32
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCounterIncremented is a free log retrieval operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterCounterIncremented(opts *bind.FilterOpts) (*BaseAccessControlGroupCounterIncrementedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupCounterIncrementedIterator{contract: _BaseAccessControlGroup.contract, event: "CounterIncremented", logs: logs, sub: sub}, nil
}

// WatchCounterIncremented is a free log subscription operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchCounterIncremented(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupCounterIncremented) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupCounterIncremented)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCounterIncremented is a log parse operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseCounterIncremented(log types.Log) (*BaseAccessControlGroupCounterIncremented, error) {
	event := new(BaseAccessControlGroupCounterIncremented)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupManagerAccessGrantedIterator is returned from FilterManagerAccessGranted and is used to iterate over the raw logs and unpacked data for ManagerAccessGranted events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessGrantedIterator struct {
	Event *BaseAccessControlGroupManagerAccessGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupManagerAccessGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupManagerAccessGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupManagerAccessGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupManagerAccessGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupManagerAccessGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupManagerAccessGranted represents a ManagerAccessGranted event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessGranted struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterManagerAccessGranted is a free log retrieval operation binding the contract event 0x93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d61117.
//
// Solidity: event ManagerAccessGranted(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterManagerAccessGranted(opts *bind.FilterOpts) (*BaseAccessControlGroupManagerAccessGrantedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "ManagerAccessGranted")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupManagerAccessGrantedIterator{contract: _BaseAccessControlGroup.contract, event: "ManagerAccessGranted", logs: logs, sub: sub}, nil
}

// WatchManagerAccessGranted is a free log subscription operation binding the contract event 0x93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d61117.
//
// Solidity: event ManagerAccessGranted(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchManagerAccessGranted(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupManagerAccessGranted) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "ManagerAccessGranted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupManagerAccessGranted)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseManagerAccessGranted is a log parse operation binding the contract event 0x93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d61117.
//
// Solidity: event ManagerAccessGranted(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseManagerAccessGranted(log types.Log) (*BaseAccessControlGroupManagerAccessGranted, error) {
	event := new(BaseAccessControlGroupManagerAccessGranted)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupManagerAccessRevokedIterator is returned from FilterManagerAccessRevoked and is used to iterate over the raw logs and unpacked data for ManagerAccessRevoked events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessRevokedIterator struct {
	Event *BaseAccessControlGroupManagerAccessRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupManagerAccessRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupManagerAccessRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupManagerAccessRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupManagerAccessRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupManagerAccessRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupManagerAccessRevoked represents a ManagerAccessRevoked event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessRevoked struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterManagerAccessRevoked is a free log retrieval operation binding the contract event 0x2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b95.
//
// Solidity: event ManagerAccessRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterManagerAccessRevoked(opts *bind.FilterOpts) (*BaseAccessControlGroupManagerAccessRevokedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "ManagerAccessRevoked")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupManagerAccessRevokedIterator{contract: _BaseAccessControlGroup.contract, event: "ManagerAccessRevoked", logs: logs, sub: sub}, nil
}

// WatchManagerAccessRevoked is a free log subscription operation binding the contract event 0x2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b95.
//
// Solidity: event ManagerAccessRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchManagerAccessRevoked(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupManagerAccessRevoked) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "ManagerAccessRevoked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupManagerAccessRevoked)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseManagerAccessRevoked is a log parse operation binding the contract event 0x2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b95.
//
// Solidity: event ManagerAccessRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseManagerAccessRevoked(log types.Log) (*BaseAccessControlGroupManagerAccessRevoked, error) {
	event := new(BaseAccessControlGroupManagerAccessRevoked)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupMemberAddedIterator is returned from FilterMemberAdded and is used to iterate over the raw logs and unpacked data for MemberAdded events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberAddedIterator struct {
	Event *BaseAccessControlGroupMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupMemberAdded represents a MemberAdded event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberAdded struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMemberAdded is a free log retrieval operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterMemberAdded(opts *bind.FilterOpts) (*BaseAccessControlGroupMemberAddedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "MemberAdded")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupMemberAddedIterator{contract: _BaseAccessControlGroup.contract, event: "MemberAdded", logs: logs, sub: sub}, nil
}

// WatchMemberAdded is a free log subscription operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchMemberAdded(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupMemberAdded) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "MemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupMemberAdded)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMemberAdded is a log parse operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseMemberAdded(log types.Log) (*BaseAccessControlGroupMemberAdded, error) {
	event := new(BaseAccessControlGroupMemberAdded)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupMemberRevokedIterator is returned from FilterMemberRevoked and is used to iterate over the raw logs and unpacked data for MemberRevoked events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberRevokedIterator struct {
	Event *BaseAccessControlGroupMemberRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupMemberRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupMemberRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupMemberRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupMemberRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupMemberRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupMemberRevoked represents a MemberRevoked event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberRevoked struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMemberRevoked is a free log retrieval operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterMemberRevoked(opts *bind.FilterOpts) (*BaseAccessControlGroupMemberRevokedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "MemberRevoked")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupMemberRevokedIterator{contract: _BaseAccessControlGroup.contract, event: "MemberRevoked", logs: logs, sub: sub}, nil
}

// WatchMemberRevoked is a free log subscription operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchMemberRevoked(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupMemberRevoked) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "MemberRevoked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupMemberRevoked)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMemberRevoked is a log parse operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseMemberRevoked(log types.Log) (*BaseAccessControlGroupMemberRevoked, error) {
	event := new(BaseAccessControlGroupMemberRevoked)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupOAuthStatusChangedIterator is returned from FilterOAuthStatusChanged and is used to iterate over the raw logs and unpacked data for OAuthStatusChanged events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupOAuthStatusChangedIterator struct {
	Event *BaseAccessControlGroupOAuthStatusChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupOAuthStatusChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupOAuthStatusChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupOAuthStatusChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupOAuthStatusChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupOAuthStatusChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupOAuthStatusChanged represents a OAuthStatusChanged event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupOAuthStatusChanged struct {
	Enabled bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOAuthStatusChanged is a free log retrieval operation binding the contract event 0x04c71e53d136838eea703132a77007b0526b9a7691cdb7a6017a93673f865cbb.
//
// Solidity: event OAuthStatusChanged(bool enabled)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterOAuthStatusChanged(opts *bind.FilterOpts) (*BaseAccessControlGroupOAuthStatusChangedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "OAuthStatusChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupOAuthStatusChangedIterator{contract: _BaseAccessControlGroup.contract, event: "OAuthStatusChanged", logs: logs, sub: sub}, nil
}

// WatchOAuthStatusChanged is a free log subscription operation binding the contract event 0x04c71e53d136838eea703132a77007b0526b9a7691cdb7a6017a93673f865cbb.
//
// Solidity: event OAuthStatusChanged(bool enabled)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchOAuthStatusChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupOAuthStatusChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "OAuthStatusChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupOAuthStatusChanged)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "OAuthStatusChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOAuthStatusChanged is a log parse operation binding the contract event 0x04c71e53d136838eea703132a77007b0526b9a7691cdb7a6017a93673f865cbb.
//
// Solidity: event OAuthStatusChanged(bool enabled)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseOAuthStatusChanged(log types.Log) (*BaseAccessControlGroupOAuthStatusChanged, error) {
	event := new(BaseAccessControlGroupOAuthStatusChanged)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "OAuthStatusChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupObjectMetaChangedIterator struct {
	Event *BaseAccessControlGroupObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseAccessControlGroupObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupObjectMetaChangedIterator{contract: _BaseAccessControlGroup.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupObjectMetaChanged)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseObjectMetaChanged(log types.Log) (*BaseAccessControlGroupObjectMetaChanged, error) {
	event := new(BaseAccessControlGroupObjectMetaChanged)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupRightsChangedIterator is returned from FilterRightsChanged and is used to iterate over the raw logs and unpacked data for RightsChanged events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupRightsChangedIterator struct {
	Event *BaseAccessControlGroupRightsChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupRightsChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupRightsChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupRightsChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupRightsChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupRightsChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupRightsChanged represents a RightsChanged event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupRightsChanged struct {
	Principal common.Address
	Entity    common.Address
	Aggregate uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRightsChanged is a free log retrieval operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterRightsChanged(opts *bind.FilterOpts) (*BaseAccessControlGroupRightsChangedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupRightsChangedIterator{contract: _BaseAccessControlGroup.contract, event: "RightsChanged", logs: logs, sub: sub}, nil
}

// WatchRightsChanged is a free log subscription operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchRightsChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupRightsChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupRightsChanged)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "RightsChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRightsChanged is a log parse operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseRightsChanged(log types.Log) (*BaseAccessControlGroupRightsChanged, error) {
	event := new(BaseAccessControlGroupRightsChanged)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "RightsChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupUnauthorizedOperationIterator is returned from FilterUnauthorizedOperation and is used to iterate over the raw logs and unpacked data for UnauthorizedOperation events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUnauthorizedOperationIterator struct {
	Event *BaseAccessControlGroupUnauthorizedOperation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupUnauthorizedOperationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupUnauthorizedOperation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupUnauthorizedOperation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupUnauthorizedOperationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupUnauthorizedOperationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupUnauthorizedOperation represents a UnauthorizedOperation event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUnauthorizedOperation struct {
	OperationCode *big.Int
	Candidate     common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterUnauthorizedOperation is a free log retrieval operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterUnauthorizedOperation(opts *bind.FilterOpts) (*BaseAccessControlGroupUnauthorizedOperationIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupUnauthorizedOperationIterator{contract: _BaseAccessControlGroup.contract, event: "UnauthorizedOperation", logs: logs, sub: sub}, nil
}

// WatchUnauthorizedOperation is a free log subscription operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchUnauthorizedOperation(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupUnauthorizedOperation) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupUnauthorizedOperation)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnauthorizedOperation is a log parse operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseUnauthorizedOperation(log types.Log) (*BaseAccessControlGroupUnauthorizedOperation, error) {
	event := new(BaseAccessControlGroupUnauthorizedOperation)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUpdateRequestIterator struct {
	Event *BaseAccessControlGroupUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupUpdateRequest represents a UpdateRequest event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseAccessControlGroupUpdateRequestIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupUpdateRequestIterator{contract: _BaseAccessControlGroup.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupUpdateRequest)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseUpdateRequest(log types.Log) (*BaseAccessControlGroupUpdateRequest, error) {
	event := new(BaseAccessControlGroupUpdateRequest)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionConfirmIterator struct {
	Event *BaseAccessControlGroupVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupVersionConfirm represents a VersionConfirm event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseAccessControlGroupVersionConfirmIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupVersionConfirmIterator{contract: _BaseAccessControlGroup.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupVersionConfirm)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseVersionConfirm(log types.Log) (*BaseAccessControlGroupVersionConfirm, error) {
	event := new(BaseAccessControlGroupVersionConfirm)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionDeleteIterator struct {
	Event *BaseAccessControlGroupVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupVersionDelete represents a VersionDelete event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseAccessControlGroupVersionDeleteIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupVersionDeleteIterator{contract: _BaseAccessControlGroup.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupVersionDelete)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseVersionDelete(log types.Log) (*BaseAccessControlGroupVersionDelete, error) {
	event := new(BaseAccessControlGroupVersionDelete)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVisibilityChangedIterator struct {
	Event *BaseAccessControlGroupVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupVisibilityChanged represents a VisibilityChanged event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseAccessControlGroupVisibilityChangedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupVisibilityChangedIterator{contract: _BaseAccessControlGroup.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupVisibilityChanged)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseVisibilityChanged(log types.Log) (*BaseAccessControlGroupVisibilityChanged, error) {
	event := new(BaseAccessControlGroupVisibilityChanged)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupWordGroupDeletedIterator is returned from FilterWordGroupDeleted and is used to iterate over the raw logs and unpacked data for WordGroupDeleted events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupWordGroupDeletedIterator struct {
	Event *BaseAccessControlGroupWordGroupDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupWordGroupDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupWordGroupDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupWordGroupDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupWordGroupDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupWordGroupDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupWordGroupDeleted represents a WordGroupDeleted event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupWordGroupDeleted struct {
	Ident [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWordGroupDeleted is a free log retrieval operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterWordGroupDeleted(opts *bind.FilterOpts) (*BaseAccessControlGroupWordGroupDeletedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupWordGroupDeletedIterator{contract: _BaseAccessControlGroup.contract, event: "WordGroupDeleted", logs: logs, sub: sub}, nil
}

// WatchWordGroupDeleted is a free log subscription operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchWordGroupDeleted(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupWordGroupDeleted) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupWordGroupDeleted)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWordGroupDeleted is a log parse operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseWordGroupDeleted(log types.Log) (*BaseAccessControlGroupWordGroupDeleted, error) {
	event := new(BaseAccessControlGroupWordGroupDeleted)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletMetaData contains all meta data concerning the BaseAccessWallet contract.
var BaseAccessWalletMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentObjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusNonceFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"name\":\"setContentSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusSendFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_OBJECT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccessGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_GROUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_LIBRARY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_CONFIRMED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContractRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getAccessGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessGroups\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentObjectRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasManagerAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_TENTATIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_guarantor\",\"type\":\"address\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"others\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"indexType\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setEntityRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contracts\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setLibraryRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_NONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentTypeRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpLibraries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusBalanceFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusOk\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkDirectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentObjects\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAccessRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraries\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLibrariesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentObject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAccessGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusSigFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentObjectsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setAccessGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"}],\"name\":\"getLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"guarantor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"code\",\"type\":\"int256\"}],\"name\":\"ExecStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"principal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"aggregate\",\"type\":\"uint8\"}],\"name\":\"RightsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"18689733": "ACCESS_CONFIRMED()",
		"8232f3f1": "ACCESS_NONE()",
		"479a0c51": "ACCESS_TENTATIVE()",
		"97ac4fd2": "CAN_ACCESS()",
		"ef1d7dc2": "CAN_EDIT()",
		"100508a2": "CAN_SEE()",
		"091600e6": "CATEGORY_CONTENT_OBJECT()",
		"68a0469a": "CATEGORY_CONTENT_TYPE()",
		"6373a411": "CATEGORY_CONTRACT()",
		"12915a30": "CATEGORY_GROUP()",
		"16aed232": "CATEGORY_LIBRARY()",
		"d1aeb651": "TYPE_ACCESS()",
		"5d97b6c2": "TYPE_EDIT()",
		"96eba03d": "TYPE_SEE()",
		"30e66949": "accessGroups()",
		"1bf7a912": "accessRequestV3(bytes32[],address[])",
		"0f58a786": "addContentType(address,address)",
		"32eaf21b": "addressKMS()",
		"6e375427": "canCommit()",
		"14cfabb3": "canConfirm()",
		"0eaec2c5": "canContribute(address)",
		"81beeb64": "canEdit()",
		"9b55f901": "canPublish(address)",
		"29d00219": "canReview(address)",
		"15c0bac1": "checkAccessGroupRights(address,uint8)",
		"5faecb76": "checkContentObjectRights(address,uint8)",
		"fe538c5a": "checkContentTypeRights(address,uint8)",
		"a864dfa5": "checkContractRights(address,uint8)",
		"a00b38c4": "checkDirectRights(uint8,address,uint8)",
		"6813b6d1": "checkLibraryRights(address,uint8)",
		"7fb52f1a": "checkRights(uint8,address,uint8)",
		"d30f8cd0": "cleanUpAccessGroups()",
		"2fa5c842": "cleanUpAll()",
		"048bd529": "cleanUpContentObjects()",
		"85e0a200": "cleanUpContentTypes()",
		"92297d7b": "cleanUpLibraries()",
		"5f6a1301": "clearPending()",
		"9867db74": "commit(string)",
		"375a6e7c": "commitPending()",
		"446e8826": "confirmCommit()",
		"a980892d": "contentObjects()",
		"af570c04": "contentSpace()",
		"1cdbee5a": "contentTypeContracts(address)",
		"9f46133e": "contentTypes()",
		"991a3a7c": "contentTypes(uint256)",
		"c65bcbe2": "contentTypesLength()",
		"7709bc78": "contractExists(address)",
		"6c0f79b6": "contracts()",
		"331b86c0": "countVersionHashes()",
		"02d05d3f": "creator()",
		"1e2ff94f": "currentTimestamp()",
		"e1a70717": "deleteVersion(string)",
		"9476c478": "execStatusBalanceFail()",
		"04f55daf": "execStatusNonceFail()",
		"95ba60ba": "execStatusOk()",
		"07a08237": "execStatusSendFail()",
		"eb23b7aa": "execStatusSigFail()",
		"508ad278": "execute(address,uint8,bytes32,bytes32,address,uint256,uint256)",
		"1f2caaec": "findTypeByHash(bytes32)",
		"2d474cbd": "getAccessGroup(uint256)",
		"304f4a7b": "getAccessGroupRights(address)",
		"0dc10d3f": "getAccessGroupsLength()",
		"cf8a7503": "getContentObject(uint256)",
		"69881c0c": "getContentObjectRights(address)",
		"ebe9314e": "getContentObjectsLength()",
		"aa3f6952": "getContentType(uint256)",
		"a4081d62": "getContentTypeRights(address)",
		"5c1d3059": "getContentTypesLength()",
		"6ebc8c86": "getContract(uint256)",
		"08d865d7": "getContractRights(address)",
		"fccc134f": "getContractsLength()",
		"cb86806d": "getLibrariesLength()",
		"d15d62a7": "getLibrary(uint256)",
		"fb52222c": "getLibraryRights(address)",
		"ac55c906": "getMeta(bytes)",
		"95a078e8": "hasAccess(address)",
		"67e5c3bf": "hasEditorRight(address)",
		"42e7ba7b": "hasManagerAccess(address)",
		"6380501f": "indexCategory()",
		"24d7806c": "isAdmin(address)",
		"41c0e1b5": "kill()",
		"c4b1978d": "libraries()",
		"e02dd9c2": "objectHash()",
		"40b87a26": "objectTimestamp()",
		"51a7fc87": "others()",
		"8da5cb5b": "owner()",
		"00821de3": "parentAddress()",
		"628449fd": "pendingHash()",
		"2cf99422": "publish(address)",
		"e542b7cb": "putMeta(bytes,bytes)",
		"fd089196": "removeContentType(address)",
		"3dd71d99": "requiresReview()",
		"f17bda91": "setAccessGroupRights(address,uint8,uint8)",
		"b8ff1dba": "setAccessRights()",
		"c9e8e72d": "setAddressKMS(address)",
		"3def5140": "setContentObjectRights(address,uint8,uint8)",
		"055af48f": "setContentSpace(address)",
		"8635adb5": "setContentTypeRights(address,uint8,uint8)",
		"224dcba0": "setContractRights(address,uint8,uint8)",
		"5d7cf830": "setEntityRights(uint8,address,uint8,uint8)",
		"22e564eb": "setGroupRights(address,uint8,uint8)",
		"7cbb7bf2": "setLibraryRights(address,uint8,uint8)",
		"0fe1b5a2": "setRights(address,uint8,uint8)",
		"aa024e8b": "setVisibility(uint8)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"c287e0ed": "updateRequest()",
		"29dedde5": "validType(address)",
		"f50b2efe": "validateTimestamp(uint256)",
		"763d5ee6": "validateTransaction(uint8,bytes32,bytes32,address,uint256,uint256)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
		"7ca8f618": "versionHashes(uint256)",
		"7886f747": "versionTimestamp(uint256)",
		"29adec14": "visibility()",
		"9cb121ba": "whitelistedType(address)",
	},
	Bin: "",
}

// BaseAccessWalletABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseAccessWalletMetaData.ABI instead.
var BaseAccessWalletABI = BaseAccessWalletMetaData.ABI

// Deprecated: Use BaseAccessWalletMetaData.Sigs instead.
// BaseAccessWalletFuncSigs maps the 4-byte function signature to its string representation.
var BaseAccessWalletFuncSigs = BaseAccessWalletMetaData.Sigs

// BaseAccessWalletBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseAccessWalletMetaData.Bin instead.
var BaseAccessWalletBin = BaseAccessWalletMetaData.Bin

// DeployBaseAccessWallet deploys a new Ethereum contract, binding an instance of BaseAccessWallet to it.
func DeployBaseAccessWallet(auth *bind.TransactOpts, backend bind.ContractBackend, content_space common.Address) (common.Address, *types.Transaction, *BaseAccessWallet, error) {
	parsed, err := ParsedABI(K_BaseAccessWallet)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseAccessWalletBin), backend, content_space)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseAccessWallet{BaseAccessWalletCaller: BaseAccessWalletCaller{contract: contract}, BaseAccessWalletTransactor: BaseAccessWalletTransactor{contract: contract}, BaseAccessWalletFilterer: BaseAccessWalletFilterer{contract: contract}}, nil
}

// BaseAccessWallet is an auto generated Go binding around an Ethereum contract.
type BaseAccessWallet struct {
	BaseAccessWalletCaller     // Read-only binding to the contract
	BaseAccessWalletTransactor // Write-only binding to the contract
	BaseAccessWalletFilterer   // Log filterer for contract events
}

// BaseAccessWalletCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseAccessWalletCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseAccessWalletTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseAccessWalletFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseAccessWallet creates a new instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWallet(address common.Address, backend bind.ContractBackend) (*BaseAccessWallet, error) {
	contract, err := bindBaseAccessWallet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWallet{BaseAccessWalletCaller: BaseAccessWalletCaller{contract: contract}, BaseAccessWalletTransactor: BaseAccessWalletTransactor{contract: contract}, BaseAccessWalletFilterer: BaseAccessWalletFilterer{contract: contract}}, nil
}

// NewBaseAccessWalletCaller creates a new read-only instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWalletCaller(address common.Address, caller bind.ContractCaller) (*BaseAccessWalletCaller, error) {
	contract, err := bindBaseAccessWallet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletCaller{contract: contract}, nil
}

// NewBaseAccessWalletTransactor creates a new write-only instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWalletTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseAccessWalletTransactor, error) {
	contract, err := bindBaseAccessWallet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletTransactor{contract: contract}, nil
}

// NewBaseAccessWalletFilterer creates a new log filterer instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWalletFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseAccessWalletFilterer, error) {
	contract, err := bindBaseAccessWallet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFilterer{contract: contract}, nil
}

// bindBaseAccessWallet binds a generic wrapper to an already deployed contract.
func bindBaseAccessWallet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseAccessWallet)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) ACCESSCONFIRMED(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "ACCESS_CONFIRMED")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) ACCESSNONE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "ACCESS_NONE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) ACCESSTENTATIVE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "ACCESS_TENTATIVE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "CAN_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "CAN_EDIT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "CAN_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYCONTENTOBJECT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "CATEGORY_CONTENT_OBJECT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYCONTENTTYPE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "CATEGORY_CONTENT_TYPE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYCONTRACT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "CATEGORY_CONTRACT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYGROUP(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "CATEGORY_GROUP")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYLIBRARY(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "CATEGORY_LIBRARY")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) TYPEACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "TYPE_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) TYPEEDIT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "TYPE_EDIT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) TYPESEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "TYPE_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() view returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) AccessGroups(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "accessGroups")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "addressKMS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "canCommit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "canConfirm")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "canContribute", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "canEdit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "canPublish", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanReview(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "canReview", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckAccessGroupRights(opts *bind.CallOpts, group common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "checkAccessGroupRights", group, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckContentObjectRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "checkContentObjectRights", obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckContentTypeRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "checkContentTypeRights", obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckContractRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "checkContractRights", obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckDirectRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "checkDirectRights", index_type, obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckLibraryRights(opts *bind.CallOpts, lib common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "checkLibraryRights", lib, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "checkRights", index_type, obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "commitPending")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() view returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentObjects(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "contentObjects")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "contentTypeContracts", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "contentTypes", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypes0 is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() view returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypes0(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "contentTypes0")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() view returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "contentTypesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContractExists(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "contractExists", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() view returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) Contracts(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "contracts")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() view returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "countVersionHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CurrentTimestamp is a free data retrieval call binding the contract method 0x1e2ff94f.
//
// Solidity: function currentTimestamp() view returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) CurrentTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "currentTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExecStatusBalanceFail is a free data retrieval call binding the contract method 0x9476c478.
//
// Solidity: function execStatusBalanceFail() view returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusBalanceFail(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "execStatusBalanceFail")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExecStatusNonceFail is a free data retrieval call binding the contract method 0x04f55daf.
//
// Solidity: function execStatusNonceFail() view returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusNonceFail(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "execStatusNonceFail")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExecStatusOk is a free data retrieval call binding the contract method 0x95ba60ba.
//
// Solidity: function execStatusOk() view returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusOk(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "execStatusOk")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExecStatusSendFail is a free data retrieval call binding the contract method 0x07a08237.
//
// Solidity: function execStatusSendFail() view returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusSendFail(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "execStatusSendFail")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExecStatusSigFail is a free data retrieval call binding the contract method 0xeb23b7aa.
//
// Solidity: function execStatusSigFail() view returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusSigFail(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "execStatusSigFail")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "findTypeByHash", typeHash)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetAccessGroup(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getAccessGroup", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetAccessGroupRights(opts *bind.CallOpts, group common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getAccessGroupRights", group)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() view returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetAccessGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getAccessGroupsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentObject(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getContentObject", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentObjectRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getContentObjectRights", obj)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() view returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentObjectsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getContentObjectsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentType(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getContentType", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentTypeRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getContentTypeRights", obj)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() view returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getContentTypesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContract(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getContract", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContractRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getContractRights", obj)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() view returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContractsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getContractsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() view returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetLibrariesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getLibrariesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetLibrary(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getLibrary", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetLibraryRights(opts *bind.CallOpts, lib common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getLibraryRights", lib)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) view returns(bytes)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getMeta", key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "hasAccess", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "hasEditorRight", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) HasManagerAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "hasManagerAccess", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "indexCategory")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "isAdmin", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() view returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) Libraries(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "libraries")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() view returns(string)
func (_BaseAccessWallet *BaseAccessWalletCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "objectHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() view returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "objectTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Others is a free data retrieval call binding the contract method 0x51a7fc87.
//
// Solidity: function others() view returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) Others(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "others")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "parentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() view returns(string)
func (_BaseAccessWallet *BaseAccessWalletCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "pendingHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "requiresReview")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "validType", content_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ValidateTimestamp(opts *bind.CallOpts, _ts *big.Int) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "validateTimestamp", _ts)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ValidateTransaction(opts *bind.CallOpts, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "validateTransaction", _v, _r, _s, _dest, _value, _ts)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) view returns(string)
func (_BaseAccessWallet *BaseAccessWalletCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "versionHashes", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) view returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "versionTimestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "visibility")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "whitelistedType", content_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) payable returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpAccessGroups(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpAccessGroups")
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpAll")
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpContentObjects(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpContentObjects")
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpContentTypes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpContentTypes")
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpLibraries(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpLibraries")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "clearPending")
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "commit", _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() payable returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "confirmCommit")
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "deleteVersion", _versionHash)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) Execute(opts *bind.TransactOpts, _guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "execute", _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "kill")
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "publish", contentObj)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "putMeta", key, value)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "removeContentType", content_type)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetAccessGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setAccessGroupRights", group, access_type, access)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetAccessRights(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setAccessRights")
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContentObjectRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContentObjectRights", obj, access_type, access)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContentSpace(opts *bind.TransactOpts, content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContentSpace", content_space)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContentTypeRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContentTypeRights", obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContractRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContractRights", obj, access_type, access)
}

// SetEntityRights is a paid mutator transaction binding the contract method 0x5d7cf830.
//
// Solidity: function setEntityRights(uint8 indexType, address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetEntityRights(opts *bind.TransactOpts, indexType uint8, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setEntityRights", indexType, obj, access_type, access)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetLibraryRights(opts *bind.TransactOpts, lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setLibraryRights", lib, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setVisibility", _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "transferOwnership", newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "updateRequest")
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.RawTransact(opts, calldata)
}

// BaseAccessWalletAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseAccessWallet contract.
type BaseAccessWalletAccessRequestV3Iterator struct {
	Event *BaseAccessWalletAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletAccessRequestV3 represents a AccessRequestV3 event raised by the BaseAccessWallet contract.
type BaseAccessWalletAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseAccessWalletAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletAccessRequestV3Iterator{contract: _BaseAccessWallet.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletAccessRequestV3)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseAccessRequestV3(log types.Log) (*BaseAccessWalletAccessRequestV3, error) {
	event := new(BaseAccessWalletAccessRequestV3)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseAccessWallet contract.
type BaseAccessWalletCommitPendingIterator struct {
	Event *BaseAccessWalletCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletCommitPending represents a CommitPending event raised by the BaseAccessWallet contract.
type BaseAccessWalletCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseAccessWalletCommitPendingIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletCommitPendingIterator{contract: _BaseAccessWallet.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletCommitPending)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseCommitPending(log types.Log) (*BaseAccessWalletCommitPending, error) {
	event := new(BaseAccessWalletCommitPending)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeAddedIterator struct {
	Event *BaseAccessWalletContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletContentTypeAdded represents a ContentTypeAdded event raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*BaseAccessWalletContentTypeAddedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletContentTypeAddedIterator{contract: _BaseAccessWallet.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletContentTypeAdded)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseContentTypeAdded(log types.Log) (*BaseAccessWalletContentTypeAdded, error) {
	event := new(BaseAccessWalletContentTypeAdded)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeRemovedIterator struct {
	Event *BaseAccessWalletContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletContentTypeRemoved represents a ContentTypeRemoved event raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*BaseAccessWalletContentTypeRemovedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletContentTypeRemovedIterator{contract: _BaseAccessWallet.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletContentTypeRemoved)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseContentTypeRemoved(log types.Log) (*BaseAccessWalletContentTypeRemoved, error) {
	event := new(BaseAccessWalletContentTypeRemoved)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletExecStatusIterator is returned from FilterExecStatus and is used to iterate over the raw logs and unpacked data for ExecStatus events raised by the BaseAccessWallet contract.
type BaseAccessWalletExecStatusIterator struct {
	Event *BaseAccessWalletExecStatus // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletExecStatusIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletExecStatus)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletExecStatus)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletExecStatusIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletExecStatusIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletExecStatus represents a ExecStatus event raised by the BaseAccessWallet contract.
type BaseAccessWalletExecStatus struct {
	Guarantor common.Address
	Code      *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterExecStatus is a free log retrieval operation binding the contract event 0x583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefad.
//
// Solidity: event ExecStatus(address guarantor, int256 code)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterExecStatus(opts *bind.FilterOpts) (*BaseAccessWalletExecStatusIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "ExecStatus")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletExecStatusIterator{contract: _BaseAccessWallet.contract, event: "ExecStatus", logs: logs, sub: sub}, nil
}

// WatchExecStatus is a free log subscription operation binding the contract event 0x583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefad.
//
// Solidity: event ExecStatus(address guarantor, int256 code)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchExecStatus(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletExecStatus) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "ExecStatus")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletExecStatus)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "ExecStatus", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecStatus is a log parse operation binding the contract event 0x583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefad.
//
// Solidity: event ExecStatus(address guarantor, int256 code)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseExecStatus(log types.Log) (*BaseAccessWalletExecStatus, error) {
	event := new(BaseAccessWalletExecStatus)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "ExecStatus", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseAccessWallet contract.
type BaseAccessWalletObjectMetaChangedIterator struct {
	Event *BaseAccessWalletObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseAccessWallet contract.
type BaseAccessWalletObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseAccessWalletObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletObjectMetaChangedIterator{contract: _BaseAccessWallet.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletObjectMetaChanged)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseObjectMetaChanged(log types.Log) (*BaseAccessWalletObjectMetaChanged, error) {
	event := new(BaseAccessWalletObjectMetaChanged)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletRightsChangedIterator is returned from FilterRightsChanged and is used to iterate over the raw logs and unpacked data for RightsChanged events raised by the BaseAccessWallet contract.
type BaseAccessWalletRightsChangedIterator struct {
	Event *BaseAccessWalletRightsChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletRightsChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletRightsChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletRightsChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletRightsChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletRightsChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletRightsChanged represents a RightsChanged event raised by the BaseAccessWallet contract.
type BaseAccessWalletRightsChanged struct {
	Principal common.Address
	Entity    common.Address
	Aggregate uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRightsChanged is a free log retrieval operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterRightsChanged(opts *bind.FilterOpts) (*BaseAccessWalletRightsChangedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletRightsChangedIterator{contract: _BaseAccessWallet.contract, event: "RightsChanged", logs: logs, sub: sub}, nil
}

// WatchRightsChanged is a free log subscription operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchRightsChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletRightsChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletRightsChanged)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "RightsChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRightsChanged is a log parse operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseRightsChanged(log types.Log) (*BaseAccessWalletRightsChanged, error) {
	event := new(BaseAccessWalletRightsChanged)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "RightsChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseAccessWallet contract.
type BaseAccessWalletUpdateRequestIterator struct {
	Event *BaseAccessWalletUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletUpdateRequest represents a UpdateRequest event raised by the BaseAccessWallet contract.
type BaseAccessWalletUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseAccessWalletUpdateRequestIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletUpdateRequestIterator{contract: _BaseAccessWallet.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletUpdateRequest)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseUpdateRequest(log types.Log) (*BaseAccessWalletUpdateRequest, error) {
	event := new(BaseAccessWalletUpdateRequest)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionConfirmIterator struct {
	Event *BaseAccessWalletVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletVersionConfirm represents a VersionConfirm event raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseAccessWalletVersionConfirmIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletVersionConfirmIterator{contract: _BaseAccessWallet.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletVersionConfirm)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseVersionConfirm(log types.Log) (*BaseAccessWalletVersionConfirm, error) {
	event := new(BaseAccessWalletVersionConfirm)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionDeleteIterator struct {
	Event *BaseAccessWalletVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletVersionDelete represents a VersionDelete event raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseAccessWalletVersionDeleteIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletVersionDeleteIterator{contract: _BaseAccessWallet.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletVersionDelete)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseVersionDelete(log types.Log) (*BaseAccessWalletVersionDelete, error) {
	event := new(BaseAccessWalletVersionDelete)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseAccessWallet contract.
type BaseAccessWalletVisibilityChangedIterator struct {
	Event *BaseAccessWalletVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletVisibilityChanged represents a VisibilityChanged event raised by the BaseAccessWallet contract.
type BaseAccessWalletVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseAccessWalletVisibilityChangedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletVisibilityChangedIterator{contract: _BaseAccessWallet.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletVisibilityChanged)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseVisibilityChanged(log types.Log) (*BaseAccessWalletVisibilityChanged, error) {
	event := new(BaseAccessWalletVisibilityChanged)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletFactoryMetaData contains all meta data concerning the BaseAccessWalletFactory contract.
var BaseAccessWalletFactoryMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createAccessWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_spaceAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
	Sigs: map[string]string{
		"af570c04": "contentSpace()",
		"7708bc41": "createAccessWallet()",
		"02d05d3f": "creator()",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
	},
	Bin: "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f4273416363576c74466163746f727932303139303530363135343230304d4c0060055534801561007c57600080fd5b50604051602080615a2c8339810180604052602081101561009c57600080fd5b505160028054600160a060020a031990811632179091556003805482163317905560048054600160a060020a0390931692909116919091179055615947806100e56000396000f3fe6080604052600436106100865760003560e01c80636d2e4b1b116100595780636d2e4b1b1461010a5780637708bc411461013d5780638da5cb5b14610152578063af570c0414610167578063f2fde38b1461017c57610086565b806302d05d3f1461008857806341c0e1b5146100b957806354fd4d50146100ce5780635f4fcae1146100f5575b005b34801561009457600080fd5b5061009d6101af565b60408051600160a060020a039092168252519081900360200190f35b3480156100c557600080fd5b506100866101be565b3480156100da57600080fd5b506100e36101e3565b60408051918252519081900360200190f35b34801561010157600080fd5b506100e36101e9565b34801561011657600080fd5b506100866004803603602081101561012d57600080fd5b5035600160a060020a03166101ef565b34801561014957600080fd5b5061009d61024a565b34801561015e57600080fd5b5061009d610323565b34801561017357600080fd5b5061009d610332565b34801561018857600080fd5b506100866004803603602081101561019f57600080fd5b5035600160a060020a0316610341565b600254600160a060020a031681565b600354600160a060020a031633146101d557600080fd5b600354600160a060020a0316ff5b60055481565b60015481565b600254600160a060020a0316331461020657600080fd5b600160a060020a038116151561021b57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600454600090600160a060020a0316331461026457600080fd5b6000336040516102739061039c565b600160a060020a03909116815260405190819003602001906000f0801580156102a0573d6000803e3d6000fd5b50604080517ff2fde38b0000000000000000000000000000000000000000000000000000000081523260048201529051919250600160a060020a0383169163f2fde38b9160248082019260009290919082900301818387803b15801561030557600080fd5b505af1158015610319573d6000803e3d6000fd5b5092935050505090565b600354600160a060020a031681565b600454600160a060020a031681565b600354600160a060020a0316331461035857600080fd5b600160a060020a038116151561036d57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b615572806103aa8339019056fe7f4f776e61626c653230323030393238313130303030504f00000000000000000060009081557f332e30000000000000000000000000000000000000000000000000000000000060019081557f41636365737369626c653230323030363236313231363030504f0000000000006007556008805460ff19908116831761ff00199081169092557f4564697461626c653230323030393238313130303030504f00000000000000006009557f436f6e7461696e657232303230303331363133353330304d4c000000000000006010556013939093557f416363657373496e6465786f723230323030393238313130303030504f000000601555601680549093168217166102001762ff00001916620300001763ff000000191663040000001764ff0000000019166405000000001790915560e06040526080908152600a60a052606460c052620001539060179060036200023e565b507f427341636365737357616c6c65743230323030393238313130303030504f000060315560405160208062005572833981018060405260208110156200019957600080fd5b505160028054600160a060020a03199081163217909155600380548216331790556016546018805460ff1990811660ff62010000850481169190911790925560208054821661010085048416179055601c805482168385161790556024805482166301000000850484161790556028805490911664010000000090930490911691909117905560048054600160a060020a0390931692909116919091179055620002fc565b600183019183908215620002c65791602002820160005b838211156200029557835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000255565b8015620002c45782816101000a81549060ff021916905560010160208160000104928301926001030262000295565b505b50620002d4929150620002d8565b5090565b620002f991905b80821115620002d457805460ff19168155600101620002df565b90565b615266806200030c6000396000f3fe6080604052600436106106fe5760003560e01c806369881c0c11610390578063a864dfa5116101dc578063d1aeb6511161010d578063ef1d7dc2116100ab578063fb52222c1161007a578063fb52222c14611b2e578063fccc134f14611b61578063fd08919614611b76578063fe538c5a14611ba9576106fe565b8063ef1d7dc214611a78578063f17bda9114611a8d578063f2fde38b14611ad1578063f50b2efe14611b04576106fe565b8063e1a70717116100e7578063e1a7071714611861578063e542b7cb14611914578063eb23b7aa14611a4e578063ebe9314e14611a63576106fe565b8063d1aeb65114610903578063d30f8cd014611837578063e02dd9c21461184c576106fe565b8063c287e0ed1161017a578063c9e8e72d11610154578063c9e8e72d1461179b578063cb86806d146117ce578063cf8a7503146117e3578063d15d62a71461180d576106fe565b8063c287e0ed1461175c578063c4b1978d14611771578063c65bcbe214611786576106fe565b8063aa3f6952116101b6578063aa3f695214611655578063ac55c9061461167f578063af570c0414611732578063b8ff1dba14611747576106fe565b8063a864dfa5146115d7578063a980892d14611613578063aa024e8b14611628576106fe565b80638635adb5116102c157806397ac4fd21161025f5780639cb121ba1161022e5780639cb121ba146115165780639f46133e14611549578063a00b38c41461155e578063a4081d62146115a4576106fe565b806397ac4fd2146114245780639867db7414611439578063991a3a7c146114ec5780639b55f9011461083d576106fe565b80639476c4781161029b5780639476c478146113c757806395a078e8146113dc57806395ba60ba1461140f57806396eba03d1461132f576106fe565b80638635adb5146113595780638da5cb5b1461139d57806392297d7b146113b2576106fe565b80637886f7471161032e5780637fb52f1a116103085780637fb52f1a146112d457806381beeb641461131a5780638232f3f11461132f57806385e0a20014611344576106fe565b80637886f7471461123c5780637ca8f618146112665780637cbb7bf214611290576106fe565b80636e3754271161036a5780636e375427146111765780636ebc8c861461118b578063763d5ee6146111b55780637709bc7814611209576106fe565b806369881c0c146110fb5780636c0f79b61461112e5780636d2e4b1b14611143576106fe565b80632d474cbd1161054f578063508ad278116104805780635f6a13011161041e5780636380501f116103ed5780636380501f1461106257806367e5c3bf146110775780636813b6d1146110aa57806368a0469a146110e6576106fe565b80635f6a130114610f725780635faecb7614610f87578063628449fd14610fc35780636373a4111461104d576106fe565b80635c1d30591161045a5780635c1d305914610efc5780635d7cf83014610f115780635d97b6c2146109935780635f4fcae114610f5d576106fe565b8063508ad27814610e7657806351a7fc8714610ed257806354fd4d5014610ee7576106fe565b80633dd71d99116104ed57806341c0e1b5116104c757806341c0e1b514610e2657806342e7ba7b14610e3b578063446e882614610e6e578063479a0c5114610903576106fe565b80633dd71d9914610db85780633def514014610dcd57806340b87a2614610e11576106fe565b806330e669491161052957806330e6694914610d4757806332eaf21b14610d79578063331b86c014610d8e578063375a6e7c14610da3576106fe565b80632d474cbd14610caa5780632fa5c84214610cd4578063304f4a7b14610d14576106fe565b806314cfabb3116106345780631f2caaec116105d257806329adec14116105a157806329adec1414610bfc57806329d0021914610c1157806329dedde514610c445780632cf9942214610c77576106fe565b80631f2caaec14610b17578063224dcba014610b4157806322e564eb14610b8557806324d7806c14610bc9576106fe565b8063186897331161060e57806318689733146109935780631bf7a912146109a85780631cdbee5a14610acf5780631e2ff94f14610b02576106fe565b806314cfabb31461092d57806315c0bac11461094257806316aed2321461097e576106fe565b8063091600e6116106a15780630f58a7861161067b5780630f58a786146108845780630fe1b5a2146108bf578063100508a21461090357806312915a3014610918576106fe565b8063091600e6146108135780630dc10d3f146108285780630eaec2c51461083d576106fe565b806304f55daf116106dd57806304f55daf1461076d578063055af48f1461078257806307a08237146107b557806308d865d7146107ca576106fe565b8062821de31461070057806302d05d3f14610731578063048bd52914610746575b005b34801561070c57600080fd5b50610715611be5565b60408051600160a060020a039092168252519081900360200190f35b34801561073d57600080fd5b50610715611bf5565b34801561075257600080fd5b5061075b611c04565b60408051918252519081900360200190f35b34801561077957600080fd5b5061075b611c15565b34801561078e57600080fd5b506106fe600480360360208110156107a557600080fd5b5035600160a060020a0316611c1a565b3480156107c157600080fd5b5061075b611c53565b3480156107d657600080fd5b506107fd600480360360208110156107ed57600080fd5b5035600160a060020a0316611c58565b6040805160ff9092168252519081900360200190f35b34801561081f57600080fd5b506107fd611c7a565b34801561083457600080fd5b5061075b611c83565b34801561084957600080fd5b506108706004803603602081101561086057600080fd5b5035600160a060020a0316611c89565b604080519115158252519081900360200190f35b34801561089057600080fd5b506106fe600480360360408110156108a757600080fd5b50600160a060020a0381358116916020013516611cb8565b3480156108cb57600080fd5b506106fe600480360360608110156108e257600080fd5b50600160a060020a038135169060ff60208201358116916040013516611e16565b34801561090f57600080fd5b506107fd611c15565b34801561092457600080fd5b506107fd611ef8565b34801561093957600080fd5b50610870611f06565b34801561094e57600080fd5b506108706004803603604081101561096557600080fd5b508035600160a060020a0316906020013560ff16611fa3565b34801561098a57600080fd5b506107fd611fc3565b34801561099f57600080fd5b506107fd611fd2565b610870600480360360408110156109be57600080fd5b8101906020810181356401000000008111156109d957600080fd5b8201836020820111156109eb57600080fd5b80359060200191846020830284011164010000000083111715610a0d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050640100000000811115610a5d57600080fd5b820183602082011115610a6f57600080fd5b80359060200191846020830284011164010000000083111715610a9157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611fd7945050505050565b348015610adb57600080fd5b5061071560048036036020811015610af257600080fd5b5035600160a060020a031661207a565b348015610b0e57600080fd5b5061075b612095565b348015610b2357600080fd5b5061071560048036036020811015610b3a57600080fd5b503561209b565b348015610b4d57600080fd5b506106fe60048036036060811015610b6457600080fd5b50600160a060020a038135169060ff6020820135811691604001351661227c565b348015610b9157600080fd5b506106fe60048036036060811015610ba857600080fd5b50600160a060020a038135169060ff6020820135811691604001351661228e565b348015610bd557600080fd5b5061087060048036036020811015610bec57600080fd5b5035600160a060020a0316612752565b348015610c0857600080fd5b506107fd61277b565b348015610c1d57600080fd5b5061087060048036036020811015610c3457600080fd5b5035600160a060020a0316612784565b348015610c5057600080fd5b5061087060048036036020811015610c6757600080fd5b5035600160a060020a031661278a565b348015610c8357600080fd5b5061087060048036036020811015610c9a57600080fd5b5035600160a060020a03166127a8565b348015610cb657600080fd5b5061071560048036036020811015610ccd57600080fd5b50356128c4565b348015610ce057600080fd5b50610ce96128f1565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b348015610d2057600080fd5b506107fd60048036036020811015610d3757600080fd5b5035600160a060020a031661293c565b348015610d5357600080fd5b50610d5c61295a565b6040805160ff909316835260208301919091528051918290030190f35b348015610d8557600080fd5b50610715612969565b348015610d9a57600080fd5b5061075b612978565b348015610daf57600080fd5b5061087061297e565b348015610dc457600080fd5b50610870612987565b348015610dd957600080fd5b506106fe60048036036060811015610df057600080fd5b50600160a060020a038135169060ff6020820135811691604001351661298c565b348015610e1d57600080fd5b5061075b612999565b348015610e3257600080fd5b506106fe61299f565b348015610e4757600080fd5b5061087060048036036020811015610e5e57600080fd5b5035600160a060020a03166129c4565b6108706129d8565b348015610e8257600080fd5b50610870600480360360e0811015610e9957600080fd5b50600160a060020a03813581169160ff602082013516916040820135916060810135916080820135169060a08101359060c00135612bdc565b348015610ede57600080fd5b50610d5c612eb6565b348015610ef357600080fd5b5061075b612ec5565b348015610f0857600080fd5b5061075b612ecb565b348015610f1d57600080fd5b506106fe60048036036080811015610f3457600080fd5b5060ff8135811691600160a060020a036020820135169160408201358116916060013516612ed1565b348015610f6957600080fd5b5061075b612eee565b348015610f7e57600080fd5b506106fe612ef4565b348015610f9357600080fd5b5061087060048036036040811015610faa57600080fd5b508035600160a060020a0316906020013560ff16612f32565b348015610fcf57600080fd5b50610fd8612f46565b6040805160208082528351818301528351919283929083019185019080838360005b83811015611012578181015183820152602001610ffa565b50505050905090810190601f16801561103f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561105957600080fd5b506107fd612fd4565b34801561106e57600080fd5b506107fd612fe5565b34801561108357600080fd5b506108706004803603602081101561109a57600080fd5b5035600160a060020a0316612ff3565b3480156110b657600080fd5b50610870600480360360408110156110cd57600080fd5b508035600160a060020a0316906020013560ff1661318a565b3480156110f257600080fd5b506107fd6131a4565b34801561110757600080fd5b506107fd6004803603602081101561111e57600080fd5b5035600160a060020a03166131b4565b34801561113a57600080fd5b50610d5c6131d2565b34801561114f57600080fd5b506106fe6004803603602081101561116657600080fd5b5035600160a060020a03166131e1565b34801561118257600080fd5b5061087061322f565b34801561119757600080fd5b50610715600480360360208110156111ae57600080fd5b5035613240565b3480156111c157600080fd5b50610870600480360360c08110156111d857600080fd5b5060ff81351690602081013590604081013590600160a060020a036060820135169060808101359060a00135613252565b34801561121557600080fd5b506108706004803603602081101561122c57600080fd5b5035600160a060020a031661333b565b34801561124857600080fd5b5061075b6004803603602081101561125f57600080fd5b5035613343565b34801561127257600080fd5b50610fd86004803603602081101561128957600080fd5b5035613362565b34801561129c57600080fd5b506106fe600480360360608110156112b357600080fd5b50600160a060020a038135169060ff602082013581169160400135166133d6565b3480156112e057600080fd5b50610870600480360360608110156112f757600080fd5b5060ff8135811691600160a060020a0360208201351691604090910135166133e3565b34801561132657600080fd5b506108706136b8565b34801561133b57600080fd5b506107fd6136c3565b34801561135057600080fd5b5061075b6136c8565b34801561136557600080fd5b506106fe6004803603606081101561137c57600080fd5b50600160a060020a038135169060ff602082013581169160400135166136d4565b3480156113a957600080fd5b506107156136ee565b3480156113be57600080fd5b5061075b6136fd565b3480156113d357600080fd5b5061075b611fd2565b3480156113e857600080fd5b50610870600480360360208110156113ff57600080fd5b5035600160a060020a0316613709565b34801561141b57600080fd5b5061075b6136c3565b34801561143057600080fd5b506107fd613863565b34801561144557600080fd5b506106fe6004803603602081101561145c57600080fd5b81019060208101813564010000000081111561147757600080fd5b82018360208201111561148957600080fd5b803590602001918460018302840111640100000000831117156114ab57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613868945050505050565b3480156114f857600080fd5b506107156004803603602081101561150f57600080fd5b5035613995565b34801561152257600080fd5b506108706004803603602081101561153957600080fd5b5035600160a060020a03166139bd565b34801561155557600080fd5b50610d5c613a14565b34801561156a57600080fd5b506108706004803603606081101561158157600080fd5b5060ff8135811691600160a060020a036020820135169160409091013516613a23565b3480156115b057600080fd5b506107fd600480360360208110156115c757600080fd5b5035600160a060020a0316613a52565b3480156115e357600080fd5b50610870600480360360408110156115fa57600080fd5b508035600160a060020a0316906020013560ff16613a70565b34801561161f57600080fd5b50610d5c613a8c565b34801561163457600080fd5b506106fe6004803603602081101561164b57600080fd5b503560ff16613a9b565b34801561166157600080fd5b506107156004803603602081101561167857600080fd5b5035613b15565b34801561168b57600080fd5b50610fd8600480360360208110156116a257600080fd5b8101906020810181356401000000008111156116bd57600080fd5b8201836020820111156116cf57600080fd5b803590602001918460018302840111640100000000831117156116f157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613b27945050505050565b34801561173e57600080fd5b50610715613cd0565b34801561175357600080fd5b506106fe613cdf565b34801561176857600080fd5b506106fe613dd8565b34801561177d57600080fd5b50610d5c613e9a565b34801561179257600080fd5b5061075b613ea9565b3480156117a757600080fd5b506106fe600480360360208110156117be57600080fd5b5035600160a060020a0316613eaf565b3480156117da57600080fd5b5061075b613ee8565b3480156117ef57600080fd5b506107156004803603602081101561180657600080fd5b5035613eee565b34801561181957600080fd5b506107156004803603602081101561183057600080fd5b5035613f00565b34801561184357600080fd5b5061075b613f12565b34801561185857600080fd5b50610fd8613f1e565b34801561186d57600080fd5b5061075b6004803603602081101561188457600080fd5b81019060208101813564010000000081111561189f57600080fd5b8201836020820111156118b157600080fd5b803590602001918460018302840111640100000000831117156118d357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613f79945050505050565b34801561192057600080fd5b506106fe6004803603604081101561193757600080fd5b81019060208101813564010000000081111561195257600080fd5b82018360208201111561196457600080fd5b8035906020019184600183028401116401000000008311171561198657600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156119d957600080fd5b8201836020820111156119eb57600080fd5b80359060200191846001830284011164010000000083111715611a0d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506143ea945050505050565b348015611a5a57600080fd5b5061075b6145e1565b348015611a6f57600080fd5b5061075b6145e6565b348015611a8457600080fd5b506107fd6145ec565b348015611a9957600080fd5b506106fe60048036036060811015611ab057600080fd5b50600160a060020a038135169060ff602082013581169160400135166145f1565b348015611add57600080fd5b506106fe60048036036020811015611af457600080fd5b5035600160a060020a03166145fe565b348015611b1057600080fd5b5061087060048036036020811015611b2757600080fd5b503561464c565b348015611b3a57600080fd5b506107fd60048036036020811015611b5157600080fd5b5035600160a060020a0316614660565b348015611b6d57600080fd5b5061075b61467e565b348015611b8257600080fd5b5061087060048036036020811015611b9957600080fd5b5035600160a060020a0316614684565b348015611bb557600080fd5b5061087060048036036040811015611bcc57600080fd5b508035600160a060020a0316906020013560ff1661480c565b600454600160a060020a03165b90565b600254600160a060020a031681565b6000611c10601c614827565b905090565b600181565b600354600160a060020a03163314611c3157600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b600481565b600160a060020a03811660009081526029602052604090205460ff165b919050565b60165460ff1681565b60235490565b600354600090600160a060020a0383811691161480611cb25750600354600160a060020a031633145b92915050565b600354600160a060020a03163314611ccf57600080fd5b600160a060020a0382811660009081526014602052604090205416158015611cfd5750611cfb826139bd565b155b15611da9576012546013541015611d5357816012601354815481101515611d2057fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550611d9f565b601280546001810182556000919091527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444018054600160a060020a031916600160a060020a0384161790555b6013805460010190555b600160a060020a038281166000818152601460209081526040918290208054600160a060020a0319169486169485179055815192835282019290925281517f280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7929181900390910190a15050565b611e1e6136b8565b1515611e2957600080fd5b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd91602480820192602092909190829003018186803b158015611e9857600080fd5b505afa158015611eac573d6000803e3d6000fd5b505050506040513d6020811015611ec257600080fd5b50519050600160a060020a0381161515611ee657611ee185858561228e565b611ef1565b611ef181858561228e565b5050505050565b601654610100900460ff1681565b60048054604080517f26683e14000000000000000000000000000000000000000000000000000000008152339381019390935251600092600160a060020a039092169182916326683e1491602480820192602092909190829003018186803b158015611f7157600080fd5b505afa158015611f85573d6000803e3d6000fd5b505050506040513d6020811015611f9b57600080fd5b505191505090565b601654600090611fbc90610100900460ff1684846133e3565b9392505050565b60165462010000900460ff1681565b600281565b6000611fe233613709565b1515611fed57600080fd5b604080513060601b602080830191909152426034808401829052845180850390910181526054840180865281519190930120600090811c9092526074830182905260948301919091523360b48301526103e80260d482015290517f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c79181900360f40190a150600192915050565b601460205260009081526040902054600160a060020a031681565b60325481565b6000805b6012548110156122735760006012828154811015156120ba57fe5b600091825260208083209091015460408051808401899052815180820385018152818301808452815191909501207fe02dd9c2000000000000000000000000000000000000000000000000000000009094529051600160a060020a0390921694509192849263e02dd9c29260448083019392829003018186803b15801561214057600080fd5b505afa158015612154573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561217d57600080fd5b81019080805164010000000081111561219557600080fd5b820160208101848111156121a857600080fd5b81516401000000008111828201871017156121c257600080fd5b50509291905050506040516020018082805190602001908083835b602083106121fc5780518252601f1990920191602091820191016121dd565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120141561226a57601280548390811061224b57fe5b600091825260209091200154600160a060020a03169250611c75915050565b5060010161209f565b50600092915050565b6122896028848484614965565b505050565b600083905080600160a060020a031663091600e66040518163ffffffff1660e01b815260040160206040518083038186803b1580156122cc57600080fd5b505afa1580156122e0573d6000803e3d6000fd5b505050506040513d60208110156122f657600080fd5b5051600854610100900460ff9081169116141561239b57604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691633def514091606480830192600092919082900301818387803b15801561237e57600080fd5b505af1158015612392573d6000803e3d6000fd5b5050505061274c565b80600160a060020a03166312915a306040518163ffffffff1660e01b815260040160206040518083038186803b1580156123d457600080fd5b505afa1580156123e8573d6000803e3d6000fd5b505050506040513d60208110156123fe57600080fd5b5051600854610100900460ff9081169116141561248657604080517ff17bda9100000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163f17bda9191606480830192600092919082900301818387803b15801561237e57600080fd5b80600160a060020a03166316aed2326040518163ffffffff1660e01b815260040160206040518083038186803b1580156124bf57600080fd5b505afa1580156124d3573d6000803e3d6000fd5b505050506040513d60208110156124e957600080fd5b5051600854610100900460ff9081169116141561257157604080517f7cbb7bf200000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691637cbb7bf291606480830192600092919082900301818387803b15801561237e57600080fd5b80600160a060020a03166368a0469a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125aa57600080fd5b505afa1580156125be573d6000803e3d6000fd5b505050506040513d60208110156125d457600080fd5b5051600854610100900460ff9081169116141561265c57604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691638635adb591606480830192600092919082900301818387803b15801561237e57600080fd5b80600160a060020a0316636373a4116040518163ffffffff1660e01b815260040160206040518083038186803b15801561269557600080fd5b505afa1580156126a9573d6000803e3d6000fd5b505050506040513d60208110156126bf57600080fd5b5051600854610100900460ff9081169116141561274757604080517f224dcba000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163224dcba091606480830192600092919082900301818387803b15801561237e57600080fd5b600080fd5b50505050565b600354600090600160a060020a038381169116141561277357506001611c75565b506000919050565b60085460ff1681565b50600090565b60006013546000141561279f57506001611c75565b611cb2826139bd565b600033600160a060020a038316146127bf57600080fd5b600082905080600160a060020a0316638280dd8f60006040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561280b57600080fd5b505af115801561281f573d6000803e3d6000fd5b505050506040513d602081101561283557600080fd5b5050604080517f27c1c21d0000000000000000000000000000000000000000000000000000000081529051600160a060020a038316916327c1c21d916004808301926020929190829003018186803b15801561289057600080fd5b505afa1580156128a4573d6000803e3d6000fd5b505050506040513d60208110156128ba57600080fd5b5051159392505050565b6022805460009190839081106128d657fe5b600091825260209091200154600160a060020a031692915050565b60008060008060006129036018614827565b61290d6020614827565b612917601c614827565b6129216024614827565b61292b6028614827565b945094509450945094509091929394565b600160a060020a031660009081526021602052604090205460ff1690565b60205460235460ff9091169082565b601154600160a060020a031681565b600c5490565b600f5460ff1681565b600090565b612289601c848484614965565b600b5481565b600354600160a060020a031633146129b657600080fd5b600354600160a060020a0316ff5b600354600160a060020a0390811691161490565b60006129e2611f06565b15156129ed57600080fd5b600f5460ff1615156129fe57600080fd5b6000600a8054600181600116156101000203166002900490501115612aad57600c80546001818101808455600093909352600a8054612a74937fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70192600261010091831615919091026000190190911604615043565b5050600b54600d80546001810182556000919091527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501555b600e8054612ad091600a9160026000196101006001841615020190911604615043565b5042600b55604080516020810191829052600090819052612af391600e916150c8565b50600f805460ff191690556004547fbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df90600160a060020a0316612b34611be5565b60408051600160a060020a038085168252831660208201526060918101828152600a80546002600019610100600184161502019091160493830184905292608083019084908015612bc65780601f10612b9b57610100808354040283529160200191612bc6565b820191906000526020600020905b815481529060010190602001808311612ba957829003601f168201915b505094505050505060405180910390a150600190565b600454600090600160a060020a031633811480612c855750604080517fd6be0f490000000000000000000000000000000000000000000000000000000081523360048201529051600091600160a060020a0384169163d6be0f4991602480820192602092909190829003018186803b158015612c5757600080fd5b505afa158015612c6b573d6000803e3d6000fd5b505050506040513d6020811015612c8157600080fd5b5051115b1515612c9057600080fd5b600081600160a060020a031663d6be0f498b6040518263ffffffff1660e01b81526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015612ce857600080fd5b505afa158015612cfc573d6000803e3d6000fd5b505050506040513d6020811015612d1257600080fd5b505111612d1e57600080fd5b6032548311612d635760408051600160a060020a038b16815260016020820152815160008051602061521b833981519152929181900390910190a16000915050612eab565b3031841115612da85760408051600160a060020a038b16815260026020820152815160008051602061521b833981519152929181900390910190a16000915050612eab565b6000612db8898989898989613252565b9050801515612dfe5760408051600160a060020a038c16815260036020820152815160008051602061521b833981519152929181900390910190a1600092505050612eab565b6032849055604051600090600160a060020a0388169087156108fc0290889084818181858888f193505050509050801515612e715760408051600160a060020a038d16815260046020820152815160008051602061521b833981519152929181900390910190a160009350505050612eab565b60408051600160a060020a038d16815260006020820152815160008051602061521b833981519152929181900390910190a1600193505050505b979650505050505050565b602c54602f5460ff9091169082565b60315481565b60275490565b60ff84161561274c5761274c612ee685614c7c565b848484614965565b60015481565b612efc61322f565b1515612f0757600080fd5b604080516020810191829052600090819052612f2591600e916150c8565b50600f805460ff19169055565b601654600090611fbc9060ff1684846133e3565b600e805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015612fcc5780601f10612fa157610100808354040283529160200191612fcc565b820191906000526020600020905b815481529060010190602001808311612faf57829003601f168201915b505050505081565b601654640100000000900460ff1681565b600854610100900460ff1681565b600354600090600160a060020a038381169116148061301a5750600854606460ff90911610155b1561302757506001611c75565b600854600061010090910460ff1611156131825760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b1580156130a757600080fd5b505afa1580156130bb573d6000803e3d6000fd5b505050506040513d60208110156130d157600080fd5b5051600854604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526002604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561314d57600080fd5b505afa158015613161573d6000803e3d6000fd5b505050506040513d602081101561317757600080fd5b50519150611c759050565b506000611c75565b601654600090611fbc9062010000900460ff1684846133e3565b6016546301000000900460ff1681565b600160a060020a03166000908152601d602052604090205460ff1690565b602854602b5460ff9091169082565b600254600160a060020a031633146131f857600080fd5b600160a060020a038116151561320d57600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600354600160a060020a0316331490565b602a805460009190839081106128d657fe5b6040805130606090811b602080840191909152600160a060020a03871690911b6034830152604882018590526068808301859052835180840390910181526088830180855281519183019190912060009182905260a8840180865281905260ff8b1660c885015260e884018a905261010884018990529351909392849260019261012880840193601f198301929081900390910190855afa1580156132fb573d6000803e3d6000fd5b5050604051601f190151600354909250600160a060020a03808416911614905061332a57600092505050613331565b6001925050505b9695505050505050565b6000903b1190565b600d80548290811061335157fe5b600091825260209091200154905081565b600c80548290811061337057fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815293509091830182828015612fcc5780601f10612fa157610100808354040283529160200191612fcc565b6122896018848484614965565b600080839050600360009054906101000a9004600160a060020a0316600160a060020a031681600160a060020a0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561344157600080fd5b505afa158015613455573d6000803e3d6000fd5b505050506040513d602081101561346b57600080fd5b5051600160a060020a03161415613486576001915050611fbc565b6000613493868686613a23565b9050600181151514156134ab57600192505050611fbc565b60165460ff87811661010090920416146136ac57600080805b6023548110156136a85760228054829081106134dc57fe5b600091825260209091200154600160a060020a0316915081158015906135205750600160a060020a038216600090815260216020526040902054600160ff90911610155b156136a057819250600360009054906101000a9004600160a060020a0316600160a060020a031683600160a060020a0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561358057600080fd5b505afa158015613594573d6000803e3d6000fd5b505050506040513d60208110156135aa57600080fd5b5051600160a060020a031614806135df5750600160a060020a038216600090815260216020526040902054600a60ff90911610155b801561368d5750604080517fa00b38c400000000000000000000000000000000000000000000000000000000815260ff808c166004830152600160a060020a038b81166024840152908a16604483015291519185169163a00b38c491606480820192602092909190829003018186803b15801561365b57600080fd5b505afa15801561366f573d6000803e3d6000fd5b505050506040513d602081101561368557600080fd5b505115156001145b156136a057600195505050505050611fbc565b6001016134c4565b5050505b50600095945050505050565b6000611c1033612ff3565b600081565b6000611c106024614827565b60165461228990612ee6906301000000900460ff16614c7c565b600354600160a060020a031681565b6000611c106018614827565b600354600090600160a060020a03838116911614806137305750600854600a60ff90911610155b1561373d57506001611c75565b600854600061010090910460ff1611156131825760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b1580156137bd57600080fd5b505afa1580156137d1573d6000803e3d6000fd5b505050506040513d60208110156137e757600080fd5b5051600854604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561314d57600080fd5b600a81565b61387061322f565b151561387b57600080fd5b600f5460ff161561388b57600080fd5b805160801161389957600080fd5b80516138ac90600e9060208401906150c8565b50600f805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a03166138f0611be5565b60408051600160a060020a038085168252831660208201526060918101828152600e805460026000196101006001841615020190911604938301849052926080830190849080156139825780601f1061395757610100808354040283529160200191613982565b820191906000526020600020905b81548152906001019060200180831161396557829003601f168201915b505094505050505060405180910390a150565b60128054829081106139a357fe5b600091825260209091200154600160a060020a0316905081565b600080805b601354811015613a0d5783600160a060020a03166012828154811015156139e557fe5b600091825260209091200154600160a060020a03161415613a0557600191505b6001016139c2565b5092915050565b60245460275460ff9091169082565b600060ff841615613a4857613a41613a3a85614c7c565b8484614d19565b9050611fbc565b5060009392505050565b600160a060020a031660009081526025602052604090205460ff1690565b601654600090611fbc90640100000000900460ff1684846133e3565b601c54601f5460ff9091169082565b613aa36136b8565b1515613aae57600080fd5b6008805460ff191660ff838116919091179182905560045460408051600160a060020a039092168083526020830152929091168183015290517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b6026805460009190839081106128d657fe5b606060208251111515613bde5781518083015160008181526005602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529394939091830182828015613bd05780601f10613ba557610100808354040283529160200191613bd0565b820191906000526020600020905b815481529060010190602001808311613bb357829003601f168201915b505050505092505050611c75565b6006826040518082805190602001908083835b60208310613c105780518252601f199092019160209182019101613bf1565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f6002600183161590980290950116959095049283018290048202880182019052818752929450925050830182828015613cc45780601f10613c9957610100808354040283529160200191613cc4565b820191906000526020600020905b815481529060010190602001808311613ca757829003601f168201915b50505050509050919050565b600454600160a060020a031681565b336000818152601d602052604090205460ff16613cfa615136565b600a60ff8381169182068116808452606490920682900381168403829003811660408085018290526017546101009004831660020283166020808701829052600160a060020a0389166000908152601d9091529190912080549190940190910191821660ff1990911681179092559015801590613d78575060ff8316155b15613d8857613d88601c85614d6d565b60408051308152600160a060020a038616602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a150505050565b613de06136b8565b1515613deb57600080fd5b604080516020808252600a8054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b6593909291829182019084908015613e8a5780601f10613e5f57610100808354040283529160200191613e8a565b820191906000526020600020905b815481529060010190602001808311613e6d57829003601f168201915b50509250505060405180910390a1565b601854601b5460ff9091169082565b60135481565b600354600160a060020a03163314613ec657600080fd5b60118054600160a060020a031916600160a060020a0392909216919091179055565b601b5490565b601e805460009190839081106128d657fe5b601a805460009190839081106128d657fe5b6000611c106020614827565b600a805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015612fcc5780601f10612fa157610100808354040283529160200191612fcc565b6000613f8361322f565b1515613f8e57600080fd5b6000826040516020018082805190602001908083835b60208310613fc35780518252601f199092019160209182019101613fa4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012090506000600a60405160200180828054600181600116156101000203166002900480156140625780601f10614040576101008083540402835291820191614062565b820191906000526020600020905b81548152906001019060200180831161404e575b50509150506040516020818303038152906040528051906020012090508082141561423957600c5415156140b9576040805160208101918290526000908190526140ae91600a916150c8565b506000600b5561415d565b600080805b600c548110156141115781600d828154811015156140d857fe5b9060005260206000200154111561410957809250600d818154811015156140fb57fe5b906000526020600020015491505b6001016140be565b50600c80548390811061412057fe5b90600052602060002001600a908054600181600116156101000203166002900461414b929190615043565b50600b81905561415a82614e04565b50505b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168560006040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156141f25781810151838201526020016141da565b50505050905090810190601f16801561421f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600092505050611c75565b60001960005b600c54811015614302576000600c8281548110151561425a57fe5b9060005260206000200160405160200180828054600181600116156101000203166002900480156142c25780601f106142a05761010080835404028352918201916142c2565b820191906000526020600020905b8154815290600101906020018083116142ae575b5050915050604051602081830303815290604052805190602001209050808514156142f9576142f082614e04565b81925050614302565b5060010161423f565b5060001981141561431257600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a031686836040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156143a657818101518382015260200161438e565b50505050905090810190601f1680156143d35780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1949350505050565b6143f333612752565b15156143fe57600080fd5b815160201061445957815180830151600081815260056020526040812091929161442791615155565b6000835111156144525760008281526005602090815260409091208451614450928601906150c8565b505b5050614544565b6006826040518082805190602001908083835b6020831061448b5780518252601f19909201916020918201910161446c565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092206144c4925090506000615155565b60008151111561454457806006836040518082805190602001908083835b602083106145015780518252601f1990920191602091820191016144e2565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320845161454295919491909101925090506150c8565b505b7fe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c826040518080602001828103825283818151815260200191508051906020019080838360005b838110156145a357818101518382015260200161458b565b50505050905090810190601f1680156145d05780820380516001836020036101000a031916815260200191505b509250505060405180910390a15050565b600381565b601f5490565b606481565b6122896020848484614965565b600354600160a060020a0316331461461557600080fd5b600160a060020a038116151561462a57600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600060325482111561277357506001611c75565b600160a060020a031660009081526019602052604090205460ff1690565b602b5490565b600354600090600160a060020a0316331461469e57600080fd5b6013546000190160005b601354811015613a485783600160a060020a03166012828154811015156146cb57fe5b600091825260209091200154600160a060020a031614156148045760128054829081106146f457fe5b60009182526020909120018054600160a060020a031916905580821461479957601280548390811061472257fe5b60009182526020909120015460128054600160a060020a03909216918390811061474857fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055601280548390811061477f57fe5b60009182526020909120018054600160a060020a03191690555b6013829055600160a060020a0384166000818152601460209081526040918290208054600160a060020a0319169055815192835290517fd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e29281900390910190a1600192505050611c75565b6001016146a8565b601654600090611fbc906301000000900460ff1684846133e3565b600080805b8360030154811015613a0d57614866846002018281548110151561484c57fe5b600091825260209091200154600160a060020a031661333b565b151561495c576002840180548290811061487c57fe5b60009182526020909120018054600160a060020a031916905560038401546001929092019160001901811461494b578360020160018560030154038154811015156148c357fe5b600091825260209091200154600285018054600160a060020a0390921691839081106148eb57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555083600201600185600301540381548110151561493157fe5b60009182526020909120018054600160a060020a03191690555b600384018054600019019055614960565b6001015b61482c565b6000600133600160a060020a03861614614a1a57604080517f67e5c3bf00000000000000000000000000000000000000000000000000000000815233600482015290518691600160a060020a038316916367e5c3bf91602480820192602092909190829003018186803b1580156149db57600080fd5b505afa1580156149ef573d6000803e3d6000fd5b505050506040513d6020811015614a0557600080fd5b50519150614a12336129c4565b925050614a26565b614a23326129c4565b91505b600160a060020a038516600090815260018701602052604090205460ff16614a4c615136565b600a60ff838116918206811680845260649092068290038116602084018190528403919091038116604083015260009086908116158015614a9157508580614a915750845b15614a9b57600191505b60ff871615801590614aaa5750855b8015614acc575060018360ff8a1660038110614ac257fe5b602002015160ff16145b15614ad957506001905060025b60ff871615801590614ae85750845b8015614b0b575060028360ff8a1660038110614b0057fe5b602002015160ff1614155b15614b17575060019050805b60ff871615801590614b265750855b8015614b2f5750845b15614b3c57506001905060025b811515614b4857600080fd5b601760ff891660038110614b5857fe5b602081049091015460ff601f9092166101000a9004811682029084908a1660038110614b8057fe5b60ff9092166020929092020152600083600260200201518460016020020151856000602002015101019050808b60010160008c600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508060ff16600014158015614c00575060ff8516155b15614c0f57614c0f8b8b614d6d565b60ff81161515614c2557614c238b8b614f08565b505b60408051308152600160a060020a038c16602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a15050505050505050505050565b60165460009060ff83811691161415614c975750601c611c75565b60165460ff838116610100909204161415614cb457506020611c75565b60165460ff83811662010000909204161415614cd257506018611c75565b60165460ff838116640100000000909204161415614cf257506028611c75565b60165460ff8381166301000000909204161415614d1157506024611c75565b50602c919050565b600160a060020a038216600090815260018401602052604081205460ff90811690601790841660038110614d4957fe5b602081049091015460ff601f9092166101000a900481169116101590509392505050565b600282015460038301541015614dc65780826002018360030154815481101515614d9357fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550614df7565b60028201805460018101825560009182526020909120018054600160a060020a031916600160a060020a0383161790555b5060030180546001019055565b600c805482908110614e1257fe5b906000526020600020016000614e289190615155565b600d805482908110614e3657fe5b6000918252602082200155600c54600019018114614edc57600c80546000198101908110614e6057fe5b90600052602060002001600c82815481101515614e7957fe5b906000526020600020019080546001816001161561010002031660029004614ea2929190615043565b50600d80546000198101908110614eb557fe5b9060005260206000200154600d82815481101515614ecf57fe5b6000918252602090912001555b600c805490614eef906000198301615199565b50600d805490614f039060001983016151bd565b505b50565b6000805b8360030154811015613a485782600160a060020a03168460020182815481101515614f3357fe5b600091825260209091200154600160a060020a0316141561503b5760028401805482908110614f5e57fe5b60009182526020909120018054600160a060020a0319169055600384015460001901811461502657836002016001856003015403815481101515614f9e57fe5b600091825260209091200154600285018054600160a060020a039092169183908110614fc657fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555083600201600185600301540381548110151561500c57fe5b60009182526020909120018054600160a060020a03191690555b50506003820180546000190190556001611cb2565b600101614f0c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061507c57805485556150b8565b828001600101855582156150b857600052602060002091601f016020900482015b828111156150b857825482559160010191906001019061509d565b506150c49291506151dd565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061510957805160ff19168380011785556150b8565b828001600101855582156150b8579182015b828111156150b857825182559160200191906001019061511b565b6060604051908101604052806003906020820280388339509192915050565b50805460018160011615610100020316600290046000825580601f1061517b5750614f05565b601f016020900490600052602060002090810190614f0591906151dd565b815481835581811115612289576000838152602090206122899181019083016151f7565b815481835581811115612289576000838152602090206122899181019083015b611bf291905b808211156150c457600081556001016151e3565b611bf291905b808211156150c45760006152118282615155565b506001016151fd56fe583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefada165627a7a72305820a8ae37f0ec1f98caa9d095327fc80c83e67023d45bab2e27eb2415e470bfab6f0029a165627a7a72305820831a51b27cf5c1eefc341276c84a4b1f79ca1b25fb6af684577c36391dd4f50f0029",
}

// BaseAccessWalletFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseAccessWalletFactoryMetaData.ABI instead.
var BaseAccessWalletFactoryABI = BaseAccessWalletFactoryMetaData.ABI

// Deprecated: Use BaseAccessWalletFactoryMetaData.Sigs instead.
// BaseAccessWalletFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseAccessWalletFactoryFuncSigs = BaseAccessWalletFactoryMetaData.Sigs

// BaseAccessWalletFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseAccessWalletFactoryMetaData.Bin instead.
var BaseAccessWalletFactoryBin = BaseAccessWalletFactoryMetaData.Bin

// DeployBaseAccessWalletFactory deploys a new Ethereum contract, binding an instance of BaseAccessWalletFactory to it.
func DeployBaseAccessWalletFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _spaceAddr common.Address) (common.Address, *types.Transaction, *BaseAccessWalletFactory, error) {
	parsed, err := ParsedABI(K_BaseAccessWalletFactory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseAccessWalletFactoryBin), backend, _spaceAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseAccessWalletFactory{BaseAccessWalletFactoryCaller: BaseAccessWalletFactoryCaller{contract: contract}, BaseAccessWalletFactoryTransactor: BaseAccessWalletFactoryTransactor{contract: contract}, BaseAccessWalletFactoryFilterer: BaseAccessWalletFactoryFilterer{contract: contract}}, nil
}

// BaseAccessWalletFactory is an auto generated Go binding around an Ethereum contract.
type BaseAccessWalletFactory struct {
	BaseAccessWalletFactoryCaller     // Read-only binding to the contract
	BaseAccessWalletFactoryTransactor // Write-only binding to the contract
	BaseAccessWalletFactoryFilterer   // Log filterer for contract events
}

// BaseAccessWalletFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseAccessWalletFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseAccessWalletFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseAccessWalletFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseAccessWalletFactory creates a new instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactory(address common.Address, backend bind.ContractBackend) (*BaseAccessWalletFactory, error) {
	contract, err := bindBaseAccessWalletFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactory{BaseAccessWalletFactoryCaller: BaseAccessWalletFactoryCaller{contract: contract}, BaseAccessWalletFactoryTransactor: BaseAccessWalletFactoryTransactor{contract: contract}, BaseAccessWalletFactoryFilterer: BaseAccessWalletFactoryFilterer{contract: contract}}, nil
}

// NewBaseAccessWalletFactoryCaller creates a new read-only instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseAccessWalletFactoryCaller, error) {
	contract, err := bindBaseAccessWalletFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactoryCaller{contract: contract}, nil
}

// NewBaseAccessWalletFactoryTransactor creates a new write-only instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseAccessWalletFactoryTransactor, error) {
	contract, err := bindBaseAccessWalletFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactoryTransactor{contract: contract}, nil
}

// NewBaseAccessWalletFactoryFilterer creates a new log filterer instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseAccessWalletFactoryFilterer, error) {
	contract, err := bindBaseAccessWalletFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactoryFilterer{contract: contract}, nil
}

// bindBaseAccessWalletFactory binds a generic wrapper to an already deployed contract.
func bindBaseAccessWalletFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseAccessWalletFactory)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWalletFactory.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWalletFactory.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWalletFactory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseAccessWalletFactory.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseAccessWalletFactory.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) CreateAccessWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "createAccessWallet")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "kill")
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.RawTransact(opts, calldata)
}

// BaseContentMetaData contains all meta data concerning the BaseContent contract.
var BaseContentMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"request_ID\",\"type\":\"uint256\"},{\"name\":\"score_pct\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accessComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"name\":\"payee\",\"type\":\"address\"},{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"processRequestPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestMap\",\"outputs\":[{\"name\":\"originator\",\"type\":\"address\"},{\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"int8\"},{\"name\":\"settled\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"statusCode\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"getAccessInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessCompleteV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessCompleteInternal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status_code\",\"type\":\"int256\"}],\"name\":\"setStatusCode\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessCharge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"name\":\"accessor\",\"type\":\"address\"},{\"name\":\"request_timestamp\",\"type\":\"uint256\"}],\"name\":\"accessRequestContext\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accessor\",\"type\":\"address\"},{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"getAccessInfoV3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status_code\",\"type\":\"int256\"}],\"name\":\"updateStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"pkeRequestor\",\"type\":\"string\"},{\"name\":\"pkeAFGH\",\"type\":\"string\"},{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"prefix\",\"type\":\"bytes\"}],\"name\":\"getKMSInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestNonce\",\"type\":\"uint256\"},{\"name\":\"_contextHash\",\"type\":\"bytes32\"},{\"name\":\"_accessor\",\"type\":\"address\"},{\"name\":\"_request_timestamp\",\"type\":\"uint256\"}],\"name\":\"accessCompleteContext\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accessor\",\"type\":\"address\"},{\"name\":\"customValues\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"getCustomInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContentContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"charge\",\"type\":\"uint256\"}],\"name\":\"setAccessCharge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"},{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"containingLibrary\",\"type\":\"address\"}],\"name\":\"ContentObjectCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContractAddress\",\"type\":\"address\"}],\"name\":\"SetContentType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customValue\",\"type\":\"bytes32\"}],\"name\":\"AccessRequestValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stakeholder\",\"type\":\"address\"}],\"name\":\"AccessRequestStakeholder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"contentHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pkeRequestor\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pkeAFGH\",\"type\":\"string\"}],\"name\":\"AccessRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"scorePct\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customContractResult\",\"type\":\"bool\"}],\"name\":\"AccessComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customContractResult\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"request_timestamp\",\"type\":\"uint256\"}],\"name\":\"AccessCompleteV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentContractAddress\",\"type\":\"address\"}],\"name\":\"SetContentContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accessCharge\",\"type\":\"uint256\"}],\"name\":\"SetAccessCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accessCharge\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountProvided\",\"type\":\"uint256\"}],\"name\":\"InsufficientFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"statusCode\",\"type\":\"int256\"}],\"name\":\"SetStatusCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestStatus\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"statusCode\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"Publish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"97ac4fd2": "CAN_ACCESS()",
		"ef1d7dc2": "CAN_EDIT()",
		"100508a2": "CAN_SEE()",
		"64ade32b": "accessCharge()",
		"0593e335": "accessComplete(uint256,uint256,uint256)",
		"bc7dba33": "accessCompleteContext(uint256,bytes32,address,uint256)",
		"484f4b3b": "accessCompleteInternal(uint256,bytes32[],address[])",
		"45155f6e": "accessCompleteV3(uint256,bytes32[],address[])",
		"a1ff106e": "accessRequest(uint8,string,string,bytes32[],address[])",
		"78f52ffb": "accessRequestContext(uint256,bytes32,address,uint256)",
		"1bf7a912": "accessRequestV3(bytes32[],address[])",
		"32eaf21b": "addressKMS()",
		"6e375427": "canCommit()",
		"14cfabb3": "canConfirm()",
		"81beeb64": "canEdit()",
		"cbcd4461": "canPublish()",
		"5f6a1301": "clearPending()",
		"9867db74": "commit(string)",
		"375a6e7c": "commitPending()",
		"446e8826": "confirmCommit()",
		"2310167f": "contentContractAddress()",
		"af570c04": "contentSpace()",
		"36ebffca": "contentType()",
		"331b86c0": "countVersionHashes()",
		"02d05d3f": "creator()",
		"e1a70717": "deleteVersion(string)",
		"38d0f504": "getAccessInfo(uint8,bytes32[],address[])",
		"7ddc2c56": "getAccessInfoV3(address,bytes32[],address[])",
		"c26484a6": "getCustomInfo(address,bytes32[],address[])",
		"a8d4160e": "getKMSInfo(bytes)",
		"ac55c906": "getMeta(bytes)",
		"95a078e8": "hasAccess(address)",
		"67e5c3bf": "hasEditorRight(address)",
		"6380501f": "indexCategory()",
		"24d7806c": "isAdmin(address)",
		"41c0e1b5": "kill()",
		"b816f513": "libraryAddress()",
		"e02dd9c2": "objectHash()",
		"40b87a26": "objectTimestamp()",
		"8da5cb5b": "owner()",
		"00821de3": "parentAddress()",
		"628449fd": "pendingHash()",
		"0c6d3f93": "processRequestPayment(uint256,address,string,uint256)",
		"075d4782": "publish()",
		"e542b7cb": "putMeta(bytes,bytes)",
		"8f779201": "requestID()",
		"1a735f18": "requestMap(uint256)",
		"f4d9bae8": "setAccessCharge(uint256)",
		"c9e8e72d": "setAddressKMS(address)",
		"e5385303": "setContentContractAddress(address)",
		"22e564eb": "setGroupRights(address,uint8,uint8)",
		"0fe1b5a2": "setRights(address,uint8,uint8)",
		"5267db44": "setStatusCode(int256)",
		"aa024e8b": "setVisibility(uint8)",
		"27c1c21d": "statusCode()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"c287e0ed": "updateRequest()",
		"8280dd8f": "updateStatus(int256)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
		"7ca8f618": "versionHashes(uint256)",
		"7886f747": "versionTimestamp(uint256)",
		"29adec14": "visibility()",
	},
	Bin: "",
}

// BaseContentABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseContentMetaData.ABI instead.
var BaseContentABI = BaseContentMetaData.ABI

// Deprecated: Use BaseContentMetaData.Sigs instead.
// BaseContentFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentFuncSigs = BaseContentMetaData.Sigs

// BaseContentBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseContentMetaData.Bin instead.
var BaseContentBin = BaseContentMetaData.Bin

// DeployBaseContent deploys a new Ethereum contract, binding an instance of BaseContent to it.
func DeployBaseContent(auth *bind.TransactOpts, backend bind.ContractBackend, content_space common.Address, lib common.Address, content_type common.Address) (common.Address, *types.Transaction, *BaseContent, error) {
	parsed, err := ParsedABI(K_BaseContent)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseContentBin), backend, content_space, lib, content_type)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContent{BaseContentCaller: BaseContentCaller{contract: contract}, BaseContentTransactor: BaseContentTransactor{contract: contract}, BaseContentFilterer: BaseContentFilterer{contract: contract}}, nil
}

// BaseContent is an auto generated Go binding around an Ethereum contract.
type BaseContent struct {
	BaseContentCaller     // Read-only binding to the contract
	BaseContentTransactor // Write-only binding to the contract
	BaseContentFilterer   // Log filterer for contract events
}

// BaseContentCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseContent creates a new instance of BaseContent, bound to a specific deployed contract.
func NewBaseContent(address common.Address, backend bind.ContractBackend) (*BaseContent, error) {
	contract, err := bindBaseContent(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContent{BaseContentCaller: BaseContentCaller{contract: contract}, BaseContentTransactor: BaseContentTransactor{contract: contract}, BaseContentFilterer: BaseContentFilterer{contract: contract}}, nil
}

// NewBaseContentCaller creates a new read-only instance of BaseContent, bound to a specific deployed contract.
func NewBaseContentCaller(address common.Address, caller bind.ContractCaller) (*BaseContentCaller, error) {
	contract, err := bindBaseContent(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentCaller{contract: contract}, nil
}

// NewBaseContentTransactor creates a new write-only instance of BaseContent, bound to a specific deployed contract.
func NewBaseContentTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentTransactor, error) {
	contract, err := bindBaseContent(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentTransactor{contract: contract}, nil
}

// NewBaseContentFilterer creates a new log filterer instance of BaseContent, bound to a specific deployed contract.
func NewBaseContentFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentFilterer, error) {
	contract, err := bindBaseContent(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentFilterer{contract: contract}, nil
}

// bindBaseContent binds a generic wrapper to an already deployed contract.
func bindBaseContent(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseContent)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() view returns(uint8)
func (_BaseContent *BaseContentCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "CAN_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() view returns(uint8)
func (_BaseContent *BaseContentCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "CAN_EDIT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() view returns(uint8)
func (_BaseContent *BaseContentCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "CAN_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// AccessCharge is a free data retrieval call binding the contract method 0x64ade32b.
//
// Solidity: function accessCharge() view returns(uint256)
func (_BaseContent *BaseContentCaller) AccessCharge(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "accessCharge")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() view returns(address)
func (_BaseContent *BaseContentCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "addressKMS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() view returns(bool)
func (_BaseContent *BaseContentCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "canCommit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() view returns(bool)
func (_BaseContent *BaseContentCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "canConfirm")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() view returns(bool)
func (_BaseContent *BaseContentCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "canEdit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanPublish is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() view returns(bool)
func (_BaseContent *BaseContentCaller) CanPublish(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "canPublish")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() view returns(bool)
func (_BaseContent *BaseContentCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "commitPending")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentContractAddress is a free data retrieval call binding the contract method 0x2310167f.
//
// Solidity: function contentContractAddress() view returns(address)
func (_BaseContent *BaseContentCaller) ContentContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "contentContractAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseContent *BaseContentCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentType is a free data retrieval call binding the contract method 0x36ebffca.
//
// Solidity: function contentType() view returns(address)
func (_BaseContent *BaseContentCaller) ContentType(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "contentType")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() view returns(uint256)
func (_BaseContent *BaseContentCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "countVersionHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseContent *BaseContentCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAccessInfo is a free data retrieval call binding the contract method 0x38d0f504.
//
// Solidity: function getAccessInfo(uint8 , bytes32[] customValues, address[] stakeholders) view returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCaller) GetAccessInfo(opts *bind.CallOpts, arg0 uint8, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "getAccessInfo", arg0, customValues, stakeholders)

	if err != nil {
		return *new(uint8), *new(uint8), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetAccessInfoV3 is a free data retrieval call binding the contract method 0x7ddc2c56.
//
// Solidity: function getAccessInfoV3(address accessor, bytes32[] customValues, address[] stakeholders) view returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCaller) GetAccessInfoV3(opts *bind.CallOpts, accessor common.Address, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "getAccessInfoV3", accessor, customValues, stakeholders)

	if err != nil {
		return *new(uint8), *new(uint8), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetCustomInfo is a free data retrieval call binding the contract method 0xc26484a6.
//
// Solidity: function getCustomInfo(address accessor, bytes32[] customValues, address[] stakeholders) view returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCaller) GetCustomInfo(opts *bind.CallOpts, accessor common.Address, customValues [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "getCustomInfo", accessor, customValues, stakeholders)

	if err != nil {
		return *new(uint8), *new(uint8), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetKMSInfo is a free data retrieval call binding the contract method 0xa8d4160e.
//
// Solidity: function getKMSInfo(bytes prefix) view returns(string, string)
func (_BaseContent *BaseContentCaller) GetKMSInfo(opts *bind.CallOpts, prefix []byte) (string, string, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "getKMSInfo", prefix)

	if err != nil {
		return *new(string), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) view returns(bytes)
func (_BaseContent *BaseContentCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "getMeta", key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) view returns(bool)
func (_BaseContent *BaseContentCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "hasAccess", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) view returns(bool)
func (_BaseContent *BaseContentCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "hasEditorRight", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() view returns(uint8)
func (_BaseContent *BaseContentCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "indexCategory")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) view returns(bool)
func (_BaseContent *BaseContentCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "isAdmin", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// LibraryAddress is a free data retrieval call binding the contract method 0xb816f513.
//
// Solidity: function libraryAddress() view returns(address)
func (_BaseContent *BaseContentCaller) LibraryAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "libraryAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() view returns(string)
func (_BaseContent *BaseContentCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "objectHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() view returns(uint256)
func (_BaseContent *BaseContentCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "objectTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseContent *BaseContentCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_BaseContent *BaseContentCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "parentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() view returns(string)
func (_BaseContent *BaseContentCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "pendingHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RequestID is a free data retrieval call binding the contract method 0x8f779201.
//
// Solidity: function requestID() view returns(uint256)
func (_BaseContent *BaseContentCaller) RequestID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "requestID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequestMap is a free data retrieval call binding the contract method 0x1a735f18.
//
// Solidity: function requestMap(uint256 ) view returns(address originator, uint256 amountPaid, int8 status, uint256 settled)
func (_BaseContent *BaseContentCaller) RequestMap(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Originator common.Address
	AmountPaid *big.Int
	Status     int8
	Settled    *big.Int
}, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "requestMap", arg0)

	outstruct := new(struct {
		Originator common.Address
		AmountPaid *big.Int
		Status     int8
		Settled    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Originator = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.AmountPaid = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Status = *abi.ConvertType(out[2], new(int8)).(*int8)
	outstruct.Settled = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// StatusCode is a free data retrieval call binding the contract method 0x27c1c21d.
//
// Solidity: function statusCode() view returns(int256)
func (_BaseContent *BaseContentCaller) StatusCode(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "statusCode")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseContent *BaseContentCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_BaseContent *BaseContentCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) view returns(string)
func (_BaseContent *BaseContentCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "versionHashes", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) view returns(uint256)
func (_BaseContent *BaseContentCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "versionTimestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() view returns(uint8)
func (_BaseContent *BaseContentCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "visibility")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// AccessComplete is a paid mutator transaction binding the contract method 0x0593e335.
//
// Solidity: function accessComplete(uint256 request_ID, uint256 score_pct, uint256 ) payable returns(bool)
func (_BaseContent *BaseContentTransactor) AccessComplete(opts *bind.TransactOpts, request_ID *big.Int, score_pct *big.Int, arg2 *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessComplete", request_ID, score_pct, arg2)
}

// AccessCompleteContext is a paid mutator transaction binding the contract method 0xbc7dba33.
//
// Solidity: function accessCompleteContext(uint256 _requestNonce, bytes32 _contextHash, address _accessor, uint256 _request_timestamp) payable returns(bool)
func (_BaseContent *BaseContentTransactor) AccessCompleteContext(opts *bind.TransactOpts, _requestNonce *big.Int, _contextHash [32]byte, _accessor common.Address, _request_timestamp *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessCompleteContext", _requestNonce, _contextHash, _accessor, _request_timestamp)
}

// AccessCompleteInternal is a paid mutator transaction binding the contract method 0x484f4b3b.
//
// Solidity: function accessCompleteInternal(uint256 requestNonce, bytes32[] customValues, address[] stakeholders) payable returns(bool)
func (_BaseContent *BaseContentTransactor) AccessCompleteInternal(opts *bind.TransactOpts, requestNonce *big.Int, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessCompleteInternal", requestNonce, customValues, stakeholders)
}

// AccessCompleteV3 is a paid mutator transaction binding the contract method 0x45155f6e.
//
// Solidity: function accessCompleteV3(uint256 requestNonce, bytes32[] customValues, address[] stakeholders) payable returns(bool)
func (_BaseContent *BaseContentTransactor) AccessCompleteV3(opts *bind.TransactOpts, requestNonce *big.Int, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessCompleteV3", requestNonce, customValues, stakeholders)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xa1ff106e.
//
// Solidity: function accessRequest(uint8 , string pkeRequestor, string pkeAFGH, bytes32[] customValues, address[] stakeholders) payable returns(uint256)
func (_BaseContent *BaseContentTransactor) AccessRequest(opts *bind.TransactOpts, arg0 uint8, pkeRequestor string, pkeAFGH string, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessRequest", arg0, pkeRequestor, pkeAFGH, customValues, stakeholders)
}

// AccessRequestContext is a paid mutator transaction binding the contract method 0x78f52ffb.
//
// Solidity: function accessRequestContext(uint256 requestNonce, bytes32 contextHash, address accessor, uint256 request_timestamp) payable returns(uint256)
func (_BaseContent *BaseContentTransactor) AccessRequestContext(opts *bind.TransactOpts, requestNonce *big.Int, contextHash [32]byte, accessor common.Address, request_timestamp *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessRequestContext", requestNonce, contextHash, accessor, request_timestamp)
}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] customValues, address[] stakeholders) payable returns(bool)
func (_BaseContent *BaseContentTransactor) AccessRequestV3(opts *bind.TransactOpts, customValues [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessRequestV3", customValues, stakeholders)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContent *BaseContentTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "clearPending")
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContent *BaseContentTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "commit", _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() payable returns(bool)
func (_BaseContent *BaseContentTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "confirmCommit")
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContent *BaseContentTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "deleteVersion", _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContent *BaseContentTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "kill")
}

// ProcessRequestPayment is a paid mutator transaction binding the contract method 0x0c6d3f93.
//
// Solidity: function processRequestPayment(uint256 requestNonce, address payee, string label, uint256 amount) returns(bool)
func (_BaseContent *BaseContentTransactor) ProcessRequestPayment(opts *bind.TransactOpts, requestNonce *big.Int, payee common.Address, label string, amount *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "processRequestPayment", requestNonce, payee, label, amount)
}

// Publish is a paid mutator transaction binding the contract method 0x075d4782.
//
// Solidity: function publish() payable returns(bool)
func (_BaseContent *BaseContentTransactor) Publish(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "publish")
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseContent *BaseContentTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "putMeta", key, value)
}

// SetAccessCharge is a paid mutator transaction binding the contract method 0xf4d9bae8.
//
// Solidity: function setAccessCharge(uint256 charge) returns(uint256)
func (_BaseContent *BaseContentTransactor) SetAccessCharge(opts *bind.TransactOpts, charge *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setAccessCharge", charge)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContent *BaseContentTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetContentContractAddress is a paid mutator transaction binding the contract method 0xe5385303.
//
// Solidity: function setContentContractAddress(address addr) returns()
func (_BaseContent *BaseContentTransactor) SetContentContractAddress(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setContentContractAddress", addr)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetStatusCode is a paid mutator transaction binding the contract method 0x5267db44.
//
// Solidity: function setStatusCode(int256 status_code) returns(int256)
func (_BaseContent *BaseContentTransactor) SetStatusCode(opts *bind.TransactOpts, status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setStatusCode", status_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContent *BaseContentTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setVisibility", _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContent *BaseContentTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContent *BaseContentTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "transferOwnership", newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContent *BaseContentTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "updateRequest")
}

// UpdateStatus is a paid mutator transaction binding the contract method 0x8280dd8f.
//
// Solidity: function updateStatus(int256 status_code) returns(int256)
func (_BaseContent *BaseContentTransactor) UpdateStatus(opts *bind.TransactOpts, status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "updateStatus", status_code)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseContent *BaseContentTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseContent.contract.RawTransact(opts, calldata)
}

// BaseContentAccessCompleteIterator is returned from FilterAccessComplete and is used to iterate over the raw logs and unpacked data for AccessComplete events raised by the BaseContent contract.
type BaseContentAccessCompleteIterator struct {
	Event *BaseContentAccessComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessComplete represents a AccessComplete event raised by the BaseContent contract.
type BaseContentAccessComplete struct {
	RequestID            *big.Int
	ScorePct             *big.Int
	CustomContractResult bool
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterAccessComplete is a free log retrieval operation binding the contract event 0x2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac06.
//
// Solidity: event AccessComplete(uint256 requestID, uint256 scorePct, bool customContractResult)
func (_BaseContent *BaseContentFilterer) FilterAccessComplete(opts *bind.FilterOpts) (*BaseContentAccessCompleteIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessComplete")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessCompleteIterator{contract: _BaseContent.contract, event: "AccessComplete", logs: logs, sub: sub}, nil
}

// WatchAccessComplete is a free log subscription operation binding the contract event 0x2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac06.
//
// Solidity: event AccessComplete(uint256 requestID, uint256 scorePct, bool customContractResult)
func (_BaseContent *BaseContentFilterer) WatchAccessComplete(opts *bind.WatchOpts, sink chan<- *BaseContentAccessComplete) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessComplete)
				if err := _BaseContent.contract.UnpackLog(event, "AccessComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessComplete is a log parse operation binding the contract event 0x2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac06.
//
// Solidity: event AccessComplete(uint256 requestID, uint256 scorePct, bool customContractResult)
func (_BaseContent *BaseContentFilterer) ParseAccessComplete(log types.Log) (*BaseContentAccessComplete, error) {
	event := new(BaseContentAccessComplete)
	if err := _BaseContent.contract.UnpackLog(event, "AccessComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentAccessCompleteV3Iterator is returned from FilterAccessCompleteV3 and is used to iterate over the raw logs and unpacked data for AccessCompleteV3 events raised by the BaseContent contract.
type BaseContentAccessCompleteV3Iterator struct {
	Event *BaseContentAccessCompleteV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessCompleteV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessCompleteV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessCompleteV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessCompleteV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessCompleteV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessCompleteV3 represents a AccessCompleteV3 event raised by the BaseContent contract.
type BaseContentAccessCompleteV3 struct {
	RequestNonce         *big.Int
	CustomContractResult bool
	ParentAddress        common.Address
	ContextHash          [32]byte
	Accessor             common.Address
	RequestTimestamp     *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterAccessCompleteV3 is a free log retrieval operation binding the contract event 0xd3e5b1d14681444d8159fa85b57104b685f47fb9164fd82b7fafe4e123dcc3a1.
//
// Solidity: event AccessCompleteV3(uint256 requestNonce, bool customContractResult, address parentAddress, bytes32 contextHash, address accessor, uint256 request_timestamp)
func (_BaseContent *BaseContentFilterer) FilterAccessCompleteV3(opts *bind.FilterOpts) (*BaseContentAccessCompleteV3Iterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessCompleteV3")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessCompleteV3Iterator{contract: _BaseContent.contract, event: "AccessCompleteV3", logs: logs, sub: sub}, nil
}

// WatchAccessCompleteV3 is a free log subscription operation binding the contract event 0xd3e5b1d14681444d8159fa85b57104b685f47fb9164fd82b7fafe4e123dcc3a1.
//
// Solidity: event AccessCompleteV3(uint256 requestNonce, bool customContractResult, address parentAddress, bytes32 contextHash, address accessor, uint256 request_timestamp)
func (_BaseContent *BaseContentFilterer) WatchAccessCompleteV3(opts *bind.WatchOpts, sink chan<- *BaseContentAccessCompleteV3) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessCompleteV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessCompleteV3)
				if err := _BaseContent.contract.UnpackLog(event, "AccessCompleteV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessCompleteV3 is a log parse operation binding the contract event 0xd3e5b1d14681444d8159fa85b57104b685f47fb9164fd82b7fafe4e123dcc3a1.
//
// Solidity: event AccessCompleteV3(uint256 requestNonce, bool customContractResult, address parentAddress, bytes32 contextHash, address accessor, uint256 request_timestamp)
func (_BaseContent *BaseContentFilterer) ParseAccessCompleteV3(log types.Log) (*BaseContentAccessCompleteV3, error) {
	event := new(BaseContentAccessCompleteV3)
	if err := _BaseContent.contract.UnpackLog(event, "AccessCompleteV3", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentAccessRequestIterator is returned from FilterAccessRequest and is used to iterate over the raw logs and unpacked data for AccessRequest events raised by the BaseContent contract.
type BaseContentAccessRequestIterator struct {
	Event *BaseContentAccessRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessRequest represents a AccessRequest event raised by the BaseContent contract.
type BaseContentAccessRequest struct {
	RequestID    *big.Int
	Level        uint8
	ContentHash  string
	PkeRequestor string
	PkeAFGH      string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterAccessRequest is a free log retrieval operation binding the contract event 0x50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a06.
//
// Solidity: event AccessRequest(uint256 requestID, uint8 level, string contentHash, string pkeRequestor, string pkeAFGH)
func (_BaseContent *BaseContentFilterer) FilterAccessRequest(opts *bind.FilterOpts) (*BaseContentAccessRequestIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessRequestIterator{contract: _BaseContent.contract, event: "AccessRequest", logs: logs, sub: sub}, nil
}

// WatchAccessRequest is a free log subscription operation binding the contract event 0x50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a06.
//
// Solidity: event AccessRequest(uint256 requestID, uint8 level, string contentHash, string pkeRequestor, string pkeAFGH)
func (_BaseContent *BaseContentFilterer) WatchAccessRequest(opts *bind.WatchOpts, sink chan<- *BaseContentAccessRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessRequest)
				if err := _BaseContent.contract.UnpackLog(event, "AccessRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequest is a log parse operation binding the contract event 0x50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a06.
//
// Solidity: event AccessRequest(uint256 requestID, uint8 level, string contentHash, string pkeRequestor, string pkeAFGH)
func (_BaseContent *BaseContentFilterer) ParseAccessRequest(log types.Log) (*BaseContentAccessRequest, error) {
	event := new(BaseContentAccessRequest)
	if err := _BaseContent.contract.UnpackLog(event, "AccessRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentAccessRequestStakeholderIterator is returned from FilterAccessRequestStakeholder and is used to iterate over the raw logs and unpacked data for AccessRequestStakeholder events raised by the BaseContent contract.
type BaseContentAccessRequestStakeholderIterator struct {
	Event *BaseContentAccessRequestStakeholder // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessRequestStakeholderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessRequestStakeholder)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessRequestStakeholder)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessRequestStakeholderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessRequestStakeholderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessRequestStakeholder represents a AccessRequestStakeholder event raised by the BaseContent contract.
type BaseContentAccessRequestStakeholder struct {
	Stakeholder common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestStakeholder is a free log retrieval operation binding the contract event 0xb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b684.
//
// Solidity: event AccessRequestStakeholder(address stakeholder)
func (_BaseContent *BaseContentFilterer) FilterAccessRequestStakeholder(opts *bind.FilterOpts) (*BaseContentAccessRequestStakeholderIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessRequestStakeholder")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessRequestStakeholderIterator{contract: _BaseContent.contract, event: "AccessRequestStakeholder", logs: logs, sub: sub}, nil
}

// WatchAccessRequestStakeholder is a free log subscription operation binding the contract event 0xb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b684.
//
// Solidity: event AccessRequestStakeholder(address stakeholder)
func (_BaseContent *BaseContentFilterer) WatchAccessRequestStakeholder(opts *bind.WatchOpts, sink chan<- *BaseContentAccessRequestStakeholder) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessRequestStakeholder")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessRequestStakeholder)
				if err := _BaseContent.contract.UnpackLog(event, "AccessRequestStakeholder", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestStakeholder is a log parse operation binding the contract event 0xb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b684.
//
// Solidity: event AccessRequestStakeholder(address stakeholder)
func (_BaseContent *BaseContentFilterer) ParseAccessRequestStakeholder(log types.Log) (*BaseContentAccessRequestStakeholder, error) {
	event := new(BaseContentAccessRequestStakeholder)
	if err := _BaseContent.contract.UnpackLog(event, "AccessRequestStakeholder", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseContent contract.
type BaseContentAccessRequestV3Iterator struct {
	Event *BaseContentAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessRequestV3 represents a AccessRequestV3 event raised by the BaseContent contract.
type BaseContentAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContent *BaseContentFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseContentAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessRequestV3Iterator{contract: _BaseContent.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContent *BaseContentFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseContentAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessRequestV3)
				if err := _BaseContent.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContent *BaseContentFilterer) ParseAccessRequestV3(log types.Log) (*BaseContentAccessRequestV3, error) {
	event := new(BaseContentAccessRequestV3)
	if err := _BaseContent.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentAccessRequestValueIterator is returned from FilterAccessRequestValue and is used to iterate over the raw logs and unpacked data for AccessRequestValue events raised by the BaseContent contract.
type BaseContentAccessRequestValueIterator struct {
	Event *BaseContentAccessRequestValue // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessRequestValueIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessRequestValue)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessRequestValue)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessRequestValueIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessRequestValueIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessRequestValue represents a AccessRequestValue event raised by the BaseContent contract.
type BaseContentAccessRequestValue struct {
	CustomValue [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestValue is a free log retrieval operation binding the contract event 0x515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c38.
//
// Solidity: event AccessRequestValue(bytes32 customValue)
func (_BaseContent *BaseContentFilterer) FilterAccessRequestValue(opts *bind.FilterOpts) (*BaseContentAccessRequestValueIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessRequestValue")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessRequestValueIterator{contract: _BaseContent.contract, event: "AccessRequestValue", logs: logs, sub: sub}, nil
}

// WatchAccessRequestValue is a free log subscription operation binding the contract event 0x515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c38.
//
// Solidity: event AccessRequestValue(bytes32 customValue)
func (_BaseContent *BaseContentFilterer) WatchAccessRequestValue(opts *bind.WatchOpts, sink chan<- *BaseContentAccessRequestValue) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessRequestValue")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessRequestValue)
				if err := _BaseContent.contract.UnpackLog(event, "AccessRequestValue", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestValue is a log parse operation binding the contract event 0x515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c38.
//
// Solidity: event AccessRequestValue(bytes32 customValue)
func (_BaseContent *BaseContentFilterer) ParseAccessRequestValue(log types.Log) (*BaseContentAccessRequestValue, error) {
	event := new(BaseContentAccessRequestValue)
	if err := _BaseContent.contract.UnpackLog(event, "AccessRequestValue", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseContent contract.
type BaseContentCommitPendingIterator struct {
	Event *BaseContentCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentCommitPending represents a CommitPending event raised by the BaseContent contract.
type BaseContentCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseContentCommitPendingIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseContentCommitPendingIterator{contract: _BaseContent.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseContentCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentCommitPending)
				if err := _BaseContent.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) ParseCommitPending(log types.Log) (*BaseContentCommitPending, error) {
	event := new(BaseContentCommitPending)
	if err := _BaseContent.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentContentObjectCreateIterator is returned from FilterContentObjectCreate and is used to iterate over the raw logs and unpacked data for ContentObjectCreate events raised by the BaseContent contract.
type BaseContentContentObjectCreateIterator struct {
	Event *BaseContentContentObjectCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentContentObjectCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentContentObjectCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentContentObjectCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentContentObjectCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentContentObjectCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentContentObjectCreate represents a ContentObjectCreate event raised by the BaseContent contract.
type BaseContentContentObjectCreate struct {
	ContainingLibrary common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterContentObjectCreate is a free log retrieval operation binding the contract event 0xc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19.
//
// Solidity: event ContentObjectCreate(address containingLibrary)
func (_BaseContent *BaseContentFilterer) FilterContentObjectCreate(opts *bind.FilterOpts) (*BaseContentContentObjectCreateIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "ContentObjectCreate")
	if err != nil {
		return nil, err
	}
	return &BaseContentContentObjectCreateIterator{contract: _BaseContent.contract, event: "ContentObjectCreate", logs: logs, sub: sub}, nil
}

// WatchContentObjectCreate is a free log subscription operation binding the contract event 0xc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19.
//
// Solidity: event ContentObjectCreate(address containingLibrary)
func (_BaseContent *BaseContentFilterer) WatchContentObjectCreate(opts *bind.WatchOpts, sink chan<- *BaseContentContentObjectCreate) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "ContentObjectCreate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentContentObjectCreate)
				if err := _BaseContent.contract.UnpackLog(event, "ContentObjectCreate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentObjectCreate is a log parse operation binding the contract event 0xc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19.
//
// Solidity: event ContentObjectCreate(address containingLibrary)
func (_BaseContent *BaseContentFilterer) ParseContentObjectCreate(log types.Log) (*BaseContentContentObjectCreate, error) {
	event := new(BaseContentContentObjectCreate)
	if err := _BaseContent.contract.UnpackLog(event, "ContentObjectCreate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentInsufficientFundsIterator is returned from FilterInsufficientFunds and is used to iterate over the raw logs and unpacked data for InsufficientFunds events raised by the BaseContent contract.
type BaseContentInsufficientFundsIterator struct {
	Event *BaseContentInsufficientFunds // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentInsufficientFundsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentInsufficientFunds)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentInsufficientFunds)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentInsufficientFundsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentInsufficientFundsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentInsufficientFunds represents a InsufficientFunds event raised by the BaseContent contract.
type BaseContentInsufficientFunds struct {
	AccessCharge   *big.Int
	AmountProvided *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterInsufficientFunds is a free log retrieval operation binding the contract event 0x03eb8b54a949acec2cd08fdb6d6bd4647a1f2c907d75d6900648effa92eb147f.
//
// Solidity: event InsufficientFunds(uint256 accessCharge, uint256 amountProvided)
func (_BaseContent *BaseContentFilterer) FilterInsufficientFunds(opts *bind.FilterOpts) (*BaseContentInsufficientFundsIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "InsufficientFunds")
	if err != nil {
		return nil, err
	}
	return &BaseContentInsufficientFundsIterator{contract: _BaseContent.contract, event: "InsufficientFunds", logs: logs, sub: sub}, nil
}

// WatchInsufficientFunds is a free log subscription operation binding the contract event 0x03eb8b54a949acec2cd08fdb6d6bd4647a1f2c907d75d6900648effa92eb147f.
//
// Solidity: event InsufficientFunds(uint256 accessCharge, uint256 amountProvided)
func (_BaseContent *BaseContentFilterer) WatchInsufficientFunds(opts *bind.WatchOpts, sink chan<- *BaseContentInsufficientFunds) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "InsufficientFunds")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentInsufficientFunds)
				if err := _BaseContent.contract.UnpackLog(event, "InsufficientFunds", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInsufficientFunds is a log parse operation binding the contract event 0x03eb8b54a949acec2cd08fdb6d6bd4647a1f2c907d75d6900648effa92eb147f.
//
// Solidity: event InsufficientFunds(uint256 accessCharge, uint256 amountProvided)
func (_BaseContent *BaseContentFilterer) ParseInsufficientFunds(log types.Log) (*BaseContentInsufficientFunds, error) {
	event := new(BaseContentInsufficientFunds)
	if err := _BaseContent.contract.UnpackLog(event, "InsufficientFunds", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentLogPaymentIterator is returned from FilterLogPayment and is used to iterate over the raw logs and unpacked data for LogPayment events raised by the BaseContent contract.
type BaseContentLogPaymentIterator struct {
	Event *BaseContentLogPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentLogPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentLogPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentLogPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentLogPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentLogPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentLogPayment represents a LogPayment event raised by the BaseContent contract.
type BaseContentLogPayment struct {
	RequestNonce *big.Int
	Label        string
	Payee        common.Address
	Amount       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterLogPayment is a free log retrieval operation binding the contract event 0xad58d18ea7292f887da6f15bb4f0badddaa33d169713d09cf49710acc7c3a5b9.
//
// Solidity: event LogPayment(uint256 requestNonce, string label, address payee, uint256 amount)
func (_BaseContent *BaseContentFilterer) FilterLogPayment(opts *bind.FilterOpts) (*BaseContentLogPaymentIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return &BaseContentLogPaymentIterator{contract: _BaseContent.contract, event: "LogPayment", logs: logs, sub: sub}, nil
}

// WatchLogPayment is a free log subscription operation binding the contract event 0xad58d18ea7292f887da6f15bb4f0badddaa33d169713d09cf49710acc7c3a5b9.
//
// Solidity: event LogPayment(uint256 requestNonce, string label, address payee, uint256 amount)
func (_BaseContent *BaseContentFilterer) WatchLogPayment(opts *bind.WatchOpts, sink chan<- *BaseContentLogPayment) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentLogPayment)
				if err := _BaseContent.contract.UnpackLog(event, "LogPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogPayment is a log parse operation binding the contract event 0xad58d18ea7292f887da6f15bb4f0badddaa33d169713d09cf49710acc7c3a5b9.
//
// Solidity: event LogPayment(uint256 requestNonce, string label, address payee, uint256 amount)
func (_BaseContent *BaseContentFilterer) ParseLogPayment(log types.Log) (*BaseContentLogPayment, error) {
	event := new(BaseContentLogPayment)
	if err := _BaseContent.contract.UnpackLog(event, "LogPayment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseContent contract.
type BaseContentObjectMetaChangedIterator struct {
	Event *BaseContentObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseContent contract.
type BaseContentObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseContent *BaseContentFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseContentObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseContentObjectMetaChangedIterator{contract: _BaseContent.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseContent *BaseContentFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseContentObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentObjectMetaChanged)
				if err := _BaseContent.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseContent *BaseContentFilterer) ParseObjectMetaChanged(log types.Log) (*BaseContentObjectMetaChanged, error) {
	event := new(BaseContentObjectMetaChanged)
	if err := _BaseContent.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentPublishIterator is returned from FilterPublish and is used to iterate over the raw logs and unpacked data for Publish events raised by the BaseContent contract.
type BaseContentPublishIterator struct {
	Event *BaseContentPublish // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentPublishIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentPublish)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentPublish)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentPublishIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentPublishIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentPublish represents a Publish event raised by the BaseContent contract.
type BaseContentPublish struct {
	RequestStatus bool
	StatusCode    *big.Int
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterPublish is a free log retrieval operation binding the contract event 0xad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4.
//
// Solidity: event Publish(bool requestStatus, int256 statusCode, string objectHash)
func (_BaseContent *BaseContentFilterer) FilterPublish(opts *bind.FilterOpts) (*BaseContentPublishIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "Publish")
	if err != nil {
		return nil, err
	}
	return &BaseContentPublishIterator{contract: _BaseContent.contract, event: "Publish", logs: logs, sub: sub}, nil
}

// WatchPublish is a free log subscription operation binding the contract event 0xad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4.
//
// Solidity: event Publish(bool requestStatus, int256 statusCode, string objectHash)
func (_BaseContent *BaseContentFilterer) WatchPublish(opts *bind.WatchOpts, sink chan<- *BaseContentPublish) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "Publish")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentPublish)
				if err := _BaseContent.contract.UnpackLog(event, "Publish", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePublish is a log parse operation binding the contract event 0xad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4.
//
// Solidity: event Publish(bool requestStatus, int256 statusCode, string objectHash)
func (_BaseContent *BaseContentFilterer) ParsePublish(log types.Log) (*BaseContentPublish, error) {
	event := new(BaseContentPublish)
	if err := _BaseContent.contract.UnpackLog(event, "Publish", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSetAccessChargeIterator is returned from FilterSetAccessCharge and is used to iterate over the raw logs and unpacked data for SetAccessCharge events raised by the BaseContent contract.
type BaseContentSetAccessChargeIterator struct {
	Event *BaseContentSetAccessCharge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetAccessChargeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetAccessCharge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetAccessCharge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetAccessChargeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetAccessChargeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetAccessCharge represents a SetAccessCharge event raised by the BaseContent contract.
type BaseContentSetAccessCharge struct {
	AccessCharge *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSetAccessCharge is a free log retrieval operation binding the contract event 0x4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a3.
//
// Solidity: event SetAccessCharge(uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) FilterSetAccessCharge(opts *bind.FilterOpts) (*BaseContentSetAccessChargeIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetAccessCharge")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetAccessChargeIterator{contract: _BaseContent.contract, event: "SetAccessCharge", logs: logs, sub: sub}, nil
}

// WatchSetAccessCharge is a free log subscription operation binding the contract event 0x4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a3.
//
// Solidity: event SetAccessCharge(uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) WatchSetAccessCharge(opts *bind.WatchOpts, sink chan<- *BaseContentSetAccessCharge) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetAccessCharge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetAccessCharge)
				if err := _BaseContent.contract.UnpackLog(event, "SetAccessCharge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetAccessCharge is a log parse operation binding the contract event 0x4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a3.
//
// Solidity: event SetAccessCharge(uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) ParseSetAccessCharge(log types.Log) (*BaseContentSetAccessCharge, error) {
	event := new(BaseContentSetAccessCharge)
	if err := _BaseContent.contract.UnpackLog(event, "SetAccessCharge", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSetContentContractIterator is returned from FilterSetContentContract and is used to iterate over the raw logs and unpacked data for SetContentContract events raised by the BaseContent contract.
type BaseContentSetContentContractIterator struct {
	Event *BaseContentSetContentContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetContentContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetContentContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetContentContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetContentContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetContentContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetContentContract represents a SetContentContract event raised by the BaseContent contract.
type BaseContentSetContentContract struct {
	ContentContractAddress common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterSetContentContract is a free log retrieval operation binding the contract event 0xa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb7.
//
// Solidity: event SetContentContract(address contentContractAddress)
func (_BaseContent *BaseContentFilterer) FilterSetContentContract(opts *bind.FilterOpts) (*BaseContentSetContentContractIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetContentContract")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetContentContractIterator{contract: _BaseContent.contract, event: "SetContentContract", logs: logs, sub: sub}, nil
}

// WatchSetContentContract is a free log subscription operation binding the contract event 0xa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb7.
//
// Solidity: event SetContentContract(address contentContractAddress)
func (_BaseContent *BaseContentFilterer) WatchSetContentContract(opts *bind.WatchOpts, sink chan<- *BaseContentSetContentContract) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetContentContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetContentContract)
				if err := _BaseContent.contract.UnpackLog(event, "SetContentContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetContentContract is a log parse operation binding the contract event 0xa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb7.
//
// Solidity: event SetContentContract(address contentContractAddress)
func (_BaseContent *BaseContentFilterer) ParseSetContentContract(log types.Log) (*BaseContentSetContentContract, error) {
	event := new(BaseContentSetContentContract)
	if err := _BaseContent.contract.UnpackLog(event, "SetContentContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSetContentTypeIterator is returned from FilterSetContentType and is used to iterate over the raw logs and unpacked data for SetContentType events raised by the BaseContent contract.
type BaseContentSetContentTypeIterator struct {
	Event *BaseContentSetContentType // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetContentTypeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetContentType)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetContentType)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetContentTypeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetContentTypeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetContentType represents a SetContentType event raised by the BaseContent contract.
type BaseContentSetContentType struct {
	ContentType            common.Address
	ContentContractAddress common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterSetContentType is a free log retrieval operation binding the contract event 0x4f692e87baf302f7281e83eec109053efc2ca8e7bddfc6ce88c579cd9767f71f.
//
// Solidity: event SetContentType(address contentType, address contentContractAddress)
func (_BaseContent *BaseContentFilterer) FilterSetContentType(opts *bind.FilterOpts) (*BaseContentSetContentTypeIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetContentType")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetContentTypeIterator{contract: _BaseContent.contract, event: "SetContentType", logs: logs, sub: sub}, nil
}

// WatchSetContentType is a free log subscription operation binding the contract event 0x4f692e87baf302f7281e83eec109053efc2ca8e7bddfc6ce88c579cd9767f71f.
//
// Solidity: event SetContentType(address contentType, address contentContractAddress)
func (_BaseContent *BaseContentFilterer) WatchSetContentType(opts *bind.WatchOpts, sink chan<- *BaseContentSetContentType) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetContentType")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetContentType)
				if err := _BaseContent.contract.UnpackLog(event, "SetContentType", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetContentType is a log parse operation binding the contract event 0x4f692e87baf302f7281e83eec109053efc2ca8e7bddfc6ce88c579cd9767f71f.
//
// Solidity: event SetContentType(address contentType, address contentContractAddress)
func (_BaseContent *BaseContentFilterer) ParseSetContentType(log types.Log) (*BaseContentSetContentType, error) {
	event := new(BaseContentSetContentType)
	if err := _BaseContent.contract.UnpackLog(event, "SetContentType", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSetStatusCodeIterator is returned from FilterSetStatusCode and is used to iterate over the raw logs and unpacked data for SetStatusCode events raised by the BaseContent contract.
type BaseContentSetStatusCodeIterator struct {
	Event *BaseContentSetStatusCode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetStatusCodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetStatusCode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetStatusCode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetStatusCodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetStatusCodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetStatusCode represents a SetStatusCode event raised by the BaseContent contract.
type BaseContentSetStatusCode struct {
	StatusCode *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSetStatusCode is a free log retrieval operation binding the contract event 0xda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a2.
//
// Solidity: event SetStatusCode(int256 statusCode)
func (_BaseContent *BaseContentFilterer) FilterSetStatusCode(opts *bind.FilterOpts) (*BaseContentSetStatusCodeIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetStatusCode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetStatusCodeIterator{contract: _BaseContent.contract, event: "SetStatusCode", logs: logs, sub: sub}, nil
}

// WatchSetStatusCode is a free log subscription operation binding the contract event 0xda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a2.
//
// Solidity: event SetStatusCode(int256 statusCode)
func (_BaseContent *BaseContentFilterer) WatchSetStatusCode(opts *bind.WatchOpts, sink chan<- *BaseContentSetStatusCode) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetStatusCode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetStatusCode)
				if err := _BaseContent.contract.UnpackLog(event, "SetStatusCode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetStatusCode is a log parse operation binding the contract event 0xda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a2.
//
// Solidity: event SetStatusCode(int256 statusCode)
func (_BaseContent *BaseContentFilterer) ParseSetStatusCode(log types.Log) (*BaseContentSetStatusCode, error) {
	event := new(BaseContentSetStatusCode)
	if err := _BaseContent.contract.UnpackLog(event, "SetStatusCode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseContent contract.
type BaseContentUpdateRequestIterator struct {
	Event *BaseContentUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentUpdateRequest represents a UpdateRequest event raised by the BaseContent contract.
type BaseContentUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContent *BaseContentFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseContentUpdateRequestIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentUpdateRequestIterator{contract: _BaseContent.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContent *BaseContentFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseContentUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentUpdateRequest)
				if err := _BaseContent.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContent *BaseContentFilterer) ParseUpdateRequest(log types.Log) (*BaseContentUpdateRequest, error) {
	event := new(BaseContentUpdateRequest)
	if err := _BaseContent.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseContent contract.
type BaseContentVersionConfirmIterator struct {
	Event *BaseContentVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentVersionConfirm represents a VersionConfirm event raised by the BaseContent contract.
type BaseContentVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseContentVersionConfirmIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseContentVersionConfirmIterator{contract: _BaseContent.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseContentVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentVersionConfirm)
				if err := _BaseContent.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) ParseVersionConfirm(log types.Log) (*BaseContentVersionConfirm, error) {
	event := new(BaseContentVersionConfirm)
	if err := _BaseContent.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseContent contract.
type BaseContentVersionDeleteIterator struct {
	Event *BaseContentVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentVersionDelete represents a VersionDelete event raised by the BaseContent contract.
type BaseContentVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContent *BaseContentFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseContentVersionDeleteIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseContentVersionDeleteIterator{contract: _BaseContent.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContent *BaseContentFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseContentVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentVersionDelete)
				if err := _BaseContent.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContent *BaseContentFilterer) ParseVersionDelete(log types.Log) (*BaseContentVersionDelete, error) {
	event := new(BaseContentVersionDelete)
	if err := _BaseContent.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseContent contract.
type BaseContentVisibilityChangedIterator struct {
	Event *BaseContentVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentVisibilityChanged represents a VisibilityChanged event raised by the BaseContent contract.
type BaseContentVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContent *BaseContentFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseContentVisibilityChangedIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseContentVisibilityChangedIterator{contract: _BaseContent.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContent *BaseContentFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseContentVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentVisibilityChanged)
				if err := _BaseContent.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContent *BaseContentFilterer) ParseVisibilityChanged(log types.Log) (*BaseContentVisibilityChanged, error) {
	event := new(BaseContentVisibilityChanged)
	if err := _BaseContent.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentFactoryMetaData contains all meta data concerning the BaseContentFactory contract.
var BaseContentFactoryMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"saltFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OP_ACCESS_COMPLETE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_opCodes\",\"type\":\"uint32[]\"},{\"name\":\"_contentAddrs\",\"type\":\"address[]\"},{\"name\":\"_userAddrs\",\"type\":\"address[]\"},{\"name\":\"_requestNonces\",\"type\":\"uint256[]\"},{\"name\":\"_ctxHashes\",\"type\":\"bytes32[]\"},{\"name\":\"_ts\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"executeAccessBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OP_ACCESS_REQUEST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_spaceAddr\",\"type\":\"address\"},{\"name\":\"_helperAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
	Sigs: map[string]string{
		"4d887374": "OP_ACCESS_COMPLETE()",
		"52344328": "OP_ACCESS_REQUEST()",
		"af570c04": "contentSpace()",
		"1402e2b8": "createContent2(address,address)",
		"02d05d3f": "creator()",
		"4dcc1d29": "executeAccessBatch(uint32[],address[],address[],uint256[],bytes32[],uint256[],uint256[])",
		"16279055": "isContract(address)",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"4803a118": "saltFor(address)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
	},
	Bin: "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f426173654374466163746f72793230323030393238313130303030504f00000060055534801561007c57600080fd5b506040516040806114c98339810180604052604081101561009c57600080fd5b50805160209091015160028054600160a060020a031990811632179091556003805482163317905560048054600160a060020a03948516908316179055600680549390921692169190911790556113d1806100f86000396000f3fe6080604052600436106100dd5760003560e01c8063523443281161007f5780636d2e4b1b116100595780636d2e4b1b146106215780638da5cb5b14610654578063af570c0414610669578063f2fde38b1461067e576100dd565b806352344328146105e257806354fd4d50146105f75780635f4fcae11461060c576100dd565b806341c0e1b5116100bb57806341c0e1b5146101925780634803a118146101a75780634d887374146101ec5780634dcc1d291461021a576100dd565b806302d05d3f146100df5780631402e2b814610110578063162790551461014b575b005b3480156100eb57600080fd5b506100f46106b1565b60408051600160a060020a039092168252519081900360200190f35b34801561011c57600080fd5b506100f46004803603604081101561013357600080fd5b50600160a060020a03813581169160200135166106c0565b34801561015757600080fd5b5061017e6004803603602081101561016e57600080fd5b5035600160a060020a0316610ca2565b604080519115158252519081900360200190f35b34801561019e57600080fd5b506100dd610cad565b3480156101b357600080fd5b506101da600480360360208110156101ca57600080fd5b5035600160a060020a0316610cd2565b60408051918252519081900360200190f35b3480156101f857600080fd5b50610201610ce3565b6040805163ffffffff9092168252519081900360200190f35b34801561022657600080fd5b506100dd600480360360e081101561023d57600080fd5b81019060208101813564010000000081111561025857600080fd5b82018360208201111561026a57600080fd5b8035906020019184602083028401116401000000008311171561028c57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156102dc57600080fd5b8201836020820111156102ee57600080fd5b8035906020019184602083028401116401000000008311171561031057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561036057600080fd5b82018360208201111561037257600080fd5b8035906020019184602083028401116401000000008311171561039457600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156103e457600080fd5b8201836020820111156103f657600080fd5b8035906020019184602083028401116401000000008311171561041857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561046857600080fd5b82018360208201111561047a57600080fd5b8035906020019184602083028401116401000000008311171561049c57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156104ec57600080fd5b8201836020820111156104fe57600080fd5b8035906020019184602083028401116401000000008311171561052057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561057057600080fd5b82018360208201111561058257600080fd5b803590602001918460208302840111640100000000831117156105a457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610ce8945050505050565b3480156105ee57600080fd5b50610201610f78565b34801561060357600080fd5b506101da610f7d565b34801561061857600080fd5b506101da610f83565b34801561062d57600080fd5b506100dd6004803603602081101561064457600080fd5b5035600160a060020a0316610f89565b34801561066057600080fd5b506100f4610fe4565b34801561067557600080fd5b506100f4610ff3565b34801561068a57600080fd5b506100dd600480360360208110156106a157600080fd5b5035600160a060020a0316611002565b600254600160a060020a031681565b600454600090600160a060020a031633146106da57600080fd5b604080517f0eaec2c500000000000000000000000000000000000000000000000000000000815232600482015290518491600160a060020a03831691630eaec2c591602480820192602092909190829003018186803b15801561073c57600080fd5b505afa158015610750573d6000803e3d6000fd5b505050506040513d602081101561076657600080fd5b5051151561077357600080fd5b80600160a060020a03166329dedde5846040518263ffffffff1660e01b81526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156107c957600080fd5b505afa1580156107dd573d6000803e3d6000fd5b505050506040513d60208110156107f357600080fd5b5051151561080057600080fd5b606061080d33868661105d565b905060006108238261081e32610cd2565b61122e565b9050600081905080600160a060020a031663c9e8e72d85600160a060020a03166332eaf21b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561087257600080fd5b505afa158015610886573d6000803e3d6000fd5b505050506040513d602081101561089c57600080fd5b50516040805163ffffffff841660e01b8152600160a060020a03909216600483015251602480830192600092919082900301818387803b1580156108df57600080fd5b505af11580156108f3573d6000803e3d6000fd5b5050505080600160a060020a031663e538530385600160a060020a0316631cdbee5a896040518263ffffffff1660e01b81526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b15801561095c57600080fd5b505afa158015610970573d6000803e3d6000fd5b505050506040513d602081101561098657600080fd5b50516040805163ffffffff841660e01b8152600160a060020a03909216600483015251602480830192600092919082900301818387803b1580156109c957600080fd5b505af11580156109dd573d6000803e3d6000fd5b505060048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152329381019390935251600160a060020a0390911693506000925083916363e6ffdd916024808301926020929190829003018186803b158015610a4b57600080fd5b505afa158015610a5f573d6000803e3d6000fd5b505050506040513d6020811015610a7557600080fd5b505190506000610a8482611249565b9050801515610b9557604080517ff2fde38b00000000000000000000000000000000000000000000000000000000815232600482015290518391600160a060020a0387169163f2fde38b9160248082019260009290919082900301818387803b158015610af057600080fd5b505af1158015610b04573d6000803e3d6000fd5b5050604080517f3def5140000000000000000000000000000000000000000000000000000000008152600160a060020a0389811660048301526000602483018190526002604484015292519086169450633def514093506064808301939282900301818387803b158015610b7757600080fd5b505af1158015610b8b573d6000803e3d6000fd5b5050505050610c92565b604080517f0fe1b5a2000000000000000000000000000000000000000000000000000000008152326004820152600060248201819052600260448301529151600160a060020a03871692630fe1b5a2926064808201939182900301818387803b158015610c0157600080fd5b505af1158015610c15573d6000803e3d6000fd5b5050604080517ff2fde38b0000000000000000000000000000000000000000000000000000000081523260048201529051600160a060020a038816935063f2fde38b9250602480830192600092919082900301818387803b158015610c7957600080fd5b505af1158015610c8d573d6000803e3d6000fd5b505050505b5091955050505050505b92915050565b6000813b115b919050565b600354600160a060020a03163314610cc457600080fd5b600354600160a060020a0316ff5b600160a060020a031660601b430190565b600281565b600454600354600160a060020a039182169116331480610d945750604080517fd6be0f490000000000000000000000000000000000000000000000000000000081523360048201529051600091600160a060020a0384169163d6be0f4991602480820192602092909190829003018186803b158015610d6657600080fd5b505afa158015610d7a573d6000803e3d6000fd5b505050506040513d6020811015610d9057600080fd5b5051115b1515610d9f57600080fd5b875160005b81811015610f6c5760008982815181101515610dbc57fe5b906020019060200201519050610de88a83815181101515610dd957fe5b90602001906020020151610ca2565b1515610df45750610f64565b8a516001908c9084908110610e0557fe5b9060200190602002015163ffffffff161415610f195780600160a060020a03166378f52ffb8984815181101515610e3857fe5b906020019060200201518985815181101515610e5057fe5b906020019060200201518c86815181101515610e6857fe5b906020019060200201518a87815181101515610e8057fe5b906020019060200201516040518563ffffffff1660e01b81526004018085815260200184815260200183600160a060020a0316600160a060020a03168152602001828152602001945050505050602060405180830381600087803b158015610ee757600080fd5b505af1158015610efb573d6000803e3d6000fd5b505050506040513d6020811015610f1157600080fd5b50610f629050565b8a516002908c9084908110610f2a57fe5b9060200190602002015163ffffffff161415610f5d5780600160a060020a031663bc7dba338984815181101515610e3857fe5b600080fd5b505b600101610da4565b50505050505050505050565b600181565b60055481565b60015481565b600254600160a060020a03163314610fa057600080fd5b600160a060020a0381161515610fb557600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b600354600160a060020a0316331461101957600080fd5b600160a060020a038116151561102e57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b606080600660009054906101000a9004600160a060020a0316600160a060020a0316635799d6a86040518163ffffffff1660e01b815260040160006040518083038186803b1580156110ae57600080fd5b505afa1580156110c2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156110eb57600080fd5b81019080805164010000000081111561110357600080fd5b8201602081018481111561111657600080fd5b815164010000000081118282018710171561113057600080fd5b505060408051600160a060020a03808c16602080840191909152818c1683850152908a166060808401919091528351808403909101815260808301909352835193975087965091945060a00192508291908501908083835b602083106111a75780518252601f199092019160209182019101611188565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106111ef5780518252601f1990920191602091820191016111d0565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529150509392505050565b6000818351602085016000f59050803b1515610c9c57600080fd5b604080517f76657273696f6e415049282900000000000000000000000000000000000000008152815190819003600c018120600482526024820183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909216919091178152915181516000938493606093600160a060020a03881693919290918291908083835b602083106113145780518252601f1990920191602091820191016112f5565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114611374576040519150601f19603f3d011682016040523d82523d6000602084013e611379565b606091505b50909250905081158061138b57508051155b1561139b57600092505050610ca8565b506001939250505056fea165627a7a7230582071d20fa8383b79328d84dd55f375ba398926af2bcdad464a2d10acdcb02d3d4a0029",
}

// BaseContentFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseContentFactoryMetaData.ABI instead.
var BaseContentFactoryABI = BaseContentFactoryMetaData.ABI

// Deprecated: Use BaseContentFactoryMetaData.Sigs instead.
// BaseContentFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentFactoryFuncSigs = BaseContentFactoryMetaData.Sigs

// BaseContentFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseContentFactoryMetaData.Bin instead.
var BaseContentFactoryBin = BaseContentFactoryMetaData.Bin

// DeployBaseContentFactory deploys a new Ethereum contract, binding an instance of BaseContentFactory to it.
func DeployBaseContentFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _spaceAddr common.Address, _helperAddr common.Address) (common.Address, *types.Transaction, *BaseContentFactory, error) {
	parsed, err := ParsedABI(K_BaseContentFactory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseContentFactoryBin), backend, _spaceAddr, _helperAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContentFactory{BaseContentFactoryCaller: BaseContentFactoryCaller{contract: contract}, BaseContentFactoryTransactor: BaseContentFactoryTransactor{contract: contract}, BaseContentFactoryFilterer: BaseContentFactoryFilterer{contract: contract}}, nil
}

// BaseContentFactory is an auto generated Go binding around an Ethereum contract.
type BaseContentFactory struct {
	BaseContentFactoryCaller     // Read-only binding to the contract
	BaseContentFactoryTransactor // Write-only binding to the contract
	BaseContentFactoryFilterer   // Log filterer for contract events
}

// BaseContentFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseContentFactory creates a new instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactory(address common.Address, backend bind.ContractBackend) (*BaseContentFactory, error) {
	contract, err := bindBaseContentFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactory{BaseContentFactoryCaller: BaseContentFactoryCaller{contract: contract}, BaseContentFactoryTransactor: BaseContentFactoryTransactor{contract: contract}, BaseContentFactoryFilterer: BaseContentFactoryFilterer{contract: contract}}, nil
}

// NewBaseContentFactoryCaller creates a new read-only instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseContentFactoryCaller, error) {
	contract, err := bindBaseContentFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryCaller{contract: contract}, nil
}

// NewBaseContentFactoryTransactor creates a new write-only instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentFactoryTransactor, error) {
	contract, err := bindBaseContentFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryTransactor{contract: contract}, nil
}

// NewBaseContentFactoryFilterer creates a new log filterer instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentFactoryFilterer, error) {
	contract, err := bindBaseContentFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryFilterer{contract: contract}, nil
}

// bindBaseContentFactory binds a generic wrapper to an already deployed contract.
func bindBaseContentFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseContentFactory)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// OPACCESSCOMPLETE is a free data retrieval call binding the contract method 0x4d887374.
//
// Solidity: function OP_ACCESS_COMPLETE() view returns(uint32)
func (_BaseContentFactory *BaseContentFactoryCaller) OPACCESSCOMPLETE(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _BaseContentFactory.contract.Call(opts, &out, "OP_ACCESS_COMPLETE")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// OPACCESSREQUEST is a free data retrieval call binding the contract method 0x52344328.
//
// Solidity: function OP_ACCESS_REQUEST() view returns(uint32)
func (_BaseContentFactory *BaseContentFactoryCaller) OPACCESSREQUEST(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _BaseContentFactory.contract.Call(opts, &out, "OP_ACCESS_REQUEST")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseContentFactory *BaseContentFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentFactory.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseContentFactory *BaseContentFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentFactory.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IsContract is a free data retrieval call binding the contract method 0x16279055.
//
// Solidity: function isContract(address addr) view returns(bool)
func (_BaseContentFactory *BaseContentFactoryCaller) IsContract(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContentFactory.contract.Call(opts, &out, "isContract", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseContentFactory *BaseContentFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentFactory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SaltFor is a free data retrieval call binding the contract method 0x4803a118.
//
// Solidity: function saltFor(address addr) view returns(uint256)
func (_BaseContentFactory *BaseContentFactoryCaller) SaltFor(opts *bind.CallOpts, addr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentFactory.contract.Call(opts, &out, "saltFor", addr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseContentFactory *BaseContentFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseContentFactory.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_BaseContentFactory *BaseContentFactoryCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseContentFactory.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CreateContent2 is a paid mutator transaction binding the contract method 0x1402e2b8.
//
// Solidity: function createContent2(address lib, address content_type) returns(address)
func (_BaseContentFactory *BaseContentFactoryTransactor) CreateContent2(opts *bind.TransactOpts, lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "createContent2", lib, content_type)
}

// ExecuteAccessBatch is a paid mutator transaction binding the contract method 0x4dcc1d29.
//
// Solidity: function executeAccessBatch(uint32[] _opCodes, address[] _contentAddrs, address[] _userAddrs, uint256[] _requestNonces, bytes32[] _ctxHashes, uint256[] _ts, uint256[] ) returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) ExecuteAccessBatch(opts *bind.TransactOpts, _opCodes []uint32, _contentAddrs []common.Address, _userAddrs []common.Address, _requestNonces []*big.Int, _ctxHashes [][32]byte, _ts []*big.Int, arg6 []*big.Int) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "executeAccessBatch", _opCodes, _contentAddrs, _userAddrs, _requestNonces, _ctxHashes, _ts, arg6)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "kill")
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseContentFactory.contract.RawTransact(opts, calldata)
}

// BaseContentSpaceMetaData contains all meta data concerning the BaseContentSpace contract.
var BaseContentSpaceMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"submitNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"prefix\",\"type\":\"bytes\"}],\"name\":\"getKMSInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"createLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numActiveNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraryFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"getKMSID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"addNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createAccessWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setWalletFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setGroupFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setContentFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsManAddr\",\"type\":\"address\"}],\"name\":\"setKmsManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsIdStr\",\"type\":\"string\"}],\"name\":\"checkKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space_description\",\"type\":\"string\"}],\"name\":\"setDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kmsManAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setLibraryFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAccessWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"groupFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"removeNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"checkKMSAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"approveNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"createUserWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPendingNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodeMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentTypeAddress\",\"type\":\"address\"}],\"name\":\"CreateContentType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"libraryAddress\",\"type\":\"address\"}],\"name\":\"CreateLibrary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupAddress\",\"type\":\"address\"}],\"name\":\"CreateGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"}],\"name\":\"CreateContent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"CreateAccessWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"BindUserWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"EngageAccountLibrary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"SetFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"version\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CreateSpace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"GetAccessWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"AddNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"RemoveNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"97ac4fd2": "CAN_ACCESS()",
		"ef1d7dc2": "CAN_EDIT()",
		"100508a2": "CAN_SEE()",
		"1bf7a912": "accessRequestV3(bytes32[],address[])",
		"52f82dd8": "activeNodeAddresses(uint256)",
		"5272ae17": "activeNodeLocators(uint256)",
		"0f58a786": "addContentType(address,address)",
		"64f0f050": "addNode(address,bytes)",
		"32eaf21b": "addressKMS()",
		"dd4c97a0": "approveNode(address)",
		"6e375427": "canCommit()",
		"14cfabb3": "canConfirm()",
		"0eaec2c5": "canContribute(address)",
		"81beeb64": "canEdit()",
		"26683e14": "canNodePublish(address)",
		"9b55f901": "canPublish(address)",
		"29d00219": "canReview(address)",
		"8d2a23db": "checkKMS(string)",
		"d6be0f49": "checkKMSAddr(address)",
		"5f6a1301": "clearPending()",
		"9867db74": "commit(string)",
		"375a6e7c": "commitPending()",
		"446e8826": "confirmCommit()",
		"904696a8": "contentFactory()",
		"af570c04": "contentSpace()",
		"1cdbee5a": "contentTypeContracts(address)",
		"991a3a7c": "contentTypes(uint256)",
		"c65bcbe2": "contentTypesLength()",
		"331b86c0": "countVersionHashes()",
		"7708bc41": "createAccessWallet()",
		"bf4e088f": "createContent(address,address)",
		"b8cfaf05": "createContentType()",
		"575185ed": "createGroup()",
		"40b89f06": "createLibrary(address)",
		"e7cf0c66": "createUserWallet(address)",
		"02d05d3f": "creator()",
		"e1a70717": "deleteVersion(string)",
		"7284e416": "description()",
		"c45a0155": "factory()",
		"1f2caaec": "findTypeByHash(bytes32)",
		"a2d67fcf": "getAccessWallet()",
		"589aafc1": "getKMSID(address)",
		"268bfac4": "getKMSInfo(string,bytes)",
		"ac55c906": "getMeta(bytes)",
		"b04b6caa": "groupFactory()",
		"95a078e8": "hasAccess(address)",
		"67e5c3bf": "hasEditorRight(address)",
		"6380501f": "indexCategory()",
		"24d7806c": "isAdmin(address)",
		"41c0e1b5": "kill()",
		"9c9527f1": "kmsManAddr()",
		"441c5aa3": "libraryFactory()",
		"06fdde03": "name()",
		"fbd1b4ce": "nodeMapping(address)",
		"43f59ec7": "numActiveNodes()",
		"f41a1587": "numPendingNodes()",
		"e02dd9c2": "objectHash()",
		"40b87a26": "objectTimestamp()",
		"8da5cb5b": "owner()",
		"00821de3": "parentAddress()",
		"628449fd": "pendingHash()",
		"6be9514c": "pendingNodeAddresses(uint256)",
		"69e30ff8": "pendingNodeLocators(uint256)",
		"2cf99422": "publish(address)",
		"e542b7cb": "putMeta(bytes,bytes)",
		"fd089196": "removeContentType(address)",
		"b2b99ec9": "removeNode(address)",
		"3dd71d99": "requiresReview()",
		"c9e8e72d": "setAddressKMS(address)",
		"85ce1df1": "setContentFactory(address)",
		"90c3f38f": "setDescription(string)",
		"5bb47808": "setFactory(address)",
		"837b3b93": "setGroupFactory(address)",
		"22e564eb": "setGroupRights(address,uint8,uint8)",
		"87e38281": "setKmsManager(address)",
		"9d05d18d": "setLibraryFactory(address)",
		"0fe1b5a2": "setRights(address,uint8,uint8)",
		"aa024e8b": "setVisibility(uint8)",
		"7ebf879c": "setWalletFactory(address)",
		"160eee74": "submitNode(bytes)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"c287e0ed": "updateRequest()",
		"63e6ffdd": "userWallets(address)",
		"29dedde5": "validType(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
		"7ca8f618": "versionHashes(uint256)",
		"7886f747": "versionTimestamp(uint256)",
		"29adec14": "visibility()",
		"c5c03699": "walletFactory()",
		"9cb121ba": "whitelistedType(address)",
	},
	Bin: "",
}

// BaseContentSpaceABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseContentSpaceMetaData.ABI instead.
var BaseContentSpaceABI = BaseContentSpaceMetaData.ABI

// Deprecated: Use BaseContentSpaceMetaData.Sigs instead.
// BaseContentSpaceFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentSpaceFuncSigs = BaseContentSpaceMetaData.Sigs

// BaseContentSpaceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseContentSpaceMetaData.Bin instead.
var BaseContentSpaceBin = BaseContentSpaceMetaData.Bin

// DeployBaseContentSpace deploys a new Ethereum contract, binding an instance of BaseContentSpace to it.
func DeployBaseContentSpace(auth *bind.TransactOpts, backend bind.ContractBackend, content_space_name string) (common.Address, *types.Transaction, *BaseContentSpace, error) {
	parsed, err := ParsedABI(K_BaseContentSpace)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseContentSpaceBin), backend, content_space_name)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContentSpace{BaseContentSpaceCaller: BaseContentSpaceCaller{contract: contract}, BaseContentSpaceTransactor: BaseContentSpaceTransactor{contract: contract}, BaseContentSpaceFilterer: BaseContentSpaceFilterer{contract: contract}}, nil
}

// BaseContentSpace is an auto generated Go binding around an Ethereum contract.
type BaseContentSpace struct {
	BaseContentSpaceCaller     // Read-only binding to the contract
	BaseContentSpaceTransactor // Write-only binding to the contract
	BaseContentSpaceFilterer   // Log filterer for contract events
}

// BaseContentSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseContentSpace creates a new instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpace(address common.Address, backend bind.ContractBackend) (*BaseContentSpace, error) {
	contract, err := bindBaseContentSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpace{BaseContentSpaceCaller: BaseContentSpaceCaller{contract: contract}, BaseContentSpaceTransactor: BaseContentSpaceTransactor{contract: contract}, BaseContentSpaceFilterer: BaseContentSpaceFilterer{contract: contract}}, nil
}

// NewBaseContentSpaceCaller creates a new read-only instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpaceCaller(address common.Address, caller bind.ContractCaller) (*BaseContentSpaceCaller, error) {
	contract, err := bindBaseContentSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCaller{contract: contract}, nil
}

// NewBaseContentSpaceTransactor creates a new write-only instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentSpaceTransactor, error) {
	contract, err := bindBaseContentSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceTransactor{contract: contract}, nil
}

// NewBaseContentSpaceFilterer creates a new log filterer instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentSpaceFilterer, error) {
	contract, err := bindBaseContentSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceFilterer{contract: contract}, nil
}

// bindBaseContentSpace binds a generic wrapper to an already deployed contract.
func bindBaseContentSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseContentSpace)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() view returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "CAN_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() view returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "CAN_EDIT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() view returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "CAN_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ActiveNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "activeNodeAddresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) view returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCaller) ActiveNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "activeNodeLocators", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "addressKMS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "canCommit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "canConfirm")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "canContribute", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "canEdit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanNodePublish(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "canNodePublish", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "canPublish", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanReview(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "canReview", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) view returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) CheckKMS(opts *bind.CallOpts, _kmsIdStr string) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "checkKMS", _kmsIdStr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) view returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) CheckKMSAddr(opts *bind.CallOpts, _kmsAddr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "checkKMSAddr", _kmsAddr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "commitPending")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentFactory is a free data retrieval call binding the contract method 0x904696a8.
//
// Solidity: function contentFactory() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentFactory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "contentFactory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "contentTypeContracts", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "contentTypes", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() view returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "contentTypesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() view returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "countVersionHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Description is a free data retrieval call binding the contract method 0x7284e416.
//
// Solidity: function description() view returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) Description(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "description")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "factory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "findTypeByHash", typeHash)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) view returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) GetKMSID(opts *bind.CallOpts, _kmsAddr common.Address) (string, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "getKMSID", _kmsAddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) view returns(string, string)
func (_BaseContentSpace *BaseContentSpaceCaller) GetKMSInfo(opts *bind.CallOpts, _kmsID string, prefix []byte) (string, string, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "getKMSInfo", _kmsID, prefix)

	if err != nil {
		return *new(string), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) view returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "getMeta", key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GroupFactory is a free data retrieval call binding the contract method 0xb04b6caa.
//
// Solidity: function groupFactory() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) GroupFactory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "groupFactory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "hasAccess", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "hasEditorRight", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() view returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "indexCategory")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "isAdmin", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// KmsManAddr is a free data retrieval call binding the contract method 0x9c9527f1.
//
// Solidity: function kmsManAddr() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) KmsManAddr(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "kmsManAddr")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LibraryFactory is a free data retrieval call binding the contract method 0x441c5aa3.
//
// Solidity: function libraryFactory() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) LibraryFactory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "libraryFactory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NodeMapping is a free data retrieval call binding the contract method 0xfbd1b4ce.
//
// Solidity: function nodeMapping(address ) view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) NodeMapping(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "nodeMapping", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() view returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) NumActiveNodes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "numActiveNodes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() view returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) NumPendingNodes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "numPendingNodes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() view returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "objectHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() view returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "objectTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "parentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() view returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "pendingHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) PendingNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "pendingNodeAddresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) view returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCaller) PendingNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "pendingNodeLocators", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "requiresReview")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address ) view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) UserWallets(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "userWallets", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "validType", content_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseContentSpace *BaseContentSpaceCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_BaseContentSpace *BaseContentSpaceCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) view returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "versionHashes", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) view returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "versionTimestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() view returns(uint8)
func (_BaseContentSpace *BaseContentSpaceCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "visibility")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// WalletFactory is a free data retrieval call binding the contract method 0xc5c03699.
//
// Solidity: function walletFactory() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) WalletFactory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "walletFactory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "whitelistedType", content_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) payable returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) AddNode(opts *bind.TransactOpts, _nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "addNode", _nodeAddr, _locator)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) ApproveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "approveNode", _nodeAddr)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "clearPending")
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "commit", _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() payable returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "confirmCommit")
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateAccessWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createAccessWallet")
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateContent(opts *bind.TransactOpts, lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createContent", lib, content_type)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateContentType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createContentType")
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateGroup(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createGroup")
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateLibrary(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createLibrary", address_KMS)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _user) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateUserWallet(opts *bind.TransactOpts, _user common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createUserWallet", _user)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentSpace *BaseContentSpaceTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "deleteVersion", _versionHash)
}

// GetAccessWallet is a paid mutator transaction binding the contract method 0xa2d67fcf.
//
// Solidity: function getAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) GetAccessWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "getAccessWallet")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "kill")
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "publish", contentObj)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "putMeta", key, value)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "removeContentType", content_type)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) RemoveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "removeNode", _nodeAddr)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetContentFactory is a paid mutator transaction binding the contract method 0x85ce1df1.
//
// Solidity: function setContentFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetContentFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setContentFactory", new_factory)
}

// SetDescription is a paid mutator transaction binding the contract method 0x90c3f38f.
//
// Solidity: function setDescription(string content_space_description) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetDescription(opts *bind.TransactOpts, content_space_description string) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setDescription", content_space_description)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setFactory", new_factory)
}

// SetGroupFactory is a paid mutator transaction binding the contract method 0x837b3b93.
//
// Solidity: function setGroupFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetGroupFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setGroupFactory", new_factory)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetKmsManager is a paid mutator transaction binding the contract method 0x87e38281.
//
// Solidity: function setKmsManager(address _kmsManAddr) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetKmsManager(opts *bind.TransactOpts, _kmsManAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setKmsManager", _kmsManAddr)
}

// SetLibraryFactory is a paid mutator transaction binding the contract method 0x9d05d18d.
//
// Solidity: function setLibraryFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetLibraryFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setLibraryFactory", new_factory)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SetWalletFactory is a paid mutator transaction binding the contract method 0x7ebf879c.
//
// Solidity: function setWalletFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetWalletFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setWalletFactory", new_factory)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SubmitNode(opts *bind.TransactOpts, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "submitNode", _locator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "transferOwnership", newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "updateRequest")
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.RawTransact(opts, calldata)
}

// BaseContentSpaceAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseContentSpace contract.
type BaseContentSpaceAccessRequestV3Iterator struct {
	Event *BaseContentSpaceAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceAccessRequestV3 represents a AccessRequestV3 event raised by the BaseContentSpace contract.
type BaseContentSpaceAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseContentSpaceAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceAccessRequestV3Iterator{contract: _BaseContentSpace.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceAccessRequestV3)
				if err := _BaseContentSpace.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseAccessRequestV3(log types.Log) (*BaseContentSpaceAccessRequestV3, error) {
	event := new(BaseContentSpaceAccessRequestV3)
	if err := _BaseContentSpace.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceAddNodeIterator is returned from FilterAddNode and is used to iterate over the raw logs and unpacked data for AddNode events raised by the BaseContentSpace contract.
type BaseContentSpaceAddNodeIterator struct {
	Event *BaseContentSpaceAddNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceAddNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceAddNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceAddNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceAddNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceAddNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceAddNode represents a AddNode event raised by the BaseContentSpace contract.
type BaseContentSpaceAddNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddNode is a free log retrieval operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterAddNode(opts *bind.FilterOpts) (*BaseContentSpaceAddNodeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceAddNodeIterator{contract: _BaseContentSpace.contract, event: "AddNode", logs: logs, sub: sub}, nil
}

// WatchAddNode is a free log subscription operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchAddNode(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceAddNode) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceAddNode)
				if err := _BaseContentSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddNode is a log parse operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseAddNode(log types.Log) (*BaseContentSpaceAddNode, error) {
	event := new(BaseContentSpaceAddNode)
	if err := _BaseContentSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceBindUserWalletIterator is returned from FilterBindUserWallet and is used to iterate over the raw logs and unpacked data for BindUserWallet events raised by the BaseContentSpace contract.
type BaseContentSpaceBindUserWalletIterator struct {
	Event *BaseContentSpaceBindUserWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceBindUserWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceBindUserWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceBindUserWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceBindUserWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceBindUserWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceBindUserWallet represents a BindUserWallet event raised by the BaseContentSpace contract.
type BaseContentSpaceBindUserWallet struct {
	Wallet   common.Address
	UserAddr common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBindUserWallet is a free log retrieval operation binding the contract event 0x05e3f3adaf96d565bb326088a1d8e0d78497549df2c99a8ab681e5fbc7a9b3f2.
//
// Solidity: event BindUserWallet(address wallet, address userAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterBindUserWallet(opts *bind.FilterOpts) (*BaseContentSpaceBindUserWalletIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "BindUserWallet")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceBindUserWalletIterator{contract: _BaseContentSpace.contract, event: "BindUserWallet", logs: logs, sub: sub}, nil
}

// WatchBindUserWallet is a free log subscription operation binding the contract event 0x05e3f3adaf96d565bb326088a1d8e0d78497549df2c99a8ab681e5fbc7a9b3f2.
//
// Solidity: event BindUserWallet(address wallet, address userAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchBindUserWallet(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceBindUserWallet) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "BindUserWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceBindUserWallet)
				if err := _BaseContentSpace.contract.UnpackLog(event, "BindUserWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBindUserWallet is a log parse operation binding the contract event 0x05e3f3adaf96d565bb326088a1d8e0d78497549df2c99a8ab681e5fbc7a9b3f2.
//
// Solidity: event BindUserWallet(address wallet, address userAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseBindUserWallet(log types.Log) (*BaseContentSpaceBindUserWallet, error) {
	event := new(BaseContentSpaceBindUserWallet)
	if err := _BaseContentSpace.contract.UnpackLog(event, "BindUserWallet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseContentSpace contract.
type BaseContentSpaceCommitPendingIterator struct {
	Event *BaseContentSpaceCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCommitPending represents a CommitPending event raised by the BaseContentSpace contract.
type BaseContentSpaceCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseContentSpaceCommitPendingIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCommitPendingIterator{contract: _BaseContentSpace.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCommitPending)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCommitPending(log types.Log) (*BaseContentSpaceCommitPending, error) {
	event := new(BaseContentSpaceCommitPending)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeAddedIterator struct {
	Event *BaseContentSpaceContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceContentTypeAdded represents a ContentTypeAdded event raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*BaseContentSpaceContentTypeAddedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceContentTypeAddedIterator{contract: _BaseContentSpace.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceContentTypeAdded)
				if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseContentTypeAdded(log types.Log) (*BaseContentSpaceContentTypeAdded, error) {
	event := new(BaseContentSpaceContentTypeAdded)
	if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeRemovedIterator struct {
	Event *BaseContentSpaceContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceContentTypeRemoved represents a ContentTypeRemoved event raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*BaseContentSpaceContentTypeRemovedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceContentTypeRemovedIterator{contract: _BaseContentSpace.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceContentTypeRemoved)
				if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseContentTypeRemoved(log types.Log) (*BaseContentSpaceContentTypeRemoved, error) {
	event := new(BaseContentSpaceContentTypeRemoved)
	if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceCreateAccessWalletIterator is returned from FilterCreateAccessWallet and is used to iterate over the raw logs and unpacked data for CreateAccessWallet events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateAccessWalletIterator struct {
	Event *BaseContentSpaceCreateAccessWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateAccessWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateAccessWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateAccessWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateAccessWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateAccessWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateAccessWallet represents a CreateAccessWallet event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateAccessWallet struct {
	Wallet common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCreateAccessWallet is a free log retrieval operation binding the contract event 0x56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca.
//
// Solidity: event CreateAccessWallet(address wallet)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateAccessWallet(opts *bind.FilterOpts) (*BaseContentSpaceCreateAccessWalletIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateAccessWallet")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateAccessWalletIterator{contract: _BaseContentSpace.contract, event: "CreateAccessWallet", logs: logs, sub: sub}, nil
}

// WatchCreateAccessWallet is a free log subscription operation binding the contract event 0x56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca.
//
// Solidity: event CreateAccessWallet(address wallet)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateAccessWallet(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateAccessWallet) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateAccessWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateAccessWallet)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateAccessWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateAccessWallet is a log parse operation binding the contract event 0x56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca.
//
// Solidity: event CreateAccessWallet(address wallet)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateAccessWallet(log types.Log) (*BaseContentSpaceCreateAccessWallet, error) {
	event := new(BaseContentSpaceCreateAccessWallet)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateAccessWallet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceCreateContentIterator is returned from FilterCreateContent and is used to iterate over the raw logs and unpacked data for CreateContent events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContentIterator struct {
	Event *BaseContentSpaceCreateContent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateContentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateContent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateContent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateContentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateContentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateContent represents a CreateContent event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContent struct {
	ContentAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCreateContent is a free log retrieval operation binding the contract event 0xa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce.
//
// Solidity: event CreateContent(address contentAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateContent(opts *bind.FilterOpts) (*BaseContentSpaceCreateContentIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateContent")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateContentIterator{contract: _BaseContentSpace.contract, event: "CreateContent", logs: logs, sub: sub}, nil
}

// WatchCreateContent is a free log subscription operation binding the contract event 0xa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce.
//
// Solidity: event CreateContent(address contentAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateContent(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateContent) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateContent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateContent)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateContent is a log parse operation binding the contract event 0xa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce.
//
// Solidity: event CreateContent(address contentAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateContent(log types.Log) (*BaseContentSpaceCreateContent, error) {
	event := new(BaseContentSpaceCreateContent)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceCreateContentTypeIterator is returned from FilterCreateContentType and is used to iterate over the raw logs and unpacked data for CreateContentType events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContentTypeIterator struct {
	Event *BaseContentSpaceCreateContentType // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateContentTypeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateContentType)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateContentType)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateContentTypeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateContentTypeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateContentType represents a CreateContentType event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContentType struct {
	ContentTypeAddress common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterCreateContentType is a free log retrieval operation binding the contract event 0x9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8.
//
// Solidity: event CreateContentType(address contentTypeAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateContentType(opts *bind.FilterOpts) (*BaseContentSpaceCreateContentTypeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateContentType")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateContentTypeIterator{contract: _BaseContentSpace.contract, event: "CreateContentType", logs: logs, sub: sub}, nil
}

// WatchCreateContentType is a free log subscription operation binding the contract event 0x9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8.
//
// Solidity: event CreateContentType(address contentTypeAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateContentType(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateContentType) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateContentType")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateContentType)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContentType", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateContentType is a log parse operation binding the contract event 0x9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8.
//
// Solidity: event CreateContentType(address contentTypeAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateContentType(log types.Log) (*BaseContentSpaceCreateContentType, error) {
	event := new(BaseContentSpaceCreateContentType)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContentType", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceCreateGroupIterator is returned from FilterCreateGroup and is used to iterate over the raw logs and unpacked data for CreateGroup events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateGroupIterator struct {
	Event *BaseContentSpaceCreateGroup // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateGroupIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateGroup)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateGroup)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateGroupIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateGroupIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateGroup represents a CreateGroup event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateGroup struct {
	GroupAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterCreateGroup is a free log retrieval operation binding the contract event 0xa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159.
//
// Solidity: event CreateGroup(address groupAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateGroup(opts *bind.FilterOpts) (*BaseContentSpaceCreateGroupIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateGroup")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateGroupIterator{contract: _BaseContentSpace.contract, event: "CreateGroup", logs: logs, sub: sub}, nil
}

// WatchCreateGroup is a free log subscription operation binding the contract event 0xa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159.
//
// Solidity: event CreateGroup(address groupAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateGroup(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateGroup) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateGroup")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateGroup)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateGroup", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateGroup is a log parse operation binding the contract event 0xa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159.
//
// Solidity: event CreateGroup(address groupAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateGroup(log types.Log) (*BaseContentSpaceCreateGroup, error) {
	event := new(BaseContentSpaceCreateGroup)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateGroup", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceCreateLibraryIterator is returned from FilterCreateLibrary and is used to iterate over the raw logs and unpacked data for CreateLibrary events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateLibraryIterator struct {
	Event *BaseContentSpaceCreateLibrary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateLibraryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateLibrary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateLibrary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateLibraryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateLibraryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateLibrary represents a CreateLibrary event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateLibrary struct {
	LibraryAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCreateLibrary is a free log retrieval operation binding the contract event 0x473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571.
//
// Solidity: event CreateLibrary(address libraryAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateLibrary(opts *bind.FilterOpts) (*BaseContentSpaceCreateLibraryIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateLibrary")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateLibraryIterator{contract: _BaseContentSpace.contract, event: "CreateLibrary", logs: logs, sub: sub}, nil
}

// WatchCreateLibrary is a free log subscription operation binding the contract event 0x473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571.
//
// Solidity: event CreateLibrary(address libraryAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateLibrary(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateLibrary) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateLibrary")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateLibrary)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateLibrary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateLibrary is a log parse operation binding the contract event 0x473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571.
//
// Solidity: event CreateLibrary(address libraryAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateLibrary(log types.Log) (*BaseContentSpaceCreateLibrary, error) {
	event := new(BaseContentSpaceCreateLibrary)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateLibrary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceCreateSpaceIterator is returned from FilterCreateSpace and is used to iterate over the raw logs and unpacked data for CreateSpace events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateSpaceIterator struct {
	Event *BaseContentSpaceCreateSpace // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateSpaceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateSpace)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateSpace)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateSpaceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateSpaceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateSpace represents a CreateSpace event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateSpace struct {
	Version [32]byte
	Owner   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterCreateSpace is a free log retrieval operation binding the contract event 0x599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf54.
//
// Solidity: event CreateSpace(bytes32 version, address owner)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateSpace(opts *bind.FilterOpts) (*BaseContentSpaceCreateSpaceIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateSpace")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateSpaceIterator{contract: _BaseContentSpace.contract, event: "CreateSpace", logs: logs, sub: sub}, nil
}

// WatchCreateSpace is a free log subscription operation binding the contract event 0x599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf54.
//
// Solidity: event CreateSpace(bytes32 version, address owner)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateSpace(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateSpace) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateSpace")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateSpace)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateSpace", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateSpace is a log parse operation binding the contract event 0x599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf54.
//
// Solidity: event CreateSpace(bytes32 version, address owner)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateSpace(log types.Log) (*BaseContentSpaceCreateSpace, error) {
	event := new(BaseContentSpaceCreateSpace)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateSpace", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceEngageAccountLibraryIterator is returned from FilterEngageAccountLibrary and is used to iterate over the raw logs and unpacked data for EngageAccountLibrary events raised by the BaseContentSpace contract.
type BaseContentSpaceEngageAccountLibraryIterator struct {
	Event *BaseContentSpaceEngageAccountLibrary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceEngageAccountLibraryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceEngageAccountLibrary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceEngageAccountLibrary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceEngageAccountLibraryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceEngageAccountLibraryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceEngageAccountLibrary represents a EngageAccountLibrary event raised by the BaseContentSpace contract.
type BaseContentSpaceEngageAccountLibrary struct {
	AccountAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterEngageAccountLibrary is a free log retrieval operation binding the contract event 0x53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca.
//
// Solidity: event EngageAccountLibrary(address accountAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterEngageAccountLibrary(opts *bind.FilterOpts) (*BaseContentSpaceEngageAccountLibraryIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "EngageAccountLibrary")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceEngageAccountLibraryIterator{contract: _BaseContentSpace.contract, event: "EngageAccountLibrary", logs: logs, sub: sub}, nil
}

// WatchEngageAccountLibrary is a free log subscription operation binding the contract event 0x53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca.
//
// Solidity: event EngageAccountLibrary(address accountAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchEngageAccountLibrary(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceEngageAccountLibrary) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "EngageAccountLibrary")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceEngageAccountLibrary)
				if err := _BaseContentSpace.contract.UnpackLog(event, "EngageAccountLibrary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEngageAccountLibrary is a log parse operation binding the contract event 0x53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca.
//
// Solidity: event EngageAccountLibrary(address accountAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseEngageAccountLibrary(log types.Log) (*BaseContentSpaceEngageAccountLibrary, error) {
	event := new(BaseContentSpaceEngageAccountLibrary)
	if err := _BaseContentSpace.contract.UnpackLog(event, "EngageAccountLibrary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceGetAccessWalletIterator is returned from FilterGetAccessWallet and is used to iterate over the raw logs and unpacked data for GetAccessWallet events raised by the BaseContentSpace contract.
type BaseContentSpaceGetAccessWalletIterator struct {
	Event *BaseContentSpaceGetAccessWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceGetAccessWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceGetAccessWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceGetAccessWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceGetAccessWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceGetAccessWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceGetAccessWallet represents a GetAccessWallet event raised by the BaseContentSpace contract.
type BaseContentSpaceGetAccessWallet struct {
	WalletAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterGetAccessWallet is a free log retrieval operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterGetAccessWallet(opts *bind.FilterOpts) (*BaseContentSpaceGetAccessWalletIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "GetAccessWallet")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceGetAccessWalletIterator{contract: _BaseContentSpace.contract, event: "GetAccessWallet", logs: logs, sub: sub}, nil
}

// WatchGetAccessWallet is a free log subscription operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchGetAccessWallet(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceGetAccessWallet) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "GetAccessWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceGetAccessWallet)
				if err := _BaseContentSpace.contract.UnpackLog(event, "GetAccessWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGetAccessWallet is a log parse operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseGetAccessWallet(log types.Log) (*BaseContentSpaceGetAccessWallet, error) {
	event := new(BaseContentSpaceGetAccessWallet)
	if err := _BaseContentSpace.contract.UnpackLog(event, "GetAccessWallet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceNodeApprovedIterator is returned from FilterNodeApproved and is used to iterate over the raw logs and unpacked data for NodeApproved events raised by the BaseContentSpace contract.
type BaseContentSpaceNodeApprovedIterator struct {
	Event *BaseContentSpaceNodeApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceNodeApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceNodeApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceNodeApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceNodeApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceNodeApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceNodeApproved represents a NodeApproved event raised by the BaseContentSpace contract.
type BaseContentSpaceNodeApproved struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeApproved is a free log retrieval operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterNodeApproved(opts *bind.FilterOpts) (*BaseContentSpaceNodeApprovedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceNodeApprovedIterator{contract: _BaseContentSpace.contract, event: "NodeApproved", logs: logs, sub: sub}, nil
}

// WatchNodeApproved is a free log subscription operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchNodeApproved(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceNodeApproved) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceNodeApproved)
				if err := _BaseContentSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeApproved is a log parse operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseNodeApproved(log types.Log) (*BaseContentSpaceNodeApproved, error) {
	event := new(BaseContentSpaceNodeApproved)
	if err := _BaseContentSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceNodeSubmittedIterator is returned from FilterNodeSubmitted and is used to iterate over the raw logs and unpacked data for NodeSubmitted events raised by the BaseContentSpace contract.
type BaseContentSpaceNodeSubmittedIterator struct {
	Event *BaseContentSpaceNodeSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceNodeSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceNodeSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceNodeSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceNodeSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceNodeSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceNodeSubmitted represents a NodeSubmitted event raised by the BaseContentSpace contract.
type BaseContentSpaceNodeSubmitted struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeSubmitted is a free log retrieval operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterNodeSubmitted(opts *bind.FilterOpts) (*BaseContentSpaceNodeSubmittedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceNodeSubmittedIterator{contract: _BaseContentSpace.contract, event: "NodeSubmitted", logs: logs, sub: sub}, nil
}

// WatchNodeSubmitted is a free log subscription operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchNodeSubmitted(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceNodeSubmitted) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceNodeSubmitted)
				if err := _BaseContentSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeSubmitted is a log parse operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseNodeSubmitted(log types.Log) (*BaseContentSpaceNodeSubmitted, error) {
	event := new(BaseContentSpaceNodeSubmitted)
	if err := _BaseContentSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseContentSpace contract.
type BaseContentSpaceObjectMetaChangedIterator struct {
	Event *BaseContentSpaceObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseContentSpace contract.
type BaseContentSpaceObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseContentSpaceObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceObjectMetaChangedIterator{contract: _BaseContentSpace.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceObjectMetaChanged)
				if err := _BaseContentSpace.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseObjectMetaChanged(log types.Log) (*BaseContentSpaceObjectMetaChanged, error) {
	event := new(BaseContentSpaceObjectMetaChanged)
	if err := _BaseContentSpace.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceRemoveNodeIterator is returned from FilterRemoveNode and is used to iterate over the raw logs and unpacked data for RemoveNode events raised by the BaseContentSpace contract.
type BaseContentSpaceRemoveNodeIterator struct {
	Event *BaseContentSpaceRemoveNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceRemoveNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceRemoveNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceRemoveNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceRemoveNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceRemoveNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceRemoveNode represents a RemoveNode event raised by the BaseContentSpace contract.
type BaseContentSpaceRemoveNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRemoveNode is a free log retrieval operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterRemoveNode(opts *bind.FilterOpts) (*BaseContentSpaceRemoveNodeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceRemoveNodeIterator{contract: _BaseContentSpace.contract, event: "RemoveNode", logs: logs, sub: sub}, nil
}

// WatchRemoveNode is a free log subscription operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchRemoveNode(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceRemoveNode) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceRemoveNode)
				if err := _BaseContentSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveNode is a log parse operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseRemoveNode(log types.Log) (*BaseContentSpaceRemoveNode, error) {
	event := new(BaseContentSpaceRemoveNode)
	if err := _BaseContentSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceSetFactoryIterator is returned from FilterSetFactory and is used to iterate over the raw logs and unpacked data for SetFactory events raised by the BaseContentSpace contract.
type BaseContentSpaceSetFactoryIterator struct {
	Event *BaseContentSpaceSetFactory // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceSetFactoryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceSetFactory)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceSetFactory)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceSetFactoryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceSetFactoryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceSetFactory represents a SetFactory event raised by the BaseContentSpace contract.
type BaseContentSpaceSetFactory struct {
	Factory common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSetFactory is a free log retrieval operation binding the contract event 0x1c893ef9379093af30f458b9e74d2aba13c499660b68dec5e29af7b199c188b9.
//
// Solidity: event SetFactory(address factory)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterSetFactory(opts *bind.FilterOpts) (*BaseContentSpaceSetFactoryIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "SetFactory")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceSetFactoryIterator{contract: _BaseContentSpace.contract, event: "SetFactory", logs: logs, sub: sub}, nil
}

// WatchSetFactory is a free log subscription operation binding the contract event 0x1c893ef9379093af30f458b9e74d2aba13c499660b68dec5e29af7b199c188b9.
//
// Solidity: event SetFactory(address factory)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchSetFactory(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceSetFactory) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "SetFactory")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceSetFactory)
				if err := _BaseContentSpace.contract.UnpackLog(event, "SetFactory", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFactory is a log parse operation binding the contract event 0x1c893ef9379093af30f458b9e74d2aba13c499660b68dec5e29af7b199c188b9.
//
// Solidity: event SetFactory(address factory)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseSetFactory(log types.Log) (*BaseContentSpaceSetFactory, error) {
	event := new(BaseContentSpaceSetFactory)
	if err := _BaseContentSpace.contract.UnpackLog(event, "SetFactory", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseContentSpace contract.
type BaseContentSpaceUpdateRequestIterator struct {
	Event *BaseContentSpaceUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceUpdateRequest represents a UpdateRequest event raised by the BaseContentSpace contract.
type BaseContentSpaceUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseContentSpaceUpdateRequestIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceUpdateRequestIterator{contract: _BaseContentSpace.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceUpdateRequest)
				if err := _BaseContentSpace.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseUpdateRequest(log types.Log) (*BaseContentSpaceUpdateRequest, error) {
	event := new(BaseContentSpaceUpdateRequest)
	if err := _BaseContentSpace.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseContentSpace contract.
type BaseContentSpaceVersionConfirmIterator struct {
	Event *BaseContentSpaceVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceVersionConfirm represents a VersionConfirm event raised by the BaseContentSpace contract.
type BaseContentSpaceVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseContentSpaceVersionConfirmIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceVersionConfirmIterator{contract: _BaseContentSpace.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceVersionConfirm)
				if err := _BaseContentSpace.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseVersionConfirm(log types.Log) (*BaseContentSpaceVersionConfirm, error) {
	event := new(BaseContentSpaceVersionConfirm)
	if err := _BaseContentSpace.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseContentSpace contract.
type BaseContentSpaceVersionDeleteIterator struct {
	Event *BaseContentSpaceVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceVersionDelete represents a VersionDelete event raised by the BaseContentSpace contract.
type BaseContentSpaceVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseContentSpaceVersionDeleteIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceVersionDeleteIterator{contract: _BaseContentSpace.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceVersionDelete)
				if err := _BaseContentSpace.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseVersionDelete(log types.Log) (*BaseContentSpaceVersionDelete, error) {
	event := new(BaseContentSpaceVersionDelete)
	if err := _BaseContentSpace.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseContentSpace contract.
type BaseContentSpaceVisibilityChangedIterator struct {
	Event *BaseContentSpaceVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceVisibilityChanged represents a VisibilityChanged event raised by the BaseContentSpace contract.
type BaseContentSpaceVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseContentSpaceVisibilityChangedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceVisibilityChangedIterator{contract: _BaseContentSpace.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceVisibilityChanged)
				if err := _BaseContentSpace.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseVisibilityChanged(log types.Log) (*BaseContentSpaceVisibilityChanged, error) {
	event := new(BaseContentSpaceVisibilityChanged)
	if err := _BaseContentSpace.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentTypeMetaData contains all meta data concerning the BaseContentType contract.
var BaseContentTypeMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"97ac4fd2": "CAN_ACCESS()",
		"ef1d7dc2": "CAN_EDIT()",
		"100508a2": "CAN_SEE()",
		"1bf7a912": "accessRequestV3(bytes32[],address[])",
		"6e375427": "canCommit()",
		"14cfabb3": "canConfirm()",
		"81beeb64": "canEdit()",
		"5f6a1301": "clearPending()",
		"9867db74": "commit(string)",
		"375a6e7c": "commitPending()",
		"446e8826": "confirmCommit()",
		"af570c04": "contentSpace()",
		"331b86c0": "countVersionHashes()",
		"02d05d3f": "creator()",
		"e1a70717": "deleteVersion(string)",
		"95a078e8": "hasAccess(address)",
		"67e5c3bf": "hasEditorRight(address)",
		"6380501f": "indexCategory()",
		"41c0e1b5": "kill()",
		"e02dd9c2": "objectHash()",
		"40b87a26": "objectTimestamp()",
		"8da5cb5b": "owner()",
		"00821de3": "parentAddress()",
		"628449fd": "pendingHash()",
		"22e564eb": "setGroupRights(address,uint8,uint8)",
		"0fe1b5a2": "setRights(address,uint8,uint8)",
		"aa024e8b": "setVisibility(uint8)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"c287e0ed": "updateRequest()",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
		"7ca8f618": "versionHashes(uint256)",
		"7886f747": "versionTimestamp(uint256)",
		"29adec14": "visibility()",
	},
	Bin: "0x608060408190527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060019081557f41636365737369626c653230323030363236313231363030504f0000000000006005556006805460ff191690911761ff00191690557f4564697461626c653230323030393238313130303030504f00000000000000006007557f42617365436f6e74656e745479706532303230303331363133353130304d4c00600e55602080612322833981018060405260208110156100ea57600080fd5b50516002805432600160a060020a031991821617909155600380543390831617905560048054909116600160a060020a039092169190911790556006805461ffff19166104001790556121e0806101426000396000f3fe6080604052600436106102035760003560e01c80636380501f1161011857806397ac4fd2116100a0578063c287e0ed1161006f578063c287e0ed146107e5578063e02dd9c2146107fa578063e1a707171461080f578063ef1d7dc2146108c2578063f2fde38b146108d757610203565b806397ac4fd2146106db5780639867db74146106f0578063aa024e8b146107a3578063af570c04146107d057610203565b80637886f747116100e75780637886f7471461062a5780637ca8f6181461065457806381beeb641461067e5780638da5cb5b1461069357806395a078e8146106a857610203565b80636380501f1461059a57806367e5c3bf146105af5780636d2e4b1b146105e25780636e3754271461061557610203565b8063331b86c01161019b578063446e88261161016a578063446e8826146104c957806354fd4d50146104d15780635f4fcae1146104e65780635f6a1301146104fb578063628449fd1461051057610203565b8063331b86c014610463578063375a6e7c1461048a57806340b87a261461049f57806341c0e1b5146104b457610203565b806314cfabb3116101d757806314cfabb3146102ba5780631bf7a912146102e357806322e564eb1461040a57806329adec141461044e57610203565b8062821de31461020557806302d05d3f146102365780630fe1b5a21461024b578063100508a21461028f575b005b34801561021157600080fd5b5061021a61090a565b60408051600160a060020a039092168252519081900360200190f35b34801561024257600080fd5b5061021a61091a565b34801561025757600080fd5b506102036004803603606081101561026e57600080fd5b50600160a060020a038135169060ff60208201358116916040013516610929565b34801561029b57600080fd5b506102a4610a0b565b6040805160ff9092168252519081900360200190f35b3480156102c657600080fd5b506102cf610a10565b604080519115158252519081900360200190f35b6102cf600480360360408110156102f957600080fd5b81019060208101813564010000000081111561031457600080fd5b82018360208201111561032657600080fd5b8035906020019184602083028401116401000000008311171561034857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561039857600080fd5b8201836020820111156103aa57600080fd5b803590602001918460208302840111640100000000831117156103cc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610aad945050505050565b34801561041657600080fd5b506102036004803603606081101561042d57600080fd5b50600160a060020a038135169060ff60208201358116916040013516610b50565b34801561045a57600080fd5b506102a4611014565b34801561046f57600080fd5b5061047861101d565b60408051918252519081900360200190f35b34801561049657600080fd5b506102cf611023565b3480156104ab57600080fd5b5061047861102c565b3480156104c057600080fd5b50610203611032565b6102cf611057565b3480156104dd57600080fd5b5061047861125b565b3480156104f257600080fd5b50610478611261565b34801561050757600080fd5b50610203611267565b34801561051c57600080fd5b506105256112a5565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561055f578181015183820152602001610547565b50505050905090810190601f16801561058c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105a657600080fd5b506102a4611333565b3480156105bb57600080fd5b506102cf600480360360208110156105d257600080fd5b5035600160a060020a0316611341565b3480156105ee57600080fd5b506102036004803603602081101561060557600080fd5b5035600160a060020a03166114d9565b34801561062157600080fd5b506102cf611534565b34801561063657600080fd5b506104786004803603602081101561064d57600080fd5b5035611543565b34801561066057600080fd5b506105256004803603602081101561067757600080fd5b5035611562565b34801561068a57600080fd5b506102cf6115d6565b34801561069f57600080fd5b5061021a6115e1565b3480156106b457600080fd5b506102cf600480360360208110156106cb57600080fd5b5035600160a060020a03166115f0565b3480156106e757600080fd5b506102a461174a565b3480156106fc57600080fd5b506102036004803603602081101561071357600080fd5b81019060208101813564010000000081111561072e57600080fd5b82018360208201111561074057600080fd5b8035906020019184600183028401116401000000008311171561076257600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061174f945050505050565b3480156107af57600080fd5b50610203600480360360208110156107c657600080fd5b503560ff1661187c565b3480156107dc57600080fd5b5061021a6118f6565b3480156107f157600080fd5b50610203611905565b34801561080657600080fd5b506105256119c7565b34801561081b57600080fd5b506104786004803603602081101561083257600080fd5b81019060208101813564010000000081111561084d57600080fd5b82018360208201111561085f57600080fd5b8035906020019184600183028401116401000000008311171561088157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611a22945050505050565b3480156108ce57600080fd5b506102a4611e93565b3480156108e357600080fd5b50610203600480360360208110156108fa57600080fd5b5035600160a060020a0316611e98565b600454600160a060020a03165b90565b600254600160a060020a031681565b6109316115d6565b151561093c57600080fd5b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd91602480820192602092909190829003018186803b1580156109ab57600080fd5b505afa1580156109bf573d6000803e3d6000fd5b505050506040513d60208110156109d557600080fd5b50519050600160a060020a03811615156109f9576109f4858585610b50565b610a04565b610a04818585610b50565b5050505050565b600181565b60048054604080517f26683e14000000000000000000000000000000000000000000000000000000008152339381019390935251600092600160a060020a039092169182916326683e1491602480820192602092909190829003018186803b158015610a7b57600080fd5b505afa158015610a8f573d6000803e3d6000fd5b505050506040513d6020811015610aa557600080fd5b505191505090565b6000610ab8336115f0565b1515610ac357600080fd5b604080513060601b602080830191909152426034808401829052845180850390910181526054840180865281519190930120600090811c9092526074830182905260948301919091523360b48301526103e80260d482015290517f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c79181900360f40190a150600192915050565b600083905080600160a060020a031663091600e66040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8e57600080fd5b505afa158015610ba2573d6000803e3d6000fd5b505050506040513d6020811015610bb857600080fd5b5051600654610100900460ff90811691161415610c5d57604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691633def514091606480830192600092919082900301818387803b158015610c4057600080fd5b505af1158015610c54573d6000803e3d6000fd5b5050505061100e565b80600160a060020a03166312915a306040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9657600080fd5b505afa158015610caa573d6000803e3d6000fd5b505050506040513d6020811015610cc057600080fd5b5051600654610100900460ff90811691161415610d4857604080517ff17bda9100000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163f17bda9191606480830192600092919082900301818387803b158015610c4057600080fd5b80600160a060020a03166316aed2326040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8157600080fd5b505afa158015610d95573d6000803e3d6000fd5b505050506040513d6020811015610dab57600080fd5b5051600654610100900460ff90811691161415610e3357604080517f7cbb7bf200000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691637cbb7bf291606480830192600092919082900301818387803b158015610c4057600080fd5b80600160a060020a03166368a0469a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6c57600080fd5b505afa158015610e80573d6000803e3d6000fd5b505050506040513d6020811015610e9657600080fd5b5051600654610100900460ff90811691161415610f1e57604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691638635adb591606480830192600092919082900301818387803b158015610c4057600080fd5b80600160a060020a0316636373a4116040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5757600080fd5b505afa158015610f6b573d6000803e3d6000fd5b505050506040513d6020811015610f8157600080fd5b5051600654610100900460ff9081169116141561100957604080517f224dcba000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163224dcba091606480830192600092919082900301818387803b158015610c4057600080fd5b600080fd5b50505050565b60065460ff1681565b600a5490565b600d5460ff1681565b60095481565b600354600160a060020a0316331461104957600080fd5b600354600160a060020a0316ff5b6000611061610a10565b151561106c57600080fd5b600d5460ff16151561107d57600080fd5b60006008805460018160011615610100020316600290049050111561112c57600a80546001818101808455600093909352600880546110f3937fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80192600261010091831615919091026000190190911604611ff7565b5050600954600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901555b600c805461114f9160089160026000196101006001841615020190911604611ff7565b504260095560408051602081019182905260009081905261117291600c9161207c565b50600d805460ff191690556004547fbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df90600160a060020a03166111b361090a565b60408051600160a060020a0380851682528316602082015260609181018281526008805460026000196101006001841615020190911604938301849052926080830190849080156112455780601f1061121a57610100808354040283529160200191611245565b820191906000526020600020905b81548152906001019060200180831161122857829003601f168201915b505094505050505060405180910390a150600190565b600e5481565b60015481565b61126f611534565b151561127a57600080fd5b60408051602081019182905260009081905261129891600c9161207c565b50600d805460ff19169055565b600c805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561132b5780601f106113005761010080835404028352916020019161132b565b820191906000526020600020905b81548152906001019060200180831161130e57829003601f168201915b505050505081565b600654610100900460ff1681565b600354600090600160a060020a03838116911614806113685750600654606460ff90911610155b15611375575060016114d4565b600654600061010090910460ff1611156114d05760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b1580156113f557600080fd5b505afa158015611409573d6000803e3d6000fd5b505050506040513d602081101561141f57600080fd5b5051600654604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526002604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561149b57600080fd5b505afa1580156114af573d6000803e3d6000fd5b505050506040513d60208110156114c557600080fd5b505191506114d49050565b5060005b919050565b600254600160a060020a031633146114f057600080fd5b600160a060020a038116151561150557600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600061153e6115d6565b905090565b600b80548290811061155157fe5b600091825260209091200154905081565b600a80548290811061157057fe5b600091825260209182902001805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529350909183018282801561132b5780601f106113005761010080835404028352916020019161132b565b600061153e33611341565b600354600160a060020a031681565b600354600090600160a060020a03838116911614806116175750600654600a60ff90911610155b15611624575060016114d4565b600654600061010090910460ff1611156114d05760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b1580156116a457600080fd5b505afa1580156116b8573d6000803e3d6000fd5b505050506040513d60208110156116ce57600080fd5b5051600654604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561149b57600080fd5b600a81565b611757611534565b151561176257600080fd5b600d5460ff161561177257600080fd5b805160801161178057600080fd5b805161179390600c90602084019061207c565b50600d805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a03166117d761090a565b60408051600160a060020a038085168252831660208201526060918101828152600c805460026000196101006001841615020190911604938301849052926080830190849080156118695780601f1061183e57610100808354040283529160200191611869565b820191906000526020600020905b81548152906001019060200180831161184c57829003601f168201915b505094505050505060405180910390a150565b6118846115d6565b151561188f57600080fd5b6006805460ff191660ff838116919091179182905560045460408051600160a060020a039092168083526020830152929091168183015290517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b600454600160a060020a031681565b61190d6115d6565b151561191857600080fd5b60408051602080825260088054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156119b75780601f1061198c576101008083540402835291602001916119b7565b820191906000526020600020905b81548152906001019060200180831161199a57829003601f168201915b50509250505060405180910390a1565b6008805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561132b5780601f106113005761010080835404028352916020019161132b565b6000611a2c611534565b1515611a3757600080fd5b6000826040516020018082805190602001908083835b60208310611a6c5780518252601f199092019160209182019101611a4d565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050600060086040516020018082805460018160011615610100020316600290048015611b0b5780601f10611ae9576101008083540402835291820191611b0b565b820191906000526020600020905b815481529060010190602001808311611af7575b505091505060405160208183030381529060405280519060200120905080821415611ce257600a541515611b6257604080516020810191829052600090819052611b579160089161207c565b506000600955611c06565b600080805b600a54811015611bba5781600b82815481101515611b8157fe5b90600052602060002001541115611bb257809250600b81815481101515611ba457fe5b906000526020600020015491505b600101611b67565b50600a805483908110611bc957fe5b9060005260206000200160089080546001816001161561010002031660029004611bf4929190611ff7565b506009819055611c0382611ef3565b50505b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168560006040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611c9b578181015183820152602001611c83565b50505050905090810190601f168015611cc85780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a16000925050506114d4565b60001960005b600a54811015611dab576000600a82815481101515611d0357fe5b906000526020600020016040516020018082805460018160011615610100020316600290048015611d6b5780601f10611d49576101008083540402835291820191611d6b565b820191906000526020600020905b815481529060010190602001808311611d57575b505091505060405160208183030381529060405280519060200120905080851415611da257611d9982611ef3565b81925050611dab565b50600101611ce8565b50600019811415611dbb57600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a031686836040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611e4f578181015183820152602001611e37565b50505050905090810190601f168015611e7c5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1949350505050565b606481565b600354600160a060020a03163314611eaf57600080fd5b600160a060020a0381161515611ec457600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600a805482908110611f0157fe5b906000526020600020016000611f1791906120ea565b600b805482908110611f2557fe5b6000918252602082200155600a54600019018114611fcb57600a80546000198101908110611f4f57fe5b90600052602060002001600a82815481101515611f6857fe5b906000526020600020019080546001816001161561010002031660029004611f91929190611ff7565b50600b80546000198101908110611fa457fe5b9060005260206000200154600b82815481101515611fbe57fe5b6000918252602090912001555b600a805490611fde90600019830161212e565b50600b805490611ff2906000198301612157565b505b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612030578054855561206c565b8280016001018555821561206c57600052602060002091601f016020900482015b8281111561206c578254825591600101919060010190612051565b50612078929150612177565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106120bd57805160ff191683800117855561206c565b8280016001018555821561206c579182015b8281111561206c5782518255916020019190600101906120cf565b50805460018160011615610100020316600290046000825580601f106121105750611ff4565b601f016020900490600052602060002090810190611ff49190612177565b81548183558181111561215257600083815260209020612152918101908301612191565b505050565b815481835581811115612152576000838152602090206121529181019083015b61091791905b80821115612078576000815560010161217d565b61091791905b808211156120785760006121ab82826120ea565b5060010161219756fea165627a7a7230582001b7de2aebc0acdf2814bf5a3444a21db1b66cd2cdb0f5fbcc34a2a5fe6c2b2a0029",
}

// BaseContentTypeABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseContentTypeMetaData.ABI instead.
var BaseContentTypeABI = BaseContentTypeMetaData.ABI

// Deprecated: Use BaseContentTypeMetaData.Sigs instead.
// BaseContentTypeFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentTypeFuncSigs = BaseContentTypeMetaData.Sigs

// BaseContentTypeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseContentTypeMetaData.Bin instead.
var BaseContentTypeBin = BaseContentTypeMetaData.Bin

// DeployBaseContentType deploys a new Ethereum contract, binding an instance of BaseContentType to it.
func DeployBaseContentType(auth *bind.TransactOpts, backend bind.ContractBackend, content_space common.Address) (common.Address, *types.Transaction, *BaseContentType, error) {
	parsed, err := ParsedABI(K_BaseContentType)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseContentTypeBin), backend, content_space)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContentType{BaseContentTypeCaller: BaseContentTypeCaller{contract: contract}, BaseContentTypeTransactor: BaseContentTypeTransactor{contract: contract}, BaseContentTypeFilterer: BaseContentTypeFilterer{contract: contract}}, nil
}

// BaseContentType is an auto generated Go binding around an Ethereum contract.
type BaseContentType struct {
	BaseContentTypeCaller     // Read-only binding to the contract
	BaseContentTypeTransactor // Write-only binding to the contract
	BaseContentTypeFilterer   // Log filterer for contract events
}

// BaseContentTypeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentTypeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentTypeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentTypeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentTypeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentTypeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseContentType creates a new instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentType(address common.Address, backend bind.ContractBackend) (*BaseContentType, error) {
	contract, err := bindBaseContentType(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContentType{BaseContentTypeCaller: BaseContentTypeCaller{contract: contract}, BaseContentTypeTransactor: BaseContentTypeTransactor{contract: contract}, BaseContentTypeFilterer: BaseContentTypeFilterer{contract: contract}}, nil
}

// NewBaseContentTypeCaller creates a new read-only instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentTypeCaller(address common.Address, caller bind.ContractCaller) (*BaseContentTypeCaller, error) {
	contract, err := bindBaseContentType(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeCaller{contract: contract}, nil
}

// NewBaseContentTypeTransactor creates a new write-only instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentTypeTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentTypeTransactor, error) {
	contract, err := bindBaseContentType(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeTransactor{contract: contract}, nil
}

// NewBaseContentTypeFilterer creates a new log filterer instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentTypeFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentTypeFilterer, error) {
	contract, err := bindBaseContentType(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeFilterer{contract: contract}, nil
}

// bindBaseContentType binds a generic wrapper to an already deployed contract.
func bindBaseContentType(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseContentType)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() view returns(uint8)
func (_BaseContentType *BaseContentTypeCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "CAN_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() view returns(uint8)
func (_BaseContentType *BaseContentTypeCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "CAN_EDIT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() view returns(uint8)
func (_BaseContentType *BaseContentTypeCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "CAN_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() view returns(bool)
func (_BaseContentType *BaseContentTypeCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "canCommit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() view returns(bool)
func (_BaseContentType *BaseContentTypeCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "canConfirm")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() view returns(bool)
func (_BaseContentType *BaseContentTypeCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "canEdit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() view returns(bool)
func (_BaseContentType *BaseContentTypeCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "commitPending")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseContentType *BaseContentTypeCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() view returns(uint256)
func (_BaseContentType *BaseContentTypeCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "countVersionHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseContentType *BaseContentTypeCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) view returns(bool)
func (_BaseContentType *BaseContentTypeCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "hasAccess", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) view returns(bool)
func (_BaseContentType *BaseContentTypeCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "hasEditorRight", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() view returns(uint8)
func (_BaseContentType *BaseContentTypeCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "indexCategory")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() view returns(string)
func (_BaseContentType *BaseContentTypeCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "objectHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() view returns(uint256)
func (_BaseContentType *BaseContentTypeCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "objectTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseContentType *BaseContentTypeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_BaseContentType *BaseContentTypeCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "parentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() view returns(string)
func (_BaseContentType *BaseContentTypeCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "pendingHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseContentType *BaseContentTypeCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_BaseContentType *BaseContentTypeCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) view returns(string)
func (_BaseContentType *BaseContentTypeCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "versionHashes", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) view returns(uint256)
func (_BaseContentType *BaseContentTypeCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "versionTimestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() view returns(uint8)
func (_BaseContentType *BaseContentTypeCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "visibility")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) payable returns(bool)
func (_BaseContentType *BaseContentTypeTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentType *BaseContentTypeTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "clearPending")
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentType *BaseContentTypeTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "commit", _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() payable returns(bool)
func (_BaseContentType *BaseContentTypeTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "confirmCommit")
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentType *BaseContentTypeTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "deleteVersion", _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentType *BaseContentTypeTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "kill")
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseContentType *BaseContentTypeTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "setVisibility", _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentType *BaseContentTypeTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentType *BaseContentTypeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "transferOwnership", newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentType *BaseContentTypeTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "updateRequest")
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseContentType *BaseContentTypeTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseContentType.contract.RawTransact(opts, calldata)
}

// BaseContentTypeAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseContentType contract.
type BaseContentTypeAccessRequestV3Iterator struct {
	Event *BaseContentTypeAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeAccessRequestV3 represents a AccessRequestV3 event raised by the BaseContentType contract.
type BaseContentTypeAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContentType *BaseContentTypeFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseContentTypeAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeAccessRequestV3Iterator{contract: _BaseContentType.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContentType *BaseContentTypeFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseContentTypeAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeAccessRequestV3)
				if err := _BaseContentType.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseContentType *BaseContentTypeFilterer) ParseAccessRequestV3(log types.Log) (*BaseContentTypeAccessRequestV3, error) {
	event := new(BaseContentTypeAccessRequestV3)
	if err := _BaseContentType.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentTypeCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseContentType contract.
type BaseContentTypeCommitPendingIterator struct {
	Event *BaseContentTypeCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeCommitPending represents a CommitPending event raised by the BaseContentType contract.
type BaseContentTypeCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseContentTypeCommitPendingIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeCommitPendingIterator{contract: _BaseContentType.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseContentTypeCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeCommitPending)
				if err := _BaseContentType.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) ParseCommitPending(log types.Log) (*BaseContentTypeCommitPending, error) {
	event := new(BaseContentTypeCommitPending)
	if err := _BaseContentType.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentTypeUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseContentType contract.
type BaseContentTypeUpdateRequestIterator struct {
	Event *BaseContentTypeUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeUpdateRequest represents a UpdateRequest event raised by the BaseContentType contract.
type BaseContentTypeUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseContentTypeUpdateRequestIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeUpdateRequestIterator{contract: _BaseContentType.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseContentTypeUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeUpdateRequest)
				if err := _BaseContentType.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) ParseUpdateRequest(log types.Log) (*BaseContentTypeUpdateRequest, error) {
	event := new(BaseContentTypeUpdateRequest)
	if err := _BaseContentType.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentTypeVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseContentType contract.
type BaseContentTypeVersionConfirmIterator struct {
	Event *BaseContentTypeVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeVersionConfirm represents a VersionConfirm event raised by the BaseContentType contract.
type BaseContentTypeVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseContentTypeVersionConfirmIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeVersionConfirmIterator{contract: _BaseContentType.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseContentTypeVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeVersionConfirm)
				if err := _BaseContentType.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) ParseVersionConfirm(log types.Log) (*BaseContentTypeVersionConfirm, error) {
	event := new(BaseContentTypeVersionConfirm)
	if err := _BaseContentType.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentTypeVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseContentType contract.
type BaseContentTypeVersionDeleteIterator struct {
	Event *BaseContentTypeVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeVersionDelete represents a VersionDelete event raised by the BaseContentType contract.
type BaseContentTypeVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentType *BaseContentTypeFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseContentTypeVersionDeleteIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeVersionDeleteIterator{contract: _BaseContentType.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentType *BaseContentTypeFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseContentTypeVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeVersionDelete)
				if err := _BaseContentType.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentType *BaseContentTypeFilterer) ParseVersionDelete(log types.Log) (*BaseContentTypeVersionDelete, error) {
	event := new(BaseContentTypeVersionDelete)
	if err := _BaseContentType.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentTypeVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseContentType contract.
type BaseContentTypeVisibilityChangedIterator struct {
	Event *BaseContentTypeVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeVisibilityChanged represents a VisibilityChanged event raised by the BaseContentType contract.
type BaseContentTypeVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContentType *BaseContentTypeFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseContentTypeVisibilityChangedIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeVisibilityChangedIterator{contract: _BaseContentType.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContentType *BaseContentTypeFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseContentTypeVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeVisibilityChanged)
				if err := _BaseContentType.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseContentType *BaseContentTypeFilterer) ParseVisibilityChanged(log types.Log) (*BaseContentTypeVisibilityChanged, error) {
	event := new(BaseContentTypeVisibilityChanged)
	if err := _BaseContentType.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseGroupFactoryMetaData contains all meta data concerning the BaseGroupFactory contract.
var BaseGroupFactoryMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_spaceAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
	Sigs: map[string]string{
		"af570c04": "contentSpace()",
		"575185ed": "createGroup()",
		"02d05d3f": "creator()",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
	},
	Bin: "",
}

// BaseGroupFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseGroupFactoryMetaData.ABI instead.
var BaseGroupFactoryABI = BaseGroupFactoryMetaData.ABI

// Deprecated: Use BaseGroupFactoryMetaData.Sigs instead.
// BaseGroupFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseGroupFactoryFuncSigs = BaseGroupFactoryMetaData.Sigs

// BaseGroupFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseGroupFactoryMetaData.Bin instead.
var BaseGroupFactoryBin = BaseGroupFactoryMetaData.Bin

// DeployBaseGroupFactory deploys a new Ethereum contract, binding an instance of BaseGroupFactory to it.
func DeployBaseGroupFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _spaceAddr common.Address) (common.Address, *types.Transaction, *BaseGroupFactory, error) {
	parsed, err := ParsedABI(K_BaseGroupFactory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseGroupFactoryBin), backend, _spaceAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseGroupFactory{BaseGroupFactoryCaller: BaseGroupFactoryCaller{contract: contract}, BaseGroupFactoryTransactor: BaseGroupFactoryTransactor{contract: contract}, BaseGroupFactoryFilterer: BaseGroupFactoryFilterer{contract: contract}}, nil
}

// BaseGroupFactory is an auto generated Go binding around an Ethereum contract.
type BaseGroupFactory struct {
	BaseGroupFactoryCaller     // Read-only binding to the contract
	BaseGroupFactoryTransactor // Write-only binding to the contract
	BaseGroupFactoryFilterer   // Log filterer for contract events
}

// BaseGroupFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseGroupFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseGroupFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseGroupFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseGroupFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseGroupFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseGroupFactory creates a new instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactory(address common.Address, backend bind.ContractBackend) (*BaseGroupFactory, error) {
	contract, err := bindBaseGroupFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactory{BaseGroupFactoryCaller: BaseGroupFactoryCaller{contract: contract}, BaseGroupFactoryTransactor: BaseGroupFactoryTransactor{contract: contract}, BaseGroupFactoryFilterer: BaseGroupFactoryFilterer{contract: contract}}, nil
}

// NewBaseGroupFactoryCaller creates a new read-only instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseGroupFactoryCaller, error) {
	contract, err := bindBaseGroupFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactoryCaller{contract: contract}, nil
}

// NewBaseGroupFactoryTransactor creates a new write-only instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseGroupFactoryTransactor, error) {
	contract, err := bindBaseGroupFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactoryTransactor{contract: contract}, nil
}

// NewBaseGroupFactoryFilterer creates a new log filterer instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseGroupFactoryFilterer, error) {
	contract, err := bindBaseGroupFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactoryFilterer{contract: contract}, nil
}

// bindBaseGroupFactory binds a generic wrapper to an already deployed contract.
func bindBaseGroupFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseGroupFactory)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseGroupFactory.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseGroupFactory.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseGroupFactory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseGroupFactory *BaseGroupFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseGroupFactory.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_BaseGroupFactory *BaseGroupFactoryCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseGroupFactory.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseGroupFactory *BaseGroupFactoryTransactor) CreateGroup(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "createGroup")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "kill")
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.RawTransact(opts, calldata)
}

// BaseLibraryMetaData contains all meta data concerning the BaseLibrary contract.
var BaseLibraryMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"updateAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approvalRequestsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"removeReviewerGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"addAccessorGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reviewerGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributorGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accessorGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"removeContributorGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"submitApprovalRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPendingApprovalRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"addContributorGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_contract\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"approveContent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contentAddr\",\"type\":\"address\"}],\"name\":\"deleteContent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvalRequests\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reviewerGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"addReviewerGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessorGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"removeAccessorGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"},{\"name\":\"_content_space\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"content_type\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"}],\"name\":\"ContentObjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"}],\"name\":\"ContentObjectDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ContributorGroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ContributorGroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ReviewerGroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ReviewerGroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"AccessorGroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"AccessorGroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operationCode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"UnauthorizedOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"submitter\",\"type\":\"address\"}],\"name\":\"ApproveContentRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"ApproveContent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addressKms\",\"type\":\"address\"}],\"name\":\"UpdateKmsAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"97ac4fd2": "CAN_ACCESS()",
		"ef1d7dc2": "CAN_EDIT()",
		"100508a2": "CAN_SEE()",
		"1bf7a912": "accessRequestV3(bytes32[],address[])",
		"2c11f392": "accessorGroups(uint256)",
		"e5538fd2": "accessorGroupsLength()",
		"1d0f4351": "addAccessorGroup(address)",
		"0f58a786": "addContentType(address,address)",
		"679a9a3c": "addContributorGroup(address)",
		"dc3c29c0": "addReviewerGroup(address)",
		"32eaf21b": "addressKMS()",
		"8cb13c2e": "approvalRequests(uint256)",
		"16308394": "approvalRequestsLength()",
		"87e86b2c": "approveContent(address,bool,string)",
		"6e375427": "canCommit()",
		"14cfabb3": "canConfirm()",
		"0eaec2c5": "canContribute(address)",
		"81beeb64": "canEdit()",
		"cbcd4461": "canPublish()",
		"9b55f901": "canPublish(address)",
		"29d00219": "canReview(address)",
		"5f6a1301": "clearPending()",
		"9867db74": "commit(string)",
		"375a6e7c": "commitPending()",
		"446e8826": "confirmCommit()",
		"af570c04": "contentSpace()",
		"1cdbee5a": "contentTypeContracts(address)",
		"991a3a7c": "contentTypes(uint256)",
		"c65bcbe2": "contentTypesLength()",
		"2393553b": "contributorGroups(uint256)",
		"470750bb": "contributorGroupsLength()",
		"331b86c0": "countVersionHashes()",
		"1e35d8fa": "createContent(address)",
		"02d05d3f": "creator()",
		"87fcd0b8": "deleteContent(address)",
		"e1a70717": "deleteVersion(string)",
		"1f2caaec": "findTypeByHash(bytes32)",
		"ac55c906": "getMeta(bytes)",
		"63dab9d4": "getPendingApprovalRequest(uint256)",
		"95a078e8": "hasAccess(address)",
		"67e5c3bf": "hasEditorRight(address)",
		"6380501f": "indexCategory()",
		"24d7806c": "isAdmin(address)",
		"41c0e1b5": "kill()",
		"e02dd9c2": "objectHash()",
		"40b87a26": "objectTimestamp()",
		"8da5cb5b": "owner()",
		"00821de3": "parentAddress()",
		"628449fd": "pendingHash()",
		"2cf99422": "publish(address)",
		"e542b7cb": "putMeta(bytes,bytes)",
		"e8de515f": "removeAccessorGroup(address)",
		"fd089196": "removeContentType(address)",
		"386493e0": "removeContributorGroup(address)",
		"1b969895": "removeReviewerGroup(address)",
		"3dd71d99": "requiresReview()",
		"952e464b": "reviewerGroups(uint256)",
		"21770a84": "reviewerGroupsLength()",
		"c9e8e72d": "setAddressKMS(address)",
		"22e564eb": "setGroupRights(address,uint8,uint8)",
		"0fe1b5a2": "setRights(address,uint8,uint8)",
		"aa024e8b": "setVisibility(uint8)",
		"49102e61": "submitApprovalRequest()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"011e01a5": "updateAddressKMS(address)",
		"c287e0ed": "updateRequest()",
		"29dedde5": "validType(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
		"7ca8f618": "versionHashes(uint256)",
		"7886f747": "versionTimestamp(uint256)",
		"29adec14": "visibility()",
		"9cb121ba": "whitelistedType(address)",
	},
	Bin: "",
}

// BaseLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseLibraryMetaData.ABI instead.
var BaseLibraryABI = BaseLibraryMetaData.ABI

// Deprecated: Use BaseLibraryMetaData.Sigs instead.
// BaseLibraryFuncSigs maps the 4-byte function signature to its string representation.
var BaseLibraryFuncSigs = BaseLibraryMetaData.Sigs

// BaseLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseLibraryMetaData.Bin instead.
var BaseLibraryBin = BaseLibraryMetaData.Bin

// DeployBaseLibrary deploys a new Ethereum contract, binding an instance of BaseLibrary to it.
func DeployBaseLibrary(auth *bind.TransactOpts, backend bind.ContractBackend, address_KMS common.Address, _content_space common.Address) (common.Address, *types.Transaction, *BaseLibrary, error) {
	parsed, err := ParsedABI(K_BaseLibrary)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseLibraryBin), backend, address_KMS, _content_space)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseLibrary{BaseLibraryCaller: BaseLibraryCaller{contract: contract}, BaseLibraryTransactor: BaseLibraryTransactor{contract: contract}, BaseLibraryFilterer: BaseLibraryFilterer{contract: contract}}, nil
}

// BaseLibrary is an auto generated Go binding around an Ethereum contract.
type BaseLibrary struct {
	BaseLibraryCaller     // Read-only binding to the contract
	BaseLibraryTransactor // Write-only binding to the contract
	BaseLibraryFilterer   // Log filterer for contract events
}

// BaseLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseLibrary creates a new instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibrary(address common.Address, backend bind.ContractBackend) (*BaseLibrary, error) {
	contract, err := bindBaseLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseLibrary{BaseLibraryCaller: BaseLibraryCaller{contract: contract}, BaseLibraryTransactor: BaseLibraryTransactor{contract: contract}, BaseLibraryFilterer: BaseLibraryFilterer{contract: contract}}, nil
}

// NewBaseLibraryCaller creates a new read-only instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibraryCaller(address common.Address, caller bind.ContractCaller) (*BaseLibraryCaller, error) {
	contract, err := bindBaseLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryCaller{contract: contract}, nil
}

// NewBaseLibraryTransactor creates a new write-only instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseLibraryTransactor, error) {
	contract, err := bindBaseLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryTransactor{contract: contract}, nil
}

// NewBaseLibraryFilterer creates a new log filterer instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseLibraryFilterer, error) {
	contract, err := bindBaseLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFilterer{contract: contract}, nil
}

// bindBaseLibrary binds a generic wrapper to an already deployed contract.
func bindBaseLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseLibrary)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() view returns(uint8)
func (_BaseLibrary *BaseLibraryCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "CAN_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() view returns(uint8)
func (_BaseLibrary *BaseLibraryCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "CAN_EDIT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() view returns(uint8)
func (_BaseLibrary *BaseLibraryCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "CAN_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// AccessorGroups is a free data retrieval call binding the contract method 0x2c11f392.
//
// Solidity: function accessorGroups(uint256 ) view returns(address)
func (_BaseLibrary *BaseLibraryCaller) AccessorGroups(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "accessorGroups", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccessorGroupsLength is a free data retrieval call binding the contract method 0xe5538fd2.
//
// Solidity: function accessorGroupsLength() view returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) AccessorGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "accessorGroupsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() view returns(address)
func (_BaseLibrary *BaseLibraryCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "addressKMS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ApprovalRequests is a free data retrieval call binding the contract method 0x8cb13c2e.
//
// Solidity: function approvalRequests(uint256 ) view returns(address)
func (_BaseLibrary *BaseLibraryCaller) ApprovalRequests(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "approvalRequests", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ApprovalRequestsLength is a free data retrieval call binding the contract method 0x16308394.
//
// Solidity: function approvalRequestsLength() view returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ApprovalRequestsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "approvalRequestsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "canCommit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "canConfirm")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "canContribute", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "canEdit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "canPublish", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanPublish0 is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanPublish0(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "canPublish0")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address _candidate) view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanReview(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "canReview", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "commitPending")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) view returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "contentTypeContracts", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) view returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "contentTypes", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() view returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "contentTypesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ContributorGroups is a free data retrieval call binding the contract method 0x2393553b.
//
// Solidity: function contributorGroups(uint256 ) view returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContributorGroups(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "contributorGroups", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContributorGroupsLength is a free data retrieval call binding the contract method 0x470750bb.
//
// Solidity: function contributorGroupsLength() view returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ContributorGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "contributorGroupsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() view returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "countVersionHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseLibrary *BaseLibraryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) view returns(address)
func (_BaseLibrary *BaseLibraryCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "findTypeByHash", typeHash)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) view returns(bytes)
func (_BaseLibrary *BaseLibraryCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "getMeta", key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetPendingApprovalRequest is a free data retrieval call binding the contract method 0x63dab9d4.
//
// Solidity: function getPendingApprovalRequest(uint256 index) view returns(address)
func (_BaseLibrary *BaseLibraryCaller) GetPendingApprovalRequest(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "getPendingApprovalRequest", index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "hasAccess", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "hasEditorRight", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() view returns(uint8)
func (_BaseLibrary *BaseLibraryCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "indexCategory")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "isAdmin", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() view returns(string)
func (_BaseLibrary *BaseLibraryCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "objectHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() view returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "objectTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseLibrary *BaseLibraryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_BaseLibrary *BaseLibraryCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "parentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() view returns(string)
func (_BaseLibrary *BaseLibraryCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "pendingHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "requiresReview")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ReviewerGroups is a free data retrieval call binding the contract method 0x952e464b.
//
// Solidity: function reviewerGroups(uint256 ) view returns(address)
func (_BaseLibrary *BaseLibraryCaller) ReviewerGroups(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "reviewerGroups", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ReviewerGroupsLength is a free data retrieval call binding the contract method 0x21770a84.
//
// Solidity: function reviewerGroupsLength() view returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ReviewerGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "reviewerGroupsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "validType", content_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseLibrary *BaseLibraryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_BaseLibrary *BaseLibraryCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) view returns(string)
func (_BaseLibrary *BaseLibraryCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "versionHashes", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) view returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "versionTimestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() view returns(uint8)
func (_BaseLibrary *BaseLibraryCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "visibility")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "whitelistedType", content_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) payable returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// AddAccessorGroup is a paid mutator transaction binding the contract method 0x1d0f4351.
//
// Solidity: function addAccessorGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddAccessorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addAccessorGroup", group)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// AddContributorGroup is a paid mutator transaction binding the contract method 0x679a9a3c.
//
// Solidity: function addContributorGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddContributorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addContributorGroup", group)
}

// AddReviewerGroup is a paid mutator transaction binding the contract method 0xdc3c29c0.
//
// Solidity: function addReviewerGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddReviewerGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addReviewerGroup", group)
}

// ApproveContent is a paid mutator transaction binding the contract method 0x87e86b2c.
//
// Solidity: function approveContent(address content_contract, bool approved, string note) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) ApproveContent(opts *bind.TransactOpts, content_contract common.Address, approved bool, note string) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "approveContent", content_contract, approved, note)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseLibrary *BaseLibraryTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "clearPending")
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseLibrary *BaseLibraryTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "commit", _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() payable returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "confirmCommit")
}

// CreateContent is a paid mutator transaction binding the contract method 0x1e35d8fa.
//
// Solidity: function createContent(address content_type) returns(address)
func (_BaseLibrary *BaseLibraryTransactor) CreateContent(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "createContent", content_type)
}

// DeleteContent is a paid mutator transaction binding the contract method 0x87fcd0b8.
//
// Solidity: function deleteContent(address _contentAddr) returns()
func (_BaseLibrary *BaseLibraryTransactor) DeleteContent(opts *bind.TransactOpts, _contentAddr common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "deleteContent", _contentAddr)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseLibrary *BaseLibraryTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "deleteVersion", _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibrary *BaseLibraryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "kill")
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "publish", contentObj)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseLibrary *BaseLibraryTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "putMeta", key, value)
}

// RemoveAccessorGroup is a paid mutator transaction binding the contract method 0xe8de515f.
//
// Solidity: function removeAccessorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveAccessorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeAccessorGroup", group)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeContentType", content_type)
}

// RemoveContributorGroup is a paid mutator transaction binding the contract method 0x386493e0.
//
// Solidity: function removeContributorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveContributorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeContributorGroup", group)
}

// RemoveReviewerGroup is a paid mutator transaction binding the contract method 0x1b969895.
//
// Solidity: function removeReviewerGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveReviewerGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeReviewerGroup", group)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibraryTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibraryTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibraryTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseLibrary *BaseLibraryTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "setVisibility", _visibility_code)
}

// SubmitApprovalRequest is a paid mutator transaction binding the contract method 0x49102e61.
//
// Solidity: function submitApprovalRequest() returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) SubmitApprovalRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "submitApprovalRequest")
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibrary *BaseLibraryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibrary *BaseLibraryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "transferOwnership", newOwner)
}

// UpdateAddressKMS is a paid mutator transaction binding the contract method 0x011e01a5.
//
// Solidity: function updateAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibraryTransactor) UpdateAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "updateAddressKMS", address_KMS)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseLibrary *BaseLibraryTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "updateRequest")
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseLibrary *BaseLibraryTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseLibrary.contract.RawTransact(opts, calldata)
}

// BaseLibraryAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseLibrary contract.
type BaseLibraryAccessRequestV3Iterator struct {
	Event *BaseLibraryAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryAccessRequestV3 represents a AccessRequestV3 event raised by the BaseLibrary contract.
type BaseLibraryAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseLibrary *BaseLibraryFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseLibraryAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryAccessRequestV3Iterator{contract: _BaseLibrary.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseLibrary *BaseLibraryFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseLibraryAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryAccessRequestV3)
				if err := _BaseLibrary.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseLibrary *BaseLibraryFilterer) ParseAccessRequestV3(log types.Log) (*BaseLibraryAccessRequestV3, error) {
	event := new(BaseLibraryAccessRequestV3)
	if err := _BaseLibrary.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryAccessorGroupAddedIterator is returned from FilterAccessorGroupAdded and is used to iterate over the raw logs and unpacked data for AccessorGroupAdded events raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupAddedIterator struct {
	Event *BaseLibraryAccessorGroupAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryAccessorGroupAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryAccessorGroupAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryAccessorGroupAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryAccessorGroupAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryAccessorGroupAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryAccessorGroupAdded represents a AccessorGroupAdded event raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAccessorGroupAdded is a free log retrieval operation binding the contract event 0x3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d411.
//
// Solidity: event AccessorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterAccessorGroupAdded(opts *bind.FilterOpts) (*BaseLibraryAccessorGroupAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "AccessorGroupAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryAccessorGroupAddedIterator{contract: _BaseLibrary.contract, event: "AccessorGroupAdded", logs: logs, sub: sub}, nil
}

// WatchAccessorGroupAdded is a free log subscription operation binding the contract event 0x3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d411.
//
// Solidity: event AccessorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchAccessorGroupAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryAccessorGroupAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "AccessorGroupAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryAccessorGroupAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessorGroupAdded is a log parse operation binding the contract event 0x3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d411.
//
// Solidity: event AccessorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseAccessorGroupAdded(log types.Log) (*BaseLibraryAccessorGroupAdded, error) {
	event := new(BaseLibraryAccessorGroupAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryAccessorGroupRemovedIterator is returned from FilterAccessorGroupRemoved and is used to iterate over the raw logs and unpacked data for AccessorGroupRemoved events raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupRemovedIterator struct {
	Event *BaseLibraryAccessorGroupRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryAccessorGroupRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryAccessorGroupRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryAccessorGroupRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryAccessorGroupRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryAccessorGroupRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryAccessorGroupRemoved represents a AccessorGroupRemoved event raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAccessorGroupRemoved is a free log retrieval operation binding the contract event 0xc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f081.
//
// Solidity: event AccessorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterAccessorGroupRemoved(opts *bind.FilterOpts) (*BaseLibraryAccessorGroupRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "AccessorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryAccessorGroupRemovedIterator{contract: _BaseLibrary.contract, event: "AccessorGroupRemoved", logs: logs, sub: sub}, nil
}

// WatchAccessorGroupRemoved is a free log subscription operation binding the contract event 0xc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f081.
//
// Solidity: event AccessorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchAccessorGroupRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryAccessorGroupRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "AccessorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryAccessorGroupRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessorGroupRemoved is a log parse operation binding the contract event 0xc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f081.
//
// Solidity: event AccessorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseAccessorGroupRemoved(log types.Log) (*BaseLibraryAccessorGroupRemoved, error) {
	event := new(BaseLibraryAccessorGroupRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryApproveContentIterator is returned from FilterApproveContent and is used to iterate over the raw logs and unpacked data for ApproveContent events raised by the BaseLibrary contract.
type BaseLibraryApproveContentIterator struct {
	Event *BaseLibraryApproveContent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryApproveContentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryApproveContent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryApproveContent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryApproveContentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryApproveContentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryApproveContent represents a ApproveContent event raised by the BaseLibrary contract.
type BaseLibraryApproveContent struct {
	ContentAddress common.Address
	Approved       bool
	Note           string
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterApproveContent is a free log retrieval operation binding the contract event 0x70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442.
//
// Solidity: event ApproveContent(address contentAddress, bool approved, string note)
func (_BaseLibrary *BaseLibraryFilterer) FilterApproveContent(opts *bind.FilterOpts) (*BaseLibraryApproveContentIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ApproveContent")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryApproveContentIterator{contract: _BaseLibrary.contract, event: "ApproveContent", logs: logs, sub: sub}, nil
}

// WatchApproveContent is a free log subscription operation binding the contract event 0x70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442.
//
// Solidity: event ApproveContent(address contentAddress, bool approved, string note)
func (_BaseLibrary *BaseLibraryFilterer) WatchApproveContent(opts *bind.WatchOpts, sink chan<- *BaseLibraryApproveContent) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ApproveContent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryApproveContent)
				if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproveContent is a log parse operation binding the contract event 0x70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442.
//
// Solidity: event ApproveContent(address contentAddress, bool approved, string note)
func (_BaseLibrary *BaseLibraryFilterer) ParseApproveContent(log types.Log) (*BaseLibraryApproveContent, error) {
	event := new(BaseLibraryApproveContent)
	if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryApproveContentRequestIterator is returned from FilterApproveContentRequest and is used to iterate over the raw logs and unpacked data for ApproveContentRequest events raised by the BaseLibrary contract.
type BaseLibraryApproveContentRequestIterator struct {
	Event *BaseLibraryApproveContentRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryApproveContentRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryApproveContentRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryApproveContentRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryApproveContentRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryApproveContentRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryApproveContentRequest represents a ApproveContentRequest event raised by the BaseLibrary contract.
type BaseLibraryApproveContentRequest struct {
	ContentAddress common.Address
	Submitter      common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterApproveContentRequest is a free log retrieval operation binding the contract event 0x0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a.
//
// Solidity: event ApproveContentRequest(address contentAddress, address submitter)
func (_BaseLibrary *BaseLibraryFilterer) FilterApproveContentRequest(opts *bind.FilterOpts) (*BaseLibraryApproveContentRequestIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ApproveContentRequest")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryApproveContentRequestIterator{contract: _BaseLibrary.contract, event: "ApproveContentRequest", logs: logs, sub: sub}, nil
}

// WatchApproveContentRequest is a free log subscription operation binding the contract event 0x0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a.
//
// Solidity: event ApproveContentRequest(address contentAddress, address submitter)
func (_BaseLibrary *BaseLibraryFilterer) WatchApproveContentRequest(opts *bind.WatchOpts, sink chan<- *BaseLibraryApproveContentRequest) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ApproveContentRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryApproveContentRequest)
				if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContentRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproveContentRequest is a log parse operation binding the contract event 0x0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a.
//
// Solidity: event ApproveContentRequest(address contentAddress, address submitter)
func (_BaseLibrary *BaseLibraryFilterer) ParseApproveContentRequest(log types.Log) (*BaseLibraryApproveContentRequest, error) {
	event := new(BaseLibraryApproveContentRequest)
	if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContentRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseLibrary contract.
type BaseLibraryCommitPendingIterator struct {
	Event *BaseLibraryCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryCommitPending represents a CommitPending event raised by the BaseLibrary contract.
type BaseLibraryCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseLibraryCommitPendingIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryCommitPendingIterator{contract: _BaseLibrary.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseLibraryCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryCommitPending)
				if err := _BaseLibrary.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) ParseCommitPending(log types.Log) (*BaseLibraryCommitPending, error) {
	event := new(BaseLibraryCommitPending)
	if err := _BaseLibrary.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryContentObjectCreatedIterator is returned from FilterContentObjectCreated and is used to iterate over the raw logs and unpacked data for ContentObjectCreated events raised by the BaseLibrary contract.
type BaseLibraryContentObjectCreatedIterator struct {
	Event *BaseLibraryContentObjectCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentObjectCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentObjectCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentObjectCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentObjectCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentObjectCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentObjectCreated represents a ContentObjectCreated event raised by the BaseLibrary contract.
type BaseLibraryContentObjectCreated struct {
	ContentAddress common.Address
	ContentType    common.Address
	SpaceAddress   common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterContentObjectCreated is a free log retrieval operation binding the contract event 0xadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878.
//
// Solidity: event ContentObjectCreated(address contentAddress, address content_type, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentObjectCreated(opts *bind.FilterOpts) (*BaseLibraryContentObjectCreatedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentObjectCreated")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentObjectCreatedIterator{contract: _BaseLibrary.contract, event: "ContentObjectCreated", logs: logs, sub: sub}, nil
}

// WatchContentObjectCreated is a free log subscription operation binding the contract event 0xadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878.
//
// Solidity: event ContentObjectCreated(address contentAddress, address content_type, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentObjectCreated(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentObjectCreated) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentObjectCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentObjectCreated)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentObjectCreated is a log parse operation binding the contract event 0xadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878.
//
// Solidity: event ContentObjectCreated(address contentAddress, address content_type, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentObjectCreated(log types.Log) (*BaseLibraryContentObjectCreated, error) {
	event := new(BaseLibraryContentObjectCreated)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryContentObjectDeletedIterator is returned from FilterContentObjectDeleted and is used to iterate over the raw logs and unpacked data for ContentObjectDeleted events raised by the BaseLibrary contract.
type BaseLibraryContentObjectDeletedIterator struct {
	Event *BaseLibraryContentObjectDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentObjectDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentObjectDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentObjectDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentObjectDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentObjectDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentObjectDeleted represents a ContentObjectDeleted event raised by the BaseLibrary contract.
type BaseLibraryContentObjectDeleted struct {
	ContentAddress common.Address
	SpaceAddress   common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterContentObjectDeleted is a free log retrieval operation binding the contract event 0x36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e.
//
// Solidity: event ContentObjectDeleted(address contentAddress, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentObjectDeleted(opts *bind.FilterOpts) (*BaseLibraryContentObjectDeletedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentObjectDeleted")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentObjectDeletedIterator{contract: _BaseLibrary.contract, event: "ContentObjectDeleted", logs: logs, sub: sub}, nil
}

// WatchContentObjectDeleted is a free log subscription operation binding the contract event 0x36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e.
//
// Solidity: event ContentObjectDeleted(address contentAddress, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentObjectDeleted(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentObjectDeleted) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentObjectDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentObjectDeleted)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentObjectDeleted is a log parse operation binding the contract event 0x36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e.
//
// Solidity: event ContentObjectDeleted(address contentAddress, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentObjectDeleted(log types.Log) (*BaseLibraryContentObjectDeleted, error) {
	event := new(BaseLibraryContentObjectDeleted)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectDeleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the BaseLibrary contract.
type BaseLibraryContentTypeAddedIterator struct {
	Event *BaseLibraryContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentTypeAdded represents a ContentTypeAdded event raised by the BaseLibrary contract.
type BaseLibraryContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*BaseLibraryContentTypeAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentTypeAddedIterator{contract: _BaseLibrary.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentTypeAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentTypeAdded(log types.Log) (*BaseLibraryContentTypeAdded, error) {
	event := new(BaseLibraryContentTypeAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the BaseLibrary contract.
type BaseLibraryContentTypeRemovedIterator struct {
	Event *BaseLibraryContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentTypeRemoved represents a ContentTypeRemoved event raised by the BaseLibrary contract.
type BaseLibraryContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*BaseLibraryContentTypeRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentTypeRemovedIterator{contract: _BaseLibrary.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentTypeRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentTypeRemoved(log types.Log) (*BaseLibraryContentTypeRemoved, error) {
	event := new(BaseLibraryContentTypeRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryContributorGroupAddedIterator is returned from FilterContributorGroupAdded and is used to iterate over the raw logs and unpacked data for ContributorGroupAdded events raised by the BaseLibrary contract.
type BaseLibraryContributorGroupAddedIterator struct {
	Event *BaseLibraryContributorGroupAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContributorGroupAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContributorGroupAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContributorGroupAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContributorGroupAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContributorGroupAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContributorGroupAdded represents a ContributorGroupAdded event raised by the BaseLibrary contract.
type BaseLibraryContributorGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterContributorGroupAdded is a free log retrieval operation binding the contract event 0x218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d61.
//
// Solidity: event ContributorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterContributorGroupAdded(opts *bind.FilterOpts) (*BaseLibraryContributorGroupAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContributorGroupAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContributorGroupAddedIterator{contract: _BaseLibrary.contract, event: "ContributorGroupAdded", logs: logs, sub: sub}, nil
}

// WatchContributorGroupAdded is a free log subscription operation binding the contract event 0x218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d61.
//
// Solidity: event ContributorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchContributorGroupAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryContributorGroupAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContributorGroupAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContributorGroupAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContributorGroupAdded is a log parse operation binding the contract event 0x218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d61.
//
// Solidity: event ContributorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseContributorGroupAdded(log types.Log) (*BaseLibraryContributorGroupAdded, error) {
	event := new(BaseLibraryContributorGroupAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryContributorGroupRemovedIterator is returned from FilterContributorGroupRemoved and is used to iterate over the raw logs and unpacked data for ContributorGroupRemoved events raised by the BaseLibrary contract.
type BaseLibraryContributorGroupRemovedIterator struct {
	Event *BaseLibraryContributorGroupRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContributorGroupRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContributorGroupRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContributorGroupRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContributorGroupRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContributorGroupRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContributorGroupRemoved represents a ContributorGroupRemoved event raised by the BaseLibrary contract.
type BaseLibraryContributorGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterContributorGroupRemoved is a free log retrieval operation binding the contract event 0xbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c.
//
// Solidity: event ContributorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterContributorGroupRemoved(opts *bind.FilterOpts) (*BaseLibraryContributorGroupRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContributorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContributorGroupRemovedIterator{contract: _BaseLibrary.contract, event: "ContributorGroupRemoved", logs: logs, sub: sub}, nil
}

// WatchContributorGroupRemoved is a free log subscription operation binding the contract event 0xbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c.
//
// Solidity: event ContributorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchContributorGroupRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryContributorGroupRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContributorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContributorGroupRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContributorGroupRemoved is a log parse operation binding the contract event 0xbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c.
//
// Solidity: event ContributorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseContributorGroupRemoved(log types.Log) (*BaseLibraryContributorGroupRemoved, error) {
	event := new(BaseLibraryContributorGroupRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseLibrary contract.
type BaseLibraryObjectMetaChangedIterator struct {
	Event *BaseLibraryObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseLibrary contract.
type BaseLibraryObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseLibrary *BaseLibraryFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseLibraryObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryObjectMetaChangedIterator{contract: _BaseLibrary.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseLibrary *BaseLibraryFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseLibraryObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryObjectMetaChanged)
				if err := _BaseLibrary.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseLibrary *BaseLibraryFilterer) ParseObjectMetaChanged(log types.Log) (*BaseLibraryObjectMetaChanged, error) {
	event := new(BaseLibraryObjectMetaChanged)
	if err := _BaseLibrary.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryReviewerGroupAddedIterator is returned from FilterReviewerGroupAdded and is used to iterate over the raw logs and unpacked data for ReviewerGroupAdded events raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupAddedIterator struct {
	Event *BaseLibraryReviewerGroupAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryReviewerGroupAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryReviewerGroupAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryReviewerGroupAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryReviewerGroupAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryReviewerGroupAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryReviewerGroupAdded represents a ReviewerGroupAdded event raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterReviewerGroupAdded is a free log retrieval operation binding the contract event 0x1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb.
//
// Solidity: event ReviewerGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterReviewerGroupAdded(opts *bind.FilterOpts) (*BaseLibraryReviewerGroupAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ReviewerGroupAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryReviewerGroupAddedIterator{contract: _BaseLibrary.contract, event: "ReviewerGroupAdded", logs: logs, sub: sub}, nil
}

// WatchReviewerGroupAdded is a free log subscription operation binding the contract event 0x1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb.
//
// Solidity: event ReviewerGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchReviewerGroupAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryReviewerGroupAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ReviewerGroupAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryReviewerGroupAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReviewerGroupAdded is a log parse operation binding the contract event 0x1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb.
//
// Solidity: event ReviewerGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseReviewerGroupAdded(log types.Log) (*BaseLibraryReviewerGroupAdded, error) {
	event := new(BaseLibraryReviewerGroupAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryReviewerGroupRemovedIterator is returned from FilterReviewerGroupRemoved and is used to iterate over the raw logs and unpacked data for ReviewerGroupRemoved events raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupRemovedIterator struct {
	Event *BaseLibraryReviewerGroupRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryReviewerGroupRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryReviewerGroupRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryReviewerGroupRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryReviewerGroupRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryReviewerGroupRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryReviewerGroupRemoved represents a ReviewerGroupRemoved event raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterReviewerGroupRemoved is a free log retrieval operation binding the contract event 0xdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb.
//
// Solidity: event ReviewerGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterReviewerGroupRemoved(opts *bind.FilterOpts) (*BaseLibraryReviewerGroupRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ReviewerGroupRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryReviewerGroupRemovedIterator{contract: _BaseLibrary.contract, event: "ReviewerGroupRemoved", logs: logs, sub: sub}, nil
}

// WatchReviewerGroupRemoved is a free log subscription operation binding the contract event 0xdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb.
//
// Solidity: event ReviewerGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchReviewerGroupRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryReviewerGroupRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ReviewerGroupRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryReviewerGroupRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReviewerGroupRemoved is a log parse operation binding the contract event 0xdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb.
//
// Solidity: event ReviewerGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseReviewerGroupRemoved(log types.Log) (*BaseLibraryReviewerGroupRemoved, error) {
	event := new(BaseLibraryReviewerGroupRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryUnauthorizedOperationIterator is returned from FilterUnauthorizedOperation and is used to iterate over the raw logs and unpacked data for UnauthorizedOperation events raised by the BaseLibrary contract.
type BaseLibraryUnauthorizedOperationIterator struct {
	Event *BaseLibraryUnauthorizedOperation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryUnauthorizedOperationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryUnauthorizedOperation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryUnauthorizedOperation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryUnauthorizedOperationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryUnauthorizedOperationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryUnauthorizedOperation represents a UnauthorizedOperation event raised by the BaseLibrary contract.
type BaseLibraryUnauthorizedOperation struct {
	OperationCode *big.Int
	Candidate     common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterUnauthorizedOperation is a free log retrieval operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseLibrary *BaseLibraryFilterer) FilterUnauthorizedOperation(opts *bind.FilterOpts) (*BaseLibraryUnauthorizedOperationIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryUnauthorizedOperationIterator{contract: _BaseLibrary.contract, event: "UnauthorizedOperation", logs: logs, sub: sub}, nil
}

// WatchUnauthorizedOperation is a free log subscription operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseLibrary *BaseLibraryFilterer) WatchUnauthorizedOperation(opts *bind.WatchOpts, sink chan<- *BaseLibraryUnauthorizedOperation) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryUnauthorizedOperation)
				if err := _BaseLibrary.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnauthorizedOperation is a log parse operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseLibrary *BaseLibraryFilterer) ParseUnauthorizedOperation(log types.Log) (*BaseLibraryUnauthorizedOperation, error) {
	event := new(BaseLibraryUnauthorizedOperation)
	if err := _BaseLibrary.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryUpdateKmsAddressIterator is returned from FilterUpdateKmsAddress and is used to iterate over the raw logs and unpacked data for UpdateKmsAddress events raised by the BaseLibrary contract.
type BaseLibraryUpdateKmsAddressIterator struct {
	Event *BaseLibraryUpdateKmsAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryUpdateKmsAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryUpdateKmsAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryUpdateKmsAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryUpdateKmsAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryUpdateKmsAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryUpdateKmsAddress represents a UpdateKmsAddress event raised by the BaseLibrary contract.
type BaseLibraryUpdateKmsAddress struct {
	AddressKms common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateKmsAddress is a free log retrieval operation binding the contract event 0x74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608.
//
// Solidity: event UpdateKmsAddress(address addressKms)
func (_BaseLibrary *BaseLibraryFilterer) FilterUpdateKmsAddress(opts *bind.FilterOpts) (*BaseLibraryUpdateKmsAddressIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "UpdateKmsAddress")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryUpdateKmsAddressIterator{contract: _BaseLibrary.contract, event: "UpdateKmsAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateKmsAddress is a free log subscription operation binding the contract event 0x74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608.
//
// Solidity: event UpdateKmsAddress(address addressKms)
func (_BaseLibrary *BaseLibraryFilterer) WatchUpdateKmsAddress(opts *bind.WatchOpts, sink chan<- *BaseLibraryUpdateKmsAddress) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "UpdateKmsAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryUpdateKmsAddress)
				if err := _BaseLibrary.contract.UnpackLog(event, "UpdateKmsAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateKmsAddress is a log parse operation binding the contract event 0x74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608.
//
// Solidity: event UpdateKmsAddress(address addressKms)
func (_BaseLibrary *BaseLibraryFilterer) ParseUpdateKmsAddress(log types.Log) (*BaseLibraryUpdateKmsAddress, error) {
	event := new(BaseLibraryUpdateKmsAddress)
	if err := _BaseLibrary.contract.UnpackLog(event, "UpdateKmsAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseLibrary contract.
type BaseLibraryUpdateRequestIterator struct {
	Event *BaseLibraryUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryUpdateRequest represents a UpdateRequest event raised by the BaseLibrary contract.
type BaseLibraryUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseLibraryUpdateRequestIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryUpdateRequestIterator{contract: _BaseLibrary.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseLibraryUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryUpdateRequest)
				if err := _BaseLibrary.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) ParseUpdateRequest(log types.Log) (*BaseLibraryUpdateRequest, error) {
	event := new(BaseLibraryUpdateRequest)
	if err := _BaseLibrary.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseLibrary contract.
type BaseLibraryVersionConfirmIterator struct {
	Event *BaseLibraryVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryVersionConfirm represents a VersionConfirm event raised by the BaseLibrary contract.
type BaseLibraryVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseLibraryVersionConfirmIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryVersionConfirmIterator{contract: _BaseLibrary.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseLibraryVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryVersionConfirm)
				if err := _BaseLibrary.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) ParseVersionConfirm(log types.Log) (*BaseLibraryVersionConfirm, error) {
	event := new(BaseLibraryVersionConfirm)
	if err := _BaseLibrary.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseLibrary contract.
type BaseLibraryVersionDeleteIterator struct {
	Event *BaseLibraryVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryVersionDelete represents a VersionDelete event raised by the BaseLibrary contract.
type BaseLibraryVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseLibrary *BaseLibraryFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseLibraryVersionDeleteIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryVersionDeleteIterator{contract: _BaseLibrary.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseLibrary *BaseLibraryFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseLibraryVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryVersionDelete)
				if err := _BaseLibrary.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseLibrary *BaseLibraryFilterer) ParseVersionDelete(log types.Log) (*BaseLibraryVersionDelete, error) {
	event := new(BaseLibraryVersionDelete)
	if err := _BaseLibrary.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseLibrary contract.
type BaseLibraryVisibilityChangedIterator struct {
	Event *BaseLibraryVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryVisibilityChanged represents a VisibilityChanged event raised by the BaseLibrary contract.
type BaseLibraryVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseLibrary *BaseLibraryFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseLibraryVisibilityChangedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryVisibilityChangedIterator{contract: _BaseLibrary.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseLibrary *BaseLibraryFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseLibraryVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryVisibilityChanged)
				if err := _BaseLibrary.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseLibrary *BaseLibraryFilterer) ParseVisibilityChanged(log types.Log) (*BaseLibraryVisibilityChanged, error) {
	event := new(BaseLibraryVisibilityChanged)
	if err := _BaseLibrary.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryFactoryMetaData contains all meta data concerning the BaseLibraryFactory contract.
var BaseLibraryFactoryMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"createLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_spaceAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
	Sigs: map[string]string{
		"af570c04": "contentSpace()",
		"40b89f06": "createLibrary(address)",
		"02d05d3f": "creator()",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
	},
	Bin: "",
}

// BaseLibraryFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseLibraryFactoryMetaData.ABI instead.
var BaseLibraryFactoryABI = BaseLibraryFactoryMetaData.ABI

// Deprecated: Use BaseLibraryFactoryMetaData.Sigs instead.
// BaseLibraryFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseLibraryFactoryFuncSigs = BaseLibraryFactoryMetaData.Sigs

// BaseLibraryFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseLibraryFactoryMetaData.Bin instead.
var BaseLibraryFactoryBin = BaseLibraryFactoryMetaData.Bin

// DeployBaseLibraryFactory deploys a new Ethereum contract, binding an instance of BaseLibraryFactory to it.
func DeployBaseLibraryFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _spaceAddr common.Address) (common.Address, *types.Transaction, *BaseLibraryFactory, error) {
	parsed, err := ParsedABI(K_BaseLibraryFactory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseLibraryFactoryBin), backend, _spaceAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseLibraryFactory{BaseLibraryFactoryCaller: BaseLibraryFactoryCaller{contract: contract}, BaseLibraryFactoryTransactor: BaseLibraryFactoryTransactor{contract: contract}, BaseLibraryFactoryFilterer: BaseLibraryFactoryFilterer{contract: contract}}, nil
}

// BaseLibraryFactory is an auto generated Go binding around an Ethereum contract.
type BaseLibraryFactory struct {
	BaseLibraryFactoryCaller     // Read-only binding to the contract
	BaseLibraryFactoryTransactor // Write-only binding to the contract
	BaseLibraryFactoryFilterer   // Log filterer for contract events
}

// BaseLibraryFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseLibraryFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseLibraryFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseLibraryFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseLibraryFactory creates a new instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactory(address common.Address, backend bind.ContractBackend) (*BaseLibraryFactory, error) {
	contract, err := bindBaseLibraryFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactory{BaseLibraryFactoryCaller: BaseLibraryFactoryCaller{contract: contract}, BaseLibraryFactoryTransactor: BaseLibraryFactoryTransactor{contract: contract}, BaseLibraryFactoryFilterer: BaseLibraryFactoryFilterer{contract: contract}}, nil
}

// NewBaseLibraryFactoryCaller creates a new read-only instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseLibraryFactoryCaller, error) {
	contract, err := bindBaseLibraryFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactoryCaller{contract: contract}, nil
}

// NewBaseLibraryFactoryTransactor creates a new write-only instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseLibraryFactoryTransactor, error) {
	contract, err := bindBaseLibraryFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactoryTransactor{contract: contract}, nil
}

// NewBaseLibraryFactoryFilterer creates a new log filterer instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseLibraryFactoryFilterer, error) {
	contract, err := bindBaseLibraryFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactoryFilterer{contract: contract}, nil
}

// bindBaseLibraryFactory binds a generic wrapper to an already deployed contract.
func bindBaseLibraryFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseLibraryFactory)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseLibraryFactory.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseLibraryFactory.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseLibraryFactory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseLibraryFactory.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseLibraryFactory.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) CreateLibrary(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "createLibrary", address_KMS)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "kill")
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.RawTransact(opts, calldata)
}

// BaseTenantConsumerGroupMetaData contains all meta data concerning the BaseTenantConsumerGroup contract.
var BaseTenantConsumerGroupMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"grantAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"setAndGetBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"membersNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"incrementCounter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"membersMap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidates\",\"type\":\"address[]\"}],\"name\":\"grantAccessMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tenant\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isConsumerGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"}],\"name\":\"deleteGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tenantSpace\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"MemberRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint32\"}],\"name\":\"CounterIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ord\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"prev\",\"type\":\"bool\"}],\"name\":\"BitSetAndGet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"}],\"name\":\"WordGroupDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"97ac4fd2": "CAN_ACCESS()",
		"ef1d7dc2": "CAN_EDIT()",
		"100508a2": "CAN_SEE()",
		"1bf7a912": "accessRequestV3(bytes32[],address[])",
		"6e375427": "canCommit()",
		"14cfabb3": "canConfirm()",
		"81beeb64": "canEdit()",
		"5f6a1301": "clearPending()",
		"9867db74": "commit(string)",
		"375a6e7c": "commitPending()",
		"446e8826": "confirmCommit()",
		"af570c04": "contentSpace()",
		"331b86c0": "countVersionHashes()",
		"02d05d3f": "creator()",
		"e57097c9": "deleteGroup(bytes32)",
		"e1a70717": "deleteVersion(string)",
		"30f846a2": "getBit(bytes32,uint8)",
		"e1954b61": "getCounter(bytes32,uint8)",
		"ac55c906": "getMeta(bytes)",
		"0ae5e739": "grantAccess(address)",
		"9602a0b3": "grantAccessMany(address[])",
		"95a078e8": "hasAccess(address)",
		"67e5c3bf": "hasEditorRight(address)",
		"7558cbf0": "incrementCounter(bytes32,uint8)",
		"6380501f": "indexCategory()",
		"24d7806c": "isAdmin(address)",
		"dde12828": "isConsumerGroup()",
		"41c0e1b5": "kill()",
		"872ea68a": "membersMap(address)",
		"55277a5b": "membersNum()",
		"e02dd9c2": "objectHash()",
		"40b87a26": "objectTimestamp()",
		"8da5cb5b": "owner()",
		"00821de3": "parentAddress()",
		"628449fd": "pendingHash()",
		"e542b7cb": "putMeta(bytes,bytes)",
		"85e68531": "revokeAccess(address)",
		"24d7c18d": "setAndGetBit(bytes32,uint8)",
		"22e564eb": "setGroupRights(address,uint8,uint8)",
		"0fe1b5a2": "setRights(address,uint8,uint8)",
		"aa024e8b": "setVisibility(uint8)",
		"adf07791": "tenant()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"c287e0ed": "updateRequest()",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
		"7ca8f618": "versionHashes(uint256)",
		"7886f747": "versionTimestamp(uint256)",
		"29adec14": "visibility()",
	},
	Bin: "",
}

// BaseTenantConsumerGroupABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseTenantConsumerGroupMetaData.ABI instead.
var BaseTenantConsumerGroupABI = BaseTenantConsumerGroupMetaData.ABI

// Deprecated: Use BaseTenantConsumerGroupMetaData.Sigs instead.
// BaseTenantConsumerGroupFuncSigs maps the 4-byte function signature to its string representation.
var BaseTenantConsumerGroupFuncSigs = BaseTenantConsumerGroupMetaData.Sigs

// BaseTenantConsumerGroupBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseTenantConsumerGroupMetaData.Bin instead.
var BaseTenantConsumerGroupBin = BaseTenantConsumerGroupMetaData.Bin

// DeployBaseTenantConsumerGroup deploys a new Ethereum contract, binding an instance of BaseTenantConsumerGroup to it.
func DeployBaseTenantConsumerGroup(auth *bind.TransactOpts, backend bind.ContractBackend, _tenantSpace common.Address) (common.Address, *types.Transaction, *BaseTenantConsumerGroup, error) {
	parsed, err := ParsedABI(K_BaseTenantConsumerGroup)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseTenantConsumerGroupBin), backend, _tenantSpace)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseTenantConsumerGroup{BaseTenantConsumerGroupCaller: BaseTenantConsumerGroupCaller{contract: contract}, BaseTenantConsumerGroupTransactor: BaseTenantConsumerGroupTransactor{contract: contract}, BaseTenantConsumerGroupFilterer: BaseTenantConsumerGroupFilterer{contract: contract}}, nil
}

// BaseTenantConsumerGroup is an auto generated Go binding around an Ethereum contract.
type BaseTenantConsumerGroup struct {
	BaseTenantConsumerGroupCaller     // Read-only binding to the contract
	BaseTenantConsumerGroupTransactor // Write-only binding to the contract
	BaseTenantConsumerGroupFilterer   // Log filterer for contract events
}

// BaseTenantConsumerGroupCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseTenantConsumerGroupCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTenantConsumerGroupTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseTenantConsumerGroupTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTenantConsumerGroupFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseTenantConsumerGroupFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseTenantConsumerGroup creates a new instance of BaseTenantConsumerGroup, bound to a specific deployed contract.
func NewBaseTenantConsumerGroup(address common.Address, backend bind.ContractBackend) (*BaseTenantConsumerGroup, error) {
	contract, err := bindBaseTenantConsumerGroup(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroup{BaseTenantConsumerGroupCaller: BaseTenantConsumerGroupCaller{contract: contract}, BaseTenantConsumerGroupTransactor: BaseTenantConsumerGroupTransactor{contract: contract}, BaseTenantConsumerGroupFilterer: BaseTenantConsumerGroupFilterer{contract: contract}}, nil
}

// NewBaseTenantConsumerGroupCaller creates a new read-only instance of BaseTenantConsumerGroup, bound to a specific deployed contract.
func NewBaseTenantConsumerGroupCaller(address common.Address, caller bind.ContractCaller) (*BaseTenantConsumerGroupCaller, error) {
	contract, err := bindBaseTenantConsumerGroup(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupCaller{contract: contract}, nil
}

// NewBaseTenantConsumerGroupTransactor creates a new write-only instance of BaseTenantConsumerGroup, bound to a specific deployed contract.
func NewBaseTenantConsumerGroupTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseTenantConsumerGroupTransactor, error) {
	contract, err := bindBaseTenantConsumerGroup(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupTransactor{contract: contract}, nil
}

// NewBaseTenantConsumerGroupFilterer creates a new log filterer instance of BaseTenantConsumerGroup, bound to a specific deployed contract.
func NewBaseTenantConsumerGroupFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseTenantConsumerGroupFilterer, error) {
	contract, err := bindBaseTenantConsumerGroup(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupFilterer{contract: contract}, nil
}

// bindBaseTenantConsumerGroup binds a generic wrapper to an already deployed contract.
func bindBaseTenantConsumerGroup(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseTenantConsumerGroup)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() view returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "CAN_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() view returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "CAN_EDIT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() view returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "CAN_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() view returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "canCommit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() view returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "canConfirm")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() view returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "canEdit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() view returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "commitPending")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() view returns(uint256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "countVersionHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) view returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) GetBit(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (bool, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "getBit", _ident, _ord)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) view returns(uint32)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) GetCounter(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (uint32, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "getCounter", _ident, _ord)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) view returns(bytes)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "getMeta", key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) view returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "hasAccess", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) view returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "hasEditorRight", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() view returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "indexCategory")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) view returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "isAdmin", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsConsumerGroup is a free data retrieval call binding the contract method 0xdde12828.
//
// Solidity: function isConsumerGroup() view returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) IsConsumerGroup(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "isConsumerGroup")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// MembersMap is a free data retrieval call binding the contract method 0x872ea68a.
//
// Solidity: function membersMap(address ) view returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) MembersMap(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "membersMap", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// MembersNum is a free data retrieval call binding the contract method 0x55277a5b.
//
// Solidity: function membersNum() view returns(uint256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) MembersNum(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "membersNum")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() view returns(string)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "objectHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() view returns(uint256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "objectTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "parentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() view returns(string)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "pendingHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Tenant is a free data retrieval call binding the contract method 0xadf07791.
//
// Solidity: function tenant() view returns(address)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) Tenant(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "tenant")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) view returns(string)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "versionHashes", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) view returns(uint256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "versionTimestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() view returns(uint8)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseTenantConsumerGroup.contract.Call(opts, &out, "visibility")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) payable returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "clearPending")
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "commit", _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() payable returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "confirmCommit")
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) DeleteGroup(opts *bind.TransactOpts, _ident [32]byte) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "deleteGroup", _ident)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "deleteVersion", _versionHash)
}

// GrantAccess is a paid mutator transaction binding the contract method 0x0ae5e739.
//
// Solidity: function grantAccess(address candidate) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) GrantAccess(opts *bind.TransactOpts, candidate common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "grantAccess", candidate)
}

// GrantAccessMany is a paid mutator transaction binding the contract method 0x9602a0b3.
//
// Solidity: function grantAccessMany(address[] candidates) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) GrantAccessMany(opts *bind.TransactOpts, candidates []common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "grantAccessMany", candidates)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) IncrementCounter(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "incrementCounter", _ident, _ord)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "kill")
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "putMeta", key, value)
}

// RevokeAccess is a paid mutator transaction binding the contract method 0x85e68531.
//
// Solidity: function revokeAccess(address candidate) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) RevokeAccess(opts *bind.TransactOpts, candidate common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "revokeAccess", candidate)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) SetAndGetBit(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "setAndGetBit", _ident, _ord)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "setVisibility", _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "transferOwnership", newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.Transact(opts, "updateRequest")
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseTenantConsumerGroup.contract.RawTransact(opts, calldata)
}

// BaseTenantConsumerGroupAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupAccessRequestV3Iterator struct {
	Event *BaseTenantConsumerGroupAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupAccessRequestV3 represents a AccessRequestV3 event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseTenantConsumerGroupAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupAccessRequestV3Iterator{contract: _BaseTenantConsumerGroup.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupAccessRequestV3)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseAccessRequestV3(log types.Log) (*BaseTenantConsumerGroupAccessRequestV3, error) {
	event := new(BaseTenantConsumerGroupAccessRequestV3)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantConsumerGroupBitSetAndGetIterator is returned from FilterBitSetAndGet and is used to iterate over the raw logs and unpacked data for BitSetAndGet events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupBitSetAndGetIterator struct {
	Event *BaseTenantConsumerGroupBitSetAndGet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupBitSetAndGetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupBitSetAndGet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupBitSetAndGet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupBitSetAndGetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupBitSetAndGetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupBitSetAndGet represents a BitSetAndGet event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupBitSetAndGet struct {
	Ident [32]byte
	Ord   uint8
	Prev  bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBitSetAndGet is a free log retrieval operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterBitSetAndGet(opts *bind.FilterOpts) (*BaseTenantConsumerGroupBitSetAndGetIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupBitSetAndGetIterator{contract: _BaseTenantConsumerGroup.contract, event: "BitSetAndGet", logs: logs, sub: sub}, nil
}

// WatchBitSetAndGet is a free log subscription operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchBitSetAndGet(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupBitSetAndGet) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupBitSetAndGet)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitSetAndGet is a log parse operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseBitSetAndGet(log types.Log) (*BaseTenantConsumerGroupBitSetAndGet, error) {
	event := new(BaseTenantConsumerGroupBitSetAndGet)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantConsumerGroupCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupCommitPendingIterator struct {
	Event *BaseTenantConsumerGroupCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupCommitPending represents a CommitPending event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseTenantConsumerGroupCommitPendingIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupCommitPendingIterator{contract: _BaseTenantConsumerGroup.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupCommitPending)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseCommitPending(log types.Log) (*BaseTenantConsumerGroupCommitPending, error) {
	event := new(BaseTenantConsumerGroupCommitPending)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantConsumerGroupCounterIncrementedIterator is returned from FilterCounterIncremented and is used to iterate over the raw logs and unpacked data for CounterIncremented events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupCounterIncrementedIterator struct {
	Event *BaseTenantConsumerGroupCounterIncremented // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupCounterIncrementedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupCounterIncremented)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupCounterIncremented)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupCounterIncrementedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupCounterIncrementedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupCounterIncremented represents a CounterIncremented event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupCounterIncremented struct {
	Ident [32]byte
	Slot  uint8
	Val   uint32
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCounterIncremented is a free log retrieval operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterCounterIncremented(opts *bind.FilterOpts) (*BaseTenantConsumerGroupCounterIncrementedIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupCounterIncrementedIterator{contract: _BaseTenantConsumerGroup.contract, event: "CounterIncremented", logs: logs, sub: sub}, nil
}

// WatchCounterIncremented is a free log subscription operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchCounterIncremented(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupCounterIncremented) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupCounterIncremented)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCounterIncremented is a log parse operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseCounterIncremented(log types.Log) (*BaseTenantConsumerGroupCounterIncremented, error) {
	event := new(BaseTenantConsumerGroupCounterIncremented)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantConsumerGroupMemberAddedIterator is returned from FilterMemberAdded and is used to iterate over the raw logs and unpacked data for MemberAdded events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupMemberAddedIterator struct {
	Event *BaseTenantConsumerGroupMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupMemberAdded represents a MemberAdded event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupMemberAdded struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMemberAdded is a free log retrieval operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterMemberAdded(opts *bind.FilterOpts) (*BaseTenantConsumerGroupMemberAddedIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "MemberAdded")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupMemberAddedIterator{contract: _BaseTenantConsumerGroup.contract, event: "MemberAdded", logs: logs, sub: sub}, nil
}

// WatchMemberAdded is a free log subscription operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchMemberAdded(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupMemberAdded) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "MemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupMemberAdded)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "MemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMemberAdded is a log parse operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseMemberAdded(log types.Log) (*BaseTenantConsumerGroupMemberAdded, error) {
	event := new(BaseTenantConsumerGroupMemberAdded)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "MemberAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantConsumerGroupMemberRevokedIterator is returned from FilterMemberRevoked and is used to iterate over the raw logs and unpacked data for MemberRevoked events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupMemberRevokedIterator struct {
	Event *BaseTenantConsumerGroupMemberRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupMemberRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupMemberRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupMemberRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupMemberRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupMemberRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupMemberRevoked represents a MemberRevoked event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupMemberRevoked struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMemberRevoked is a free log retrieval operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterMemberRevoked(opts *bind.FilterOpts) (*BaseTenantConsumerGroupMemberRevokedIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "MemberRevoked")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupMemberRevokedIterator{contract: _BaseTenantConsumerGroup.contract, event: "MemberRevoked", logs: logs, sub: sub}, nil
}

// WatchMemberRevoked is a free log subscription operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchMemberRevoked(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupMemberRevoked) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "MemberRevoked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupMemberRevoked)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "MemberRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMemberRevoked is a log parse operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseMemberRevoked(log types.Log) (*BaseTenantConsumerGroupMemberRevoked, error) {
	event := new(BaseTenantConsumerGroupMemberRevoked)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "MemberRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantConsumerGroupObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupObjectMetaChangedIterator struct {
	Event *BaseTenantConsumerGroupObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseTenantConsumerGroupObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupObjectMetaChangedIterator{contract: _BaseTenantConsumerGroup.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupObjectMetaChanged)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseObjectMetaChanged(log types.Log) (*BaseTenantConsumerGroupObjectMetaChanged, error) {
	event := new(BaseTenantConsumerGroupObjectMetaChanged)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantConsumerGroupUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupUpdateRequestIterator struct {
	Event *BaseTenantConsumerGroupUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupUpdateRequest represents a UpdateRequest event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseTenantConsumerGroupUpdateRequestIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupUpdateRequestIterator{contract: _BaseTenantConsumerGroup.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupUpdateRequest)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseUpdateRequest(log types.Log) (*BaseTenantConsumerGroupUpdateRequest, error) {
	event := new(BaseTenantConsumerGroupUpdateRequest)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantConsumerGroupVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupVersionConfirmIterator struct {
	Event *BaseTenantConsumerGroupVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupVersionConfirm represents a VersionConfirm event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseTenantConsumerGroupVersionConfirmIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupVersionConfirmIterator{contract: _BaseTenantConsumerGroup.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupVersionConfirm)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseVersionConfirm(log types.Log) (*BaseTenantConsumerGroupVersionConfirm, error) {
	event := new(BaseTenantConsumerGroupVersionConfirm)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantConsumerGroupVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupVersionDeleteIterator struct {
	Event *BaseTenantConsumerGroupVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupVersionDelete represents a VersionDelete event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseTenantConsumerGroupVersionDeleteIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupVersionDeleteIterator{contract: _BaseTenantConsumerGroup.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupVersionDelete)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseVersionDelete(log types.Log) (*BaseTenantConsumerGroupVersionDelete, error) {
	event := new(BaseTenantConsumerGroupVersionDelete)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantConsumerGroupVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupVisibilityChangedIterator struct {
	Event *BaseTenantConsumerGroupVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupVisibilityChanged represents a VisibilityChanged event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseTenantConsumerGroupVisibilityChangedIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupVisibilityChangedIterator{contract: _BaseTenantConsumerGroup.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupVisibilityChanged)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseVisibilityChanged(log types.Log) (*BaseTenantConsumerGroupVisibilityChanged, error) {
	event := new(BaseTenantConsumerGroupVisibilityChanged)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantConsumerGroupWordGroupDeletedIterator is returned from FilterWordGroupDeleted and is used to iterate over the raw logs and unpacked data for WordGroupDeleted events raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupWordGroupDeletedIterator struct {
	Event *BaseTenantConsumerGroupWordGroupDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantConsumerGroupWordGroupDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantConsumerGroupWordGroupDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantConsumerGroupWordGroupDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantConsumerGroupWordGroupDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantConsumerGroupWordGroupDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantConsumerGroupWordGroupDeleted represents a WordGroupDeleted event raised by the BaseTenantConsumerGroup contract.
type BaseTenantConsumerGroupWordGroupDeleted struct {
	Ident [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWordGroupDeleted is a free log retrieval operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) FilterWordGroupDeleted(opts *bind.FilterOpts) (*BaseTenantConsumerGroupWordGroupDeletedIterator, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.FilterLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return &BaseTenantConsumerGroupWordGroupDeletedIterator{contract: _BaseTenantConsumerGroup.contract, event: "WordGroupDeleted", logs: logs, sub: sub}, nil
}

// WatchWordGroupDeleted is a free log subscription operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) WatchWordGroupDeleted(opts *bind.WatchOpts, sink chan<- *BaseTenantConsumerGroupWordGroupDeleted) (event.Subscription, error) {

	logs, sub, err := _BaseTenantConsumerGroup.contract.WatchLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantConsumerGroupWordGroupDeleted)
				if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWordGroupDeleted is a log parse operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseTenantConsumerGroup *BaseTenantConsumerGroupFilterer) ParseWordGroupDeleted(log types.Log) (*BaseTenantConsumerGroupWordGroupDeleted, error) {
	event := new(BaseTenantConsumerGroupWordGroupDeleted)
	if err := _BaseTenantConsumerGroup.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantFactoryMetaData contains all meta data concerning the BaseTenantFactory contract.
var BaseTenantFactoryMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tenantName\",\"type\":\"string\"},{\"name\":\"_kmsAddr\",\"type\":\"address\"},{\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"createTenant\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_spaceAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tenantAddress\",\"type\":\"address\"}],\"name\":\"CreateTenant\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"af570c04": "contentSpace()",
		"8256e76e": "createTenant(string,address,uint256)",
		"02d05d3f": "creator()",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
	},
	Bin: "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f427354656e616e74466163746f72793230323330343034313230303030504d006005553480156200007d57600080fd5b50604051602080620088fa833981018060405260208110156200009f57600080fd5b50516002805432600160a060020a0319918216179091556003805433921682179055600160a060020a0382161480620000e95750620000e981620001e960201b620009ea1760201c565b151562000142576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180620088d0602a913960400191505060405180910390fd5b33600160a060020a0382161415620001c3576200016a816200068560201b62000e531760201c565b1515620001c3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180620088ad6023913960400191505060405180910390fd5b60048054600160a060020a031916600160a060020a039290921691909117905562000a04565b604080518082018252601d81527f5f454c565f47524f55505f54454e414e545f415554484f524954494553000000602080830191825292517fac55c906000000000000000000000000000000000000000000000000000000008152600481019384528251602482015282516000948694606094600160a060020a0387169463ac55c906949293928392604490920191908083838d5b83811015620002985781810151838201526020016200027e565b50505050905090810190601f168015620002c65780820380516001836020036101000a031916815260200191505b509250505060006040518083038186803b158015620002e457600080fd5b505afa158015620002f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156200032357600080fd5b8101908080516401000000008111156200033c57600080fd5b820160208101848111156200035057600080fd5b81516401000000008111828201871017156200036b57600080fd5b50508051909450151592506200038a9150505760009250505062000680565b62000394620009ed565b620003aa826200074b60201b62000f221760201c565b9050620003b6620009ed565b620004016040805190810160405280600181526020017f2c000000000000000000000000000000000000000000000000000000000000008152506200074b60201b62000f221760201c565b905060606200041f82846200077260201b62000f491790919060201c565b6001016040519080825280602002602001820160405280156200045757816020015b6060815260200190600190039081620004415790505b50905060005b8151811015620006755762000496620004858486620007ef60201b62000fbc1790919060201c565b6200080c60201b62000fd31760201c565b8282815181101515620004a557fe5b90602001906020020181905250600073__$f2868cc5300372e492613b0df8a63b3548$__6342526e4e8484815181101515620004dd57fe5b906020019060200201516040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620005355781810151838201526020016200051b565b50505050905090810190601f168015620005635780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1580156200058157600080fd5b505af415801562000596573d6000803e3d6000fd5b505050506040513d6020811015620005ad57600080fd5b5051604080517f872ea68a000000000000000000000000000000000000000000000000000000008152326004820152905191925082918291600091600160a060020a0384169163872ea68a916024808301926020929190829003018186803b1580156200061957600080fd5b505afa1580156200062e573d6000803e3d6000fd5b505050506040513d60208110156200064557600080fd5b505190508015620006645760019a505050505050505050505062000680565b5050600190920191506200045d9050565b506000955050505050505b919050565b600080829050600081600160a060020a03166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b158015620006c757600080fd5b505afa158015620006dc573d6000803e3d6000fd5b505050506040513d6020811015620006f357600080fd5b5051905080156200074157806001608060020a031981167f42617365436f6e74656e7453706163650000000000000000000000000000000014156200073f576001935050505062000680565b505b5060009392505050565b62000755620009ed565b506040805180820190915281518152602082810190820152919050565b60008082600001516200079e85600001518660200151866000015187602001516200086560201b60201c565b0190505b83516020850151018111620007e8578251602080860151865182870151600190960195620007df93928603909103918591859162000865811b901c565b019050620007a2565b5092915050565b620007f9620009ed565b620007e88383836200093060201b60201c565b60608082600001516040519080825280601f01601f1916602001820160405280156200083f576020820181803883390190505b5090506000602082019050620007e88185602001518660000151620009ad60201b60201c565b60008381868511620009215760208511620008e25783518251600019600860208990030260020a011960001b91821690888a018890039083165b808314620008d357818610620008c0578a8a01965050505050505062000928565b506001909401805190949083166200089f565b85965050505050505062000928565b508383206000905b85880382116200091f57858320818114156200090d578394505050505062000928565b506001928301929190910190620008ea565b505b5050508284015b949350505050565b6200093a620009ed565b60006200096085600001518660200151866000015187602001516200086560201b60201c565b602080870180519186019190915280518203855286519051919250018114156200098e5760008552620009a4565b8351835186519101900385528351810160208601525b50909392505050565b5b60208110620009cf578151835260209283019290910190601f1901620009ae565b905182516020929092036101000a6000190180199091169116179052565b604080518082019091526000808252602082015290565b617e998062000a146000396000f3fe608060405260043610620000925760003560e01c80636d2e4b1b11620000615780636d2e4b1b14620001225780638256e76e14620001595780638da5cb5b1462000221578063af570c041462000239578063f2fde38b14620002515762000092565b806302d05d3f146200009457806341c0e1b514620000c857806354fd4d5014620000e05780635f4fcae1146200010a575b005b348015620000a157600080fd5b50620000ac62000288565b60408051600160a060020a039092168252519081900360200190f35b348015620000d557600080fd5b506200009262000297565b348015620000ed57600080fd5b50620000f8620002bd565b60408051918252519081900360200190f35b3480156200011757600080fd5b50620000f8620002c3565b3480156200012f57600080fd5b5062000092600480360360208110156200014857600080fd5b5035600160a060020a0316620002c9565b3480156200016657600080fd5b50620000ac600480360360608110156200017f57600080fd5b8101906020810181356401000000008111156200019b57600080fd5b820183602082011115620001ae57600080fd5b80359060200191846001830284011164010000000083111715620001d157600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050600160a060020a03833516935050506020013562000326565b3480156200022e57600080fd5b50620000ac62000644565b3480156200024657600080fd5b50620000ac62000653565b3480156200025e57600080fd5b5062000092600480360360208110156200027757600080fd5b5035600160a060020a031662000662565b600254600160a060020a031681565b600354600160a060020a03163314620002af57600080fd5b600354600160a060020a0316ff5b60055481565b60015481565b600254600160a060020a03163314620002e157600080fd5b600160a060020a0381161515620002f757600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008062000336858585620006bf565b60048054604080517f63e6ffdd0000000000000000000000000000000000000000000000000000000081523293810193909352519293508392600160a060020a039091169160009183916363e6ffdd916024808301926020929190829003018186803b158015620003a657600080fd5b505afa158015620003bb573d6000803e3d6000fd5b505050506040513d6020811015620003d257600080fd5b505190506000620003e38262000877565b9050801515620004fa57604080517ff2fde38b00000000000000000000000000000000000000000000000000000000815232600482015290518391600160a060020a0387169163f2fde38b9160248082019260009290919082900301818387803b1580156200045157600080fd5b505af115801562000466573d6000803e3d6000fd5b5050604080517f224dcba0000000000000000000000000000000000000000000000000000000008152600160a060020a038a81166004830152600060248301819052600260448401529251908616945063224dcba093506064808301939282900301818387803b158015620004da57600080fd5b505af1158015620004ef573d6000803e3d6000fd5b5050505050620005fb565b604080517f0fe1b5a2000000000000000000000000000000000000000000000000000000008152326004820152600060248201819052600260448301529151600160a060020a03871692630fe1b5a2926064808201939182900301818387803b1580156200056757600080fd5b505af11580156200057c573d6000803e3d6000fd5b5050604080517ff2fde38b0000000000000000000000000000000000000000000000000000000081523260048201529051600160a060020a038816935063f2fde38b9250602480830192600092919082900301818387803b158015620005e157600080fd5b505af1158015620005f6573d6000803e3d6000fd5b505050505b60408051600160a060020a038716815290517f4e55a861e321e4eb19dbd191fa0e28ba386976e8df7d9b669e868826affef1999181900360200190a15092979650505050505050565b600354600160a060020a031681565b600454600160a060020a031681565b600354600160a060020a031633146200067a57600080fd5b600160a060020a03811615156200069057600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080606060405180602001620006d690620009dc565b601f1982820381018352601f909101166040818152600454600160a060020a039081166020848101828152928b166060808701919091529385018481528c5160808701528c51969750939591948c948c9493909260a09092019186019080838360005b838110156200075357818101518382015260200162000739565b50505050905090810190601f168015620007815780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040529050606082826040516020018083805190602001908083835b60208310620007d15780518252601f199092019160209182019101620007b0565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106200081b5780518252601f199092019160209182019101620007fa565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405290508581516020830134f59350833b15156200086b57600080fd5b50919695505050505050565b604080517f76657273696f6e415049282900000000000000000000000000000000000000008152815190819003600c018120600482526024820183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909216919091178152915181516000938493606093600160a060020a03881693919290918291908083835b60208310620009445780518252601f19909201916020918201910162000923565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114620009a6576040519150601f19603f3d011682016040523d82523d6000602084013e620009ab565b606091505b509092509050811580620009be57508051155b15620009d057600092505050620009d7565b6001925050505b919050565b616cae80620011c083390190565b604080518082018252601d81527f5f454c565f47524f55505f54454e414e545f415554484f524954494553000000602080830191825292517fac55c906000000000000000000000000000000000000000000000000000000008152600481019384528251602482015282516000948694606094600160a060020a0387169463ac55c906949293928392604490920191908083838d5b8381101562000a9957818101518382015260200162000a7f565b50505050905090810190601f16801562000ac75780820380516001836020036101000a031916815260200191505b509250505060006040518083038186803b15801562000ae557600080fd5b505afa15801562000afa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101562000b2457600080fd5b81019080805164010000000081111562000b3d57600080fd5b8201602081018481111562000b5157600080fd5b815164010000000081118282018710171562000b6c57600080fd5b505080519094501515925062000b8b91505057600092505050620009d7565b62000b95620011a8565b62000ba08262000f22565b905062000bac620011a8565b62000bec6040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525062000f22565b9050606062000c02838363ffffffff62000f4916565b60010160405190808252806020026020018201604052801562000c3a57816020015b606081526020019060019003908162000c245790505b50905060005b815181101562000e455762000c6662000c60858563ffffffff62000fbc16565b62000fd3565b828281518110151562000c7557fe5b90602001906020020181905250600073__$f2868cc5300372e492613b0df8a63b3548$__6342526e4e848481518110151562000cad57fe5b906020019060200201516040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101562000d0557818101518382015260200162000ceb565b50505050905090810190601f16801562000d335780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801562000d5157600080fd5b505af415801562000d66573d6000803e3d6000fd5b505050506040513d602081101562000d7d57600080fd5b5051604080517f872ea68a000000000000000000000000000000000000000000000000000000008152326004820152905191925082918291600091600160a060020a0384169163872ea68a916024808301926020929190829003018186803b15801562000de957600080fd5b505afa15801562000dfe573d6000803e3d6000fd5b505050506040513d602081101562000e1557600080fd5b50519050801562000e345760019a5050505050505050505050620009d7565b50506001909201915062000c409050565b506000979650505050505050565b600080829050600081600160a060020a03166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801562000e9557600080fd5b505afa15801562000eaa573d6000803e3d6000fd5b505050506040513d602081101562000ec157600080fd5b50519050801562000f1857806fffffffffffffffffffffffffffffffff1981167f42617365436f6e74656e74537061636500000000000000000000000000000000141562000f165760019350505050620009d7565b505b5060009392505050565b62000f2c620011a8565b506040805180820190915281518152602082810190820152919050565b600080826000015162000f6f856000015186602001518660000151876020015162001026565b0190505b8351602085015101811162000fb557825160208086015186519186015160019095019462000fac92918503909103908490849062001026565b01905062000f73565b5092915050565b62000fc6620011a8565b62000fb5838383620010f1565b60608082600001516040519080825280601f01601f19166020018201604052801562001006576020820181803883390190505b509050600060208201905062000fb5818560200151866000015162001168565b60008381868511620010e25760208511620010a35783518251600019600860208990030260020a011960001b91821690888a018890039083165b808314620010945781861062001081578a8a019650505050505050620010e9565b5060019094018051909490831662001060565b859650505050505050620010e9565b508383206000905b8588038211620010e05785832081811415620010ce5783945050505050620010e9565b506001928301929190910190620010ab565b505b5050508284015b949350505050565b620010fb620011a8565b60006200111b856000015186602001518660000151876020015162001026565b602080870180519186019190915280518203855286519051919250018114156200114957600085526200115f565b8351835186519101900385528351810160208601525b50909392505050565b5b602081106200118a578151835260209283019290910190601f190162001169565b905182516020929092036101000a6000190180199091169116179052565b60408051808201909152600080825260208201529056fe608060408190527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060019081557f41636365737369626c653230323030363236313231363030504f0000000000006008556009805460ff191690911761ff00191690557f4564697461626c653230323030393238313130303030504f0000000000000000600a557f4261736554656e616e7453706163653230323030353034313230303030504f0060115562015180601555607860165562006cae3881900390819083398101806040526060811015620000fc57600080fd5b8151602083018051919392830192916401000000008111156200011e57600080fd5b820160208101848111156200013257600080fd5b81516401000000008111828201871017156200014d57600080fd5b505060209182015160028054600160a060020a031990811632179091556003805490911633179055815191945092506200018e9160129190850190620009ed565b5060048054600160a060020a031916600160a060020a03858116919091179182905516331480620001dd5750600454620001dd90600160a060020a0316620002af602090811b62005acd17901c565b151562000236576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018062006c8c6022913960400191505060405180910390fd5b60148054600160a060020a031916600160a060020a03838116919091179091556009805461ff001916610500179055601154600354604080519283529216602082015281517fc2fe67ac699789805c53a93eea70eb0e316deaf8db4b810382d2412ba4fcb4c8929181900390910190a150505062000aa9565b604080518082018252601d81527f5f454c565f47524f55505f54454e414e545f415554484f524954494553000000602080830191825292517fac55c906000000000000000000000000000000000000000000000000000000008152600481019384528251602482015282516000948694606094600160a060020a0387169463ac55c906949293928392604490920191908083838d5b838110156200035e57818101518382015260200162000344565b50505050905090810190601f1680156200038c5780820380516001836020036101000a031916815260200191505b509250505060006040518083038186803b158015620003aa57600080fd5b505afa158015620003bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015620003e957600080fd5b8101908080516401000000008111156200040257600080fd5b820160208101848111156200041657600080fd5b81516401000000008111828201871017156200043157600080fd5b5050805190945015159250620004509150505760009250505062000746565b6200045a62000a72565b62000470826200074b60201b62005f0c1760201c565b90506200047c62000a72565b620004c76040805190810160405280600181526020017f2c000000000000000000000000000000000000000000000000000000000000008152506200074b60201b62005f0c1760201c565b90506060620004e582846200077260201b62005f311790919060201c565b6001016040519080825280602002602001820160405280156200051d57816020015b6060815260200190600190039081620005075790505b50905060005b81518110156200073b576200055c6200054b8486620007ef60201b62005f9e1790919060201c565b6200080c60201b62005fb11760201c565b82828151811015156200056b57fe5b90602001906020020181905250600073__$f2868cc5300372e492613b0df8a63b3548$__6342526e4e8484815181101515620005a357fe5b906020019060200201516040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620005fb578181015183820152602001620005e1565b50505050905090810190601f168015620006295780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1580156200064757600080fd5b505af41580156200065c573d6000803e3d6000fd5b505050506040513d60208110156200067357600080fd5b5051604080517f872ea68a000000000000000000000000000000000000000000000000000000008152326004820152905191925082918291600091600160a060020a0384169163872ea68a916024808301926020929190829003018186803b158015620006df57600080fd5b505afa158015620006f4573d6000803e3d6000fd5b505050506040513d60208110156200070b57600080fd5b5051905080156200072a5760019a505050505050505050505062000746565b505060019092019150620005239050565b506000955050505050505b919050565b6200075562000a72565b506040805180820190915281518152602082810190820152919050565b60008082600001516200079e85600001518660200151866000015187602001516200086560201b60201c565b0190505b83516020850151018111620007e8578251602080860151865182870151600190960195620007df93928603909103918591859162000865811b901c565b019050620007a2565b5092915050565b620007f962000a72565b620007e88383836200093060201b60201c565b60608082600001516040519080825280601f01601f1916602001820160405280156200083f576020820181803883390190505b5090506000602082019050620007e88185602001518660000151620009ad60201b60201c565b60008381868511620009215760208511620008e25783518251600019600860208990030260020a011960001b91821690888a018890039083165b808314620008d357818610620008c0578a8a01965050505050505062000928565b506001909401805190949083166200089f565b85965050505050505062000928565b508383206000905b85880382116200091f57858320818114156200090d578394505050505062000928565b506001928301929190910190620008ea565b505b5050508284015b949350505050565b6200093a62000a72565b60006200096085600001518660200151866000015187602001516200086560201b60201c565b602080870180519186019190915280518203855286519051919250018114156200098e5760008552620009a4565b8351835186519101900385528351810160208601525b50909392505050565b5b60208110620009cf578151835260209283019290910190601f1901620009ae565b905182516020929092036101000a6000190180199091169116179052565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000a3057805160ff191683800117855562000a60565b8280016001018555821562000a60579182015b8281111562000a6057825182559160200191906001019062000a43565b5062000a6e92915062000a89565b5090565b604080518082019091526000808252602082015290565b62000aa691905b8082111562000a6e576000815560010162000a90565b90565b6161d38062000ab96000396000f3fe60806040526004361061049e5760003560e01c80636d2e4b1b11610260578063ac65b64911610144578063e02dd9c2116100c1578063e7cf0c6611610085578063e7cf0c661461188d578063ea8a3ed8146118c0578063ed1f6456146118f0578063ef1d7dc2146119c2578063f1df8140146119d7578063f2fde38b146119ec5761049e565b8063e02dd9c214611615578063e1954b611461162a578063e1a7071714611676578063e542b7cb14611729578063e57097c9146118635761049e565b8063c2a21f1411610108578063c2a21f141461152d578063c9e8e72d14611561578063cb3899b314611594578063d21a8c94146115cd578063d6be0f49146115e25761049e565b8063ac65b6491461149e578063af570c04146114b3578063b8cfaf05146114c8578063bf4e088f146114dd578063c287e0ed146115185761049e565b80638da5cb5b116101dd5780639867db74116101a15780639867db74146111d65780639bb5cd3f146112895780639c075d671461129e578063a9059cbb14611385578063aa024e8b146113be578063ac55c906146113eb5761049e565b80638da5cb5b1461109357806390c3f38f146110a857806395a078e81461115b57806397ac4fd21461118e57806397d0b02c146111a35761049e565b80637886f747116102245780637886f74714610f7a5780637ca8f61814610fa457806381beeb6414610fce57806387e3828114610fe35780638d2a23db146110165761049e565b80636d2e4b1b14610e305780636e37542714610e635780637284e41614610e7857806374daf3a014610e8d5780637558cbf014610f475761049e565b8063375a6e7c11610387578063575185ed116103045780635f6a1301116102c85780635f6a130114610d52578063628449fd14610d675780636380501f14610d7c57806363e6ffdd14610d9157806365d8dd3414610dc457806367e5c3bf14610dfd5761049e565b8063575185ed14610ccb578063589aafc114610ce057806358d40b2514610d135780635c8a768714610d285780635f4fcae114610d3d5761049e565b806341c0e1b51161034b57806341c0e1b514610c36578063430e621e14610c4b578063446e882614610c7e5780634d368f1014610c8657806354fd4d5014610cb65761049e565b8063375a6e7c14610b9a578063401262c814610baf5780634093d7a114610bc457806340b87a2614610bee57806340b89f0614610c035761049e565b80631bf7a9121161042057806326683e14116103e457806326683e1414610948578063268bfac41461097b57806329adec1414610b2857806330f846a214610b3d57806332eaf21b14610b70578063331b86c014610b855761049e565b80631bf7a912146107475780631fa12f111461086e57806322e564eb1461089e57806324d7806c146108e257806324d7c18d146109155761049e565b80630fe1b5a2116104675780630fe1b5a214610640578063100508a21461068457806311a3fa38146106af5780631319e7e1146106eb57806314cfabb31461071e5761049e565b8062821de3146104a057806302d05d3f146104d1578063032b5a73146104e657806306fdde03146104fb5780630a581edc14610585575b005b3480156104ac57600080fd5b506104b5611a1f565b60408051600160a060020a039092168252519081900360200190f35b3480156104dd57600080fd5b506104b5611a2f565b3480156104f257600080fd5b506104b5611a3e565b34801561050757600080fd5b50610510611a4d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561054a578181015183820152602001610532565b50505050905090810190601f1680156105775780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561059157600080fd5b5061049e600480360360408110156105a857600080fd5b8101906020810181356401000000008111156105c357600080fd5b8201836020820111156105d557600080fd5b803590602001918460208302840111640100000000831117156105f757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050509035600160a060020a03169150611adb9050565b34801561064c57600080fd5b5061049e6004803603606081101561066357600080fd5b50600160a060020a038135169060ff60208201358116916040013516611bec565b34801561069057600080fd5b50610699611cb8565b6040805160ff9092168252519081900360200190f35b3480156106bb57600080fd5b506106d9600480360360208110156106d257600080fd5b5035611cbd565b60408051918252519081900360200190f35b3480156106f757600080fd5b5061049e6004803603602081101561070e57600080fd5b5035600160a060020a0316611cd2565b34801561072a57600080fd5b50610733611d50565b604080519115158252519081900360200190f35b6107336004803603604081101561075d57600080fd5b81019060208101813564010000000081111561077857600080fd5b82018360208201111561078a57600080fd5b803590602001918460208302840111640100000000831117156107ac57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156107fc57600080fd5b82018360208201111561080e57600080fd5b8035906020019184602083028401116401000000008311171561083057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611e65945050505050565b34801561087a57600080fd5b5061049e6004803603604081101561089157600080fd5b5080359060200135611f09565b3480156108aa57600080fd5b5061049e600480360360608110156108c157600080fd5b50600160a060020a038135169060ff60208201358116916040013516611ffc565b3480156108ee57600080fd5b506107336004803603602081101561090557600080fd5b5035600160a060020a03166124ba565b34801561092157600080fd5b506107336004803603604081101561093857600080fd5b508035906020013560ff166126ec565b34801561095457600080fd5b506107336004803603602081101561096b57600080fd5b5035600160a060020a0316612713565b34801561098757600080fd5b50610a4a6004803603604081101561099e57600080fd5b8101906020810181356401000000008111156109b957600080fd5b8201836020820111156109cb57600080fd5b803590602001918460018302840111640100000000831117156109ed57600080fd5b919390929091602081019035640100000000811115610a0b57600080fd5b820183602082011115610a1d57600080fd5b80359060200191846001830284011164010000000083111715610a3f57600080fd5b509092509050612830565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610a8b578181015183820152602001610a73565b50505050905090810190601f168015610ab85780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610aeb578181015183820152602001610ad3565b50505050905090810190601f168015610b185780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b348015610b3457600080fd5b50610699612b7a565b348015610b4957600080fd5b5061073360048036036040811015610b6057600080fd5b508035906020013560ff16612b83565b348015610b7c57600080fd5b506104b5612bf0565b348015610b9157600080fd5b506106d9612bff565b348015610ba657600080fd5b50610733612c05565b348015610bbb57600080fd5b50610510612c0e565b348015610bd057600080fd5b506106d960048036036020811015610be757600080fd5b5035612c87565b348015610bfa57600080fd5b506106d9612ca6565b348015610c0f57600080fd5b506104b560048036036020811015610c2657600080fd5b5035600160a060020a0316612cac565b348015610c4257600080fd5b5061049e612dbc565b348015610c5757600080fd5b5061049e60048036036020811015610c6e57600080fd5b5035600160a060020a0316612de1565b610733612e5f565b348015610c9257600080fd5b5061051060048036036040811015610ca957600080fd5b5080359060200135613063565b348015610cc257600080fd5b506106d96130e6565b348015610cd757600080fd5b506104b56130ec565b348015610cec57600080fd5b5061051060048036036020811015610d0357600080fd5b5035600160a060020a03166131d5565b348015610d1f57600080fd5b506106d96133d7565b348015610d3457600080fd5b506104b56133e9565b348015610d4957600080fd5b506106d96133f8565b348015610d5e57600080fd5b5061049e6133fe565b348015610d7357600080fd5b5061051061343c565b348015610d8857600080fd5b50610699613497565b348015610d9d57600080fd5b506104b560048036036020811015610db457600080fd5b5035600160a060020a03166134a5565b348015610dd057600080fd5b5061049e60048036036040811015610de757600080fd5b5080359060200135600160a060020a031661355d565b348015610e0957600080fd5b5061073360048036036020811015610e2057600080fd5b5035600160a060020a03166136cb565b348015610e3c57600080fd5b5061049e60048036036020811015610e5357600080fd5b5035600160a060020a031661384c565b348015610e6f57600080fd5b5061073361389a565b348015610e8457600080fd5b506105106138ab565b348015610e9957600080fd5b5061049e60048036036040811015610eb057600080fd5b81359190810190604081016020820135640100000000811115610ed257600080fd5b820183602082011115610ee457600080fd5b80359060200191846001830284011164010000000083111715610f0657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613906945050505050565b348015610f5357600080fd5b5061049e60048036036040811015610f6a57600080fd5b508035906020013560ff1661394e565b348015610f8657600080fd5b506106d960048036036020811015610f9d57600080fd5b5035613a4f565b348015610fb057600080fd5b5061051060048036036020811015610fc757600080fd5b5035613a5d565b348015610fda57600080fd5b50610733613ad1565b348015610fef57600080fd5b5061049e6004803603602081101561100657600080fd5b5035600160a060020a0316613ae1565b34801561102257600080fd5b506106d96004803603602081101561103957600080fd5b81019060208101813564010000000081111561105457600080fd5b82018360208201111561106657600080fd5b8035906020019184600183028401116401000000008311171561108857600080fd5b509092509050613b5f565b34801561109f57600080fd5b506104b5613cf3565b3480156110b457600080fd5b5061049e600480360360208110156110cb57600080fd5b8101906020810181356401000000008111156110e657600080fd5b8201836020820111156110f857600080fd5b8035906020019184600183028401116401000000008311171561111a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613d02945050505050565b34801561116757600080fd5b506107336004803603602081101561117e57600080fd5b5035600160a060020a0316613d29565b34801561119a57600080fd5b50610699613e6d565b3480156111af57600080fd5b5061049e600480360360208110156111c657600080fd5b5035600160a060020a0316613e72565b3480156111e257600080fd5b5061049e600480360360208110156111f957600080fd5b81019060208101813564010000000081111561121457600080fd5b82018360208201111561122657600080fd5b8035906020019184600183028401116401000000008311171561124857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613ef0945050505050565b34801561129557600080fd5b506104b561401d565b3480156112aa57600080fd5b5061049e600480360360e08110156112c157600080fd5b600160e060020a031982351691602081013591600160a060020a03604083013516919081019060808101606082013564010000000081111561130257600080fd5b82018360208201111561131457600080fd5b8035906020019184600183028401116401000000008311171561133657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505060ff833516935050506020810135906040013561402c565b34801561139157600080fd5b5061049e600480360360408110156113a857600080fd5b50600160a060020a0381351690602001356141f3565b3480156113ca57600080fd5b5061049e600480360360208110156113e157600080fd5b503560ff16614242565b3480156113f757600080fd5b506105106004803603602081101561140e57600080fd5b81019060208101813564010000000081111561142957600080fd5b82018360208201111561143b57600080fd5b8035906020019184600183028401116401000000008311171561145d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506142bc945050505050565b3480156114aa57600080fd5b506104b5614465565b3480156114bf57600080fd5b506104b5614474565b3480156114d457600080fd5b506104b5614483565b3480156114e957600080fd5b506104b56004803603604081101561150057600080fd5b50600160a060020a0381358116916020013516614544565b34801561152457600080fd5b5061049e614664565b34801561153957600080fd5b506104b56004803603602081101561155057600080fd5b5035600160e060020a031916614726565b34801561156d57600080fd5b5061049e6004803603602081101561158457600080fd5b5035600160a060020a0316614741565b3480156115a057600080fd5b5061049e600480360360408110156115b757600080fd5b5080359060200135600160a060020a031661477a565b3480156115d957600080fd5b506106d961494e565b3480156115ee57600080fd5b506106d96004803603602081101561160557600080fd5b5035600160a060020a0316614954565b34801561162157600080fd5b50610510614a38565b34801561163657600080fd5b5061165d6004803603604081101561164d57600080fd5b508035906020013560ff16614a93565b6040805163ffffffff9092168252519081900360200190f35b34801561168257600080fd5b506106d96004803603602081101561169957600080fd5b8101906020810181356401000000008111156116b457600080fd5b8201836020820111156116c657600080fd5b803590602001918460018302840111640100000000831117156116e857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550614ae5945050505050565b34801561173557600080fd5b5061049e6004803603604081101561174c57600080fd5b81019060208101813564010000000081111561176757600080fd5b82018360208201111561177957600080fd5b8035906020019184600183028401116401000000008311171561179b57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156117ee57600080fd5b82018360208201111561180057600080fd5b8035906020019184600183028401116401000000008311171561182257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550614f56945050505050565b34801561186f57600080fd5b5061049e6004803603602081101561188657600080fd5b503561514d565b34801561189957600080fd5b506104b5600480360360208110156118b057600080fd5b5035600160a060020a03166151b2565b3480156118cc57600080fd5b506104b5600480360360408110156118e357600080fd5b508035906020013561529a565b3480156118fc57600080fd5b50610733600480360360a081101561191357600080fd5b600160e060020a0319823516919081019060408101602082013564010000000081111561193f57600080fd5b82018360208201111561195157600080fd5b8035906020019184600183028401116401000000008311171561197357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505060ff83351693505050602081013590604001356152d1565b3480156119ce57600080fd5b50610699615468565b3480156119e357600080fd5b506106d961546d565b3480156119f857600080fd5b5061049e60048036036020811015611a0f57600080fd5b5035600160a060020a0316615473565b600454600160a060020a03165b90565b600254600160a060020a031681565b601d54600160a060020a031681565b6012805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611ad35780601f10611aa857610100808354040283529160200191611ad3565b820191906000526020600020905b815481529060010190602001808311611ab657829003601f168201915b505050505081565b611ae4336124ba565b1515611aef57600080fd5b60005b8251811015611b585781601a60008584815181101515611b0e57fe5b602090810291909101810151600160e060020a03191682528101919091526040016000208054600160a060020a031916600160a060020a0392909216919091179055600101611af2565b507f2fd37118a7338c6d45366419ced87ba93589ba1cca2489e8fb42b55de88742668282604051808060200183600160a060020a0316600160a060020a03168152602001828103825284818151815260200191508051906020019060200280838360005b83811015611bd4578181015183820152602001611bbc565b50505050905001935050505060405180910390a15050565b611bf4613ad1565b1515611bff57600080fd5b600480546040805160e060020a6363e6ffdd028152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd91602480820192602092909190829003018186803b158015611c5857600080fd5b505afa158015611c6c573d6000803e3d6000fd5b505050506040513d6020811015611c8257600080fd5b50519050600160a060020a0381161515611ca657611ca1858585611ffc565b611cb1565b611cb1818585611ffc565b5050505050565b600181565b6000818152601960205260409020545b919050565b611cdb336124ba565b1515611ce657600080fd5b601c5460408051600160a060020a038085168252909216602083015280517f9b77357b839fea8829ce30918f67eb91de08caa0e5272af43a86af5334b561779281900390910190a1601c8054600160a060020a031916600160a060020a0392909216919091179055565b601c54600090600160a060020a031615611de557601c546040805160e260020a63099a0f850281523360048201529051600160a060020a03909216916326683e1491602480820192602092909190829003018186803b158015611db257600080fd5b505afa158015611dc6573d6000803e3d6000fd5b505050506040513d6020811015611ddc57600080fd5b50519050611a2c565b600480546040805160e260020a63099a0f85028152339381019390935251600160a060020a03909116916326683e14916024808301926020929190829003018186803b158015611e3457600080fd5b505afa158015611e48573d6000803e3d6000fd5b505050506040513d6020811015611e5e57600080fd5b5051905090565b6000611e7033613d29565b1515611e7b57600080fd5b604080513060601b602080830191909152426034808401829052845180850390910181526054840180865281519190930120600090811c9092526074830182905260948301919091523360b48301526103e80260d482015290517f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c79181900360f40190a15060015b92915050565b611f12336124ba565b1515611f1d57600080fd5b6000828152601960205260409020546000190180821015611fa7576000838152601960205260409020805482908110611f5257fe5b906000526020600020016019600085815260200190815260200160002083815481101515611f7c57fe5b906000526020600020019080546001816001161561010002031660029004611fa592919061590a565b505b6000838152601960205260409020805482908110611fc157fe5b906000526020600020016000611fd7919061598f565b6000838152601960205260409020805490611ff69060001983016159d3565b50505050565b600083905080600160a060020a031663091600e66040518163ffffffff1660e01b815260040160206040518083038186803b15801561203a57600080fd5b505afa15801561204e573d6000803e3d6000fd5b505050506040513d602081101561206457600080fd5b5051600954610100900460ff9081169116141561210957604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691633def514091606480830192600092919082900301818387803b1580156120ec57600080fd5b505af1158015612100573d6000803e3d6000fd5b50505050611ff6565b80600160a060020a03166312915a306040518163ffffffff1660e01b815260040160206040518083038186803b15801561214257600080fd5b505afa158015612156573d6000803e3d6000fd5b505050506040513d602081101561216c57600080fd5b5051600954610100900460ff908116911614156121f457604080517ff17bda9100000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163f17bda9191606480830192600092919082900301818387803b1580156120ec57600080fd5b80600160a060020a03166316aed2326040518163ffffffff1660e01b815260040160206040518083038186803b15801561222d57600080fd5b505afa158015612241573d6000803e3d6000fd5b505050506040513d602081101561225757600080fd5b5051600954610100900460ff908116911614156122df57604080517f7cbb7bf200000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691637cbb7bf291606480830192600092919082900301818387803b1580156120ec57600080fd5b80600160a060020a03166368a0469a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561231857600080fd5b505afa15801561232c573d6000803e3d6000fd5b505050506040513d602081101561234257600080fd5b5051600954610100900460ff908116911614156123ca57604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691638635adb591606480830192600092919082900301818387803b1580156120ec57600080fd5b80600160a060020a0316636373a4116040518163ffffffff1660e01b815260040160206040518083038186803b15801561240357600080fd5b505afa158015612417573d6000803e3d6000fd5b505050506040513d602081101561242d57600080fd5b5051600954610100900460ff908116911614156124b557604080517f224dcba000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163224dcba091606480830192600092919082900301818387803b1580156120ec57600080fd5b600080fd5b600354600090600160a060020a03838116911614156124db57506001611ccd565b600080516020616188833981519152600052601760209081527f32dc2f122323555a2931187e5f104d329406c3094dd4da659019b9a47f95daf0805460408051828502810185019091528181526060939092919083018282801561256857602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161254a575b50939450600093505050505b81518110156126e2576000828281518110151561258d57fe5b6020908102909101810151604080517fd8961c8d000000000000000000000000000000000000000000000000000000008152600160a060020a0389811660048301526000602483015291519294509084169263d8961c8d92604480840193829003018186803b1580156125ff57600080fd5b505afa158015612613573d6000803e3d6000fd5b505050506040513d602081101561262957600080fd5b5051806126c85750604080517fd8961c8d000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301526001602483015291519183169163d8961c8d91604480820192602092909190829003018186803b15801561269b57600080fd5b505afa1580156126af573d6000803e3d6000fd5b505050506040513d60208110156126c557600080fd5b50515b156126d95760019350505050611ccd565b50600101612574565b5060009392505050565b60006126f7336124ba565b151561270257600080fd5b61270c83836154c1565b9392505050565b601c54600090600160a060020a0316156127aa57601c546040805160e260020a63099a0f85028152600160a060020a038581166004830152915191909216916326683e14916024808301926020929190829003018186803b15801561277757600080fd5b505afa15801561278b573d6000803e3d6000fd5b505050506040513d60208110156127a157600080fd5b50519050611ccd565b600480546040805160e260020a63099a0f85028152600160a060020a0386811694820194909452905192909116916326683e1491602480820192602092909190829003018186803b1580156127fe57600080fd5b505afa158015612812573d6000803e3d6000fd5b505050506040513d602081101561282857600080fd5b505192915050565b601e546060908190600160a060020a0316156129de57601e54604080517f268bfac40000000000000000000000000000000000000000000000000000000081526004810191825260448101889052600160a060020a039092169163268bfac49189918991899189919081906024810190606401878780828437600083820152601f01601f191690910184810383528581526020019050858580828437600081840152601f19601f820116905080830192505050965050505050505060006040518083038186803b15801561290357600080fd5b505afa158015612917573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561294057600080fd5b81019080805164010000000081111561295857600080fd5b8201602081018481111561296b57600080fd5b815164010000000081118282018710171561298557600080fd5b505092919060200180516401000000008111156129a157600080fd5b820160208101848111156129b457600080fd5b81516401000000008111828201871017156129ce57600080fd5b509496509450612b719350505050565b60048054604080517f268bfac400000000000000000000000000000000000000000000000000000000815292830190815260448301889052600160a060020a039091169163268bfac49189918991899189919081906024810190606401878780828437600083820152601f01601f191690910184810383528581526020019050858580828437600081840152601f19601f820116905080830192505050965050505050505060006040518083038186803b158015612a9b57600080fd5b505afa158015612aaf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015612ad857600080fd5b810190808051640100000000811115612af057600080fd5b82016020810184811115612b0357600080fd5b8151640100000000811182820187101715612b1d57600080fd5b50509291906020018051640100000000811115612b3957600080fd5b82016020810184811115612b4c57600080fd5b8151640100000000811182820187101715612b6657600080fd5b509496509450505050505b94509492505050565b60095460ff1681565b6000828152600760209081526040822060ff8481169290920490911690601f8416906001821b9081908460088110612bb757fe5b600881049091015460046007909216919091026101000a90041663ffffffff1615612be3576001612be6565b60005b9695505050505050565b601454600160a060020a031681565b600d5490565b60105460ff1681565b600080516020616188833981519152600090815260176020527f32dc2f122323555a2931187e5f104d329406c3094dd4da659019b9a47f95daf08054606092919082908110612c5957fe5b600091825260209091200154600160a060020a03169050612c81612c7b6155cc565b826155d1565b91505090565b6018805482908110612c9557fe5b600091825260209091200154905081565b600c5481565b601d54600090600160a060020a031615612d3c57601d54604080517f40b89f06000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152915191909216916340b89f069160248083019260209291908290030181600087803b158015612d2857600080fd5b505af115801561278b573d6000803e3d6000fd5b60048054604080517f40b89f06000000000000000000000000000000000000000000000000000000008152600160a060020a0386811694820194909452905192909116916340b89f06916024808201926020929091908290030181600087803b158015612da857600080fd5b505af1158015612812573d6000803e3d6000fd5b600354600160a060020a03163314612dd357600080fd5b600354600160a060020a0316ff5b612dea336124ba565b1515612df557600080fd5b601d5460408051600160a060020a038085168252909216602083015280517ffa2af382c197e27affb4e04f89f42556c71015346416b56be15b3aee3c87f6619281900390910190a1601d8054600160a060020a031916600160a060020a0392909216919091179055565b6000612e69611d50565b1515612e7457600080fd5b60105460ff161515612e8557600080fd5b6000600b8054600181600116156101000203166002900490501115612f3457600d80546001818101808455600093909352600b8054612efb937fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5019260026101009183161591909102600019019091160461590a565b5050600c54600e80546001810182556000919091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd01555b600f8054612f5791600b916002600019610100600184161502019091160461590a565b5042600c55604080516020810191829052600090819052612f7a91600f916159f7565b506010805460ff191690556004547fbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df90600160a060020a0316612fbb611a1f565b60408051600160a060020a038085168252831660208201526060918101828152600b8054600260001961010060018416150201909116049383018490529260808301908490801561304d5780601f106130225761010080835404028352916020019161304d565b820191906000526020600020905b81548152906001019060200180831161303057829003601f168201915b505094505050505060405180910390a150600190565b60196020528160005260406000208181548110151561307e57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152945090925090830182828015611ad35780601f10611aa857610100808354040283529160200191611ad3565b60115481565b601d54600090600160a060020a03161561316457601d60009054906101000a9004600160a060020a0316600160a060020a031663575185ed6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561315057600080fd5b505af1158015611dc6573d6000803e3d6000fd5b60048054604080517f575185ed0000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263575185ed9282820192602092908290030181600087803b1580156131c157600080fd5b505af1158015611e48573d6000803e3d6000fd5b601e54606090600160a060020a0316156132df57601e54604080517f589aafc1000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163589aafc1916024808301926000929190829003018186803b15801561324f57600080fd5b505afa158015613263573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561328c57600080fd5b8101908080516401000000008111156132a457600080fd5b820160208101848111156132b757600080fd5b81516401000000008111828201871017156132d157600080fd5b50909450611ccd9350505050565b60048054604080517f589aafc1000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051929091169163589aafc191602480820192600092909190829003018186803b15801561334957600080fd5b505afa15801561335d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561338657600080fd5b81019080805164010000000081111561339e57600080fd5b820160208101848111156133b157600080fd5b81516401000000008111828201871017156133cb57600080fd5b50909695505050505050565b60008051602061618883398151915281565b601b54600160a060020a031681565b60015481565b61340661389a565b151561341157600080fd5b60408051602081019182905260009081905261342f91600f916159f7565b506010805460ff19169055565b600f805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611ad35780601f10611aa857610100808354040283529160200191611ad3565b600954610100900460ff1681565b601b54600090600160a060020a03161561350957601b546040805160e060020a6363e6ffdd028152600160a060020a038581166004830152915191909216916363e6ffdd916024808301926020929190829003018186803b15801561277757600080fd5b600480546040805160e060020a6363e6ffdd028152600160a060020a0386811694820194909452905192909116916363e6ffdd91602480820192602092909190829003018186803b1580156127fe57600080fd5b613566336124ba565b151561357157600080fd5b600160a060020a038116151561358657600080fd5b60005b600083815260176020526040902054811015613609576000805160206161888339815191528314156135ba57600080fd5b60008381526017602052604090208054600160a060020a0384169190839081106135e057fe5b600091825260209091200154600160a060020a0316141561360157506136c7565b600101613589565b506000828152601760209081526040822080546001808201808455928552929093209092018054600160a060020a031916600160a060020a038516179055141561368357601880546001810182556000919091527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e018290555b60408051838152600160a060020a038316602082015281517f145b7e243e91890686f5ba84dd1254f7497f549ffb955f4871b3d27d4137d471929181900390910190a15b5050565b600354600090600160a060020a03838116911614806136f25750600954606460ff90911610155b156136ff57506001611ccd565b600954600061010090910460ff16111561384457600480546040805160e060020a6363e6ffdd028152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b15801561376957600080fd5b505afa15801561377d573d6000803e3d6000fd5b505050506040513d602081101561379357600080fd5b5051600954604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526002604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561380f57600080fd5b505afa158015613823573d6000803e3d6000fd5b505050506040513d602081101561383957600080fd5b50519150611ccd9050565b506000611ccd565b600254600160a060020a0316331461386357600080fd5b600160a060020a038116151561387857600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600354600160a060020a0316331490565b6013805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611ad35780601f10611aa857610100808354040283529160200191611ad3565b61390f336124ba565b151561391a57600080fd5b600082815260196020908152604082208054600181018083559184529282902084519193611ff693910191908501906159f7565b613957336124ba565b151561396257600080fd5b600860ff82161061397257600080fd5b600082815260076020526040812060ff83166008811061398e57fe5b600891828204019190066004029054906101000a900463ffffffff169050600760008481526020019081526020016000206000018260ff166008811015156139d257fe5b600881049091018054600163ffffffff60046007909516949094026101000a80830485169190910184168102908402199091161790556040805185815260ff8516602082015291831682820152517f77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f9181900360600190a1505050565b600e805482908110612c9557fe5b600d805482908110613a6b57fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815293509091830182828015611ad35780601f10611aa857610100808354040283529160200191611ad3565b6000613adc336136cb565b905090565b613aea336124ba565b1515613af557600080fd5b601e5460408051600160a060020a038085168252909216602083015280517f78cf028637abb89c0df6a78afd3d4403d03e5eb532390543d498bb346ee964779281900390910190a1601e8054600160a060020a031916600160a060020a0392909216919091179055565b601e54600090600160a060020a031615613c3357601e546040517f8d2a23db00000000000000000000000000000000000000000000000000000000815260206004820190815260248201859052600160a060020a0390921691638d2a23db91869186918190604401848480828437600083820152604051601f909101601f191690920195506020945090925050508083038186803b158015613c0057600080fd5b505afa158015613c14573d6000803e3d6000fd5b505050506040513d6020811015613c2a57600080fd5b50519050611f03565b600480546040517f8d2a23db000000000000000000000000000000000000000000000000000000008152602092810192835260248101859052600160a060020a0390911691638d2a23db91869186918190604401848480828437600083820152604051601f909101601f191690920195506020945090925050508083038186803b158015613cc057600080fd5b505afa158015613cd4573d6000803e3d6000fd5b505050506040513d6020811015613cea57600080fd5b50519392505050565b600354600160a060020a031681565b613d0b336124ba565b1515613d1657600080fd5b80516136c79060139060208401906159f7565b600354600090600160a060020a0383811691161480613d505750600954600a60ff90911610155b15613d5d57506001611ccd565b600954600061010090910460ff16111561384457600480546040805160e060020a6363e6ffdd028152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b158015613dc757600080fd5b505afa158015613ddb573d6000803e3d6000fd5b505050506040513d6020811015613df157600080fd5b5051600954604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561380f57600080fd5b600a81565b613e7b336124ba565b1515613e8657600080fd5b601b5460408051600160a060020a038085168252909216602083015280517fc104e41939e1b09c10a83f97ac30b2d1f48605f4630aa8c64633501740ce02999281900390910190a1601b8054600160a060020a031916600160a060020a0392909216919091179055565b613ef861389a565b1515613f0357600080fd5b60105460ff1615613f1357600080fd5b8051608011613f2157600080fd5b8051613f3490600f9060208401906159f7565b506010805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316613f78611a1f565b60408051600160a060020a038085168252831660208201526060918101828152600f8054600260001961010060018416150201909116049383018490529260808301908490801561400a5780601f10613fdf5761010080835404028352916020019161400a565b820191906000526020600020905b815481529060010190602001808311613fed57829003601f168201915b505094505050505060405180910390a150565b601c54600160a060020a031681565b61403987858585856152d1565b151561404457600080fd5b600160e060020a031987166000908152601a60209081526040808320549051604481018a9052600160a060020a0389811660648301526060602483018181528a5160848501528a51929094169594909386938e938c938f938f939092839260a4909201918701908083838e5b838110156140c85781810151838201526020016140b0565b50505050905090810190601f1680156140f55780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e060020a031990991698909817885251815191979096508695509350915081905083835b602083106141705780518252601f199092019160209182019101614151565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146141d0576040519150601f19603f3d011682016040523d82523d6000602084013e6141d5565b606091505b5090925090508115156141e757600080fd5b50505050505050505050565b6141fc336124ba565b151561420757600080fd5b604051600160a060020a0383169082156108fc029083906000818181858888f1935050505015801561423d573d6000803e3d6000fd5b505050565b61424a613ad1565b151561425557600080fd5b6009805460ff191660ff838116919091179182905560045460408051600160a060020a039092168083526020830152929091168183015290517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b6060602082511115156143735781518083015160008181526005602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845293949390918301828280156143655780601f1061433a57610100808354040283529160200191614365565b820191906000526020600020905b81548152906001019060200180831161434857829003601f168201915b505050505092505050611ccd565b6006826040518082805190602001908083835b602083106143a55780518252601f199092019160209182019101614386565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156144595780601f1061442e57610100808354040283529160200191614459565b820191906000526020600020905b81548152906001019060200180831161443c57829003601f168201915b50505050509050919050565b601e54600160a060020a031681565b600454600160a060020a031681565b601d54600090600160a060020a0316156144e757601d60009054906101000a9004600160a060020a0316600160a060020a031663b8cfaf056040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561315057600080fd5b60048054604080517fb8cfaf050000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263b8cfaf059282820192602092908290030181600087803b1580156131c157600080fd5b601d54600090600160a060020a0316156145dc57601d54604080517fbf4e088f000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015285811660248301529151919092169163bf4e088f9160448083019260209291908290030181600087803b1580156145c857600080fd5b505af1158015613c14573d6000803e3d6000fd5b60048054604080517fbf4e088f000000000000000000000000000000000000000000000000000000008152600160a060020a038781169482019490945285841660248201529051929091169163bf4e088f916044808201926020929091908290030181600087803b15801561465057600080fd5b505af1158015613cd4573d6000803e3d6000fd5b61466c613ad1565b151561467757600080fd5b604080516020808252600b8054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156147165780601f106146eb57610100808354040283529160200191614716565b820191906000526020600020905b8154815290600101906020018083116146f957829003601f168201915b50509250505060405180910390a1565b601a60205260009081526040902054600160a060020a031681565b600354600160a060020a0316331461475857600080fd5b60148054600160a060020a031916600160a060020a0392909216919091179055565b614783336124ba565b151561478e57600080fd5b6000805160206161888339815191528214156147a957600080fd5b60005b60008381526017602052604090205481101561423d5760008381526017602052604090208054600160a060020a0384169190839081106147e857fe5b600091825260209091200154600160a060020a03161415614946576000838152601760205260409020546000198101821461489d5760008481526017602052604090208054600019830190811061483b57fe5b6000918252602080832090910154868352601790915260409091208054600160a060020a03909216918490811061486e57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b6000848152601760205260409020805460001983019081106148bb57fe5b600091825260208083209091018054600160a060020a03191690558582526017905260409020805460001901906148f29082615a65565b506148fc8461564a565b60408051858152600160a060020a038516602082015281517fa4ba7d16ec48ae0b1af6cf3707ad062b11503d59527bca97e68886e7f6991456929181900390910190a150506136c7565b6001016147ac565b60165481565b601e54600090600160a060020a0316156149ce57601e54604080517fd6be0f49000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163d6be0f49916024808301926020929190829003018186803b15801561277757600080fd5b60048054604080517fd6be0f49000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051929091169163d6be0f4991602480820192602092909190829003018186803b1580156127fe57600080fd5b600b805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611ad35780601f10611aa857610100808354040283529160200191611ad3565b6000600860ff831610614aa557600080fd5b600083815260076020526040902060ff831660088110614ac157fe5b600891828204019190066004029054906101000a900463ffffffff16905092915050565b6000614aef61389a565b1515614afa57600080fd5b6000826040516020018082805190602001908083835b60208310614b2f5780518252601f199092019160209182019101614b10565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012090506000600b6040516020018082805460018160011615610100020316600290048015614bce5780601f10614bac576101008083540402835291820191614bce565b820191906000526020600020905b815481529060010190602001808311614bba575b505091505060405160208183030381529060405280519060200120905080821415614da557600d541515614c2557604080516020810191829052600090819052614c1a91600b916159f7565b506000600c55614cc9565b600080805b600d54811015614c7d5781600e82815481101515614c4457fe5b90600052602060002001541115614c7557809250600e81815481101515614c6757fe5b906000526020600020015491505b600101614c2a565b50600d805483908110614c8c57fe5b90600052602060002001600b9080546001816001161561010002031660029004614cb792919061590a565b50600c819055614cc682615710565b50505b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168560006040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015614d5e578181015183820152602001614d46565b50505050905090810190601f168015614d8b5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600092505050611ccd565b60001960005b600d54811015614e6e576000600d82815481101515614dc657fe5b906000526020600020016040516020018082805460018160011615610100020316600290048015614e2e5780601f10614e0c576101008083540402835291820191614e2e565b820191906000526020600020905b815481529060010190602001808311614e1a575b505091505060405160208183030381529060405280519060200120905080851415614e6557614e5c82615710565b81925050614e6e565b50600101614dab565b50600019811415614e7e57600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a031686836040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015614f12578181015183820152602001614efa565b50505050905090810190601f168015614f3f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1949350505050565b614f5f336124ba565b1515614f6a57600080fd5b8151602010614fc5578151808301516000818152600560205260408120919291614f939161598f565b600083511115614fbe5760008281526005602090815260409091208451614fbc928601906159f7565b505b50506150b0565b6006826040518082805190602001908083835b60208310614ff75780518252601f199092019160209182019101614fd8565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922061503092509050600061598f565b6000815111156150b057806006836040518082805190602001908083835b6020831061506d5780518252601f19909201916020918201910161504e565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810190932084516150ae95919491909101925090506159f7565b505b7fe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c826040518080602001828103825283818151815260200191508051906020019080838360005b8381101561510f5781810151838201526020016150f7565b50505050905090810190601f16801561513c5780820380516001836020036101000a031916815260200191505b509250505060405180910390a15050565b615156336124ba565b151561516157600080fd5b60008181526007602052604081209061517a8282615a89565b50506040805182815290517f87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f9181900360200190a150565b601b54600090600160a060020a03161561522e57601b54604080517fe7cf0c66000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163e7cf0c669160248083019260209291908290030181600087803b158015612d2857600080fd5b60048054604080517fe7cf0c66000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051929091169163e7cf0c66916024808201926020929091908290030181600087803b158015612da857600080fd5b6017602052816000526040600020818154811015156152b557fe5b600091825260209091200154600160a060020a03169150829050565b600160e060020a031985166000908152601a6020526040812054600160a060020a031680151561530057600080fd5b60006001878051906020012087878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015615366573d6000803e3d6000fd5b50505060206040510351905061537b816124ba565b151561538c5760009250505061545f565b60006153cd6040805190810160405280600381526020017f69696400000000000000000000000000000000000000000000000000000000008152508961580f565b9050600160a060020a03811630146153eb576000935050505061545f565b600061542c6040805190810160405280600381526020017f69617400000000000000000000000000000000000000000000000000000000008152508a61589d565b905080156154565760006103e882046016544201039050601554811115151561545457600080fd5b505b60019450505050505b95945050505050565b606481565b60155481565b600354600160a060020a0316331461548a57600080fd5b600160a060020a038116151561549f57600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b6000828152600760209081526040822060ff8481169290920490911690601f8416906001821b908490829085600881106154f757fe5b600881049091015460046007909216919091026101000a90041663ffffffff1615615523576001615526565b60005b905080151561557f5760008781526007602052604090208290856008811061554a57fe5b60088104909101805463ffffffff60046007909416939093026101000a80820484169094178316840292909302199092161790555b6040805188815260ff881660208201528215158183015290517f4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d9181900360600190a19695505050505050565b600e90565b604080517f6d616b654944537472696e6728696e742c6164647265737329000000000000008152815190819003601901812080825260e085901b60048301819052600883018590526060939192909160ff919081602881856000fa80151561563857600080fd5b50604080820190529695505050505050565b600081815260176020526040902054151561570d5760005b6018548110156136c7578160188281548110151561567c57fe5b90600052602060002001541415615705576018546000190181146156d3576018805460001981019081106156ac57fe5b90600052602060002001546018828154811015156156c657fe5b6000918252602090912001555b6018805460001981019081106156e557fe5b60009182526020822001556018805460001901906157039082615a65565b505b600101615662565b50565b600d80548290811061571e57fe5b906000526020600020016000615734919061598f565b600e80548290811061574257fe5b6000918252602082200155600d546000190181146157e857600d8054600019810190811061576c57fe5b90600052602060002001600d8281548110151561578557fe5b9060005260206000200190805460018160011615610100020316600290046157ae92919061590a565b50600e805460001981019081106157c157fe5b9060005260206000200154600e828154811015156157db57fe5b6000918252602090912001555b600d8054906157fb9060001983016159d3565b50600e8054906136c7906000198301615a65565b604080517f6765744164647265737328737472696e672c627974657329000000000000000081529051908190036018018120825181835260208501516004840181905260009360fe92906024820190865b8381101561587d576020818a018101516024848401015201615860565b506020818383886000fa8080156124b55750505198975050505050505050565b604080517f67657455696e7428737472696e672c627974657329000000000000000000000081529051908190036015018120825181835260208501516004840181905260009360fe92906024820190868381101561587d576020818a018101516024848401015201615860565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615943578054855561597f565b8280016001018555821561597f57600052602060002091601f016020900482015b8281111561597f578254825591600101919060010190615964565b5061598b929150615a90565b5090565b50805460018160011615610100020316600290046000825580601f106159b5575061570d565b601f01602090049060005260206000209081019061570d9190615a90565b81548183558181111561423d5760008381526020902061423d918101908301615aaa565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615a3857805160ff191683800117855561597f565b8280016001018555821561597f579182015b8281111561597f578251825591602001919060010190615a4a565b81548183558181111561423d5760008381526020902061423d918101908301615a90565b5060009055565b611a2c91905b8082111561598b5760008155600101615a96565b611a2c91905b8082111561598b576000615ac4828261598f565b50600101615ab0565b604080518082018252601d81527f5f454c565f47524f55505f54454e414e545f415554484f524954494553000000602080830191825292517fac55c906000000000000000000000000000000000000000000000000000000008152600481019384528251602482015282516000948694606094600160a060020a0387169463ac55c906949293928392604490920191908083838d5b83811015615b7a578181015183820152602001615b62565b50505050905090810190601f168015615ba75780820380516001836020036101000a031916815260200191505b509250505060006040518083038186803b158015615bc457600080fd5b505afa158015615bd8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015615c0157600080fd5b810190808051640100000000811115615c1957600080fd5b82016020810184811115615c2c57600080fd5b8151640100000000811182820187101715615c4657600080fd5b5050805190945015159250615c6391505057600092505050611ccd565b615c6b616170565b615c7482615f0c565b9050615c7e616170565b615cbc6040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f0c565b90506060615cd0838363ffffffff615f3116565b600101604051908082528060200260200182016040528015615d0657816020015b6060815260200190600190039081615cf15790505b50905060005b8151811015615efe57615d2d615d28858563ffffffff615f9e16565b615fb1565b8282815181101515615d3b57fe5b90602001906020020181905250600073__$f2868cc5300372e492613b0df8a63b3548$__6342526e4e8484815181101515615d7257fe5b906020019060200201516040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615dc8578181015183820152602001615db0565b50505050905090810190601f168015615df55780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015615e1257600080fd5b505af4158015615e26573d6000803e3d6000fd5b505050506040513d6020811015615e3c57600080fd5b5051604080517f872ea68a000000000000000000000000000000000000000000000000000000008152326004820152905191925082918291600091600160a060020a0384169163872ea68a916024808301926020929190829003018186803b158015615ea757600080fd5b505afa158015615ebb573d6000803e3d6000fd5b505050506040513d6020811015615ed157600080fd5b505190508015615eee5760019a5050505050505050505050611ccd565b505060019092019150615d0c9050565b506000979650505050505050565b615f14616170565b506040805180820190915281518152602082810190820152919050565b6000808260000151615f558560000151866020015186600001518760200151616001565b0190505b83516020850151018111615f97578251602080860151865191860151600190950194615f8f929185039091039084908490616001565b019050615f59565b5092915050565b615fa6616170565b615f978383836160c1565b60608082600001516040519080825280601f01601f191660200182016040528015615fe3576020820181803883390190505b5090506000602082019050615f978185602001518660000151616132565b600083818685116160b257602085116160775783518251600019600860208990030260020a011960001b91821690888a018890039083165b80831461606957818610616057578a8a0196505050505050506160b9565b50600190940180519094908316616039565b8596505050505050506160b9565b508383206000905b85880382116160b0578583208181141561609f57839450505050506160b9565b50600192830192919091019061607f565b505b5050508284015b949350505050565b6160c9616170565b60006160e78560000151866020015186600001518760200151616001565b602080870180519186019190915280518203855286519051919250018114156161135760008552616129565b8351835186519101900385528351810160208601525b50909392505050565b5b60208110616152578151835260209283019290910190601f1901616133565b905182516020929092036101000a6000190180199091169116179052565b60408051808201909152600080825260208201529056fe74656e616e745f61646d696e0000000000000000000000000000000000000000a165627a7a72305820b7ac4f58d8d5ff14440a5babaf178b81229b7429b2d6359341c79f920d6ba251002974656e616e745f63726561746f72286d73672e73656e6465722920696e76616c6964a165627a7a7230582028bb7bf155937715c51b56c1208c81a04249f755cd416d912e3af260a4ef169100296d73672e73656e64657220213d20636f6e74656e745f73706163655f6164647265737374656e616e745f666163746f72795f63726561746f72286d73672e73656e6465722920696e76616c6964",
}

// BaseTenantFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseTenantFactoryMetaData.ABI instead.
var BaseTenantFactoryABI = BaseTenantFactoryMetaData.ABI

// Deprecated: Use BaseTenantFactoryMetaData.Sigs instead.
// BaseTenantFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseTenantFactoryFuncSigs = BaseTenantFactoryMetaData.Sigs

// BaseTenantFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseTenantFactoryMetaData.Bin instead.
var BaseTenantFactoryBin = BaseTenantFactoryMetaData.Bin

// DeployBaseTenantFactory deploys a new Ethereum contract, binding an instance of BaseTenantFactory to it.
func DeployBaseTenantFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _spaceAddr common.Address) (common.Address, *types.Transaction, *BaseTenantFactory, error) {
	parsed, err := ParsedABI(K_BaseTenantFactory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	addressAddr, _, _, _ := DeployAddress(auth, backend)
	BaseTenantFactoryBin = strings.ReplaceAll(BaseTenantFactoryBin, "__$f2868cc5300372e492613b0df8a63b3548$__", addressAddr.String()[2:])

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseTenantFactoryBin), backend, _spaceAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseTenantFactory{BaseTenantFactoryCaller: BaseTenantFactoryCaller{contract: contract}, BaseTenantFactoryTransactor: BaseTenantFactoryTransactor{contract: contract}, BaseTenantFactoryFilterer: BaseTenantFactoryFilterer{contract: contract}}, nil
}

// BaseTenantFactory is an auto generated Go binding around an Ethereum contract.
type BaseTenantFactory struct {
	BaseTenantFactoryCaller     // Read-only binding to the contract
	BaseTenantFactoryTransactor // Write-only binding to the contract
	BaseTenantFactoryFilterer   // Log filterer for contract events
}

// BaseTenantFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseTenantFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTenantFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseTenantFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTenantFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseTenantFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseTenantFactory creates a new instance of BaseTenantFactory, bound to a specific deployed contract.
func NewBaseTenantFactory(address common.Address, backend bind.ContractBackend) (*BaseTenantFactory, error) {
	contract, err := bindBaseTenantFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseTenantFactory{BaseTenantFactoryCaller: BaseTenantFactoryCaller{contract: contract}, BaseTenantFactoryTransactor: BaseTenantFactoryTransactor{contract: contract}, BaseTenantFactoryFilterer: BaseTenantFactoryFilterer{contract: contract}}, nil
}

// NewBaseTenantFactoryCaller creates a new read-only instance of BaseTenantFactory, bound to a specific deployed contract.
func NewBaseTenantFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseTenantFactoryCaller, error) {
	contract, err := bindBaseTenantFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseTenantFactoryCaller{contract: contract}, nil
}

// NewBaseTenantFactoryTransactor creates a new write-only instance of BaseTenantFactory, bound to a specific deployed contract.
func NewBaseTenantFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseTenantFactoryTransactor, error) {
	contract, err := bindBaseTenantFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseTenantFactoryTransactor{contract: contract}, nil
}

// NewBaseTenantFactoryFilterer creates a new log filterer instance of BaseTenantFactory, bound to a specific deployed contract.
func NewBaseTenantFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseTenantFactoryFilterer, error) {
	contract, err := bindBaseTenantFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseTenantFactoryFilterer{contract: contract}, nil
}

// bindBaseTenantFactory binds a generic wrapper to an already deployed contract.
func bindBaseTenantFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseTenantFactory)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseTenantFactory *BaseTenantFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantFactory.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseTenantFactory *BaseTenantFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantFactory.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseTenantFactory *BaseTenantFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantFactory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseTenantFactory *BaseTenantFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseTenantFactory.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_BaseTenantFactory *BaseTenantFactoryCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseTenantFactory.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CreateTenant is a paid mutator transaction binding the contract method 0x8256e76e.
//
// Solidity: function createTenant(string _tenantName, address _kmsAddr, uint256 _salt) returns(address)
func (_BaseTenantFactory *BaseTenantFactoryTransactor) CreateTenant(opts *bind.TransactOpts, _tenantName string, _kmsAddr common.Address, _salt *big.Int) (*types.Transaction, error) {
	return _BaseTenantFactory.contract.Transact(opts, "createTenant", _tenantName, _kmsAddr, _salt)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseTenantFactory *BaseTenantFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantFactory.contract.Transact(opts, "kill")
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseTenantFactory *BaseTenantFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseTenantFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseTenantFactory *BaseTenantFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseTenantFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseTenantFactory *BaseTenantFactoryTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseTenantFactory.contract.RawTransact(opts, calldata)
}

// BaseTenantFactoryCreateTenantIterator is returned from FilterCreateTenant and is used to iterate over the raw logs and unpacked data for CreateTenant events raised by the BaseTenantFactory contract.
type BaseTenantFactoryCreateTenantIterator struct {
	Event *BaseTenantFactoryCreateTenant // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantFactoryCreateTenantIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantFactoryCreateTenant)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantFactoryCreateTenant)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantFactoryCreateTenantIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantFactoryCreateTenantIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantFactoryCreateTenant represents a CreateTenant event raised by the BaseTenantFactory contract.
type BaseTenantFactoryCreateTenant struct {
	TenantAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCreateTenant is a free log retrieval operation binding the contract event 0x4e55a861e321e4eb19dbd191fa0e28ba386976e8df7d9b669e868826affef199.
//
// Solidity: event CreateTenant(address tenantAddress)
func (_BaseTenantFactory *BaseTenantFactoryFilterer) FilterCreateTenant(opts *bind.FilterOpts) (*BaseTenantFactoryCreateTenantIterator, error) {

	logs, sub, err := _BaseTenantFactory.contract.FilterLogs(opts, "CreateTenant")
	if err != nil {
		return nil, err
	}
	return &BaseTenantFactoryCreateTenantIterator{contract: _BaseTenantFactory.contract, event: "CreateTenant", logs: logs, sub: sub}, nil
}

// WatchCreateTenant is a free log subscription operation binding the contract event 0x4e55a861e321e4eb19dbd191fa0e28ba386976e8df7d9b669e868826affef199.
//
// Solidity: event CreateTenant(address tenantAddress)
func (_BaseTenantFactory *BaseTenantFactoryFilterer) WatchCreateTenant(opts *bind.WatchOpts, sink chan<- *BaseTenantFactoryCreateTenant) (event.Subscription, error) {

	logs, sub, err := _BaseTenantFactory.contract.WatchLogs(opts, "CreateTenant")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantFactoryCreateTenant)
				if err := _BaseTenantFactory.contract.UnpackLog(event, "CreateTenant", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateTenant is a log parse operation binding the contract event 0x4e55a861e321e4eb19dbd191fa0e28ba386976e8df7d9b669e868826affef199.
//
// Solidity: event CreateTenant(address tenantAddress)
func (_BaseTenantFactory *BaseTenantFactoryFilterer) ParseCreateTenant(log types.Log) (*BaseTenantFactoryCreateTenant, error) {
	event := new(BaseTenantFactoryCreateTenant)
	if err := _BaseTenantFactory.contract.UnpackLog(event, "CreateTenant", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantSpaceMetaData contains all meta data concerning the BaseTenantSpace contract.
var BaseTenantSpaceMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factoryManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_func4Bytes\",\"type\":\"bytes4[]\"},{\"name\":\"_funcAddr\",\"type\":\"address\"}],\"name\":\"addFuncs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listKey\",\"type\":\"bytes32\"}],\"name\":\"listLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeMan\",\"type\":\"address\"}],\"name\":\"setNodeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listKey\",\"type\":\"bytes32\"},{\"name\":\"itemOrd\",\"type\":\"uint256\"}],\"name\":\"removeListOrd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"setAndGetBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"_prefix\",\"type\":\"bytes\"}],\"name\":\"getKMSInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTenantID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsAddress\",\"type\":\"address\"}],\"name\":\"createLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factMan\",\"type\":\"address\"}],\"name\":\"setFactoryManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listsMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"getKMSID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GROUP_ID_ADMIN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"userManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"userWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_groupAddr\",\"type\":\"address\"}],\"name\":\"addGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listKey\",\"type\":\"bytes32\"},{\"name\":\"itemVal\",\"type\":\"string\"}],\"name\":\"addListItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"incrementCounter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsMan\",\"type\":\"address\"}],\"name\":\"setKmsManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsIdStr\",\"type\":\"string\"}],\"name\":\"checkKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_desc\",\"type\":\"string\"}],\"name\":\"setDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userMan\",\"type\":\"address\"}],\"name\":\"setUserManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nodeManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_func4Bytes\",\"type\":\"bytes4\"},{\"name\":\"_p1\",\"type\":\"uint256\"},{\"name\":\"_p2\",\"type\":\"address\"},{\"name\":\"_encAuthToken\",\"type\":\"bytes\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"callFuncUintAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kmsManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lib\",\"type\":\"address\"},{\"name\":\"_contentType\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"funcMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"},{\"name\":\"_groupAddr\",\"type\":\"address\"}],\"name\":\"removeGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defLeewaySecs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"checkKMSAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"}],\"name\":\"deleteGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"createUserWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupsMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_func4Bytes\",\"type\":\"bytes4\"},{\"name\":\"_encAuthToken\",\"type\":\"bytes\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"checkCallFunc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defTokenExpSecs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contentSpace\",\"type\":\"address\"},{\"name\":\"_tenantName\",\"type\":\"string\"},{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"version\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CreateTenant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"GetAccessWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"func4Bytes\",\"type\":\"bytes4[]\"},{\"indexed\":false,\"name\":\"funcAddr\",\"type\":\"address\"}],\"name\":\"FunctionsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"groupAddr\",\"type\":\"address\"}],\"name\":\"AddTenantGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"groupAddr\",\"type\":\"address\"}],\"name\":\"RemoveTenantGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prevManager\",\"type\":\"address\"}],\"name\":\"SetUserManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prevManager\",\"type\":\"address\"}],\"name\":\"SetNodeManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prevManager\",\"type\":\"address\"}],\"name\":\"SetFactoryManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"prevManager\",\"type\":\"address\"}],\"name\":\"SetKmsManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint32\"}],\"name\":\"CounterIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ord\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"prev\",\"type\":\"bool\"}],\"name\":\"BitSetAndGet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"}],\"name\":\"WordGroupDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"97ac4fd2": "CAN_ACCESS()",
		"ef1d7dc2": "CAN_EDIT()",
		"100508a2": "CAN_SEE()",
		"58d40b25": "GROUP_ID_ADMIN()",
		"1bf7a912": "accessRequestV3(bytes32[],address[])",
		"0a581edc": "addFuncs(bytes4[],address)",
		"65d8dd34": "addGroup(bytes32,address)",
		"74daf3a0": "addListItem(bytes32,string)",
		"32eaf21b": "addressKMS()",
		"9c075d67": "callFuncUintAddr(bytes4,uint256,address,bytes,uint8,bytes32,bytes32)",
		"6e375427": "canCommit()",
		"14cfabb3": "canConfirm()",
		"81beeb64": "canEdit()",
		"26683e14": "canNodePublish(address)",
		"ed1f6456": "checkCallFunc(bytes4,bytes,uint8,bytes32,bytes32)",
		"8d2a23db": "checkKMS(string)",
		"d6be0f49": "checkKMSAddr(address)",
		"5f6a1301": "clearPending()",
		"9867db74": "commit(string)",
		"375a6e7c": "commitPending()",
		"446e8826": "confirmCommit()",
		"af570c04": "contentSpace()",
		"331b86c0": "countVersionHashes()",
		"bf4e088f": "createContent(address,address)",
		"b8cfaf05": "createContentType()",
		"575185ed": "createGroup()",
		"40b89f06": "createLibrary(address)",
		"e7cf0c66": "createUserWallet(address)",
		"02d05d3f": "creator()",
		"d21a8c94": "defLeewaySecs()",
		"f1df8140": "defTokenExpSecs()",
		"e57097c9": "deleteGroup(bytes32)",
		"e1a70717": "deleteVersion(string)",
		"7284e416": "description()",
		"032b5a73": "factoryManager()",
		"c2a21f14": "funcMapping(bytes4)",
		"30f846a2": "getBit(bytes32,uint8)",
		"e1954b61": "getCounter(bytes32,uint8)",
		"589aafc1": "getKMSID(address)",
		"268bfac4": "getKMSInfo(string,bytes)",
		"ac55c906": "getMeta(bytes)",
		"401262c8": "getTenantID()",
		"4093d7a1": "groupIds(uint256)",
		"ea8a3ed8": "groupsMapping(bytes32,uint256)",
		"95a078e8": "hasAccess(address)",
		"67e5c3bf": "hasEditorRight(address)",
		"7558cbf0": "incrementCounter(bytes32,uint8)",
		"6380501f": "indexCategory()",
		"24d7806c": "isAdmin(address)",
		"41c0e1b5": "kill()",
		"ac65b649": "kmsManager()",
		"11a3fa38": "listLength(bytes32)",
		"4d368f10": "listsMapping(bytes32,uint256)",
		"06fdde03": "name()",
		"9bb5cd3f": "nodeManager()",
		"e02dd9c2": "objectHash()",
		"40b87a26": "objectTimestamp()",
		"8da5cb5b": "owner()",
		"00821de3": "parentAddress()",
		"628449fd": "pendingHash()",
		"e542b7cb": "putMeta(bytes,bytes)",
		"cb3899b3": "removeGroup(bytes32,address)",
		"1fa12f11": "removeListOrd(bytes32,uint256)",
		"c9e8e72d": "setAddressKMS(address)",
		"24d7c18d": "setAndGetBit(bytes32,uint8)",
		"90c3f38f": "setDescription(string)",
		"430e621e": "setFactoryManager(address)",
		"22e564eb": "setGroupRights(address,uint8,uint8)",
		"87e38281": "setKmsManager(address)",
		"1319e7e1": "setNodeManager(address)",
		"0fe1b5a2": "setRights(address,uint8,uint8)",
		"97d0b02c": "setUserManager(address)",
		"aa024e8b": "setVisibility(uint8)",
		"a9059cbb": "transfer(address,uint256)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"c287e0ed": "updateRequest()",
		"5c8a7687": "userManager()",
		"63e6ffdd": "userWallets(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
		"7ca8f618": "versionHashes(uint256)",
		"7886f747": "versionTimestamp(uint256)",
		"29adec14": "visibility()",
	},
	Bin: "0x608060408190527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060019081557f41636365737369626c653230323030363236313231363030504f0000000000006008556009805460ff191690911761ff00191690557f4564697461626c653230323030393238313130303030504f0000000000000000600a557f4261736554656e616e7453706163653230323030353034313230303030504f0060115562015180601555607860165562006cae3881900390819083398101806040526060811015620000fc57600080fd5b8151602083018051919392830192916401000000008111156200011e57600080fd5b820160208101848111156200013257600080fd5b81516401000000008111828201871017156200014d57600080fd5b505060209182015160028054600160a060020a031990811632179091556003805490911633179055815191945092506200018e9160129190850190620009ed565b5060048054600160a060020a031916600160a060020a03858116919091179182905516331480620001dd5750600454620001dd90600160a060020a0316620002af602090811b62005acd17901c565b151562000236576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018062006c8c6022913960400191505060405180910390fd5b60148054600160a060020a031916600160a060020a03838116919091179091556009805461ff001916610500179055601154600354604080519283529216602082015281517fc2fe67ac699789805c53a93eea70eb0e316deaf8db4b810382d2412ba4fcb4c8929181900390910190a150505062000aa9565b604080518082018252601d81527f5f454c565f47524f55505f54454e414e545f415554484f524954494553000000602080830191825292517fac55c906000000000000000000000000000000000000000000000000000000008152600481019384528251602482015282516000948694606094600160a060020a0387169463ac55c906949293928392604490920191908083838d5b838110156200035e57818101518382015260200162000344565b50505050905090810190601f1680156200038c5780820380516001836020036101000a031916815260200191505b509250505060006040518083038186803b158015620003aa57600080fd5b505afa158015620003bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015620003e957600080fd5b8101908080516401000000008111156200040257600080fd5b820160208101848111156200041657600080fd5b81516401000000008111828201871017156200043157600080fd5b5050805190945015159250620004509150505760009250505062000746565b6200045a62000a72565b62000470826200074b60201b62005f0c1760201c565b90506200047c62000a72565b620004c76040805190810160405280600181526020017f2c000000000000000000000000000000000000000000000000000000000000008152506200074b60201b62005f0c1760201c565b90506060620004e582846200077260201b62005f311790919060201c565b6001016040519080825280602002602001820160405280156200051d57816020015b6060815260200190600190039081620005075790505b50905060005b81518110156200073b576200055c6200054b8486620007ef60201b62005f9e1790919060201c565b6200080c60201b62005fb11760201c565b82828151811015156200056b57fe5b90602001906020020181905250600073__$f2868cc5300372e492613b0df8a63b3548$__6342526e4e8484815181101515620005a357fe5b906020019060200201516040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620005fb578181015183820152602001620005e1565b50505050905090810190601f168015620006295780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1580156200064757600080fd5b505af41580156200065c573d6000803e3d6000fd5b505050506040513d60208110156200067357600080fd5b5051604080517f872ea68a000000000000000000000000000000000000000000000000000000008152326004820152905191925082918291600091600160a060020a0384169163872ea68a916024808301926020929190829003018186803b158015620006df57600080fd5b505afa158015620006f4573d6000803e3d6000fd5b505050506040513d60208110156200070b57600080fd5b5051905080156200072a5760019a505050505050505050505062000746565b505060019092019150620005239050565b506000955050505050505b919050565b6200075562000a72565b506040805180820190915281518152602082810190820152919050565b60008082600001516200079e85600001518660200151866000015187602001516200086560201b60201c565b0190505b83516020850151018111620007e8578251602080860151865182870151600190960195620007df93928603909103918591859162000865811b901c565b019050620007a2565b5092915050565b620007f962000a72565b620007e88383836200093060201b60201c565b60608082600001516040519080825280601f01601f1916602001820160405280156200083f576020820181803883390190505b5090506000602082019050620007e88185602001518660000151620009ad60201b60201c565b60008381868511620009215760208511620008e25783518251600019600860208990030260020a011960001b91821690888a018890039083165b808314620008d357818610620008c0578a8a01965050505050505062000928565b506001909401805190949083166200089f565b85965050505050505062000928565b508383206000905b85880382116200091f57858320818114156200090d578394505050505062000928565b506001928301929190910190620008ea565b505b5050508284015b949350505050565b6200093a62000a72565b60006200096085600001518660200151866000015187602001516200086560201b60201c565b602080870180519186019190915280518203855286519051919250018114156200098e5760008552620009a4565b8351835186519101900385528351810160208601525b50909392505050565b5b60208110620009cf578151835260209283019290910190601f1901620009ae565b905182516020929092036101000a6000190180199091169116179052565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000a3057805160ff191683800117855562000a60565b8280016001018555821562000a60579182015b8281111562000a6057825182559160200191906001019062000a43565b5062000a6e92915062000a89565b5090565b604080518082019091526000808252602082015290565b62000aa691905b8082111562000a6e576000815560010162000a90565b90565b6161d38062000ab96000396000f3fe60806040526004361061049e5760003560e01c80636d2e4b1b11610260578063ac65b64911610144578063e02dd9c2116100c1578063e7cf0c6611610085578063e7cf0c661461188d578063ea8a3ed8146118c0578063ed1f6456146118f0578063ef1d7dc2146119c2578063f1df8140146119d7578063f2fde38b146119ec5761049e565b8063e02dd9c214611615578063e1954b611461162a578063e1a7071714611676578063e542b7cb14611729578063e57097c9146118635761049e565b8063c2a21f1411610108578063c2a21f141461152d578063c9e8e72d14611561578063cb3899b314611594578063d21a8c94146115cd578063d6be0f49146115e25761049e565b8063ac65b6491461149e578063af570c04146114b3578063b8cfaf05146114c8578063bf4e088f146114dd578063c287e0ed146115185761049e565b80638da5cb5b116101dd5780639867db74116101a15780639867db74146111d65780639bb5cd3f146112895780639c075d671461129e578063a9059cbb14611385578063aa024e8b146113be578063ac55c906146113eb5761049e565b80638da5cb5b1461109357806390c3f38f146110a857806395a078e81461115b57806397ac4fd21461118e57806397d0b02c146111a35761049e565b80637886f747116102245780637886f74714610f7a5780637ca8f61814610fa457806381beeb6414610fce57806387e3828114610fe35780638d2a23db146110165761049e565b80636d2e4b1b14610e305780636e37542714610e635780637284e41614610e7857806374daf3a014610e8d5780637558cbf014610f475761049e565b8063375a6e7c11610387578063575185ed116103045780635f6a1301116102c85780635f6a130114610d52578063628449fd14610d675780636380501f14610d7c57806363e6ffdd14610d9157806365d8dd3414610dc457806367e5c3bf14610dfd5761049e565b8063575185ed14610ccb578063589aafc114610ce057806358d40b2514610d135780635c8a768714610d285780635f4fcae114610d3d5761049e565b806341c0e1b51161034b57806341c0e1b514610c36578063430e621e14610c4b578063446e882614610c7e5780634d368f1014610c8657806354fd4d5014610cb65761049e565b8063375a6e7c14610b9a578063401262c814610baf5780634093d7a114610bc457806340b87a2614610bee57806340b89f0614610c035761049e565b80631bf7a9121161042057806326683e14116103e457806326683e1414610948578063268bfac41461097b57806329adec1414610b2857806330f846a214610b3d57806332eaf21b14610b70578063331b86c014610b855761049e565b80631bf7a912146107475780631fa12f111461086e57806322e564eb1461089e57806324d7806c146108e257806324d7c18d146109155761049e565b80630fe1b5a2116104675780630fe1b5a214610640578063100508a21461068457806311a3fa38146106af5780631319e7e1146106eb57806314cfabb31461071e5761049e565b8062821de3146104a057806302d05d3f146104d1578063032b5a73146104e657806306fdde03146104fb5780630a581edc14610585575b005b3480156104ac57600080fd5b506104b5611a1f565b60408051600160a060020a039092168252519081900360200190f35b3480156104dd57600080fd5b506104b5611a2f565b3480156104f257600080fd5b506104b5611a3e565b34801561050757600080fd5b50610510611a4d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561054a578181015183820152602001610532565b50505050905090810190601f1680156105775780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561059157600080fd5b5061049e600480360360408110156105a857600080fd5b8101906020810181356401000000008111156105c357600080fd5b8201836020820111156105d557600080fd5b803590602001918460208302840111640100000000831117156105f757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050509035600160a060020a03169150611adb9050565b34801561064c57600080fd5b5061049e6004803603606081101561066357600080fd5b50600160a060020a038135169060ff60208201358116916040013516611bec565b34801561069057600080fd5b50610699611cb8565b6040805160ff9092168252519081900360200190f35b3480156106bb57600080fd5b506106d9600480360360208110156106d257600080fd5b5035611cbd565b60408051918252519081900360200190f35b3480156106f757600080fd5b5061049e6004803603602081101561070e57600080fd5b5035600160a060020a0316611cd2565b34801561072a57600080fd5b50610733611d50565b604080519115158252519081900360200190f35b6107336004803603604081101561075d57600080fd5b81019060208101813564010000000081111561077857600080fd5b82018360208201111561078a57600080fd5b803590602001918460208302840111640100000000831117156107ac57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156107fc57600080fd5b82018360208201111561080e57600080fd5b8035906020019184602083028401116401000000008311171561083057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611e65945050505050565b34801561087a57600080fd5b5061049e6004803603604081101561089157600080fd5b5080359060200135611f09565b3480156108aa57600080fd5b5061049e600480360360608110156108c157600080fd5b50600160a060020a038135169060ff60208201358116916040013516611ffc565b3480156108ee57600080fd5b506107336004803603602081101561090557600080fd5b5035600160a060020a03166124ba565b34801561092157600080fd5b506107336004803603604081101561093857600080fd5b508035906020013560ff166126ec565b34801561095457600080fd5b506107336004803603602081101561096b57600080fd5b5035600160a060020a0316612713565b34801561098757600080fd5b50610a4a6004803603604081101561099e57600080fd5b8101906020810181356401000000008111156109b957600080fd5b8201836020820111156109cb57600080fd5b803590602001918460018302840111640100000000831117156109ed57600080fd5b919390929091602081019035640100000000811115610a0b57600080fd5b820183602082011115610a1d57600080fd5b80359060200191846001830284011164010000000083111715610a3f57600080fd5b509092509050612830565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610a8b578181015183820152602001610a73565b50505050905090810190601f168015610ab85780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610aeb578181015183820152602001610ad3565b50505050905090810190601f168015610b185780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b348015610b3457600080fd5b50610699612b7a565b348015610b4957600080fd5b5061073360048036036040811015610b6057600080fd5b508035906020013560ff16612b83565b348015610b7c57600080fd5b506104b5612bf0565b348015610b9157600080fd5b506106d9612bff565b348015610ba657600080fd5b50610733612c05565b348015610bbb57600080fd5b50610510612c0e565b348015610bd057600080fd5b506106d960048036036020811015610be757600080fd5b5035612c87565b348015610bfa57600080fd5b506106d9612ca6565b348015610c0f57600080fd5b506104b560048036036020811015610c2657600080fd5b5035600160a060020a0316612cac565b348015610c4257600080fd5b5061049e612dbc565b348015610c5757600080fd5b5061049e60048036036020811015610c6e57600080fd5b5035600160a060020a0316612de1565b610733612e5f565b348015610c9257600080fd5b5061051060048036036040811015610ca957600080fd5b5080359060200135613063565b348015610cc257600080fd5b506106d96130e6565b348015610cd757600080fd5b506104b56130ec565b348015610cec57600080fd5b5061051060048036036020811015610d0357600080fd5b5035600160a060020a03166131d5565b348015610d1f57600080fd5b506106d96133d7565b348015610d3457600080fd5b506104b56133e9565b348015610d4957600080fd5b506106d96133f8565b348015610d5e57600080fd5b5061049e6133fe565b348015610d7357600080fd5b5061051061343c565b348015610d8857600080fd5b50610699613497565b348015610d9d57600080fd5b506104b560048036036020811015610db457600080fd5b5035600160a060020a03166134a5565b348015610dd057600080fd5b5061049e60048036036040811015610de757600080fd5b5080359060200135600160a060020a031661355d565b348015610e0957600080fd5b5061073360048036036020811015610e2057600080fd5b5035600160a060020a03166136cb565b348015610e3c57600080fd5b5061049e60048036036020811015610e5357600080fd5b5035600160a060020a031661384c565b348015610e6f57600080fd5b5061073361389a565b348015610e8457600080fd5b506105106138ab565b348015610e9957600080fd5b5061049e60048036036040811015610eb057600080fd5b81359190810190604081016020820135640100000000811115610ed257600080fd5b820183602082011115610ee457600080fd5b80359060200191846001830284011164010000000083111715610f0657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613906945050505050565b348015610f5357600080fd5b5061049e60048036036040811015610f6a57600080fd5b508035906020013560ff1661394e565b348015610f8657600080fd5b506106d960048036036020811015610f9d57600080fd5b5035613a4f565b348015610fb057600080fd5b5061051060048036036020811015610fc757600080fd5b5035613a5d565b348015610fda57600080fd5b50610733613ad1565b348015610fef57600080fd5b5061049e6004803603602081101561100657600080fd5b5035600160a060020a0316613ae1565b34801561102257600080fd5b506106d96004803603602081101561103957600080fd5b81019060208101813564010000000081111561105457600080fd5b82018360208201111561106657600080fd5b8035906020019184600183028401116401000000008311171561108857600080fd5b509092509050613b5f565b34801561109f57600080fd5b506104b5613cf3565b3480156110b457600080fd5b5061049e600480360360208110156110cb57600080fd5b8101906020810181356401000000008111156110e657600080fd5b8201836020820111156110f857600080fd5b8035906020019184600183028401116401000000008311171561111a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613d02945050505050565b34801561116757600080fd5b506107336004803603602081101561117e57600080fd5b5035600160a060020a0316613d29565b34801561119a57600080fd5b50610699613e6d565b3480156111af57600080fd5b5061049e600480360360208110156111c657600080fd5b5035600160a060020a0316613e72565b3480156111e257600080fd5b5061049e600480360360208110156111f957600080fd5b81019060208101813564010000000081111561121457600080fd5b82018360208201111561122657600080fd5b8035906020019184600183028401116401000000008311171561124857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550613ef0945050505050565b34801561129557600080fd5b506104b561401d565b3480156112aa57600080fd5b5061049e600480360360e08110156112c157600080fd5b600160e060020a031982351691602081013591600160a060020a03604083013516919081019060808101606082013564010000000081111561130257600080fd5b82018360208201111561131457600080fd5b8035906020019184600183028401116401000000008311171561133657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505060ff833516935050506020810135906040013561402c565b34801561139157600080fd5b5061049e600480360360408110156113a857600080fd5b50600160a060020a0381351690602001356141f3565b3480156113ca57600080fd5b5061049e600480360360208110156113e157600080fd5b503560ff16614242565b3480156113f757600080fd5b506105106004803603602081101561140e57600080fd5b81019060208101813564010000000081111561142957600080fd5b82018360208201111561143b57600080fd5b8035906020019184600183028401116401000000008311171561145d57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506142bc945050505050565b3480156114aa57600080fd5b506104b5614465565b3480156114bf57600080fd5b506104b5614474565b3480156114d457600080fd5b506104b5614483565b3480156114e957600080fd5b506104b56004803603604081101561150057600080fd5b50600160a060020a0381358116916020013516614544565b34801561152457600080fd5b5061049e614664565b34801561153957600080fd5b506104b56004803603602081101561155057600080fd5b5035600160e060020a031916614726565b34801561156d57600080fd5b5061049e6004803603602081101561158457600080fd5b5035600160a060020a0316614741565b3480156115a057600080fd5b5061049e600480360360408110156115b757600080fd5b5080359060200135600160a060020a031661477a565b3480156115d957600080fd5b506106d961494e565b3480156115ee57600080fd5b506106d96004803603602081101561160557600080fd5b5035600160a060020a0316614954565b34801561162157600080fd5b50610510614a38565b34801561163657600080fd5b5061165d6004803603604081101561164d57600080fd5b508035906020013560ff16614a93565b6040805163ffffffff9092168252519081900360200190f35b34801561168257600080fd5b506106d96004803603602081101561169957600080fd5b8101906020810181356401000000008111156116b457600080fd5b8201836020820111156116c657600080fd5b803590602001918460018302840111640100000000831117156116e857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550614ae5945050505050565b34801561173557600080fd5b5061049e6004803603604081101561174c57600080fd5b81019060208101813564010000000081111561176757600080fd5b82018360208201111561177957600080fd5b8035906020019184600183028401116401000000008311171561179b57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156117ee57600080fd5b82018360208201111561180057600080fd5b8035906020019184600183028401116401000000008311171561182257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550614f56945050505050565b34801561186f57600080fd5b5061049e6004803603602081101561188657600080fd5b503561514d565b34801561189957600080fd5b506104b5600480360360208110156118b057600080fd5b5035600160a060020a03166151b2565b3480156118cc57600080fd5b506104b5600480360360408110156118e357600080fd5b508035906020013561529a565b3480156118fc57600080fd5b50610733600480360360a081101561191357600080fd5b600160e060020a0319823516919081019060408101602082013564010000000081111561193f57600080fd5b82018360208201111561195157600080fd5b8035906020019184600183028401116401000000008311171561197357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505060ff83351693505050602081013590604001356152d1565b3480156119ce57600080fd5b50610699615468565b3480156119e357600080fd5b506106d961546d565b3480156119f857600080fd5b5061049e60048036036020811015611a0f57600080fd5b5035600160a060020a0316615473565b600454600160a060020a03165b90565b600254600160a060020a031681565b601d54600160a060020a031681565b6012805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611ad35780601f10611aa857610100808354040283529160200191611ad3565b820191906000526020600020905b815481529060010190602001808311611ab657829003601f168201915b505050505081565b611ae4336124ba565b1515611aef57600080fd5b60005b8251811015611b585781601a60008584815181101515611b0e57fe5b602090810291909101810151600160e060020a03191682528101919091526040016000208054600160a060020a031916600160a060020a0392909216919091179055600101611af2565b507f2fd37118a7338c6d45366419ced87ba93589ba1cca2489e8fb42b55de88742668282604051808060200183600160a060020a0316600160a060020a03168152602001828103825284818151815260200191508051906020019060200280838360005b83811015611bd4578181015183820152602001611bbc565b50505050905001935050505060405180910390a15050565b611bf4613ad1565b1515611bff57600080fd5b600480546040805160e060020a6363e6ffdd028152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd91602480820192602092909190829003018186803b158015611c5857600080fd5b505afa158015611c6c573d6000803e3d6000fd5b505050506040513d6020811015611c8257600080fd5b50519050600160a060020a0381161515611ca657611ca1858585611ffc565b611cb1565b611cb1818585611ffc565b5050505050565b600181565b6000818152601960205260409020545b919050565b611cdb336124ba565b1515611ce657600080fd5b601c5460408051600160a060020a038085168252909216602083015280517f9b77357b839fea8829ce30918f67eb91de08caa0e5272af43a86af5334b561779281900390910190a1601c8054600160a060020a031916600160a060020a0392909216919091179055565b601c54600090600160a060020a031615611de557601c546040805160e260020a63099a0f850281523360048201529051600160a060020a03909216916326683e1491602480820192602092909190829003018186803b158015611db257600080fd5b505afa158015611dc6573d6000803e3d6000fd5b505050506040513d6020811015611ddc57600080fd5b50519050611a2c565b600480546040805160e260020a63099a0f85028152339381019390935251600160a060020a03909116916326683e14916024808301926020929190829003018186803b158015611e3457600080fd5b505afa158015611e48573d6000803e3d6000fd5b505050506040513d6020811015611e5e57600080fd5b5051905090565b6000611e7033613d29565b1515611e7b57600080fd5b604080513060601b602080830191909152426034808401829052845180850390910181526054840180865281519190930120600090811c9092526074830182905260948301919091523360b48301526103e80260d482015290517f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c79181900360f40190a15060015b92915050565b611f12336124ba565b1515611f1d57600080fd5b6000828152601960205260409020546000190180821015611fa7576000838152601960205260409020805482908110611f5257fe5b906000526020600020016019600085815260200190815260200160002083815481101515611f7c57fe5b906000526020600020019080546001816001161561010002031660029004611fa592919061590a565b505b6000838152601960205260409020805482908110611fc157fe5b906000526020600020016000611fd7919061598f565b6000838152601960205260409020805490611ff69060001983016159d3565b50505050565b600083905080600160a060020a031663091600e66040518163ffffffff1660e01b815260040160206040518083038186803b15801561203a57600080fd5b505afa15801561204e573d6000803e3d6000fd5b505050506040513d602081101561206457600080fd5b5051600954610100900460ff9081169116141561210957604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691633def514091606480830192600092919082900301818387803b1580156120ec57600080fd5b505af1158015612100573d6000803e3d6000fd5b50505050611ff6565b80600160a060020a03166312915a306040518163ffffffff1660e01b815260040160206040518083038186803b15801561214257600080fd5b505afa158015612156573d6000803e3d6000fd5b505050506040513d602081101561216c57600080fd5b5051600954610100900460ff908116911614156121f457604080517ff17bda9100000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163f17bda9191606480830192600092919082900301818387803b1580156120ec57600080fd5b80600160a060020a03166316aed2326040518163ffffffff1660e01b815260040160206040518083038186803b15801561222d57600080fd5b505afa158015612241573d6000803e3d6000fd5b505050506040513d602081101561225757600080fd5b5051600954610100900460ff908116911614156122df57604080517f7cbb7bf200000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691637cbb7bf291606480830192600092919082900301818387803b1580156120ec57600080fd5b80600160a060020a03166368a0469a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561231857600080fd5b505afa15801561232c573d6000803e3d6000fd5b505050506040513d602081101561234257600080fd5b5051600954610100900460ff908116911614156123ca57604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691638635adb591606480830192600092919082900301818387803b1580156120ec57600080fd5b80600160a060020a0316636373a4116040518163ffffffff1660e01b815260040160206040518083038186803b15801561240357600080fd5b505afa158015612417573d6000803e3d6000fd5b505050506040513d602081101561242d57600080fd5b5051600954610100900460ff908116911614156124b557604080517f224dcba000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163224dcba091606480830192600092919082900301818387803b1580156120ec57600080fd5b600080fd5b600354600090600160a060020a03838116911614156124db57506001611ccd565b600080516020616188833981519152600052601760209081527f32dc2f122323555a2931187e5f104d329406c3094dd4da659019b9a47f95daf0805460408051828502810185019091528181526060939092919083018282801561256857602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161254a575b50939450600093505050505b81518110156126e2576000828281518110151561258d57fe5b6020908102909101810151604080517fd8961c8d000000000000000000000000000000000000000000000000000000008152600160a060020a0389811660048301526000602483015291519294509084169263d8961c8d92604480840193829003018186803b1580156125ff57600080fd5b505afa158015612613573d6000803e3d6000fd5b505050506040513d602081101561262957600080fd5b5051806126c85750604080517fd8961c8d000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301526001602483015291519183169163d8961c8d91604480820192602092909190829003018186803b15801561269b57600080fd5b505afa1580156126af573d6000803e3d6000fd5b505050506040513d60208110156126c557600080fd5b50515b156126d95760019350505050611ccd565b50600101612574565b5060009392505050565b60006126f7336124ba565b151561270257600080fd5b61270c83836154c1565b9392505050565b601c54600090600160a060020a0316156127aa57601c546040805160e260020a63099a0f85028152600160a060020a038581166004830152915191909216916326683e14916024808301926020929190829003018186803b15801561277757600080fd5b505afa15801561278b573d6000803e3d6000fd5b505050506040513d60208110156127a157600080fd5b50519050611ccd565b600480546040805160e260020a63099a0f85028152600160a060020a0386811694820194909452905192909116916326683e1491602480820192602092909190829003018186803b1580156127fe57600080fd5b505afa158015612812573d6000803e3d6000fd5b505050506040513d602081101561282857600080fd5b505192915050565b601e546060908190600160a060020a0316156129de57601e54604080517f268bfac40000000000000000000000000000000000000000000000000000000081526004810191825260448101889052600160a060020a039092169163268bfac49189918991899189919081906024810190606401878780828437600083820152601f01601f191690910184810383528581526020019050858580828437600081840152601f19601f820116905080830192505050965050505050505060006040518083038186803b15801561290357600080fd5b505afa158015612917573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561294057600080fd5b81019080805164010000000081111561295857600080fd5b8201602081018481111561296b57600080fd5b815164010000000081118282018710171561298557600080fd5b505092919060200180516401000000008111156129a157600080fd5b820160208101848111156129b457600080fd5b81516401000000008111828201871017156129ce57600080fd5b509496509450612b719350505050565b60048054604080517f268bfac400000000000000000000000000000000000000000000000000000000815292830190815260448301889052600160a060020a039091169163268bfac49189918991899189919081906024810190606401878780828437600083820152601f01601f191690910184810383528581526020019050858580828437600081840152601f19601f820116905080830192505050965050505050505060006040518083038186803b158015612a9b57600080fd5b505afa158015612aaf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015612ad857600080fd5b810190808051640100000000811115612af057600080fd5b82016020810184811115612b0357600080fd5b8151640100000000811182820187101715612b1d57600080fd5b50509291906020018051640100000000811115612b3957600080fd5b82016020810184811115612b4c57600080fd5b8151640100000000811182820187101715612b6657600080fd5b509496509450505050505b94509492505050565b60095460ff1681565b6000828152600760209081526040822060ff8481169290920490911690601f8416906001821b9081908460088110612bb757fe5b600881049091015460046007909216919091026101000a90041663ffffffff1615612be3576001612be6565b60005b9695505050505050565b601454600160a060020a031681565b600d5490565b60105460ff1681565b600080516020616188833981519152600090815260176020527f32dc2f122323555a2931187e5f104d329406c3094dd4da659019b9a47f95daf08054606092919082908110612c5957fe5b600091825260209091200154600160a060020a03169050612c81612c7b6155cc565b826155d1565b91505090565b6018805482908110612c9557fe5b600091825260209091200154905081565b600c5481565b601d54600090600160a060020a031615612d3c57601d54604080517f40b89f06000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152915191909216916340b89f069160248083019260209291908290030181600087803b158015612d2857600080fd5b505af115801561278b573d6000803e3d6000fd5b60048054604080517f40b89f06000000000000000000000000000000000000000000000000000000008152600160a060020a0386811694820194909452905192909116916340b89f06916024808201926020929091908290030181600087803b158015612da857600080fd5b505af1158015612812573d6000803e3d6000fd5b600354600160a060020a03163314612dd357600080fd5b600354600160a060020a0316ff5b612dea336124ba565b1515612df557600080fd5b601d5460408051600160a060020a038085168252909216602083015280517ffa2af382c197e27affb4e04f89f42556c71015346416b56be15b3aee3c87f6619281900390910190a1601d8054600160a060020a031916600160a060020a0392909216919091179055565b6000612e69611d50565b1515612e7457600080fd5b60105460ff161515612e8557600080fd5b6000600b8054600181600116156101000203166002900490501115612f3457600d80546001818101808455600093909352600b8054612efb937fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5019260026101009183161591909102600019019091160461590a565b5050600c54600e80546001810182556000919091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd01555b600f8054612f5791600b916002600019610100600184161502019091160461590a565b5042600c55604080516020810191829052600090819052612f7a91600f916159f7565b506010805460ff191690556004547fbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df90600160a060020a0316612fbb611a1f565b60408051600160a060020a038085168252831660208201526060918101828152600b8054600260001961010060018416150201909116049383018490529260808301908490801561304d5780601f106130225761010080835404028352916020019161304d565b820191906000526020600020905b81548152906001019060200180831161303057829003601f168201915b505094505050505060405180910390a150600190565b60196020528160005260406000208181548110151561307e57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152945090925090830182828015611ad35780601f10611aa857610100808354040283529160200191611ad3565b60115481565b601d54600090600160a060020a03161561316457601d60009054906101000a9004600160a060020a0316600160a060020a031663575185ed6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561315057600080fd5b505af1158015611dc6573d6000803e3d6000fd5b60048054604080517f575185ed0000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263575185ed9282820192602092908290030181600087803b1580156131c157600080fd5b505af1158015611e48573d6000803e3d6000fd5b601e54606090600160a060020a0316156132df57601e54604080517f589aafc1000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163589aafc1916024808301926000929190829003018186803b15801561324f57600080fd5b505afa158015613263573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561328c57600080fd5b8101908080516401000000008111156132a457600080fd5b820160208101848111156132b757600080fd5b81516401000000008111828201871017156132d157600080fd5b50909450611ccd9350505050565b60048054604080517f589aafc1000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051929091169163589aafc191602480820192600092909190829003018186803b15801561334957600080fd5b505afa15801561335d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561338657600080fd5b81019080805164010000000081111561339e57600080fd5b820160208101848111156133b157600080fd5b81516401000000008111828201871017156133cb57600080fd5b50909695505050505050565b60008051602061618883398151915281565b601b54600160a060020a031681565b60015481565b61340661389a565b151561341157600080fd5b60408051602081019182905260009081905261342f91600f916159f7565b506010805460ff19169055565b600f805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611ad35780601f10611aa857610100808354040283529160200191611ad3565b600954610100900460ff1681565b601b54600090600160a060020a03161561350957601b546040805160e060020a6363e6ffdd028152600160a060020a038581166004830152915191909216916363e6ffdd916024808301926020929190829003018186803b15801561277757600080fd5b600480546040805160e060020a6363e6ffdd028152600160a060020a0386811694820194909452905192909116916363e6ffdd91602480820192602092909190829003018186803b1580156127fe57600080fd5b613566336124ba565b151561357157600080fd5b600160a060020a038116151561358657600080fd5b60005b600083815260176020526040902054811015613609576000805160206161888339815191528314156135ba57600080fd5b60008381526017602052604090208054600160a060020a0384169190839081106135e057fe5b600091825260209091200154600160a060020a0316141561360157506136c7565b600101613589565b506000828152601760209081526040822080546001808201808455928552929093209092018054600160a060020a031916600160a060020a038516179055141561368357601880546001810182556000919091527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e018290555b60408051838152600160a060020a038316602082015281517f145b7e243e91890686f5ba84dd1254f7497f549ffb955f4871b3d27d4137d471929181900390910190a15b5050565b600354600090600160a060020a03838116911614806136f25750600954606460ff90911610155b156136ff57506001611ccd565b600954600061010090910460ff16111561384457600480546040805160e060020a6363e6ffdd028152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b15801561376957600080fd5b505afa15801561377d573d6000803e3d6000fd5b505050506040513d602081101561379357600080fd5b5051600954604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526002604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561380f57600080fd5b505afa158015613823573d6000803e3d6000fd5b505050506040513d602081101561383957600080fd5b50519150611ccd9050565b506000611ccd565b600254600160a060020a0316331461386357600080fd5b600160a060020a038116151561387857600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600354600160a060020a0316331490565b6013805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611ad35780601f10611aa857610100808354040283529160200191611ad3565b61390f336124ba565b151561391a57600080fd5b600082815260196020908152604082208054600181018083559184529282902084519193611ff693910191908501906159f7565b613957336124ba565b151561396257600080fd5b600860ff82161061397257600080fd5b600082815260076020526040812060ff83166008811061398e57fe5b600891828204019190066004029054906101000a900463ffffffff169050600760008481526020019081526020016000206000018260ff166008811015156139d257fe5b600881049091018054600163ffffffff60046007909516949094026101000a80830485169190910184168102908402199091161790556040805185815260ff8516602082015291831682820152517f77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f9181900360600190a1505050565b600e805482908110612c9557fe5b600d805482908110613a6b57fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815293509091830182828015611ad35780601f10611aa857610100808354040283529160200191611ad3565b6000613adc336136cb565b905090565b613aea336124ba565b1515613af557600080fd5b601e5460408051600160a060020a038085168252909216602083015280517f78cf028637abb89c0df6a78afd3d4403d03e5eb532390543d498bb346ee964779281900390910190a1601e8054600160a060020a031916600160a060020a0392909216919091179055565b601e54600090600160a060020a031615613c3357601e546040517f8d2a23db00000000000000000000000000000000000000000000000000000000815260206004820190815260248201859052600160a060020a0390921691638d2a23db91869186918190604401848480828437600083820152604051601f909101601f191690920195506020945090925050508083038186803b158015613c0057600080fd5b505afa158015613c14573d6000803e3d6000fd5b505050506040513d6020811015613c2a57600080fd5b50519050611f03565b600480546040517f8d2a23db000000000000000000000000000000000000000000000000000000008152602092810192835260248101859052600160a060020a0390911691638d2a23db91869186918190604401848480828437600083820152604051601f909101601f191690920195506020945090925050508083038186803b158015613cc057600080fd5b505afa158015613cd4573d6000803e3d6000fd5b505050506040513d6020811015613cea57600080fd5b50519392505050565b600354600160a060020a031681565b613d0b336124ba565b1515613d1657600080fd5b80516136c79060139060208401906159f7565b600354600090600160a060020a0383811691161480613d505750600954600a60ff90911610155b15613d5d57506001611ccd565b600954600061010090910460ff16111561384457600480546040805160e060020a6363e6ffdd028152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b158015613dc757600080fd5b505afa158015613ddb573d6000803e3d6000fd5b505050506040513d6020811015613df157600080fd5b5051600954604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561380f57600080fd5b600a81565b613e7b336124ba565b1515613e8657600080fd5b601b5460408051600160a060020a038085168252909216602083015280517fc104e41939e1b09c10a83f97ac30b2d1f48605f4630aa8c64633501740ce02999281900390910190a1601b8054600160a060020a031916600160a060020a0392909216919091179055565b613ef861389a565b1515613f0357600080fd5b60105460ff1615613f1357600080fd5b8051608011613f2157600080fd5b8051613f3490600f9060208401906159f7565b506010805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316613f78611a1f565b60408051600160a060020a038085168252831660208201526060918101828152600f8054600260001961010060018416150201909116049383018490529260808301908490801561400a5780601f10613fdf5761010080835404028352916020019161400a565b820191906000526020600020905b815481529060010190602001808311613fed57829003601f168201915b505094505050505060405180910390a150565b601c54600160a060020a031681565b61403987858585856152d1565b151561404457600080fd5b600160e060020a031987166000908152601a60209081526040808320549051604481018a9052600160a060020a0389811660648301526060602483018181528a5160848501528a51929094169594909386938e938c938f938f939092839260a4909201918701908083838e5b838110156140c85781810151838201526020016140b0565b50505050905090810190601f1680156140f55780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e060020a031990991698909817885251815191979096508695509350915081905083835b602083106141705780518252601f199092019160209182019101614151565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146141d0576040519150601f19603f3d011682016040523d82523d6000602084013e6141d5565b606091505b5090925090508115156141e757600080fd5b50505050505050505050565b6141fc336124ba565b151561420757600080fd5b604051600160a060020a0383169082156108fc029083906000818181858888f1935050505015801561423d573d6000803e3d6000fd5b505050565b61424a613ad1565b151561425557600080fd5b6009805460ff191660ff838116919091179182905560045460408051600160a060020a039092168083526020830152929091168183015290517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b6060602082511115156143735781518083015160008181526005602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845293949390918301828280156143655780601f1061433a57610100808354040283529160200191614365565b820191906000526020600020905b81548152906001019060200180831161434857829003601f168201915b505050505092505050611ccd565b6006826040518082805190602001908083835b602083106143a55780518252601f199092019160209182019101614386565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156144595780601f1061442e57610100808354040283529160200191614459565b820191906000526020600020905b81548152906001019060200180831161443c57829003601f168201915b50505050509050919050565b601e54600160a060020a031681565b600454600160a060020a031681565b601d54600090600160a060020a0316156144e757601d60009054906101000a9004600160a060020a0316600160a060020a031663b8cfaf056040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561315057600080fd5b60048054604080517fb8cfaf050000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263b8cfaf059282820192602092908290030181600087803b1580156131c157600080fd5b601d54600090600160a060020a0316156145dc57601d54604080517fbf4e088f000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015285811660248301529151919092169163bf4e088f9160448083019260209291908290030181600087803b1580156145c857600080fd5b505af1158015613c14573d6000803e3d6000fd5b60048054604080517fbf4e088f000000000000000000000000000000000000000000000000000000008152600160a060020a038781169482019490945285841660248201529051929091169163bf4e088f916044808201926020929091908290030181600087803b15801561465057600080fd5b505af1158015613cd4573d6000803e3d6000fd5b61466c613ad1565b151561467757600080fd5b604080516020808252600b8054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156147165780601f106146eb57610100808354040283529160200191614716565b820191906000526020600020905b8154815290600101906020018083116146f957829003601f168201915b50509250505060405180910390a1565b601a60205260009081526040902054600160a060020a031681565b600354600160a060020a0316331461475857600080fd5b60148054600160a060020a031916600160a060020a0392909216919091179055565b614783336124ba565b151561478e57600080fd5b6000805160206161888339815191528214156147a957600080fd5b60005b60008381526017602052604090205481101561423d5760008381526017602052604090208054600160a060020a0384169190839081106147e857fe5b600091825260209091200154600160a060020a03161415614946576000838152601760205260409020546000198101821461489d5760008481526017602052604090208054600019830190811061483b57fe5b6000918252602080832090910154868352601790915260409091208054600160a060020a03909216918490811061486e57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b6000848152601760205260409020805460001983019081106148bb57fe5b600091825260208083209091018054600160a060020a03191690558582526017905260409020805460001901906148f29082615a65565b506148fc8461564a565b60408051858152600160a060020a038516602082015281517fa4ba7d16ec48ae0b1af6cf3707ad062b11503d59527bca97e68886e7f6991456929181900390910190a150506136c7565b6001016147ac565b60165481565b601e54600090600160a060020a0316156149ce57601e54604080517fd6be0f49000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163d6be0f49916024808301926020929190829003018186803b15801561277757600080fd5b60048054604080517fd6be0f49000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051929091169163d6be0f4991602480820192602092909190829003018186803b1580156127fe57600080fd5b600b805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015611ad35780601f10611aa857610100808354040283529160200191611ad3565b6000600860ff831610614aa557600080fd5b600083815260076020526040902060ff831660088110614ac157fe5b600891828204019190066004029054906101000a900463ffffffff16905092915050565b6000614aef61389a565b1515614afa57600080fd5b6000826040516020018082805190602001908083835b60208310614b2f5780518252601f199092019160209182019101614b10565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012090506000600b6040516020018082805460018160011615610100020316600290048015614bce5780601f10614bac576101008083540402835291820191614bce565b820191906000526020600020905b815481529060010190602001808311614bba575b505091505060405160208183030381529060405280519060200120905080821415614da557600d541515614c2557604080516020810191829052600090819052614c1a91600b916159f7565b506000600c55614cc9565b600080805b600d54811015614c7d5781600e82815481101515614c4457fe5b90600052602060002001541115614c7557809250600e81815481101515614c6757fe5b906000526020600020015491505b600101614c2a565b50600d805483908110614c8c57fe5b90600052602060002001600b9080546001816001161561010002031660029004614cb792919061590a565b50600c819055614cc682615710565b50505b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168560006040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015614d5e578181015183820152602001614d46565b50505050905090810190601f168015614d8b5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600092505050611ccd565b60001960005b600d54811015614e6e576000600d82815481101515614dc657fe5b906000526020600020016040516020018082805460018160011615610100020316600290048015614e2e5780601f10614e0c576101008083540402835291820191614e2e565b820191906000526020600020905b815481529060010190602001808311614e1a575b505091505060405160208183030381529060405280519060200120905080851415614e6557614e5c82615710565b81925050614e6e565b50600101614dab565b50600019811415614e7e57600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a031686836040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015614f12578181015183820152602001614efa565b50505050905090810190601f168015614f3f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1949350505050565b614f5f336124ba565b1515614f6a57600080fd5b8151602010614fc5578151808301516000818152600560205260408120919291614f939161598f565b600083511115614fbe5760008281526005602090815260409091208451614fbc928601906159f7565b505b50506150b0565b6006826040518082805190602001908083835b60208310614ff75780518252601f199092019160209182019101614fd8565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922061503092509050600061598f565b6000815111156150b057806006836040518082805190602001908083835b6020831061506d5780518252601f19909201916020918201910161504e565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810190932084516150ae95919491909101925090506159f7565b505b7fe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c826040518080602001828103825283818151815260200191508051906020019080838360005b8381101561510f5781810151838201526020016150f7565b50505050905090810190601f16801561513c5780820380516001836020036101000a031916815260200191505b509250505060405180910390a15050565b615156336124ba565b151561516157600080fd5b60008181526007602052604081209061517a8282615a89565b50506040805182815290517f87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f9181900360200190a150565b601b54600090600160a060020a03161561522e57601b54604080517fe7cf0c66000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163e7cf0c669160248083019260209291908290030181600087803b158015612d2857600080fd5b60048054604080517fe7cf0c66000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051929091169163e7cf0c66916024808201926020929091908290030181600087803b158015612da857600080fd5b6017602052816000526040600020818154811015156152b557fe5b600091825260209091200154600160a060020a03169150829050565b600160e060020a031985166000908152601a6020526040812054600160a060020a031680151561530057600080fd5b60006001878051906020012087878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015615366573d6000803e3d6000fd5b50505060206040510351905061537b816124ba565b151561538c5760009250505061545f565b60006153cd6040805190810160405280600381526020017f69696400000000000000000000000000000000000000000000000000000000008152508961580f565b9050600160a060020a03811630146153eb576000935050505061545f565b600061542c6040805190810160405280600381526020017f69617400000000000000000000000000000000000000000000000000000000008152508a61589d565b905080156154565760006103e882046016544201039050601554811115151561545457600080fd5b505b60019450505050505b95945050505050565b606481565b60155481565b600354600160a060020a0316331461548a57600080fd5b600160a060020a038116151561549f57600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b6000828152600760209081526040822060ff8481169290920490911690601f8416906001821b908490829085600881106154f757fe5b600881049091015460046007909216919091026101000a90041663ffffffff1615615523576001615526565b60005b905080151561557f5760008781526007602052604090208290856008811061554a57fe5b60088104909101805463ffffffff60046007909416939093026101000a80820484169094178316840292909302199092161790555b6040805188815260ff881660208201528215158183015290517f4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d9181900360600190a19695505050505050565b600e90565b604080517f6d616b654944537472696e6728696e742c6164647265737329000000000000008152815190819003601901812080825260e085901b60048301819052600883018590526060939192909160ff919081602881856000fa80151561563857600080fd5b50604080820190529695505050505050565b600081815260176020526040902054151561570d5760005b6018548110156136c7578160188281548110151561567c57fe5b90600052602060002001541415615705576018546000190181146156d3576018805460001981019081106156ac57fe5b90600052602060002001546018828154811015156156c657fe5b6000918252602090912001555b6018805460001981019081106156e557fe5b60009182526020822001556018805460001901906157039082615a65565b505b600101615662565b50565b600d80548290811061571e57fe5b906000526020600020016000615734919061598f565b600e80548290811061574257fe5b6000918252602082200155600d546000190181146157e857600d8054600019810190811061576c57fe5b90600052602060002001600d8281548110151561578557fe5b9060005260206000200190805460018160011615610100020316600290046157ae92919061590a565b50600e805460001981019081106157c157fe5b9060005260206000200154600e828154811015156157db57fe5b6000918252602090912001555b600d8054906157fb9060001983016159d3565b50600e8054906136c7906000198301615a65565b604080517f6765744164647265737328737472696e672c627974657329000000000000000081529051908190036018018120825181835260208501516004840181905260009360fe92906024820190865b8381101561587d576020818a018101516024848401015201615860565b506020818383886000fa8080156124b55750505198975050505050505050565b604080517f67657455696e7428737472696e672c627974657329000000000000000000000081529051908190036015018120825181835260208501516004840181905260009360fe92906024820190868381101561587d576020818a018101516024848401015201615860565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615943578054855561597f565b8280016001018555821561597f57600052602060002091601f016020900482015b8281111561597f578254825591600101919060010190615964565b5061598b929150615a90565b5090565b50805460018160011615610100020316600290046000825580601f106159b5575061570d565b601f01602090049060005260206000209081019061570d9190615a90565b81548183558181111561423d5760008381526020902061423d918101908301615aaa565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615a3857805160ff191683800117855561597f565b8280016001018555821561597f579182015b8281111561597f578251825591602001919060010190615a4a565b81548183558181111561423d5760008381526020902061423d918101908301615a90565b5060009055565b611a2c91905b8082111561598b5760008155600101615a96565b611a2c91905b8082111561598b576000615ac4828261598f565b50600101615ab0565b604080518082018252601d81527f5f454c565f47524f55505f54454e414e545f415554484f524954494553000000602080830191825292517fac55c906000000000000000000000000000000000000000000000000000000008152600481019384528251602482015282516000948694606094600160a060020a0387169463ac55c906949293928392604490920191908083838d5b83811015615b7a578181015183820152602001615b62565b50505050905090810190601f168015615ba75780820380516001836020036101000a031916815260200191505b509250505060006040518083038186803b158015615bc457600080fd5b505afa158015615bd8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015615c0157600080fd5b810190808051640100000000811115615c1957600080fd5b82016020810184811115615c2c57600080fd5b8151640100000000811182820187101715615c4657600080fd5b5050805190945015159250615c6391505057600092505050611ccd565b615c6b616170565b615c7482615f0c565b9050615c7e616170565b615cbc6040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250615f0c565b90506060615cd0838363ffffffff615f3116565b600101604051908082528060200260200182016040528015615d0657816020015b6060815260200190600190039081615cf15790505b50905060005b8151811015615efe57615d2d615d28858563ffffffff615f9e16565b615fb1565b8282815181101515615d3b57fe5b90602001906020020181905250600073__$f2868cc5300372e492613b0df8a63b3548$__6342526e4e8484815181101515615d7257fe5b906020019060200201516040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615dc8578181015183820152602001615db0565b50505050905090810190601f168015615df55780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015615e1257600080fd5b505af4158015615e26573d6000803e3d6000fd5b505050506040513d6020811015615e3c57600080fd5b5051604080517f872ea68a000000000000000000000000000000000000000000000000000000008152326004820152905191925082918291600091600160a060020a0384169163872ea68a916024808301926020929190829003018186803b158015615ea757600080fd5b505afa158015615ebb573d6000803e3d6000fd5b505050506040513d6020811015615ed157600080fd5b505190508015615eee5760019a5050505050505050505050611ccd565b505060019092019150615d0c9050565b506000979650505050505050565b615f14616170565b506040805180820190915281518152602082810190820152919050565b6000808260000151615f558560000151866020015186600001518760200151616001565b0190505b83516020850151018111615f97578251602080860151865191860151600190950194615f8f929185039091039084908490616001565b019050615f59565b5092915050565b615fa6616170565b615f978383836160c1565b60608082600001516040519080825280601f01601f191660200182016040528015615fe3576020820181803883390190505b5090506000602082019050615f978185602001518660000151616132565b600083818685116160b257602085116160775783518251600019600860208990030260020a011960001b91821690888a018890039083165b80831461606957818610616057578a8a0196505050505050506160b9565b50600190940180519094908316616039565b8596505050505050506160b9565b508383206000905b85880382116160b0578583208181141561609f57839450505050506160b9565b50600192830192919091019061607f565b505b5050508284015b949350505050565b6160c9616170565b60006160e78560000151866020015186600001518760200151616001565b602080870180519186019190915280518203855286519051919250018114156161135760008552616129565b8351835186519101900385528351810160208601525b50909392505050565b5b60208110616152578151835260209283019290910190601f1901616133565b905182516020929092036101000a6000190180199091169116179052565b60408051808201909152600080825260208201529056fe74656e616e745f61646d696e0000000000000000000000000000000000000000a165627a7a72305820b7ac4f58d8d5ff14440a5babaf178b81229b7429b2d6359341c79f920d6ba251002974656e616e745f63726561746f72286d73672e73656e6465722920696e76616c6964",
}

// BaseTenantSpaceABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseTenantSpaceMetaData.ABI instead.
var BaseTenantSpaceABI = BaseTenantSpaceMetaData.ABI

// Deprecated: Use BaseTenantSpaceMetaData.Sigs instead.
// BaseTenantSpaceFuncSigs maps the 4-byte function signature to its string representation.
var BaseTenantSpaceFuncSigs = BaseTenantSpaceMetaData.Sigs

// BaseTenantSpaceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseTenantSpaceMetaData.Bin instead.
var BaseTenantSpaceBin = BaseTenantSpaceMetaData.Bin

// DeployBaseTenantSpace deploys a new Ethereum contract, binding an instance of BaseTenantSpace to it.
func DeployBaseTenantSpace(auth *bind.TransactOpts, backend bind.ContractBackend, _contentSpace common.Address, _tenantName string, _kmsAddr common.Address) (common.Address, *types.Transaction, *BaseTenantSpace, error) {
	parsed, err := ParsedABI(K_BaseTenantSpace)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	addressAddr, _, _, _ := DeployAddress(auth, backend)
	BaseTenantSpaceBin = strings.ReplaceAll(BaseTenantSpaceBin, "__$f2868cc5300372e492613b0df8a63b3548$__", addressAddr.String()[2:])

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseTenantSpaceBin), backend, _contentSpace, _tenantName, _kmsAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseTenantSpace{BaseTenantSpaceCaller: BaseTenantSpaceCaller{contract: contract}, BaseTenantSpaceTransactor: BaseTenantSpaceTransactor{contract: contract}, BaseTenantSpaceFilterer: BaseTenantSpaceFilterer{contract: contract}}, nil
}

// BaseTenantSpace is an auto generated Go binding around an Ethereum contract.
type BaseTenantSpace struct {
	BaseTenantSpaceCaller     // Read-only binding to the contract
	BaseTenantSpaceTransactor // Write-only binding to the contract
	BaseTenantSpaceFilterer   // Log filterer for contract events
}

// BaseTenantSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseTenantSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTenantSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseTenantSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTenantSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseTenantSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseTenantSpace creates a new instance of BaseTenantSpace, bound to a specific deployed contract.
func NewBaseTenantSpace(address common.Address, backend bind.ContractBackend) (*BaseTenantSpace, error) {
	contract, err := bindBaseTenantSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpace{BaseTenantSpaceCaller: BaseTenantSpaceCaller{contract: contract}, BaseTenantSpaceTransactor: BaseTenantSpaceTransactor{contract: contract}, BaseTenantSpaceFilterer: BaseTenantSpaceFilterer{contract: contract}}, nil
}

// NewBaseTenantSpaceCaller creates a new read-only instance of BaseTenantSpace, bound to a specific deployed contract.
func NewBaseTenantSpaceCaller(address common.Address, caller bind.ContractCaller) (*BaseTenantSpaceCaller, error) {
	contract, err := bindBaseTenantSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceCaller{contract: contract}, nil
}

// NewBaseTenantSpaceTransactor creates a new write-only instance of BaseTenantSpace, bound to a specific deployed contract.
func NewBaseTenantSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseTenantSpaceTransactor, error) {
	contract, err := bindBaseTenantSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceTransactor{contract: contract}, nil
}

// NewBaseTenantSpaceFilterer creates a new log filterer instance of BaseTenantSpace, bound to a specific deployed contract.
func NewBaseTenantSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseTenantSpaceFilterer, error) {
	contract, err := bindBaseTenantSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceFilterer{contract: contract}, nil
}

// bindBaseTenantSpace binds a generic wrapper to an already deployed contract.
func bindBaseTenantSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseTenantSpace)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() view returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "CAN_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() view returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "CAN_EDIT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() view returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "CAN_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GROUPIDADMIN is a free data retrieval call binding the contract method 0x58d40b25.
//
// Solidity: function GROUP_ID_ADMIN() view returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GROUPIDADMIN(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "GROUP_ID_ADMIN")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() view returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "addressKMS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() view returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "canCommit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() view returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "canConfirm")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() view returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "canEdit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address _candidate) view returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CanNodePublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "canNodePublish", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckCallFunc is a free data retrieval call binding the contract method 0xed1f6456.
//
// Solidity: function checkCallFunc(bytes4 _func4Bytes, bytes _encAuthToken, uint8 _v, bytes32 _r, bytes32 _s) view returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CheckCallFunc(opts *bind.CallOpts, _func4Bytes [4]byte, _encAuthToken []byte, _v uint8, _r [32]byte, _s [32]byte) (bool, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "checkCallFunc", _func4Bytes, _encAuthToken, _v, _r, _s)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) view returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CheckKMS(opts *bind.CallOpts, _kmsIdStr string) (*big.Int, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "checkKMS", _kmsIdStr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) view returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CheckKMSAddr(opts *bind.CallOpts, _kmsAddr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "checkKMSAddr", _kmsAddr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() view returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "commitPending")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() view returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "countVersionHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DefLeewaySecs is a free data retrieval call binding the contract method 0xd21a8c94.
//
// Solidity: function defLeewaySecs() view returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) DefLeewaySecs(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "defLeewaySecs")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DefTokenExpSecs is a free data retrieval call binding the contract method 0xf1df8140.
//
// Solidity: function defTokenExpSecs() view returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) DefTokenExpSecs(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "defTokenExpSecs")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Description is a free data retrieval call binding the contract method 0x7284e416.
//
// Solidity: function description() view returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) Description(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "description")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// FactoryManager is a free data retrieval call binding the contract method 0x032b5a73.
//
// Solidity: function factoryManager() view returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) FactoryManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "factoryManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FuncMapping is a free data retrieval call binding the contract method 0xc2a21f14.
//
// Solidity: function funcMapping(bytes4 ) view returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) FuncMapping(opts *bind.CallOpts, arg0 [4]byte) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "funcMapping", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) view returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GetBit(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (bool, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "getBit", _ident, _ord)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) view returns(uint32)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GetCounter(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (uint32, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "getCounter", _ident, _ord)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) view returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GetKMSID(opts *bind.CallOpts, _kmsAddr common.Address) (string, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "getKMSID", _kmsAddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes _prefix) view returns(string, string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GetKMSInfo(opts *bind.CallOpts, _kmsID string, _prefix []byte) (string, string, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "getKMSInfo", _kmsID, _prefix)

	if err != nil {
		return *new(string), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) view returns(bytes)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "getMeta", key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetTenantID is a free data retrieval call binding the contract method 0x401262c8.
//
// Solidity: function getTenantID() view returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GetTenantID(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "getTenantID")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GroupIds is a free data retrieval call binding the contract method 0x4093d7a1.
//
// Solidity: function groupIds(uint256 ) view returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GroupIds(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "groupIds", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GroupsMapping is a free data retrieval call binding the contract method 0xea8a3ed8.
//
// Solidity: function groupsMapping(bytes32 , uint256 ) view returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) GroupsMapping(opts *bind.CallOpts, arg0 [32]byte, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "groupsMapping", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) view returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "hasAccess", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) view returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "hasEditorRight", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() view returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "indexCategory")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) view returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "isAdmin", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// KmsManager is a free data retrieval call binding the contract method 0xac65b649.
//
// Solidity: function kmsManager() view returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) KmsManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "kmsManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ListLength is a free data retrieval call binding the contract method 0x11a3fa38.
//
// Solidity: function listLength(bytes32 listKey) view returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ListLength(opts *bind.CallOpts, listKey [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "listLength", listKey)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ListsMapping is a free data retrieval call binding the contract method 0x4d368f10.
//
// Solidity: function listsMapping(bytes32 , uint256 ) view returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ListsMapping(opts *bind.CallOpts, arg0 [32]byte, arg1 *big.Int) (string, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "listsMapping", arg0, arg1)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NodeManager is a free data retrieval call binding the contract method 0x9bb5cd3f.
//
// Solidity: function nodeManager() view returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) NodeManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "nodeManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() view returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "objectHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() view returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "objectTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "parentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() view returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "pendingHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// UserManager is a free data retrieval call binding the contract method 0x5c8a7687.
//
// Solidity: function userManager() view returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) UserManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "userManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) view returns(address)
func (_BaseTenantSpace *BaseTenantSpaceCaller) UserWallets(opts *bind.CallOpts, _userAddr common.Address) (common.Address, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "userWallets", _userAddr)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_BaseTenantSpace *BaseTenantSpaceCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) view returns(string)
func (_BaseTenantSpace *BaseTenantSpaceCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "versionHashes", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) view returns(uint256)
func (_BaseTenantSpace *BaseTenantSpaceCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "versionTimestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() view returns(uint8)
func (_BaseTenantSpace *BaseTenantSpaceCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseTenantSpace.contract.Call(opts, &out, "visibility")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) payable returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// AddFuncs is a paid mutator transaction binding the contract method 0x0a581edc.
//
// Solidity: function addFuncs(bytes4[] _func4Bytes, address _funcAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) AddFuncs(opts *bind.TransactOpts, _func4Bytes [][4]byte, _funcAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "addFuncs", _func4Bytes, _funcAddr)
}

// AddGroup is a paid mutator transaction binding the contract method 0x65d8dd34.
//
// Solidity: function addGroup(bytes32 _id, address _groupAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) AddGroup(opts *bind.TransactOpts, _id [32]byte, _groupAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "addGroup", _id, _groupAddr)
}

// AddListItem is a paid mutator transaction binding the contract method 0x74daf3a0.
//
// Solidity: function addListItem(bytes32 listKey, string itemVal) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) AddListItem(opts *bind.TransactOpts, listKey [32]byte, itemVal string) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "addListItem", listKey, itemVal)
}

// CallFuncUintAddr is a paid mutator transaction binding the contract method 0x9c075d67.
//
// Solidity: function callFuncUintAddr(bytes4 _func4Bytes, uint256 _p1, address _p2, bytes _encAuthToken, uint8 _v, bytes32 _r, bytes32 _s) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) CallFuncUintAddr(opts *bind.TransactOpts, _func4Bytes [4]byte, _p1 *big.Int, _p2 common.Address, _encAuthToken []byte, _v uint8, _r [32]byte, _s [32]byte) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "callFuncUintAddr", _func4Bytes, _p1, _p2, _encAuthToken, _v, _r, _s)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "clearPending")
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "commit", _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() payable returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "confirmCommit")
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address _lib, address _contentType) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) CreateContent(opts *bind.TransactOpts, _lib common.Address, _contentType common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "createContent", _lib, _contentType)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) CreateContentType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "createContentType")
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) CreateGroup(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "createGroup")
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address _kmsAddress) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) CreateLibrary(opts *bind.TransactOpts, _kmsAddress common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "createLibrary", _kmsAddress)
}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _userAddr) returns(address)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) CreateUserWallet(opts *bind.TransactOpts, _userAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "createUserWallet", _userAddr)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) DeleteGroup(opts *bind.TransactOpts, _ident [32]byte) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "deleteGroup", _ident)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "deleteVersion", _versionHash)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) IncrementCounter(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "incrementCounter", _ident, _ord)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "kill")
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "putMeta", key, value)
}

// RemoveGroup is a paid mutator transaction binding the contract method 0xcb3899b3.
//
// Solidity: function removeGroup(bytes32 _id, address _groupAddr) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) RemoveGroup(opts *bind.TransactOpts, _id [32]byte, _groupAddr common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "removeGroup", _id, _groupAddr)
}

// RemoveListOrd is a paid mutator transaction binding the contract method 0x1fa12f11.
//
// Solidity: function removeListOrd(bytes32 listKey, uint256 itemOrd) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) RemoveListOrd(opts *bind.TransactOpts, listKey [32]byte, itemOrd *big.Int) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "removeListOrd", listKey, itemOrd)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetAndGetBit(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setAndGetBit", _ident, _ord)
}

// SetDescription is a paid mutator transaction binding the contract method 0x90c3f38f.
//
// Solidity: function setDescription(string _desc) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetDescription(opts *bind.TransactOpts, _desc string) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setDescription", _desc)
}

// SetFactoryManager is a paid mutator transaction binding the contract method 0x430e621e.
//
// Solidity: function setFactoryManager(address _factMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetFactoryManager(opts *bind.TransactOpts, _factMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setFactoryManager", _factMan)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetKmsManager is a paid mutator transaction binding the contract method 0x87e38281.
//
// Solidity: function setKmsManager(address _kmsMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetKmsManager(opts *bind.TransactOpts, _kmsMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setKmsManager", _kmsMan)
}

// SetNodeManager is a paid mutator transaction binding the contract method 0x1319e7e1.
//
// Solidity: function setNodeManager(address _nodeMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetNodeManager(opts *bind.TransactOpts, _nodeMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setNodeManager", _nodeMan)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetUserManager is a paid mutator transaction binding the contract method 0x97d0b02c.
//
// Solidity: function setUserManager(address _userMan) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetUserManager(opts *bind.TransactOpts, _userMan common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setUserManager", _userMan)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "setVisibility", _visibility_code)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "transfer", _to, _amount)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "transferOwnership", newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.Transact(opts, "updateRequest")
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseTenantSpace *BaseTenantSpaceTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseTenantSpace.contract.RawTransact(opts, calldata)
}

// BaseTenantSpaceAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the BaseTenantSpace contract.
type BaseTenantSpaceAccessRequestV3Iterator struct {
	Event *BaseTenantSpaceAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceAccessRequestV3 represents a AccessRequestV3 event raised by the BaseTenantSpace contract.
type BaseTenantSpaceAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*BaseTenantSpaceAccessRequestV3Iterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceAccessRequestV3Iterator{contract: _BaseTenantSpace.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceAccessRequestV3)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseAccessRequestV3(log types.Log) (*BaseTenantSpaceAccessRequestV3, error) {
	event := new(BaseTenantSpaceAccessRequestV3)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantSpaceAddTenantGroupIterator is returned from FilterAddTenantGroup and is used to iterate over the raw logs and unpacked data for AddTenantGroup events raised by the BaseTenantSpace contract.
type BaseTenantSpaceAddTenantGroupIterator struct {
	Event *BaseTenantSpaceAddTenantGroup // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceAddTenantGroupIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceAddTenantGroup)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceAddTenantGroup)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceAddTenantGroupIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceAddTenantGroupIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceAddTenantGroup represents a AddTenantGroup event raised by the BaseTenantSpace contract.
type BaseTenantSpaceAddTenantGroup struct {
	GroupId   [32]byte
	GroupAddr common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddTenantGroup is a free log retrieval operation binding the contract event 0x145b7e243e91890686f5ba84dd1254f7497f549ffb955f4871b3d27d4137d471.
//
// Solidity: event AddTenantGroup(bytes32 groupId, address groupAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterAddTenantGroup(opts *bind.FilterOpts) (*BaseTenantSpaceAddTenantGroupIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "AddTenantGroup")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceAddTenantGroupIterator{contract: _BaseTenantSpace.contract, event: "AddTenantGroup", logs: logs, sub: sub}, nil
}

// WatchAddTenantGroup is a free log subscription operation binding the contract event 0x145b7e243e91890686f5ba84dd1254f7497f549ffb955f4871b3d27d4137d471.
//
// Solidity: event AddTenantGroup(bytes32 groupId, address groupAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchAddTenantGroup(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceAddTenantGroup) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "AddTenantGroup")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceAddTenantGroup)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "AddTenantGroup", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddTenantGroup is a log parse operation binding the contract event 0x145b7e243e91890686f5ba84dd1254f7497f549ffb955f4871b3d27d4137d471.
//
// Solidity: event AddTenantGroup(bytes32 groupId, address groupAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseAddTenantGroup(log types.Log) (*BaseTenantSpaceAddTenantGroup, error) {
	event := new(BaseTenantSpaceAddTenantGroup)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "AddTenantGroup", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantSpaceBitSetAndGetIterator is returned from FilterBitSetAndGet and is used to iterate over the raw logs and unpacked data for BitSetAndGet events raised by the BaseTenantSpace contract.
type BaseTenantSpaceBitSetAndGetIterator struct {
	Event *BaseTenantSpaceBitSetAndGet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceBitSetAndGetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceBitSetAndGet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceBitSetAndGet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceBitSetAndGetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceBitSetAndGetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceBitSetAndGet represents a BitSetAndGet event raised by the BaseTenantSpace contract.
type BaseTenantSpaceBitSetAndGet struct {
	Ident [32]byte
	Ord   uint8
	Prev  bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBitSetAndGet is a free log retrieval operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterBitSetAndGet(opts *bind.FilterOpts) (*BaseTenantSpaceBitSetAndGetIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceBitSetAndGetIterator{contract: _BaseTenantSpace.contract, event: "BitSetAndGet", logs: logs, sub: sub}, nil
}

// WatchBitSetAndGet is a free log subscription operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchBitSetAndGet(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceBitSetAndGet) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceBitSetAndGet)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitSetAndGet is a log parse operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseBitSetAndGet(log types.Log) (*BaseTenantSpaceBitSetAndGet, error) {
	event := new(BaseTenantSpaceBitSetAndGet)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantSpaceCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseTenantSpace contract.
type BaseTenantSpaceCommitPendingIterator struct {
	Event *BaseTenantSpaceCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceCommitPending represents a CommitPending event raised by the BaseTenantSpace contract.
type BaseTenantSpaceCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseTenantSpaceCommitPendingIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceCommitPendingIterator{contract: _BaseTenantSpace.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceCommitPending)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseCommitPending(log types.Log) (*BaseTenantSpaceCommitPending, error) {
	event := new(BaseTenantSpaceCommitPending)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantSpaceCounterIncrementedIterator is returned from FilterCounterIncremented and is used to iterate over the raw logs and unpacked data for CounterIncremented events raised by the BaseTenantSpace contract.
type BaseTenantSpaceCounterIncrementedIterator struct {
	Event *BaseTenantSpaceCounterIncremented // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceCounterIncrementedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceCounterIncremented)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceCounterIncremented)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceCounterIncrementedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceCounterIncrementedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceCounterIncremented represents a CounterIncremented event raised by the BaseTenantSpace contract.
type BaseTenantSpaceCounterIncremented struct {
	Ident [32]byte
	Slot  uint8
	Val   uint32
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCounterIncremented is a free log retrieval operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterCounterIncremented(opts *bind.FilterOpts) (*BaseTenantSpaceCounterIncrementedIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceCounterIncrementedIterator{contract: _BaseTenantSpace.contract, event: "CounterIncremented", logs: logs, sub: sub}, nil
}

// WatchCounterIncremented is a free log subscription operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchCounterIncremented(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceCounterIncremented) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceCounterIncremented)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCounterIncremented is a log parse operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseCounterIncremented(log types.Log) (*BaseTenantSpaceCounterIncremented, error) {
	event := new(BaseTenantSpaceCounterIncremented)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantSpaceCreateTenantIterator is returned from FilterCreateTenant and is used to iterate over the raw logs and unpacked data for CreateTenant events raised by the BaseTenantSpace contract.
type BaseTenantSpaceCreateTenantIterator struct {
	Event *BaseTenantSpaceCreateTenant // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceCreateTenantIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceCreateTenant)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceCreateTenant)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceCreateTenantIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceCreateTenantIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceCreateTenant represents a CreateTenant event raised by the BaseTenantSpace contract.
type BaseTenantSpaceCreateTenant struct {
	Version [32]byte
	Owner   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterCreateTenant is a free log retrieval operation binding the contract event 0xc2fe67ac699789805c53a93eea70eb0e316deaf8db4b810382d2412ba4fcb4c8.
//
// Solidity: event CreateTenant(bytes32 version, address owner)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterCreateTenant(opts *bind.FilterOpts) (*BaseTenantSpaceCreateTenantIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "CreateTenant")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceCreateTenantIterator{contract: _BaseTenantSpace.contract, event: "CreateTenant", logs: logs, sub: sub}, nil
}

// WatchCreateTenant is a free log subscription operation binding the contract event 0xc2fe67ac699789805c53a93eea70eb0e316deaf8db4b810382d2412ba4fcb4c8.
//
// Solidity: event CreateTenant(bytes32 version, address owner)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchCreateTenant(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceCreateTenant) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "CreateTenant")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceCreateTenant)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "CreateTenant", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateTenant is a log parse operation binding the contract event 0xc2fe67ac699789805c53a93eea70eb0e316deaf8db4b810382d2412ba4fcb4c8.
//
// Solidity: event CreateTenant(bytes32 version, address owner)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseCreateTenant(log types.Log) (*BaseTenantSpaceCreateTenant, error) {
	event := new(BaseTenantSpaceCreateTenant)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "CreateTenant", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantSpaceFunctionsAddedIterator is returned from FilterFunctionsAdded and is used to iterate over the raw logs and unpacked data for FunctionsAdded events raised by the BaseTenantSpace contract.
type BaseTenantSpaceFunctionsAddedIterator struct {
	Event *BaseTenantSpaceFunctionsAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceFunctionsAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceFunctionsAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceFunctionsAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceFunctionsAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceFunctionsAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceFunctionsAdded represents a FunctionsAdded event raised by the BaseTenantSpace contract.
type BaseTenantSpaceFunctionsAdded struct {
	Func4Bytes [][4]byte
	FuncAddr   common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterFunctionsAdded is a free log retrieval operation binding the contract event 0x2fd37118a7338c6d45366419ced87ba93589ba1cca2489e8fb42b55de8874266.
//
// Solidity: event FunctionsAdded(bytes4[] func4Bytes, address funcAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterFunctionsAdded(opts *bind.FilterOpts) (*BaseTenantSpaceFunctionsAddedIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "FunctionsAdded")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceFunctionsAddedIterator{contract: _BaseTenantSpace.contract, event: "FunctionsAdded", logs: logs, sub: sub}, nil
}

// WatchFunctionsAdded is a free log subscription operation binding the contract event 0x2fd37118a7338c6d45366419ced87ba93589ba1cca2489e8fb42b55de8874266.
//
// Solidity: event FunctionsAdded(bytes4[] func4Bytes, address funcAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchFunctionsAdded(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceFunctionsAdded) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "FunctionsAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceFunctionsAdded)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "FunctionsAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFunctionsAdded is a log parse operation binding the contract event 0x2fd37118a7338c6d45366419ced87ba93589ba1cca2489e8fb42b55de8874266.
//
// Solidity: event FunctionsAdded(bytes4[] func4Bytes, address funcAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseFunctionsAdded(log types.Log) (*BaseTenantSpaceFunctionsAdded, error) {
	event := new(BaseTenantSpaceFunctionsAdded)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "FunctionsAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantSpaceGetAccessWalletIterator is returned from FilterGetAccessWallet and is used to iterate over the raw logs and unpacked data for GetAccessWallet events raised by the BaseTenantSpace contract.
type BaseTenantSpaceGetAccessWalletIterator struct {
	Event *BaseTenantSpaceGetAccessWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceGetAccessWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceGetAccessWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceGetAccessWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceGetAccessWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceGetAccessWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceGetAccessWallet represents a GetAccessWallet event raised by the BaseTenantSpace contract.
type BaseTenantSpaceGetAccessWallet struct {
	WalletAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterGetAccessWallet is a free log retrieval operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterGetAccessWallet(opts *bind.FilterOpts) (*BaseTenantSpaceGetAccessWalletIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "GetAccessWallet")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceGetAccessWalletIterator{contract: _BaseTenantSpace.contract, event: "GetAccessWallet", logs: logs, sub: sub}, nil
}

// WatchGetAccessWallet is a free log subscription operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchGetAccessWallet(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceGetAccessWallet) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "GetAccessWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceGetAccessWallet)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "GetAccessWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGetAccessWallet is a log parse operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseGetAccessWallet(log types.Log) (*BaseTenantSpaceGetAccessWallet, error) {
	event := new(BaseTenantSpaceGetAccessWallet)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "GetAccessWallet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantSpaceObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the BaseTenantSpace contract.
type BaseTenantSpaceObjectMetaChangedIterator struct {
	Event *BaseTenantSpaceObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceObjectMetaChanged represents a ObjectMetaChanged event raised by the BaseTenantSpace contract.
type BaseTenantSpaceObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*BaseTenantSpaceObjectMetaChangedIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceObjectMetaChangedIterator{contract: _BaseTenantSpace.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceObjectMetaChanged)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseObjectMetaChanged(log types.Log) (*BaseTenantSpaceObjectMetaChanged, error) {
	event := new(BaseTenantSpaceObjectMetaChanged)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantSpaceRemoveTenantGroupIterator is returned from FilterRemoveTenantGroup and is used to iterate over the raw logs and unpacked data for RemoveTenantGroup events raised by the BaseTenantSpace contract.
type BaseTenantSpaceRemoveTenantGroupIterator struct {
	Event *BaseTenantSpaceRemoveTenantGroup // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceRemoveTenantGroupIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceRemoveTenantGroup)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceRemoveTenantGroup)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceRemoveTenantGroupIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceRemoveTenantGroupIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceRemoveTenantGroup represents a RemoveTenantGroup event raised by the BaseTenantSpace contract.
type BaseTenantSpaceRemoveTenantGroup struct {
	GroupId   [32]byte
	GroupAddr common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRemoveTenantGroup is a free log retrieval operation binding the contract event 0xa4ba7d16ec48ae0b1af6cf3707ad062b11503d59527bca97e68886e7f6991456.
//
// Solidity: event RemoveTenantGroup(bytes32 groupId, address groupAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterRemoveTenantGroup(opts *bind.FilterOpts) (*BaseTenantSpaceRemoveTenantGroupIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "RemoveTenantGroup")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceRemoveTenantGroupIterator{contract: _BaseTenantSpace.contract, event: "RemoveTenantGroup", logs: logs, sub: sub}, nil
}

// WatchRemoveTenantGroup is a free log subscription operation binding the contract event 0xa4ba7d16ec48ae0b1af6cf3707ad062b11503d59527bca97e68886e7f6991456.
//
// Solidity: event RemoveTenantGroup(bytes32 groupId, address groupAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchRemoveTenantGroup(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceRemoveTenantGroup) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "RemoveTenantGroup")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceRemoveTenantGroup)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "RemoveTenantGroup", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveTenantGroup is a log parse operation binding the contract event 0xa4ba7d16ec48ae0b1af6cf3707ad062b11503d59527bca97e68886e7f6991456.
//
// Solidity: event RemoveTenantGroup(bytes32 groupId, address groupAddr)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseRemoveTenantGroup(log types.Log) (*BaseTenantSpaceRemoveTenantGroup, error) {
	event := new(BaseTenantSpaceRemoveTenantGroup)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "RemoveTenantGroup", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantSpaceSetFactoryManagerIterator is returned from FilterSetFactoryManager and is used to iterate over the raw logs and unpacked data for SetFactoryManager events raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetFactoryManagerIterator struct {
	Event *BaseTenantSpaceSetFactoryManager // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceSetFactoryManagerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceSetFactoryManager)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceSetFactoryManager)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceSetFactoryManagerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceSetFactoryManagerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceSetFactoryManager represents a SetFactoryManager event raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetFactoryManager struct {
	NewManager  common.Address
	PrevManager common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetFactoryManager is a free log retrieval operation binding the contract event 0xfa2af382c197e27affb4e04f89f42556c71015346416b56be15b3aee3c87f661.
//
// Solidity: event SetFactoryManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterSetFactoryManager(opts *bind.FilterOpts) (*BaseTenantSpaceSetFactoryManagerIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "SetFactoryManager")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceSetFactoryManagerIterator{contract: _BaseTenantSpace.contract, event: "SetFactoryManager", logs: logs, sub: sub}, nil
}

// WatchSetFactoryManager is a free log subscription operation binding the contract event 0xfa2af382c197e27affb4e04f89f42556c71015346416b56be15b3aee3c87f661.
//
// Solidity: event SetFactoryManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchSetFactoryManager(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceSetFactoryManager) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "SetFactoryManager")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceSetFactoryManager)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "SetFactoryManager", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFactoryManager is a log parse operation binding the contract event 0xfa2af382c197e27affb4e04f89f42556c71015346416b56be15b3aee3c87f661.
//
// Solidity: event SetFactoryManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseSetFactoryManager(log types.Log) (*BaseTenantSpaceSetFactoryManager, error) {
	event := new(BaseTenantSpaceSetFactoryManager)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "SetFactoryManager", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantSpaceSetKmsManagerIterator is returned from FilterSetKmsManager and is used to iterate over the raw logs and unpacked data for SetKmsManager events raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetKmsManagerIterator struct {
	Event *BaseTenantSpaceSetKmsManager // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceSetKmsManagerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceSetKmsManager)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceSetKmsManager)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceSetKmsManagerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceSetKmsManagerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceSetKmsManager represents a SetKmsManager event raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetKmsManager struct {
	NewManager  common.Address
	PrevManager common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetKmsManager is a free log retrieval operation binding the contract event 0x78cf028637abb89c0df6a78afd3d4403d03e5eb532390543d498bb346ee96477.
//
// Solidity: event SetKmsManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterSetKmsManager(opts *bind.FilterOpts) (*BaseTenantSpaceSetKmsManagerIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "SetKmsManager")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceSetKmsManagerIterator{contract: _BaseTenantSpace.contract, event: "SetKmsManager", logs: logs, sub: sub}, nil
}

// WatchSetKmsManager is a free log subscription operation binding the contract event 0x78cf028637abb89c0df6a78afd3d4403d03e5eb532390543d498bb346ee96477.
//
// Solidity: event SetKmsManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchSetKmsManager(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceSetKmsManager) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "SetKmsManager")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceSetKmsManager)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "SetKmsManager", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetKmsManager is a log parse operation binding the contract event 0x78cf028637abb89c0df6a78afd3d4403d03e5eb532390543d498bb346ee96477.
//
// Solidity: event SetKmsManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseSetKmsManager(log types.Log) (*BaseTenantSpaceSetKmsManager, error) {
	event := new(BaseTenantSpaceSetKmsManager)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "SetKmsManager", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantSpaceSetNodeManagerIterator is returned from FilterSetNodeManager and is used to iterate over the raw logs and unpacked data for SetNodeManager events raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetNodeManagerIterator struct {
	Event *BaseTenantSpaceSetNodeManager // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceSetNodeManagerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceSetNodeManager)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceSetNodeManager)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceSetNodeManagerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceSetNodeManagerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceSetNodeManager represents a SetNodeManager event raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetNodeManager struct {
	NewManager  common.Address
	PrevManager common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetNodeManager is a free log retrieval operation binding the contract event 0x9b77357b839fea8829ce30918f67eb91de08caa0e5272af43a86af5334b56177.
//
// Solidity: event SetNodeManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterSetNodeManager(opts *bind.FilterOpts) (*BaseTenantSpaceSetNodeManagerIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "SetNodeManager")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceSetNodeManagerIterator{contract: _BaseTenantSpace.contract, event: "SetNodeManager", logs: logs, sub: sub}, nil
}

// WatchSetNodeManager is a free log subscription operation binding the contract event 0x9b77357b839fea8829ce30918f67eb91de08caa0e5272af43a86af5334b56177.
//
// Solidity: event SetNodeManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchSetNodeManager(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceSetNodeManager) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "SetNodeManager")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceSetNodeManager)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "SetNodeManager", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetNodeManager is a log parse operation binding the contract event 0x9b77357b839fea8829ce30918f67eb91de08caa0e5272af43a86af5334b56177.
//
// Solidity: event SetNodeManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseSetNodeManager(log types.Log) (*BaseTenantSpaceSetNodeManager, error) {
	event := new(BaseTenantSpaceSetNodeManager)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "SetNodeManager", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantSpaceSetUserManagerIterator is returned from FilterSetUserManager and is used to iterate over the raw logs and unpacked data for SetUserManager events raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetUserManagerIterator struct {
	Event *BaseTenantSpaceSetUserManager // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceSetUserManagerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceSetUserManager)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceSetUserManager)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceSetUserManagerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceSetUserManagerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceSetUserManager represents a SetUserManager event raised by the BaseTenantSpace contract.
type BaseTenantSpaceSetUserManager struct {
	NewManager  common.Address
	PrevManager common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetUserManager is a free log retrieval operation binding the contract event 0xc104e41939e1b09c10a83f97ac30b2d1f48605f4630aa8c64633501740ce0299.
//
// Solidity: event SetUserManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterSetUserManager(opts *bind.FilterOpts) (*BaseTenantSpaceSetUserManagerIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "SetUserManager")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceSetUserManagerIterator{contract: _BaseTenantSpace.contract, event: "SetUserManager", logs: logs, sub: sub}, nil
}

// WatchSetUserManager is a free log subscription operation binding the contract event 0xc104e41939e1b09c10a83f97ac30b2d1f48605f4630aa8c64633501740ce0299.
//
// Solidity: event SetUserManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchSetUserManager(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceSetUserManager) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "SetUserManager")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceSetUserManager)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "SetUserManager", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetUserManager is a log parse operation binding the contract event 0xc104e41939e1b09c10a83f97ac30b2d1f48605f4630aa8c64633501740ce0299.
//
// Solidity: event SetUserManager(address newManager, address prevManager)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseSetUserManager(log types.Log) (*BaseTenantSpaceSetUserManager, error) {
	event := new(BaseTenantSpaceSetUserManager)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "SetUserManager", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantSpaceUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseTenantSpace contract.
type BaseTenantSpaceUpdateRequestIterator struct {
	Event *BaseTenantSpaceUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceUpdateRequest represents a UpdateRequest event raised by the BaseTenantSpace contract.
type BaseTenantSpaceUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseTenantSpaceUpdateRequestIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceUpdateRequestIterator{contract: _BaseTenantSpace.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceUpdateRequest)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseUpdateRequest(log types.Log) (*BaseTenantSpaceUpdateRequest, error) {
	event := new(BaseTenantSpaceUpdateRequest)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantSpaceVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseTenantSpace contract.
type BaseTenantSpaceVersionConfirmIterator struct {
	Event *BaseTenantSpaceVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceVersionConfirm represents a VersionConfirm event raised by the BaseTenantSpace contract.
type BaseTenantSpaceVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseTenantSpaceVersionConfirmIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceVersionConfirmIterator{contract: _BaseTenantSpace.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceVersionConfirm)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseVersionConfirm(log types.Log) (*BaseTenantSpaceVersionConfirm, error) {
	event := new(BaseTenantSpaceVersionConfirm)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantSpaceVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseTenantSpace contract.
type BaseTenantSpaceVersionDeleteIterator struct {
	Event *BaseTenantSpaceVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceVersionDelete represents a VersionDelete event raised by the BaseTenantSpace contract.
type BaseTenantSpaceVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseTenantSpaceVersionDeleteIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceVersionDeleteIterator{contract: _BaseTenantSpace.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceVersionDelete)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseVersionDelete(log types.Log) (*BaseTenantSpaceVersionDelete, error) {
	event := new(BaseTenantSpaceVersionDelete)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantSpaceVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the BaseTenantSpace contract.
type BaseTenantSpaceVisibilityChangedIterator struct {
	Event *BaseTenantSpaceVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceVisibilityChanged represents a VisibilityChanged event raised by the BaseTenantSpace contract.
type BaseTenantSpaceVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*BaseTenantSpaceVisibilityChangedIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceVisibilityChangedIterator{contract: _BaseTenantSpace.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceVisibilityChanged)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseVisibilityChanged(log types.Log) (*BaseTenantSpaceVisibilityChanged, error) {
	event := new(BaseTenantSpaceVisibilityChanged)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTenantSpaceWordGroupDeletedIterator is returned from FilterWordGroupDeleted and is used to iterate over the raw logs and unpacked data for WordGroupDeleted events raised by the BaseTenantSpace contract.
type BaseTenantSpaceWordGroupDeletedIterator struct {
	Event *BaseTenantSpaceWordGroupDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseTenantSpaceWordGroupDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseTenantSpaceWordGroupDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseTenantSpaceWordGroupDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseTenantSpaceWordGroupDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseTenantSpaceWordGroupDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseTenantSpaceWordGroupDeleted represents a WordGroupDeleted event raised by the BaseTenantSpace contract.
type BaseTenantSpaceWordGroupDeleted struct {
	Ident [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWordGroupDeleted is a free log retrieval operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) FilterWordGroupDeleted(opts *bind.FilterOpts) (*BaseTenantSpaceWordGroupDeletedIterator, error) {

	logs, sub, err := _BaseTenantSpace.contract.FilterLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return &BaseTenantSpaceWordGroupDeletedIterator{contract: _BaseTenantSpace.contract, event: "WordGroupDeleted", logs: logs, sub: sub}, nil
}

// WatchWordGroupDeleted is a free log subscription operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) WatchWordGroupDeleted(opts *bind.WatchOpts, sink chan<- *BaseTenantSpaceWordGroupDeleted) (event.Subscription, error) {

	logs, sub, err := _BaseTenantSpace.contract.WatchLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseTenantSpaceWordGroupDeleted)
				if err := _BaseTenantSpace.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWordGroupDeleted is a log parse operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_BaseTenantSpace *BaseTenantSpaceFilterer) ParseWordGroupDeleted(log types.Log) (*BaseTenantSpaceWordGroupDeleted, error) {
	event := new(BaseTenantSpaceWordGroupDeleted)
	if err := _BaseTenantSpace.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseTypeFactoryMetaData contains all meta data concerning the BaseTypeFactory contract.
var BaseTypeFactoryMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createNode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_spaceAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
	Sigs: map[string]string{
		"af570c04": "contentSpace()",
		"b8cfaf05": "createContentType()",
		"5c6dc219": "createNode(address)",
		"02d05d3f": "creator()",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
	},
	Bin: "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f42617365466163746f727932303230313132393232333230304d4c000000000060055534801561007c57600080fd5b506040516020806131588339810180604052602081101561009c57600080fd5b505160028054600160a060020a031990811632179091556003805482163317905560048054600160a060020a0390931692909116919091179055613073806100e56000396000f3fe6080604052600436106100915760003560e01c80636d2e4b1b116100595780636d2e4b1b146101485780638da5cb5b1461017b578063af570c0414610190578063b8cfaf05146101a5578063f2fde38b146101ba57610091565b806302d05d3f1461009357806341c0e1b5146100c457806354fd4d50146100d95780635c6dc219146101005780635f4fcae114610133575b005b34801561009f57600080fd5b506100a86101ed565b60408051600160a060020a039092168252519081900360200190f35b3480156100d057600080fd5b506100916101fc565b3480156100e557600080fd5b506100ee610221565b60408051918252519081900360200190f35b34801561010c57600080fd5b506100a86004803603602081101561012357600080fd5b5035600160a060020a0316610227565b34801561013f57600080fd5b506100ee6102df565b34801561015457600080fd5b506100916004803603602081101561016b57600080fd5b5035600160a060020a03166102e5565b34801561018757600080fd5b506100a8610340565b34801561019c57600080fd5b506100a861034f565b3480156101b157600080fd5b506100a861035e565b3480156101c657600080fd5b50610091600480360360208110156101dd57600080fd5b5035600160a060020a0316610675565b600254600160a060020a031681565b600354600160a060020a0316331461021357600080fd5b600354600160a060020a0316ff5b60055481565b6000806040516102369061082c565b604051809103906000f080158015610252573d6000803e3d6000fd5b50905082600160a060020a031681600160a060020a0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561029857600080fd5b505afa1580156102ac573d6000803e3d6000fd5b505050506040513d60208110156102c257600080fd5b5051600160a060020a0316146102d757600080fd5b90505b919050565b60015481565b600254600160a060020a031633146102fc57600080fd5b600160a060020a038116151561031157600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b600454600090600160a060020a0316331461037857600080fd5b60003360405161038790610839565b600160a060020a03909116815260405190819003602001906000f0801580156103b4573d6000803e3d6000fd5b5060048054604080517f63e6ffdd0000000000000000000000000000000000000000000000000000000081523293810193909352519293508392600160a060020a039091169160009183916363e6ffdd916024808301926020929190829003018186803b15801561042457600080fd5b505afa158015610438573d6000803e3d6000fd5b505050506040513d602081101561044e57600080fd5b50519050600061045d826106d0565b905080151561056e57604080517ff2fde38b00000000000000000000000000000000000000000000000000000000815232600482015290518391600160a060020a0387169163f2fde38b9160248082019260009290919082900301818387803b1580156104c957600080fd5b505af11580156104dd573d6000803e3d6000fd5b5050604080517f8635adb5000000000000000000000000000000000000000000000000000000008152600160a060020a038a811660048301526000602483018190526002604484015292519086169450638635adb593506064808301939282900301818387803b15801561055057600080fd5b505af1158015610564573d6000803e3d6000fd5b505050505061066b565b604080517f0fe1b5a2000000000000000000000000000000000000000000000000000000008152326004820152600060248201819052600260448301529151600160a060020a03871692630fe1b5a2926064808201939182900301818387803b1580156105da57600080fd5b505af11580156105ee573d6000803e3d6000fd5b5050604080517ff2fde38b0000000000000000000000000000000000000000000000000000000081523260048201529051600160a060020a038816935063f2fde38b9250602480830192600092919082900301818387803b15801561065257600080fd5b505af1158015610666573d6000803e3d6000fd5b505050505b5092935050505090565b600354600160a060020a0316331461068c57600080fd5b600160a060020a03811615156106a157600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604080517f76657273696f6e415049282900000000000000000000000000000000000000008152815190819003600c018120600482526024820183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909216919091178152915181516000938493606093600160a060020a03881693919290918291908083835b6020831061079b5780518252601f19909201916020918201910161077c565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d80600081146107fb576040519150601f19603f3d011682016040523d82523d6000602084013e610800565b606091505b50909250905081158061081257508051155b15610822576000925050506102da565b5060019392505050565b6104df8061084783390190565b61232280610d268339019056fe60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f4e6f646532303139303331353130353130304d4c00000000000000000000000060055560028054600160a060020a0319908116321790915560038054909116331790556104408061009f6000396000f3fe6080604052600436106100865760003560e01c80635f4fcae1116100595780635f4fcae1146101a85780636d2e4b1b146101bd5780638da5cb5b146101f0578063af570c0414610205578063f2fde38b1461021a57610086565b806302d05d3f1461008857806341304fac146100b957806341c0e1b51461016c57806354fd4d5014610181575b005b34801561009457600080fd5b5061009d61024d565b60408051600160a060020a039092168252519081900360200190f35b3480156100c557600080fd5b50610086600480360360208110156100dc57600080fd5b8101906020810181356401000000008111156100f757600080fd5b82018360208201111561010957600080fd5b8035906020019184600183028401116401000000008311171561012b57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061025c945050505050565b34801561017857600080fd5b5061008661030f565b34801561018d57600080fd5b50610196610334565b60408051918252519081900360200190f35b3480156101b457600080fd5b5061019661033a565b3480156101c957600080fd5b50610086600480360360208110156101e057600080fd5b5035600160a060020a0316610340565b3480156101fc57600080fd5b5061009d61039b565b34801561021157600080fd5b5061009d6103aa565b34801561022657600080fd5b506100866004803603602081101561023d57600080fd5b5035600160a060020a03166103b9565b600254600160a060020a031681565b600354600160a060020a0316331461027357600080fd5b7fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab816040518080602001828103825283818151815260200191508051906020019080838360005b838110156102d25781810151838201526020016102ba565b50505050905090810190601f1680156102ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b600354600160a060020a0316331461032657600080fd5b600354600160a060020a0316ff5b60055481565b60015481565b600254600160a060020a0316331461035757600080fd5b600160a060020a038116151561036c57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b600354600160a060020a031633146103d057600080fd5b600160a060020a03811615156103e557600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a7230582046c9f812e7817b0cca47376ef7a772f3f179d92338960332cf7a853a1dd983f90029608060408190527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060019081557f41636365737369626c653230323030363236313231363030504f0000000000006005556006805460ff191690911761ff00191690557f4564697461626c653230323030393238313130303030504f00000000000000006007557f42617365436f6e74656e745479706532303230303331363133353130304d4c00600e55602080612322833981018060405260208110156100ea57600080fd5b50516002805432600160a060020a031991821617909155600380543390831617905560048054909116600160a060020a039092169190911790556006805461ffff19166104001790556121e0806101426000396000f3fe6080604052600436106102035760003560e01c80636380501f1161011857806397ac4fd2116100a0578063c287e0ed1161006f578063c287e0ed146107e5578063e02dd9c2146107fa578063e1a707171461080f578063ef1d7dc2146108c2578063f2fde38b146108d757610203565b806397ac4fd2146106db5780639867db74146106f0578063aa024e8b146107a3578063af570c04146107d057610203565b80637886f747116100e75780637886f7471461062a5780637ca8f6181461065457806381beeb641461067e5780638da5cb5b1461069357806395a078e8146106a857610203565b80636380501f1461059a57806367e5c3bf146105af5780636d2e4b1b146105e25780636e3754271461061557610203565b8063331b86c01161019b578063446e88261161016a578063446e8826146104c957806354fd4d50146104d15780635f4fcae1146104e65780635f6a1301146104fb578063628449fd1461051057610203565b8063331b86c014610463578063375a6e7c1461048a57806340b87a261461049f57806341c0e1b5146104b457610203565b806314cfabb3116101d757806314cfabb3146102ba5780631bf7a912146102e357806322e564eb1461040a57806329adec141461044e57610203565b8062821de31461020557806302d05d3f146102365780630fe1b5a21461024b578063100508a21461028f575b005b34801561021157600080fd5b5061021a61090a565b60408051600160a060020a039092168252519081900360200190f35b34801561024257600080fd5b5061021a61091a565b34801561025757600080fd5b506102036004803603606081101561026e57600080fd5b50600160a060020a038135169060ff60208201358116916040013516610929565b34801561029b57600080fd5b506102a4610a0b565b6040805160ff9092168252519081900360200190f35b3480156102c657600080fd5b506102cf610a10565b604080519115158252519081900360200190f35b6102cf600480360360408110156102f957600080fd5b81019060208101813564010000000081111561031457600080fd5b82018360208201111561032657600080fd5b8035906020019184602083028401116401000000008311171561034857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561039857600080fd5b8201836020820111156103aa57600080fd5b803590602001918460208302840111640100000000831117156103cc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610aad945050505050565b34801561041657600080fd5b506102036004803603606081101561042d57600080fd5b50600160a060020a038135169060ff60208201358116916040013516610b50565b34801561045a57600080fd5b506102a4611014565b34801561046f57600080fd5b5061047861101d565b60408051918252519081900360200190f35b34801561049657600080fd5b506102cf611023565b3480156104ab57600080fd5b5061047861102c565b3480156104c057600080fd5b50610203611032565b6102cf611057565b3480156104dd57600080fd5b5061047861125b565b3480156104f257600080fd5b50610478611261565b34801561050757600080fd5b50610203611267565b34801561051c57600080fd5b506105256112a5565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561055f578181015183820152602001610547565b50505050905090810190601f16801561058c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105a657600080fd5b506102a4611333565b3480156105bb57600080fd5b506102cf600480360360208110156105d257600080fd5b5035600160a060020a0316611341565b3480156105ee57600080fd5b506102036004803603602081101561060557600080fd5b5035600160a060020a03166114d9565b34801561062157600080fd5b506102cf611534565b34801561063657600080fd5b506104786004803603602081101561064d57600080fd5b5035611543565b34801561066057600080fd5b506105256004803603602081101561067757600080fd5b5035611562565b34801561068a57600080fd5b506102cf6115d6565b34801561069f57600080fd5b5061021a6115e1565b3480156106b457600080fd5b506102cf600480360360208110156106cb57600080fd5b5035600160a060020a03166115f0565b3480156106e757600080fd5b506102a461174a565b3480156106fc57600080fd5b506102036004803603602081101561071357600080fd5b81019060208101813564010000000081111561072e57600080fd5b82018360208201111561074057600080fd5b8035906020019184600183028401116401000000008311171561076257600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061174f945050505050565b3480156107af57600080fd5b50610203600480360360208110156107c657600080fd5b503560ff1661187c565b3480156107dc57600080fd5b5061021a6118f6565b3480156107f157600080fd5b50610203611905565b34801561080657600080fd5b506105256119c7565b34801561081b57600080fd5b506104786004803603602081101561083257600080fd5b81019060208101813564010000000081111561084d57600080fd5b82018360208201111561085f57600080fd5b8035906020019184600183028401116401000000008311171561088157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611a22945050505050565b3480156108ce57600080fd5b506102a4611e93565b3480156108e357600080fd5b50610203600480360360208110156108fa57600080fd5b5035600160a060020a0316611e98565b600454600160a060020a03165b90565b600254600160a060020a031681565b6109316115d6565b151561093c57600080fd5b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd91602480820192602092909190829003018186803b1580156109ab57600080fd5b505afa1580156109bf573d6000803e3d6000fd5b505050506040513d60208110156109d557600080fd5b50519050600160a060020a03811615156109f9576109f4858585610b50565b610a04565b610a04818585610b50565b5050505050565b600181565b60048054604080517f26683e14000000000000000000000000000000000000000000000000000000008152339381019390935251600092600160a060020a039092169182916326683e1491602480820192602092909190829003018186803b158015610a7b57600080fd5b505afa158015610a8f573d6000803e3d6000fd5b505050506040513d6020811015610aa557600080fd5b505191505090565b6000610ab8336115f0565b1515610ac357600080fd5b604080513060601b602080830191909152426034808401829052845180850390910181526054840180865281519190930120600090811c9092526074830182905260948301919091523360b48301526103e80260d482015290517f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c79181900360f40190a150600192915050565b600083905080600160a060020a031663091600e66040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8e57600080fd5b505afa158015610ba2573d6000803e3d6000fd5b505050506040513d6020811015610bb857600080fd5b5051600654610100900460ff90811691161415610c5d57604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691633def514091606480830192600092919082900301818387803b158015610c4057600080fd5b505af1158015610c54573d6000803e3d6000fd5b5050505061100e565b80600160a060020a03166312915a306040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9657600080fd5b505afa158015610caa573d6000803e3d6000fd5b505050506040513d6020811015610cc057600080fd5b5051600654610100900460ff90811691161415610d4857604080517ff17bda9100000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163f17bda9191606480830192600092919082900301818387803b158015610c4057600080fd5b80600160a060020a03166316aed2326040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8157600080fd5b505afa158015610d95573d6000803e3d6000fd5b505050506040513d6020811015610dab57600080fd5b5051600654610100900460ff90811691161415610e3357604080517f7cbb7bf200000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691637cbb7bf291606480830192600092919082900301818387803b158015610c4057600080fd5b80600160a060020a03166368a0469a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6c57600080fd5b505afa158015610e80573d6000803e3d6000fd5b505050506040513d6020811015610e9657600080fd5b5051600654610100900460ff90811691161415610f1e57604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691638635adb591606480830192600092919082900301818387803b158015610c4057600080fd5b80600160a060020a0316636373a4116040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5757600080fd5b505afa158015610f6b573d6000803e3d6000fd5b505050506040513d6020811015610f8157600080fd5b5051600654610100900460ff9081169116141561100957604080517f224dcba000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163224dcba091606480830192600092919082900301818387803b158015610c4057600080fd5b600080fd5b50505050565b60065460ff1681565b600a5490565b600d5460ff1681565b60095481565b600354600160a060020a0316331461104957600080fd5b600354600160a060020a0316ff5b6000611061610a10565b151561106c57600080fd5b600d5460ff16151561107d57600080fd5b60006008805460018160011615610100020316600290049050111561112c57600a80546001818101808455600093909352600880546110f3937fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80192600261010091831615919091026000190190911604611ff7565b5050600954600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901555b600c805461114f9160089160026000196101006001841615020190911604611ff7565b504260095560408051602081019182905260009081905261117291600c9161207c565b50600d805460ff191690556004547fbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df90600160a060020a03166111b361090a565b60408051600160a060020a0380851682528316602082015260609181018281526008805460026000196101006001841615020190911604938301849052926080830190849080156112455780601f1061121a57610100808354040283529160200191611245565b820191906000526020600020905b81548152906001019060200180831161122857829003601f168201915b505094505050505060405180910390a150600190565b600e5481565b60015481565b61126f611534565b151561127a57600080fd5b60408051602081019182905260009081905261129891600c9161207c565b50600d805460ff19169055565b600c805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561132b5780601f106113005761010080835404028352916020019161132b565b820191906000526020600020905b81548152906001019060200180831161130e57829003601f168201915b505050505081565b600654610100900460ff1681565b600354600090600160a060020a03838116911614806113685750600654606460ff90911610155b15611375575060016114d4565b600654600061010090910460ff1611156114d05760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b1580156113f557600080fd5b505afa158015611409573d6000803e3d6000fd5b505050506040513d602081101561141f57600080fd5b5051600654604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526002604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561149b57600080fd5b505afa1580156114af573d6000803e3d6000fd5b505050506040513d60208110156114c557600080fd5b505191506114d49050565b5060005b919050565b600254600160a060020a031633146114f057600080fd5b600160a060020a038116151561150557600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600061153e6115d6565b905090565b600b80548290811061155157fe5b600091825260209091200154905081565b600a80548290811061157057fe5b600091825260209182902001805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529350909183018282801561132b5780601f106113005761010080835404028352916020019161132b565b600061153e33611341565b600354600160a060020a031681565b600354600090600160a060020a03838116911614806116175750600654600a60ff90911610155b15611624575060016114d4565b600654600061010090910460ff1611156114d05760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b1580156116a457600080fd5b505afa1580156116b8573d6000803e3d6000fd5b505050506040513d60208110156116ce57600080fd5b5051600654604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561149b57600080fd5b600a81565b611757611534565b151561176257600080fd5b600d5460ff161561177257600080fd5b805160801161178057600080fd5b805161179390600c90602084019061207c565b50600d805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a03166117d761090a565b60408051600160a060020a038085168252831660208201526060918101828152600c805460026000196101006001841615020190911604938301849052926080830190849080156118695780601f1061183e57610100808354040283529160200191611869565b820191906000526020600020905b81548152906001019060200180831161184c57829003601f168201915b505094505050505060405180910390a150565b6118846115d6565b151561188f57600080fd5b6006805460ff191660ff838116919091179182905560045460408051600160a060020a039092168083526020830152929091168183015290517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b600454600160a060020a031681565b61190d6115d6565b151561191857600080fd5b60408051602080825260088054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156119b75780601f1061198c576101008083540402835291602001916119b7565b820191906000526020600020905b81548152906001019060200180831161199a57829003601f168201915b50509250505060405180910390a1565b6008805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561132b5780601f106113005761010080835404028352916020019161132b565b6000611a2c611534565b1515611a3757600080fd5b6000826040516020018082805190602001908083835b60208310611a6c5780518252601f199092019160209182019101611a4d565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050600060086040516020018082805460018160011615610100020316600290048015611b0b5780601f10611ae9576101008083540402835291820191611b0b565b820191906000526020600020905b815481529060010190602001808311611af7575b505091505060405160208183030381529060405280519060200120905080821415611ce257600a541515611b6257604080516020810191829052600090819052611b579160089161207c565b506000600955611c06565b600080805b600a54811015611bba5781600b82815481101515611b8157fe5b90600052602060002001541115611bb257809250600b81815481101515611ba457fe5b906000526020600020015491505b600101611b67565b50600a805483908110611bc957fe5b9060005260206000200160089080546001816001161561010002031660029004611bf4929190611ff7565b506009819055611c0382611ef3565b50505b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168560006040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611c9b578181015183820152602001611c83565b50505050905090810190601f168015611cc85780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a16000925050506114d4565b60001960005b600a54811015611dab576000600a82815481101515611d0357fe5b906000526020600020016040516020018082805460018160011615610100020316600290048015611d6b5780601f10611d49576101008083540402835291820191611d6b565b820191906000526020600020905b815481529060010190602001808311611d57575b505091505060405160208183030381529060405280519060200120905080851415611da257611d9982611ef3565b81925050611dab565b50600101611ce8565b50600019811415611dbb57600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a031686836040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611e4f578181015183820152602001611e37565b50505050905090810190601f168015611e7c5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1949350505050565b606481565b600354600160a060020a03163314611eaf57600080fd5b600160a060020a0381161515611ec457600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600a805482908110611f0157fe5b906000526020600020016000611f1791906120ea565b600b805482908110611f2557fe5b6000918252602082200155600a54600019018114611fcb57600a80546000198101908110611f4f57fe5b90600052602060002001600a82815481101515611f6857fe5b906000526020600020019080546001816001161561010002031660029004611f91929190611ff7565b50600b80546000198101908110611fa457fe5b9060005260206000200154600b82815481101515611fbe57fe5b6000918252602090912001555b600a805490611fde90600019830161212e565b50600b805490611ff2906000198301612157565b505b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612030578054855561206c565b8280016001018555821561206c57600052602060002091601f016020900482015b8281111561206c578254825591600101919060010190612051565b50612078929150612177565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106120bd57805160ff191683800117855561206c565b8280016001018555821561206c579182015b8281111561206c5782518255916020019190600101906120cf565b50805460018160011615610100020316600290046000825580601f106121105750611ff4565b601f016020900490600052602060002090810190611ff49190612177565b81548183558181111561215257600083815260209020612152918101908301612191565b505050565b815481835581811115612152576000838152602090206121529181019083015b61091791905b80821115612078576000815560010161217d565b61091791905b808211156120785760006121ab82826120ea565b5060010161219756fea165627a7a7230582001b7de2aebc0acdf2814bf5a3444a21db1b66cd2cdb0f5fbcc34a2a5fe6c2b2a0029a165627a7a72305820e0e1dd54c7723773f5a7527c7743e84459a61b23010c05307ad7d3e3a3d5e9f30029",
}

// BaseTypeFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseTypeFactoryMetaData.ABI instead.
var BaseTypeFactoryABI = BaseTypeFactoryMetaData.ABI

// Deprecated: Use BaseTypeFactoryMetaData.Sigs instead.
// BaseTypeFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseTypeFactoryFuncSigs = BaseTypeFactoryMetaData.Sigs

// BaseTypeFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseTypeFactoryMetaData.Bin instead.
var BaseTypeFactoryBin = BaseTypeFactoryMetaData.Bin

// DeployBaseTypeFactory deploys a new Ethereum contract, binding an instance of BaseTypeFactory to it.
func DeployBaseTypeFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _spaceAddr common.Address) (common.Address, *types.Transaction, *BaseTypeFactory, error) {
	parsed, err := ParsedABI(K_BaseTypeFactory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseTypeFactoryBin), backend, _spaceAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseTypeFactory{BaseTypeFactoryCaller: BaseTypeFactoryCaller{contract: contract}, BaseTypeFactoryTransactor: BaseTypeFactoryTransactor{contract: contract}, BaseTypeFactoryFilterer: BaseTypeFactoryFilterer{contract: contract}}, nil
}

// BaseTypeFactory is an auto generated Go binding around an Ethereum contract.
type BaseTypeFactory struct {
	BaseTypeFactoryCaller     // Read-only binding to the contract
	BaseTypeFactoryTransactor // Write-only binding to the contract
	BaseTypeFactoryFilterer   // Log filterer for contract events
}

// BaseTypeFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseTypeFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTypeFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseTypeFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseTypeFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseTypeFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseTypeFactory creates a new instance of BaseTypeFactory, bound to a specific deployed contract.
func NewBaseTypeFactory(address common.Address, backend bind.ContractBackend) (*BaseTypeFactory, error) {
	contract, err := bindBaseTypeFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseTypeFactory{BaseTypeFactoryCaller: BaseTypeFactoryCaller{contract: contract}, BaseTypeFactoryTransactor: BaseTypeFactoryTransactor{contract: contract}, BaseTypeFactoryFilterer: BaseTypeFactoryFilterer{contract: contract}}, nil
}

// NewBaseTypeFactoryCaller creates a new read-only instance of BaseTypeFactory, bound to a specific deployed contract.
func NewBaseTypeFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseTypeFactoryCaller, error) {
	contract, err := bindBaseTypeFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseTypeFactoryCaller{contract: contract}, nil
}

// NewBaseTypeFactoryTransactor creates a new write-only instance of BaseTypeFactory, bound to a specific deployed contract.
func NewBaseTypeFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseTypeFactoryTransactor, error) {
	contract, err := bindBaseTypeFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseTypeFactoryTransactor{contract: contract}, nil
}

// NewBaseTypeFactoryFilterer creates a new log filterer instance of BaseTypeFactory, bound to a specific deployed contract.
func NewBaseTypeFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseTypeFactoryFilterer, error) {
	contract, err := bindBaseTypeFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseTypeFactoryFilterer{contract: contract}, nil
}

// bindBaseTypeFactory binds a generic wrapper to an already deployed contract.
func bindBaseTypeFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseTypeFactory)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseTypeFactory *BaseTypeFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTypeFactory.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseTypeFactory *BaseTypeFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTypeFactory.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseTypeFactory *BaseTypeFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseTypeFactory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseTypeFactory *BaseTypeFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseTypeFactory.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_BaseTypeFactory *BaseTypeFactoryCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseTypeFactory.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseTypeFactory *BaseTypeFactoryTransactor) CreateContentType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTypeFactory.contract.Transact(opts, "createContentType")
}

// CreateNode is a paid mutator transaction binding the contract method 0x5c6dc219.
//
// Solidity: function createNode(address _owner) returns(address)
func (_BaseTypeFactory *BaseTypeFactoryTransactor) CreateNode(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _BaseTypeFactory.contract.Transact(opts, "createNode", _owner)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseTypeFactory *BaseTypeFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseTypeFactory.contract.Transact(opts, "kill")
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseTypeFactory *BaseTypeFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseTypeFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseTypeFactory *BaseTypeFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseTypeFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseTypeFactory *BaseTypeFactoryTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseTypeFactory.contract.RawTransact(opts, calldata)
}

// ContainerMetaData contains all meta data concerning the Container contract.
var ContainerMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"97ac4fd2": "CAN_ACCESS()",
		"ef1d7dc2": "CAN_EDIT()",
		"100508a2": "CAN_SEE()",
		"1bf7a912": "accessRequestV3(bytes32[],address[])",
		"0f58a786": "addContentType(address,address)",
		"32eaf21b": "addressKMS()",
		"6e375427": "canCommit()",
		"14cfabb3": "canConfirm()",
		"0eaec2c5": "canContribute(address)",
		"81beeb64": "canEdit()",
		"9b55f901": "canPublish(address)",
		"29d00219": "canReview(address)",
		"5f6a1301": "clearPending()",
		"9867db74": "commit(string)",
		"375a6e7c": "commitPending()",
		"446e8826": "confirmCommit()",
		"af570c04": "contentSpace()",
		"1cdbee5a": "contentTypeContracts(address)",
		"991a3a7c": "contentTypes(uint256)",
		"c65bcbe2": "contentTypesLength()",
		"331b86c0": "countVersionHashes()",
		"02d05d3f": "creator()",
		"e1a70717": "deleteVersion(string)",
		"1f2caaec": "findTypeByHash(bytes32)",
		"95a078e8": "hasAccess(address)",
		"67e5c3bf": "hasEditorRight(address)",
		"6380501f": "indexCategory()",
		"41c0e1b5": "kill()",
		"e02dd9c2": "objectHash()",
		"40b87a26": "objectTimestamp()",
		"8da5cb5b": "owner()",
		"00821de3": "parentAddress()",
		"628449fd": "pendingHash()",
		"2cf99422": "publish(address)",
		"fd089196": "removeContentType(address)",
		"3dd71d99": "requiresReview()",
		"c9e8e72d": "setAddressKMS(address)",
		"22e564eb": "setGroupRights(address,uint8,uint8)",
		"0fe1b5a2": "setRights(address,uint8,uint8)",
		"aa024e8b": "setVisibility(uint8)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"c287e0ed": "updateRequest()",
		"29dedde5": "validType(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
		"7ca8f618": "versionHashes(uint256)",
		"7886f747": "versionTimestamp(uint256)",
		"29adec14": "visibility()",
		"9cb121ba": "whitelistedType(address)",
	},
	Bin: "",
}

// ContainerABI is the input ABI used to generate the binding from.
// Deprecated: Use ContainerMetaData.ABI instead.
var ContainerABI = ContainerMetaData.ABI

// Deprecated: Use ContainerMetaData.Sigs instead.
// ContainerFuncSigs maps the 4-byte function signature to its string representation.
var ContainerFuncSigs = ContainerMetaData.Sigs

// ContainerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContainerMetaData.Bin instead.
var ContainerBin = ContainerMetaData.Bin

// DeployContainer deploys a new Ethereum contract, binding an instance of Container to it.
func DeployContainer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Container, error) {
	parsed, err := ParsedABI(K_Container)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContainerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Container{ContainerCaller: ContainerCaller{contract: contract}, ContainerTransactor: ContainerTransactor{contract: contract}, ContainerFilterer: ContainerFilterer{contract: contract}}, nil
}

// Container is an auto generated Go binding around an Ethereum contract.
type Container struct {
	ContainerCaller     // Read-only binding to the contract
	ContainerTransactor // Write-only binding to the contract
	ContainerFilterer   // Log filterer for contract events
}

// ContainerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContainerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContainerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContainerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContainerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContainerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewContainer creates a new instance of Container, bound to a specific deployed contract.
func NewContainer(address common.Address, backend bind.ContractBackend) (*Container, error) {
	contract, err := bindContainer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Container{ContainerCaller: ContainerCaller{contract: contract}, ContainerTransactor: ContainerTransactor{contract: contract}, ContainerFilterer: ContainerFilterer{contract: contract}}, nil
}

// NewContainerCaller creates a new read-only instance of Container, bound to a specific deployed contract.
func NewContainerCaller(address common.Address, caller bind.ContractCaller) (*ContainerCaller, error) {
	contract, err := bindContainer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContainerCaller{contract: contract}, nil
}

// NewContainerTransactor creates a new write-only instance of Container, bound to a specific deployed contract.
func NewContainerTransactor(address common.Address, transactor bind.ContractTransactor) (*ContainerTransactor, error) {
	contract, err := bindContainer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContainerTransactor{contract: contract}, nil
}

// NewContainerFilterer creates a new log filterer instance of Container, bound to a specific deployed contract.
func NewContainerFilterer(address common.Address, filterer bind.ContractFilterer) (*ContainerFilterer, error) {
	contract, err := bindContainer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContainerFilterer{contract: contract}, nil
}

// bindContainer binds a generic wrapper to an already deployed contract.
func bindContainer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Container)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() view returns(uint8)
func (_Container *ContainerCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "CAN_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() view returns(uint8)
func (_Container *ContainerCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "CAN_EDIT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() view returns(uint8)
func (_Container *ContainerCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "CAN_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() view returns(address)
func (_Container *ContainerCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "addressKMS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() view returns(bool)
func (_Container *ContainerCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "canCommit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() view returns(bool)
func (_Container *ContainerCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "canConfirm")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) view returns(bool)
func (_Container *ContainerCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "canContribute", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() view returns(bool)
func (_Container *ContainerCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "canEdit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) view returns(bool)
func (_Container *ContainerCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "canPublish", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) view returns(bool)
func (_Container *ContainerCaller) CanReview(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "canReview", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() view returns(bool)
func (_Container *ContainerCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "commitPending")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_Container *ContainerCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) view returns(address)
func (_Container *ContainerCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "contentTypeContracts", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) view returns(address)
func (_Container *ContainerCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "contentTypes", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() view returns(uint256)
func (_Container *ContainerCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "contentTypesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() view returns(uint256)
func (_Container *ContainerCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "countVersionHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_Container *ContainerCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) view returns(address)
func (_Container *ContainerCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "findTypeByHash", typeHash)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) view returns(bool)
func (_Container *ContainerCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "hasAccess", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) view returns(bool)
func (_Container *ContainerCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "hasEditorRight", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() view returns(uint8)
func (_Container *ContainerCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "indexCategory")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() view returns(string)
func (_Container *ContainerCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "objectHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() view returns(uint256)
func (_Container *ContainerCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "objectTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Container *ContainerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_Container *ContainerCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "parentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() view returns(string)
func (_Container *ContainerCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "pendingHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() view returns(bool)
func (_Container *ContainerCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "requiresReview")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) view returns(bool)
func (_Container *ContainerCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "validType", content_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_Container *ContainerCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_Container *ContainerCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) view returns(string)
func (_Container *ContainerCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "versionHashes", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) view returns(uint256)
func (_Container *ContainerCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "versionTimestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() view returns(uint8)
func (_Container *ContainerCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "visibility")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) view returns(bool)
func (_Container *ContainerCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "whitelistedType", content_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) payable returns(bool)
func (_Container *ContainerTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_Container *ContainerTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Container *ContainerTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "clearPending")
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Container *ContainerTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "commit", _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() payable returns(bool)
func (_Container *ContainerTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "confirmCommit")
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Container *ContainerTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "deleteVersion", _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Container *ContainerTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "kill")
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_Container *ContainerTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "publish", contentObj)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_Container *ContainerTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "removeContentType", content_type)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_Container *ContainerTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_Container *ContainerTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_Container *ContainerTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Container *ContainerTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "setVisibility", _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Container *ContainerTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Container *ContainerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "transferOwnership", newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Container *ContainerTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "updateRequest")
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Container *ContainerTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Container.contract.RawTransact(opts, calldata)
}

// ContainerAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the Container contract.
type ContainerAccessRequestV3Iterator struct {
	Event *ContainerAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerAccessRequestV3 represents a AccessRequestV3 event raised by the Container contract.
type ContainerAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Container *ContainerFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*ContainerAccessRequestV3Iterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &ContainerAccessRequestV3Iterator{contract: _Container.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Container *ContainerFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *ContainerAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerAccessRequestV3)
				if err := _Container.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Container *ContainerFilterer) ParseAccessRequestV3(log types.Log) (*ContainerAccessRequestV3, error) {
	event := new(ContainerAccessRequestV3)
	if err := _Container.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContainerCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the Container contract.
type ContainerCommitPendingIterator struct {
	Event *ContainerCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerCommitPending represents a CommitPending event raised by the Container contract.
type ContainerCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) FilterCommitPending(opts *bind.FilterOpts) (*ContainerCommitPendingIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &ContainerCommitPendingIterator{contract: _Container.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *ContainerCommitPending) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerCommitPending)
				if err := _Container.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) ParseCommitPending(log types.Log) (*ContainerCommitPending, error) {
	event := new(ContainerCommitPending)
	if err := _Container.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContainerContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the Container contract.
type ContainerContentTypeAddedIterator struct {
	Event *ContainerContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerContentTypeAdded represents a ContentTypeAdded event raised by the Container contract.
type ContainerContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_Container *ContainerFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*ContainerContentTypeAddedIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &ContainerContentTypeAddedIterator{contract: _Container.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_Container *ContainerFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *ContainerContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerContentTypeAdded)
				if err := _Container.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_Container *ContainerFilterer) ParseContentTypeAdded(log types.Log) (*ContainerContentTypeAdded, error) {
	event := new(ContainerContentTypeAdded)
	if err := _Container.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContainerContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the Container contract.
type ContainerContentTypeRemovedIterator struct {
	Event *ContainerContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerContentTypeRemoved represents a ContentTypeRemoved event raised by the Container contract.
type ContainerContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_Container *ContainerFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*ContainerContentTypeRemovedIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &ContainerContentTypeRemovedIterator{contract: _Container.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_Container *ContainerFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *ContainerContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerContentTypeRemoved)
				if err := _Container.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_Container *ContainerFilterer) ParseContentTypeRemoved(log types.Log) (*ContainerContentTypeRemoved, error) {
	event := new(ContainerContentTypeRemoved)
	if err := _Container.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContainerUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the Container contract.
type ContainerUpdateRequestIterator struct {
	Event *ContainerUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerUpdateRequest represents a UpdateRequest event raised by the Container contract.
type ContainerUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Container *ContainerFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*ContainerUpdateRequestIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &ContainerUpdateRequestIterator{contract: _Container.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Container *ContainerFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *ContainerUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerUpdateRequest)
				if err := _Container.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Container *ContainerFilterer) ParseUpdateRequest(log types.Log) (*ContainerUpdateRequest, error) {
	event := new(ContainerUpdateRequest)
	if err := _Container.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContainerVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the Container contract.
type ContainerVersionConfirmIterator struct {
	Event *ContainerVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerVersionConfirm represents a VersionConfirm event raised by the Container contract.
type ContainerVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*ContainerVersionConfirmIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &ContainerVersionConfirmIterator{contract: _Container.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *ContainerVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerVersionConfirm)
				if err := _Container.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) ParseVersionConfirm(log types.Log) (*ContainerVersionConfirm, error) {
	event := new(ContainerVersionConfirm)
	if err := _Container.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContainerVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the Container contract.
type ContainerVersionDeleteIterator struct {
	Event *ContainerVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerVersionDelete represents a VersionDelete event raised by the Container contract.
type ContainerVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Container *ContainerFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*ContainerVersionDeleteIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &ContainerVersionDeleteIterator{contract: _Container.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Container *ContainerFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *ContainerVersionDelete) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerVersionDelete)
				if err := _Container.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Container *ContainerFilterer) ParseVersionDelete(log types.Log) (*ContainerVersionDelete, error) {
	event := new(ContainerVersionDelete)
	if err := _Container.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContainerVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the Container contract.
type ContainerVisibilityChangedIterator struct {
	Event *ContainerVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerVisibilityChanged represents a VisibilityChanged event raised by the Container contract.
type ContainerVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Container *ContainerFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*ContainerVisibilityChangedIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &ContainerVisibilityChangedIterator{contract: _Container.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Container *ContainerFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *ContainerVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerVisibilityChanged)
				if err := _Container.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Container *ContainerFilterer) ParseVisibilityChanged(log types.Log) (*ContainerVisibilityChanged, error) {
	event := new(ContainerVisibilityChanged)
	if err := _Container.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentMetaData contains all meta data concerning the Content contract.
var ContentMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"runFinalize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"commandKill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposed_status_code\",\"type\":\"int256\"}],\"name\":\"runStatusChange\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"name\":\"runDescribeStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"runAccessInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runCreate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runKillExt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runKill\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_CHARGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"runAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"LogBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"uint256\"}],\"name\":\"LogUint256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"int256\"}],\"name\":\"LogInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunKill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposedStatusCode\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"returnStatusCode\",\"type\":\"int256\"}],\"name\":\"RunStatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"calculatedAccessCharge\",\"type\":\"int256\"}],\"name\":\"RunAccessCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunFinalize\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"6af27417": "DEFAULT_ACCESS()",
		"f185db0c": "DEFAULT_CHARGE()",
		"b535b03e": "DEFAULT_SEE()",
		"2de3ecd1": "commandKill()",
		"af570c04": "contentSpace()",
		"02d05d3f": "creator()",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"f9b4aa02": "runAccess(uint256,bytes32[],address[],address)",
		"74ba4609": "runAccessInfo(bytes32[],address[],address)",
		"7b1cdb3e": "runCreate()",
		"45080442": "runDescribeStatus(int256)",
		"c9f3d94c": "runEdit()",
		"1a485ccd": "runFinalize(uint256,bytes32[],address[],address)",
		"9e99bbea": "runKill()",
		"860b2492": "runKillExt()",
		"3513a805": "runStatusChange(int256)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
	},
	Bin: "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f436f6e74656e7432303230303231303136343130304d4c00000000000000000060055560028054600160a060020a03199081163217909155600380549091163317905561083d8061009f6000396000f3fe60806040526004361061012a5760003560e01c806374ba4609116100ab578063af570c041161006f578063af570c0414610534578063b535b03e14610549578063c9f3d94c1461055e578063f185db0c14610573578063f2fde38b14610588578063f9b4aa021461015d5761012a565b806374ba4609146103a15780637b1cdb3e1461050f578063860b2492146105175780638da5cb5b1461051f5780639e99bbea1461050f5761012a565b806345080442116100f257806345080442146102ef57806354fd4d50146103195780635f4fcae11461032e5780636af27417146103435780636d2e4b1b1461036e5761012a565b806302d05d3f1461012c5780631a485ccd1461015d5780632de3ecd1146102a85780633513a805146102bd57806341c0e1b5146102da575b005b34801561013857600080fd5b506101416105bb565b60408051600160a060020a039092168252519081900360200190f35b6102966004803603608081101561017357600080fd5b8135919081019060408101602082013564010000000081111561019557600080fd5b8201836020820111156101a757600080fd5b803590602001918460208302840111640100000000831117156101c957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561021957600080fd5b82018360208201111561022b57600080fd5b8035906020019184602083028401116401000000008311171561024d57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050509035600160a060020a031691506105ca9050565b60408051918252519081900360200190f35b3480156102b457600080fd5b5061012a6105d4565b610296600480360360208110156102d357600080fd5b5035610680565b3480156102e657600080fd5b5061012a610683565b3480156102fb57600080fd5b506102966004803603602081101561031257600080fd5b503561069a565b34801561032557600080fd5b506102966106a0565b34801561033a57600080fd5b506102966106a6565b34801561034f57600080fd5b506103586106ac565b6040805160ff9092168252519081900360200190f35b34801561037a57600080fd5b5061012a6004803603602081101561039157600080fd5b5035600160a060020a03166106b1565b3480156103ad57600080fd5b506104e0600480360360608110156103c457600080fd5b8101906020810181356401000000008111156103df57600080fd5b8201836020820111156103f157600080fd5b8035906020019184602083028401116401000000008311171561041357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561046357600080fd5b82018360208201111561047557600080fd5b8035906020019184602083028401116401000000008311171561049757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050509035600160a060020a0316915061070c9050565b6040805160ff958616815293851660208501529190931682820152606082019290925290519081900360800190f35b61029661071b565b610296610720565b34801561052b57600080fd5b50610141610789565b34801561054057600080fd5b50610141610798565b34801561055557600080fd5b506103586107a7565b34801561056a57600080fd5b506102966107ac565b34801561057f57600080fd5b506103586107b1565b34801561059457600080fd5b5061012a600480360360208110156105ab57600080fd5b5035600160a060020a03166107b6565b600254600160a060020a031681565b6000949350505050565b600654600160a060020a031633146105eb57600080fd5b600033905030600160a060020a031681600160a060020a0316632310167f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561063357600080fd5b505afa158015610647573d6000803e3d6000fd5b505050506040513d602081101561065d57600080fd5b5051600160a060020a03161461067257600080fd5b600354600160a060020a0316ff5b90565b600354600160a060020a0316331461067257600080fd5b50600090565b60055481565b60015481565b600281565b600254600160a060020a031633146106c857600080fd5b600160a060020a03811615156106dd57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60076000808093509350935093565b600090565b60008061072b61071b565b9050806064148061073d57508061044c145b15610766576006805473ffffffffffffffffffffffffffffffffffffffff191633179055610784565b6006805473ffffffffffffffffffffffffffffffffffffffff191690555b905090565b600354600160a060020a031681565b600454600160a060020a031681565b600181565b606490565b600481565b600354600160a060020a031633146107cd57600080fd5b600160a060020a03811615156107e257600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a723058203577a7ed623c17aea245289ff898b3f6b6ffdb825ed54a1ae384ab1285ba839f0029",
}

// ContentABI is the input ABI used to generate the binding from.
// Deprecated: Use ContentMetaData.ABI instead.
var ContentABI = ContentMetaData.ABI

// Deprecated: Use ContentMetaData.Sigs instead.
// ContentFuncSigs maps the 4-byte function signature to its string representation.
var ContentFuncSigs = ContentMetaData.Sigs

// ContentBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContentMetaData.Bin instead.
var ContentBin = ContentMetaData.Bin

// DeployContent deploys a new Ethereum contract, binding an instance of Content to it.
func DeployContent(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Content, error) {
	parsed, err := ParsedABI(K_Content)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContentBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Content{ContentCaller: ContentCaller{contract: contract}, ContentTransactor: ContentTransactor{contract: contract}, ContentFilterer: ContentFilterer{contract: contract}}, nil
}

// Content is an auto generated Go binding around an Ethereum contract.
type Content struct {
	ContentCaller     // Read-only binding to the contract
	ContentTransactor // Write-only binding to the contract
	ContentFilterer   // Log filterer for contract events
}

// ContentCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContentCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContentTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContentTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContentFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContentFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewContent creates a new instance of Content, bound to a specific deployed contract.
func NewContent(address common.Address, backend bind.ContractBackend) (*Content, error) {
	contract, err := bindContent(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Content{ContentCaller: ContentCaller{contract: contract}, ContentTransactor: ContentTransactor{contract: contract}, ContentFilterer: ContentFilterer{contract: contract}}, nil
}

// NewContentCaller creates a new read-only instance of Content, bound to a specific deployed contract.
func NewContentCaller(address common.Address, caller bind.ContractCaller) (*ContentCaller, error) {
	contract, err := bindContent(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContentCaller{contract: contract}, nil
}

// NewContentTransactor creates a new write-only instance of Content, bound to a specific deployed contract.
func NewContentTransactor(address common.Address, transactor bind.ContractTransactor) (*ContentTransactor, error) {
	contract, err := bindContent(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContentTransactor{contract: contract}, nil
}

// NewContentFilterer creates a new log filterer instance of Content, bound to a specific deployed contract.
func NewContentFilterer(address common.Address, filterer bind.ContractFilterer) (*ContentFilterer, error) {
	contract, err := bindContent(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContentFilterer{contract: contract}, nil
}

// bindContent binds a generic wrapper to an already deployed contract.
func bindContent(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Content)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() view returns(uint8)
func (_Content *ContentCaller) DEFAULTACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Content.contract.Call(opts, &out, "DEFAULT_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() view returns(uint8)
func (_Content *ContentCaller) DEFAULTCHARGE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Content.contract.Call(opts, &out, "DEFAULT_CHARGE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() view returns(uint8)
func (_Content *ContentCaller) DEFAULTSEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Content.contract.Call(opts, &out, "DEFAULT_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_Content *ContentCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Content.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_Content *ContentCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Content.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Content *ContentCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Content.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RunAccessInfo is a free data retrieval call binding the contract method 0x74ba4609.
//
// Solidity: function runAccessInfo(bytes32[] , address[] , address ) view returns(uint8, uint8, uint8, uint256)
func (_Content *ContentCaller) RunAccessInfo(opts *bind.CallOpts, arg0 [][32]byte, arg1 []common.Address, arg2 common.Address) (uint8, uint8, uint8, *big.Int, error) {
	var out []interface{}
	err := _Content.contract.Call(opts, &out, "runAccessInfo", arg0, arg1, arg2)

	if err != nil {
		return *new(uint8), *new(uint8), *new(uint8), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)
	out2 := *abi.ConvertType(out[2], new(uint8)).(*uint8)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, err

}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) view returns(bytes32)
func (_Content *ContentCaller) RunDescribeStatus(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Content.contract.Call(opts, &out, "runDescribeStatus", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_Content *ContentCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Content.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_Content *ContentCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Content.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CommandKill is a paid mutator transaction binding the contract method 0x2de3ecd1.
//
// Solidity: function commandKill() returns()
func (_Content *ContentTransactor) CommandKill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "commandKill")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Content *ContentTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "kill")
}

// RunAccess is a paid mutator transaction binding the contract method 0xf9b4aa02.
//
// Solidity: function runAccess(uint256 , bytes32[] , address[] , address ) payable returns(uint256)
func (_Content *ContentTransactor) RunAccess(opts *bind.TransactOpts, arg0 *big.Int, arg1 [][32]byte, arg2 []common.Address, arg3 common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runAccess", arg0, arg1, arg2, arg3)
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() payable returns(uint256)
func (_Content *ContentTransactor) RunCreate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runCreate")
}

// RunEdit is a paid mutator transaction binding the contract method 0xc9f3d94c.
//
// Solidity: function runEdit() returns(uint256)
func (_Content *ContentTransactor) RunEdit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runEdit")
}

// RunFinalize is a paid mutator transaction binding the contract method 0x1a485ccd.
//
// Solidity: function runFinalize(uint256 , bytes32[] , address[] , address ) payable returns(uint256)
func (_Content *ContentTransactor) RunFinalize(opts *bind.TransactOpts, arg0 *big.Int, arg1 [][32]byte, arg2 []common.Address, arg3 common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runFinalize", arg0, arg1, arg2, arg3)
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() payable returns(uint256)
func (_Content *ContentTransactor) RunKill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runKill")
}

// RunKillExt is a paid mutator transaction binding the contract method 0x860b2492.
//
// Solidity: function runKillExt() payable returns(uint256)
func (_Content *ContentTransactor) RunKillExt(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runKillExt")
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) payable returns(int256)
func (_Content *ContentTransactor) RunStatusChange(opts *bind.TransactOpts, proposed_status_code *big.Int) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runStatusChange", proposed_status_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Content *ContentTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Content *ContentTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Content *ContentTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Content.contract.RawTransact(opts, calldata)
}

// ContentLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the Content contract.
type ContentLogIterator struct {
	Event *ContentLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLog represents a Log event raised by the Content contract.
type ContentLog struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Content *ContentFilterer) FilterLog(opts *bind.FilterOpts) (*ContentLogIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return &ContentLogIterator{contract: _Content.contract, event: "Log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Content *ContentFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *ContentLog) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLog)
				if err := _Content.contract.UnpackLog(event, "Log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Content *ContentFilterer) ParseLog(log types.Log) (*ContentLog, error) {
	event := new(ContentLog)
	if err := _Content.contract.UnpackLog(event, "Log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the Content contract.
type ContentLogAddressIterator struct {
	Event *ContentLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogAddress represents a LogAddress event raised by the Content contract.
type ContentLogAddress struct {
	Label string
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Content *ContentFilterer) FilterLogAddress(opts *bind.FilterOpts) (*ContentLogAddressIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return &ContentLogAddressIterator{contract: _Content.contract, event: "LogAddress", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Content *ContentFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *ContentLogAddress) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogAddress)
				if err := _Content.contract.UnpackLog(event, "LogAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Content *ContentFilterer) ParseLogAddress(log types.Log) (*ContentLogAddress, error) {
	event := new(ContentLogAddress)
	if err := _Content.contract.UnpackLog(event, "LogAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentLogBoolIterator is returned from FilterLogBool and is used to iterate over the raw logs and unpacked data for LogBool events raised by the Content contract.
type ContentLogBoolIterator struct {
	Event *ContentLogBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogBool represents a LogBool event raised by the Content contract.
type ContentLogBool struct {
	Label string
	B     bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBool is a free log retrieval operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Content *ContentFilterer) FilterLogBool(opts *bind.FilterOpts) (*ContentLogBoolIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return &ContentLogBoolIterator{contract: _Content.contract, event: "LogBool", logs: logs, sub: sub}, nil
}

// WatchLogBool is a free log subscription operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Content *ContentFilterer) WatchLogBool(opts *bind.WatchOpts, sink chan<- *ContentLogBool) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogBool)
				if err := _Content.contract.UnpackLog(event, "LogBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBool is a log parse operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Content *ContentFilterer) ParseLogBool(log types.Log) (*ContentLogBool, error) {
	event := new(ContentLogBool)
	if err := _Content.contract.UnpackLog(event, "LogBool", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the Content contract.
type ContentLogBytes32Iterator struct {
	Event *ContentLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogBytes32 represents a LogBytes32 event raised by the Content contract.
type ContentLogBytes32 struct {
	Label string
	B     [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Content *ContentFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*ContentLogBytes32Iterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return &ContentLogBytes32Iterator{contract: _Content.contract, event: "LogBytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Content *ContentFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *ContentLogBytes32) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogBytes32)
				if err := _Content.contract.UnpackLog(event, "LogBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Content *ContentFilterer) ParseLogBytes32(log types.Log) (*ContentLogBytes32, error) {
	event := new(ContentLogBytes32)
	if err := _Content.contract.UnpackLog(event, "LogBytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentLogInt256Iterator is returned from FilterLogInt256 and is used to iterate over the raw logs and unpacked data for LogInt256 events raised by the Content contract.
type ContentLogInt256Iterator struct {
	Event *ContentLogInt256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogInt256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogInt256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogInt256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogInt256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogInt256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogInt256 represents a LogInt256 event raised by the Content contract.
type ContentLogInt256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogInt256 is a free log retrieval operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Content *ContentFilterer) FilterLogInt256(opts *bind.FilterOpts) (*ContentLogInt256Iterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return &ContentLogInt256Iterator{contract: _Content.contract, event: "LogInt256", logs: logs, sub: sub}, nil
}

// WatchLogInt256 is a free log subscription operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Content *ContentFilterer) WatchLogInt256(opts *bind.WatchOpts, sink chan<- *ContentLogInt256) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogInt256)
				if err := _Content.contract.UnpackLog(event, "LogInt256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt256 is a log parse operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Content *ContentFilterer) ParseLogInt256(log types.Log) (*ContentLogInt256, error) {
	event := new(ContentLogInt256)
	if err := _Content.contract.UnpackLog(event, "LogInt256", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentLogPaymentIterator is returned from FilterLogPayment and is used to iterate over the raw logs and unpacked data for LogPayment events raised by the Content contract.
type ContentLogPaymentIterator struct {
	Event *ContentLogPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogPayment represents a LogPayment event raised by the Content contract.
type ContentLogPayment struct {
	Label  string
	Payee  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogPayment is a free log retrieval operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_Content *ContentFilterer) FilterLogPayment(opts *bind.FilterOpts) (*ContentLogPaymentIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return &ContentLogPaymentIterator{contract: _Content.contract, event: "LogPayment", logs: logs, sub: sub}, nil
}

// WatchLogPayment is a free log subscription operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_Content *ContentFilterer) WatchLogPayment(opts *bind.WatchOpts, sink chan<- *ContentLogPayment) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogPayment)
				if err := _Content.contract.UnpackLog(event, "LogPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogPayment is a log parse operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_Content *ContentFilterer) ParseLogPayment(log types.Log) (*ContentLogPayment, error) {
	event := new(ContentLogPayment)
	if err := _Content.contract.UnpackLog(event, "LogPayment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentLogUint256Iterator is returned from FilterLogUint256 and is used to iterate over the raw logs and unpacked data for LogUint256 events raised by the Content contract.
type ContentLogUint256Iterator struct {
	Event *ContentLogUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogUint256 represents a LogUint256 event raised by the Content contract.
type ContentLogUint256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogUint256 is a free log retrieval operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Content *ContentFilterer) FilterLogUint256(opts *bind.FilterOpts) (*ContentLogUint256Iterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return &ContentLogUint256Iterator{contract: _Content.contract, event: "LogUint256", logs: logs, sub: sub}, nil
}

// WatchLogUint256 is a free log subscription operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Content *ContentFilterer) WatchLogUint256(opts *bind.WatchOpts, sink chan<- *ContentLogUint256) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogUint256)
				if err := _Content.contract.UnpackLog(event, "LogUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint256 is a log parse operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Content *ContentFilterer) ParseLogUint256(log types.Log) (*ContentLogUint256, error) {
	event := new(ContentLogUint256)
	if err := _Content.contract.UnpackLog(event, "LogUint256", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentRunAccessIterator is returned from FilterRunAccess and is used to iterate over the raw logs and unpacked data for RunAccess events raised by the Content contract.
type ContentRunAccessIterator struct {
	Event *ContentRunAccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunAccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunAccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunAccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunAccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunAccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunAccess represents a RunAccess event raised by the Content contract.
type ContentRunAccess struct {
	RequestNonce *big.Int
	Result       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRunAccess is a free log retrieval operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestNonce, uint256 result)
func (_Content *ContentFilterer) FilterRunAccess(opts *bind.FilterOpts) (*ContentRunAccessIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return &ContentRunAccessIterator{contract: _Content.contract, event: "RunAccess", logs: logs, sub: sub}, nil
}

// WatchRunAccess is a free log subscription operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestNonce, uint256 result)
func (_Content *ContentFilterer) WatchRunAccess(opts *bind.WatchOpts, sink chan<- *ContentRunAccess) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunAccess)
				if err := _Content.contract.UnpackLog(event, "RunAccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccess is a log parse operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestNonce, uint256 result)
func (_Content *ContentFilterer) ParseRunAccess(log types.Log) (*ContentRunAccess, error) {
	event := new(ContentRunAccess)
	if err := _Content.contract.UnpackLog(event, "RunAccess", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentRunAccessChargeIterator is returned from FilterRunAccessCharge and is used to iterate over the raw logs and unpacked data for RunAccessCharge events raised by the Content contract.
type ContentRunAccessChargeIterator struct {
	Event *ContentRunAccessCharge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunAccessChargeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunAccessCharge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunAccessCharge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunAccessChargeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunAccessChargeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunAccessCharge represents a RunAccessCharge event raised by the Content contract.
type ContentRunAccessCharge struct {
	CalculatedAccessCharge *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRunAccessCharge is a free log retrieval operation binding the contract event 0xe1f170f83120da6c17cd0ed37a683fc996637c63d2c94a60c806d4cb7466f47b.
//
// Solidity: event RunAccessCharge(int256 calculatedAccessCharge)
func (_Content *ContentFilterer) FilterRunAccessCharge(opts *bind.FilterOpts) (*ContentRunAccessChargeIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return &ContentRunAccessChargeIterator{contract: _Content.contract, event: "RunAccessCharge", logs: logs, sub: sub}, nil
}

// WatchRunAccessCharge is a free log subscription operation binding the contract event 0xe1f170f83120da6c17cd0ed37a683fc996637c63d2c94a60c806d4cb7466f47b.
//
// Solidity: event RunAccessCharge(int256 calculatedAccessCharge)
func (_Content *ContentFilterer) WatchRunAccessCharge(opts *bind.WatchOpts, sink chan<- *ContentRunAccessCharge) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunAccessCharge)
				if err := _Content.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccessCharge is a log parse operation binding the contract event 0xe1f170f83120da6c17cd0ed37a683fc996637c63d2c94a60c806d4cb7466f47b.
//
// Solidity: event RunAccessCharge(int256 calculatedAccessCharge)
func (_Content *ContentFilterer) ParseRunAccessCharge(log types.Log) (*ContentRunAccessCharge, error) {
	event := new(ContentRunAccessCharge)
	if err := _Content.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentRunCreateIterator is returned from FilterRunCreate and is used to iterate over the raw logs and unpacked data for RunCreate events raised by the Content contract.
type ContentRunCreateIterator struct {
	Event *ContentRunCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunCreate represents a RunCreate event raised by the Content contract.
type ContentRunCreate struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunCreate is a free log retrieval operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_Content *ContentFilterer) FilterRunCreate(opts *bind.FilterOpts) (*ContentRunCreateIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return &ContentRunCreateIterator{contract: _Content.contract, event: "RunCreate", logs: logs, sub: sub}, nil
}

// WatchRunCreate is a free log subscription operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_Content *ContentFilterer) WatchRunCreate(opts *bind.WatchOpts, sink chan<- *ContentRunCreate) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunCreate)
				if err := _Content.contract.UnpackLog(event, "RunCreate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunCreate is a log parse operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_Content *ContentFilterer) ParseRunCreate(log types.Log) (*ContentRunCreate, error) {
	event := new(ContentRunCreate)
	if err := _Content.contract.UnpackLog(event, "RunCreate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentRunFinalizeIterator is returned from FilterRunFinalize and is used to iterate over the raw logs and unpacked data for RunFinalize events raised by the Content contract.
type ContentRunFinalizeIterator struct {
	Event *ContentRunFinalize // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunFinalizeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunFinalize)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunFinalize)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunFinalizeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunFinalizeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunFinalize represents a RunFinalize event raised by the Content contract.
type ContentRunFinalize struct {
	RequestNonce *big.Int
	Result       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRunFinalize is a free log retrieval operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestNonce, uint256 result)
func (_Content *ContentFilterer) FilterRunFinalize(opts *bind.FilterOpts) (*ContentRunFinalizeIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return &ContentRunFinalizeIterator{contract: _Content.contract, event: "RunFinalize", logs: logs, sub: sub}, nil
}

// WatchRunFinalize is a free log subscription operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestNonce, uint256 result)
func (_Content *ContentFilterer) WatchRunFinalize(opts *bind.WatchOpts, sink chan<- *ContentRunFinalize) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunFinalize)
				if err := _Content.contract.UnpackLog(event, "RunFinalize", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunFinalize is a log parse operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestNonce, uint256 result)
func (_Content *ContentFilterer) ParseRunFinalize(log types.Log) (*ContentRunFinalize, error) {
	event := new(ContentRunFinalize)
	if err := _Content.contract.UnpackLog(event, "RunFinalize", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentRunKillIterator is returned from FilterRunKill and is used to iterate over the raw logs and unpacked data for RunKill events raised by the Content contract.
type ContentRunKillIterator struct {
	Event *ContentRunKill // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunKillIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunKill)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunKill)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunKillIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunKillIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunKill represents a RunKill event raised by the Content contract.
type ContentRunKill struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunKill is a free log retrieval operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_Content *ContentFilterer) FilterRunKill(opts *bind.FilterOpts) (*ContentRunKillIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return &ContentRunKillIterator{contract: _Content.contract, event: "RunKill", logs: logs, sub: sub}, nil
}

// WatchRunKill is a free log subscription operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_Content *ContentFilterer) WatchRunKill(opts *bind.WatchOpts, sink chan<- *ContentRunKill) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunKill)
				if err := _Content.contract.UnpackLog(event, "RunKill", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunKill is a log parse operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_Content *ContentFilterer) ParseRunKill(log types.Log) (*ContentRunKill, error) {
	event := new(ContentRunKill)
	if err := _Content.contract.UnpackLog(event, "RunKill", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentRunStatusChangeIterator is returned from FilterRunStatusChange and is used to iterate over the raw logs and unpacked data for RunStatusChange events raised by the Content contract.
type ContentRunStatusChangeIterator struct {
	Event *ContentRunStatusChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunStatusChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunStatusChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunStatusChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunStatusChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunStatusChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunStatusChange represents a RunStatusChange event raised by the Content contract.
type ContentRunStatusChange struct {
	ProposedStatusCode *big.Int
	ReturnStatusCode   *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRunStatusChange is a free log retrieval operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_Content *ContentFilterer) FilterRunStatusChange(opts *bind.FilterOpts) (*ContentRunStatusChangeIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return &ContentRunStatusChangeIterator{contract: _Content.contract, event: "RunStatusChange", logs: logs, sub: sub}, nil
}

// WatchRunStatusChange is a free log subscription operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_Content *ContentFilterer) WatchRunStatusChange(opts *bind.WatchOpts, sink chan<- *ContentRunStatusChange) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunStatusChange)
				if err := _Content.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunStatusChange is a log parse operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_Content *ContentFilterer) ParseRunStatusChange(log types.Log) (*ContentRunStatusChange, error) {
	event := new(ContentRunStatusChange)
	if err := _Content.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentFactoryHelperMetaData contains all meta data concerning the ContentFactoryHelper contract.
var ContentFactoryHelperMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"getContentObjectBytecode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"5799d6a8": "getContentObjectBytecode()",
	},
	Bin: "",
}

// ContentFactoryHelperABI is the input ABI used to generate the binding from.
// Deprecated: Use ContentFactoryHelperMetaData.ABI instead.
var ContentFactoryHelperABI = ContentFactoryHelperMetaData.ABI

// Deprecated: Use ContentFactoryHelperMetaData.Sigs instead.
// ContentFactoryHelperFuncSigs maps the 4-byte function signature to its string representation.
var ContentFactoryHelperFuncSigs = ContentFactoryHelperMetaData.Sigs

// ContentFactoryHelperBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContentFactoryHelperMetaData.Bin instead.
var ContentFactoryHelperBin = ContentFactoryHelperMetaData.Bin

// DeployContentFactoryHelper deploys a new Ethereum contract, binding an instance of ContentFactoryHelper to it.
func DeployContentFactoryHelper(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ContentFactoryHelper, error) {
	parsed, err := ParsedABI(K_ContentFactoryHelper)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContentFactoryHelperBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContentFactoryHelper{ContentFactoryHelperCaller: ContentFactoryHelperCaller{contract: contract}, ContentFactoryHelperTransactor: ContentFactoryHelperTransactor{contract: contract}, ContentFactoryHelperFilterer: ContentFactoryHelperFilterer{contract: contract}}, nil
}

// ContentFactoryHelper is an auto generated Go binding around an Ethereum contract.
type ContentFactoryHelper struct {
	ContentFactoryHelperCaller     // Read-only binding to the contract
	ContentFactoryHelperTransactor // Write-only binding to the contract
	ContentFactoryHelperFilterer   // Log filterer for contract events
}

// ContentFactoryHelperCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContentFactoryHelperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContentFactoryHelperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContentFactoryHelperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContentFactoryHelperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContentFactoryHelperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewContentFactoryHelper creates a new instance of ContentFactoryHelper, bound to a specific deployed contract.
func NewContentFactoryHelper(address common.Address, backend bind.ContractBackend) (*ContentFactoryHelper, error) {
	contract, err := bindContentFactoryHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContentFactoryHelper{ContentFactoryHelperCaller: ContentFactoryHelperCaller{contract: contract}, ContentFactoryHelperTransactor: ContentFactoryHelperTransactor{contract: contract}, ContentFactoryHelperFilterer: ContentFactoryHelperFilterer{contract: contract}}, nil
}

// NewContentFactoryHelperCaller creates a new read-only instance of ContentFactoryHelper, bound to a specific deployed contract.
func NewContentFactoryHelperCaller(address common.Address, caller bind.ContractCaller) (*ContentFactoryHelperCaller, error) {
	contract, err := bindContentFactoryHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContentFactoryHelperCaller{contract: contract}, nil
}

// NewContentFactoryHelperTransactor creates a new write-only instance of ContentFactoryHelper, bound to a specific deployed contract.
func NewContentFactoryHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*ContentFactoryHelperTransactor, error) {
	contract, err := bindContentFactoryHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContentFactoryHelperTransactor{contract: contract}, nil
}

// NewContentFactoryHelperFilterer creates a new log filterer instance of ContentFactoryHelper, bound to a specific deployed contract.
func NewContentFactoryHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*ContentFactoryHelperFilterer, error) {
	contract, err := bindContentFactoryHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContentFactoryHelperFilterer{contract: contract}, nil
}

// bindContentFactoryHelper binds a generic wrapper to an already deployed contract.
func bindContentFactoryHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_ContentFactoryHelper)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// GetContentObjectBytecode is a free data retrieval call binding the contract method 0x5799d6a8.
//
// Solidity: function getContentObjectBytecode() pure returns(bytes)
func (_ContentFactoryHelper *ContentFactoryHelperCaller) GetContentObjectBytecode(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _ContentFactoryHelper.contract.Call(opts, &out, "getContentObjectBytecode")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// CounterObjectMetaData contains all meta data concerning the CounterObject contract.
var CounterObjectMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"setAndGetBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"incrementCounter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"}],\"name\":\"deleteGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint32\"}],\"name\":\"CounterIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ord\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"prev\",\"type\":\"bool\"}],\"name\":\"BitSetAndGet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"}],\"name\":\"WordGroupDeleted\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"af570c04": "contentSpace()",
		"02d05d3f": "creator()",
		"e57097c9": "deleteGroup(bytes32)",
		"30f846a2": "getBit(bytes32,uint8)",
		"e1954b61": "getCounter(bytes32,uint8)",
		"7558cbf0": "incrementCounter(bytes32,uint8)",
		"24d7806c": "isAdmin(address)",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"24d7c18d": "setAndGetBit(bytes32,uint8)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
	},
	Bin: "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060015560028054600160a060020a03199081163217909155600380549091163317905561080f8061007b6000396000f3fe6080604052600436106100dd5760003560e01c80636d2e4b1b1161007f578063af570c0411610059578063af570c0414610289578063e1954b611461029e578063e57097c9146102ea578063f2fde38b14610314576100dd565b80636d2e4b1b1461020e5780637558cbf0146102415780638da5cb5b14610274576100dd565b806330f846a2116100bb57806330f846a21461018a57806341c0e1b5146101bd57806354fd4d50146101d25780635f4fcae1146101f9576100dd565b806302d05d3f146100df57806324d7806c1461011057806324d7c18d14610157575b005b3480156100eb57600080fd5b506100f4610347565b60408051600160a060020a039092168252519081900360200190f35b34801561011c57600080fd5b506101436004803603602081101561013357600080fd5b5035600160a060020a0316610356565b604080519115158252519081900360200190f35b34801561016357600080fd5b506101436004803603604081101561017a57600080fd5b508035906020013560ff16610380565b34801561019657600080fd5b50610143600480360360408110156101ad57600080fd5b508035906020013560ff166103a7565b3480156101c957600080fd5b506100dd610414565b3480156101de57600080fd5b506101e7610439565b60408051918252519081900360200190f35b34801561020557600080fd5b506101e761043f565b34801561021a57600080fd5b506100dd6004803603602081101561023157600080fd5b5035600160a060020a0316610445565b34801561024d57600080fd5b506100dd6004803603604081101561026457600080fd5b508035906020013560ff166104a0565b34801561028057600080fd5b506100f46105a1565b34801561029557600080fd5b506100f46105b0565b3480156102aa57600080fd5b506102d1600480360360408110156102c157600080fd5b508035906020013560ff166105bf565b6040805163ffffffff9092168252519081900360200190f35b3480156102f657600080fd5b506100dd6004803603602081101561030d57600080fd5b5035610611565b34801561032057600080fd5b506100dd6004803603602081101561033757600080fd5b5035600160a060020a0316610676565b600254600160a060020a031681565b600354600090600160a060020a03838116911614156103775750600161037b565b5060005b919050565b600061038b33610356565b151561039657600080fd5b6103a083836106d1565b9392505050565b6000828152600560209081526040822060ff8481169290920490911690601f8416906001821b90819084600881106103db57fe5b600881049091015460046007909216919091026101000a90041663ffffffff161561040757600161040a565b60005b9695505050505050565b600354600160a060020a0316331461042b57600080fd5b600354600160a060020a0316ff5b60005481565b60015481565b600254600160a060020a0316331461045c57600080fd5b600160a060020a038116151561047157600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6104a933610356565b15156104b457600080fd5b600860ff8216106104c457600080fd5b600082815260056020526040812060ff8316600881106104e057fe5b600891828204019190066004029054906101000a900463ffffffff169050600560008481526020019081526020016000206000018260ff1660088110151561052457fe5b600881049091018054600163ffffffff60046007909516949094026101000a80830485169190910184168102908402199091161790556040805185815260ff8516602082015291831682820152517f77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f9181900360600190a1505050565b600354600160a060020a031681565b600454600160a060020a031681565b6000600860ff8316106105d157600080fd5b600083815260056020526040902060ff8316600881106105ed57fe5b600891828204019190066004029054906101000a900463ffffffff16905092915050565b61061a33610356565b151561062557600080fd5b60008181526005602052604081209061063e82826107dc565b50506040805182815290517f87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f9181900360200190a150565b600354600160a060020a0316331461068d57600080fd5b600160a060020a03811615156106a257600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000828152600560209081526040822060ff8481169290920490911690601f8416906001821b9084908290856008811061070757fe5b600881049091015460046007909216919091026101000a90041663ffffffff1615610733576001610736565b60005b905080151561078f5760008781526005602052604090208290856008811061075a57fe5b60088104909101805463ffffffff60046007909416939093026101000a80820484169094178316840292909302199092161790555b6040805188815260ff881660208201528215158183015290517f4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d9181900360600190a19695505050505050565b506000905556fea165627a7a72305820f825697ba051e26e3820b2c45ad5a35c99fe488a75e2459af926ffa5931c85d20029",
}

// CounterObjectABI is the input ABI used to generate the binding from.
// Deprecated: Use CounterObjectMetaData.ABI instead.
var CounterObjectABI = CounterObjectMetaData.ABI

// Deprecated: Use CounterObjectMetaData.Sigs instead.
// CounterObjectFuncSigs maps the 4-byte function signature to its string representation.
var CounterObjectFuncSigs = CounterObjectMetaData.Sigs

// CounterObjectBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CounterObjectMetaData.Bin instead.
var CounterObjectBin = CounterObjectMetaData.Bin

// DeployCounterObject deploys a new Ethereum contract, binding an instance of CounterObject to it.
func DeployCounterObject(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CounterObject, error) {
	parsed, err := ParsedABI(K_CounterObject)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CounterObjectBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CounterObject{CounterObjectCaller: CounterObjectCaller{contract: contract}, CounterObjectTransactor: CounterObjectTransactor{contract: contract}, CounterObjectFilterer: CounterObjectFilterer{contract: contract}}, nil
}

// CounterObject is an auto generated Go binding around an Ethereum contract.
type CounterObject struct {
	CounterObjectCaller     // Read-only binding to the contract
	CounterObjectTransactor // Write-only binding to the contract
	CounterObjectFilterer   // Log filterer for contract events
}

// CounterObjectCaller is an auto generated read-only Go binding around an Ethereum contract.
type CounterObjectCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CounterObjectTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CounterObjectTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CounterObjectFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CounterObjectFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewCounterObject creates a new instance of CounterObject, bound to a specific deployed contract.
func NewCounterObject(address common.Address, backend bind.ContractBackend) (*CounterObject, error) {
	contract, err := bindCounterObject(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CounterObject{CounterObjectCaller: CounterObjectCaller{contract: contract}, CounterObjectTransactor: CounterObjectTransactor{contract: contract}, CounterObjectFilterer: CounterObjectFilterer{contract: contract}}, nil
}

// NewCounterObjectCaller creates a new read-only instance of CounterObject, bound to a specific deployed contract.
func NewCounterObjectCaller(address common.Address, caller bind.ContractCaller) (*CounterObjectCaller, error) {
	contract, err := bindCounterObject(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CounterObjectCaller{contract: contract}, nil
}

// NewCounterObjectTransactor creates a new write-only instance of CounterObject, bound to a specific deployed contract.
func NewCounterObjectTransactor(address common.Address, transactor bind.ContractTransactor) (*CounterObjectTransactor, error) {
	contract, err := bindCounterObject(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CounterObjectTransactor{contract: contract}, nil
}

// NewCounterObjectFilterer creates a new log filterer instance of CounterObject, bound to a specific deployed contract.
func NewCounterObjectFilterer(address common.Address, filterer bind.ContractFilterer) (*CounterObjectFilterer, error) {
	contract, err := bindCounterObject(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CounterObjectFilterer{contract: contract}, nil
}

// bindCounterObject binds a generic wrapper to an already deployed contract.
func bindCounterObject(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_CounterObject)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_CounterObject *CounterObjectCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CounterObject.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_CounterObject *CounterObjectCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CounterObject.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) view returns(bool)
func (_CounterObject *CounterObjectCaller) GetBit(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (bool, error) {
	var out []interface{}
	err := _CounterObject.contract.Call(opts, &out, "getBit", _ident, _ord)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) view returns(uint32)
func (_CounterObject *CounterObjectCaller) GetCounter(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (uint32, error) {
	var out []interface{}
	err := _CounterObject.contract.Call(opts, &out, "getCounter", _ident, _ord)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) view returns(bool)
func (_CounterObject *CounterObjectCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _CounterObject.contract.Call(opts, &out, "isAdmin", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CounterObject *CounterObjectCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CounterObject.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_CounterObject *CounterObjectCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CounterObject.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_CounterObject *CounterObjectCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CounterObject.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_CounterObject *CounterObjectTransactor) DeleteGroup(opts *bind.TransactOpts, _ident [32]byte) (*types.Transaction, error) {
	return _CounterObject.contract.Transact(opts, "deleteGroup", _ident)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_CounterObject *CounterObjectTransactor) IncrementCounter(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _CounterObject.contract.Transact(opts, "incrementCounter", _ident, _ord)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_CounterObject *CounterObjectTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CounterObject.contract.Transact(opts, "kill")
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_CounterObject *CounterObjectTransactor) SetAndGetBit(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _CounterObject.contract.Transact(opts, "setAndGetBit", _ident, _ord)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_CounterObject *CounterObjectTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _CounterObject.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CounterObject *CounterObjectTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _CounterObject.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_CounterObject *CounterObjectTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _CounterObject.contract.RawTransact(opts, calldata)
}

// CounterObjectBitSetAndGetIterator is returned from FilterBitSetAndGet and is used to iterate over the raw logs and unpacked data for BitSetAndGet events raised by the CounterObject contract.
type CounterObjectBitSetAndGetIterator struct {
	Event *CounterObjectBitSetAndGet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CounterObjectBitSetAndGetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CounterObjectBitSetAndGet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CounterObjectBitSetAndGet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CounterObjectBitSetAndGetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CounterObjectBitSetAndGetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CounterObjectBitSetAndGet represents a BitSetAndGet event raised by the CounterObject contract.
type CounterObjectBitSetAndGet struct {
	Ident [32]byte
	Ord   uint8
	Prev  bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBitSetAndGet is a free log retrieval operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_CounterObject *CounterObjectFilterer) FilterBitSetAndGet(opts *bind.FilterOpts) (*CounterObjectBitSetAndGetIterator, error) {

	logs, sub, err := _CounterObject.contract.FilterLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return &CounterObjectBitSetAndGetIterator{contract: _CounterObject.contract, event: "BitSetAndGet", logs: logs, sub: sub}, nil
}

// WatchBitSetAndGet is a free log subscription operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_CounterObject *CounterObjectFilterer) WatchBitSetAndGet(opts *bind.WatchOpts, sink chan<- *CounterObjectBitSetAndGet) (event.Subscription, error) {

	logs, sub, err := _CounterObject.contract.WatchLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CounterObjectBitSetAndGet)
				if err := _CounterObject.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitSetAndGet is a log parse operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_CounterObject *CounterObjectFilterer) ParseBitSetAndGet(log types.Log) (*CounterObjectBitSetAndGet, error) {
	event := new(CounterObjectBitSetAndGet)
	if err := _CounterObject.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CounterObjectCounterIncrementedIterator is returned from FilterCounterIncremented and is used to iterate over the raw logs and unpacked data for CounterIncremented events raised by the CounterObject contract.
type CounterObjectCounterIncrementedIterator struct {
	Event *CounterObjectCounterIncremented // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CounterObjectCounterIncrementedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CounterObjectCounterIncremented)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CounterObjectCounterIncremented)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CounterObjectCounterIncrementedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CounterObjectCounterIncrementedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CounterObjectCounterIncremented represents a CounterIncremented event raised by the CounterObject contract.
type CounterObjectCounterIncremented struct {
	Ident [32]byte
	Slot  uint8
	Val   uint32
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCounterIncremented is a free log retrieval operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_CounterObject *CounterObjectFilterer) FilterCounterIncremented(opts *bind.FilterOpts) (*CounterObjectCounterIncrementedIterator, error) {

	logs, sub, err := _CounterObject.contract.FilterLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return &CounterObjectCounterIncrementedIterator{contract: _CounterObject.contract, event: "CounterIncremented", logs: logs, sub: sub}, nil
}

// WatchCounterIncremented is a free log subscription operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_CounterObject *CounterObjectFilterer) WatchCounterIncremented(opts *bind.WatchOpts, sink chan<- *CounterObjectCounterIncremented) (event.Subscription, error) {

	logs, sub, err := _CounterObject.contract.WatchLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CounterObjectCounterIncremented)
				if err := _CounterObject.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCounterIncremented is a log parse operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_CounterObject *CounterObjectFilterer) ParseCounterIncremented(log types.Log) (*CounterObjectCounterIncremented, error) {
	event := new(CounterObjectCounterIncremented)
	if err := _CounterObject.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CounterObjectWordGroupDeletedIterator is returned from FilterWordGroupDeleted and is used to iterate over the raw logs and unpacked data for WordGroupDeleted events raised by the CounterObject contract.
type CounterObjectWordGroupDeletedIterator struct {
	Event *CounterObjectWordGroupDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CounterObjectWordGroupDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CounterObjectWordGroupDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CounterObjectWordGroupDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CounterObjectWordGroupDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CounterObjectWordGroupDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CounterObjectWordGroupDeleted represents a WordGroupDeleted event raised by the CounterObject contract.
type CounterObjectWordGroupDeleted struct {
	Ident [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWordGroupDeleted is a free log retrieval operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_CounterObject *CounterObjectFilterer) FilterWordGroupDeleted(opts *bind.FilterOpts) (*CounterObjectWordGroupDeletedIterator, error) {

	logs, sub, err := _CounterObject.contract.FilterLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return &CounterObjectWordGroupDeletedIterator{contract: _CounterObject.contract, event: "WordGroupDeleted", logs: logs, sub: sub}, nil
}

// WatchWordGroupDeleted is a free log subscription operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_CounterObject *CounterObjectFilterer) WatchWordGroupDeleted(opts *bind.WatchOpts, sink chan<- *CounterObjectWordGroupDeleted) (event.Subscription, error) {

	logs, sub, err := _CounterObject.contract.WatchLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CounterObjectWordGroupDeleted)
				if err := _CounterObject.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWordGroupDeleted is a log parse operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_CounterObject *CounterObjectFilterer) ParseWordGroupDeleted(log types.Log) (*CounterObjectWordGroupDeleted, error) {
	event := new(CounterObjectWordGroupDeleted)
	if err := _CounterObject.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721ProxyMetaData contains all meta data concerning the ERC721Proxy contract.
var ERC721ProxyMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"externalAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_extAddr\",\"type\":\"address\"},{\"name\":\"_configName\",\"type\":\"string\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"}]",
	Sigs: map[string]string{
		"70a08231": "balanceOf(address)",
		"7bed7493": "configName()",
		"e70347bb": "externalAddress()",
		"54fd4d50": "version()",
	},
	Bin: "0x60806040527f544f444f000000000000000000000000000000000000000000000000000000006000556040516105ac3803806105ac8339810180604052604081101561004a57600080fd5b81516020830180519193928301929164010000000081111561006b57600080fd5b8201602081018481111561007e57600080fd5b815164010000000081118282018710171561009857600080fd5b505060018054600160a060020a031916600160a060020a03871617905580519093506100cd92506002915060208401906100d5565b505050610170565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011657805160ff1916838001178555610143565b82800160010185558215610143579182015b82811115610143578251825591602001919060010190610128565b5061014f929150610153565b5090565b61016d91905b8082111561014f5760008155600101610159565b90565b61042d8061017f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806354fd4d501461005157806370a082311461006b5780637bed74931461009e578063e70347bb1461011b575b600080fd5b61005961014c565b60408051918252519081900360200190f35b6100596004803603602081101561008157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610152565b6100a66102aa565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100e05781810151838201526020016100c8565b50505050905090810190601f16801561010d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610123610335565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60005481565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181526000936102a493919290918301828280156101de5780601f106101b3576101008083540402835291602001916101de565b820191906000526020600020905b8154815290600101906020018083116101c157829003601f168201915b5050600154604080517f62616c616e63654f6628616464726573732900000000000000000000000000008152815190819003601201812073ffffffffffffffffffffffffffffffffffffffff8b81166024808501919091528451808503909101815260449093019093526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909216919091179052911693504392509050610351565b92915050565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561032d5780601f106103025761010080835404028352916020019161032d565b820191906000526020600020905b81548152906001019060200180831161031057829003601f168201915b505050505081565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60008060405180806103dc60269139604051908190036026018120855181835260208a015160048401819052602484018a90526044840189905291945060fd93509091606482019060005b838110156103b9576020818a01810151606484840101520161039c565b506020818383886000fa80801561004c575050519a995050505050505050505056fe63616c6c55696e7428737472696e672c616464726573732c75696e743235362c627974657329a165627a7a72305820d2109fc3158e3238debb9889ab83832f042773371fc121bddf30d456919326450029",
}

// ERC721ProxyABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC721ProxyMetaData.ABI instead.
var ERC721ProxyABI = ERC721ProxyMetaData.ABI

// Deprecated: Use ERC721ProxyMetaData.Sigs instead.
// ERC721ProxyFuncSigs maps the 4-byte function signature to its string representation.
var ERC721ProxyFuncSigs = ERC721ProxyMetaData.Sigs

// ERC721ProxyBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC721ProxyMetaData.Bin instead.
var ERC721ProxyBin = ERC721ProxyMetaData.Bin

// DeployERC721Proxy deploys a new Ethereum contract, binding an instance of ERC721Proxy to it.
func DeployERC721Proxy(auth *bind.TransactOpts, backend bind.ContractBackend, _extAddr common.Address, _configName string) (common.Address, *types.Transaction, *ERC721Proxy, error) {
	parsed, err := ParsedABI(K_ERC721Proxy)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC721ProxyBin), backend, _extAddr, _configName)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC721Proxy{ERC721ProxyCaller: ERC721ProxyCaller{contract: contract}, ERC721ProxyTransactor: ERC721ProxyTransactor{contract: contract}, ERC721ProxyFilterer: ERC721ProxyFilterer{contract: contract}}, nil
}

// ERC721Proxy is an auto generated Go binding around an Ethereum contract.
type ERC721Proxy struct {
	ERC721ProxyCaller     // Read-only binding to the contract
	ERC721ProxyTransactor // Write-only binding to the contract
	ERC721ProxyFilterer   // Log filterer for contract events
}

// ERC721ProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC721ProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721ProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC721ProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721ProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC721ProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewERC721Proxy creates a new instance of ERC721Proxy, bound to a specific deployed contract.
func NewERC721Proxy(address common.Address, backend bind.ContractBackend) (*ERC721Proxy, error) {
	contract, err := bindERC721Proxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC721Proxy{ERC721ProxyCaller: ERC721ProxyCaller{contract: contract}, ERC721ProxyTransactor: ERC721ProxyTransactor{contract: contract}, ERC721ProxyFilterer: ERC721ProxyFilterer{contract: contract}}, nil
}

// NewERC721ProxyCaller creates a new read-only instance of ERC721Proxy, bound to a specific deployed contract.
func NewERC721ProxyCaller(address common.Address, caller bind.ContractCaller) (*ERC721ProxyCaller, error) {
	contract, err := bindERC721Proxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721ProxyCaller{contract: contract}, nil
}

// NewERC721ProxyTransactor creates a new write-only instance of ERC721Proxy, bound to a specific deployed contract.
func NewERC721ProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC721ProxyTransactor, error) {
	contract, err := bindERC721Proxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721ProxyTransactor{contract: contract}, nil
}

// NewERC721ProxyFilterer creates a new log filterer instance of ERC721Proxy, bound to a specific deployed contract.
func NewERC721ProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC721ProxyFilterer, error) {
	contract, err := bindERC721Proxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC721ProxyFilterer{contract: contract}, nil
}

// bindERC721Proxy binds a generic wrapper to an already deployed contract.
func bindERC721Proxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_ERC721Proxy)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_ERC721Proxy *ERC721ProxyCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC721Proxy.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ConfigName is a free data retrieval call binding the contract method 0x7bed7493.
//
// Solidity: function configName() view returns(string)
func (_ERC721Proxy *ERC721ProxyCaller) ConfigName(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC721Proxy.contract.Call(opts, &out, "configName")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ExternalAddress is a free data retrieval call binding the contract method 0xe70347bb.
//
// Solidity: function externalAddress() view returns(address)
func (_ERC721Proxy *ERC721ProxyCaller) ExternalAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC721Proxy.contract.Call(opts, &out, "externalAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_ERC721Proxy *ERC721ProxyCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC721Proxy.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// EditableMetaData contains all meta data concerning the Editable contract.
var EditableMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"accessRequestV3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"indexCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasEditorRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"AccessRequestV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentSpace\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"visibility\",\"type\":\"uint8\"}],\"name\":\"VisibilityChanged\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"97ac4fd2": "CAN_ACCESS()",
		"ef1d7dc2": "CAN_EDIT()",
		"100508a2": "CAN_SEE()",
		"1bf7a912": "accessRequestV3(bytes32[],address[])",
		"6e375427": "canCommit()",
		"14cfabb3": "canConfirm()",
		"81beeb64": "canEdit()",
		"5f6a1301": "clearPending()",
		"9867db74": "commit(string)",
		"375a6e7c": "commitPending()",
		"446e8826": "confirmCommit()",
		"af570c04": "contentSpace()",
		"331b86c0": "countVersionHashes()",
		"02d05d3f": "creator()",
		"e1a70717": "deleteVersion(string)",
		"95a078e8": "hasAccess(address)",
		"67e5c3bf": "hasEditorRight(address)",
		"6380501f": "indexCategory()",
		"41c0e1b5": "kill()",
		"e02dd9c2": "objectHash()",
		"40b87a26": "objectTimestamp()",
		"8da5cb5b": "owner()",
		"00821de3": "parentAddress()",
		"628449fd": "pendingHash()",
		"22e564eb": "setGroupRights(address,uint8,uint8)",
		"0fe1b5a2": "setRights(address,uint8,uint8)",
		"aa024e8b": "setVisibility(uint8)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"c287e0ed": "updateRequest()",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
		"7ca8f618": "versionHashes(uint256)",
		"7886f747": "versionTimestamp(uint256)",
		"29adec14": "visibility()",
	},
	Bin: "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060019081557f41636365737369626c653230323030363236313231363030504f0000000000006005556006805461ff001960ff199091169092179190911690557f4564697461626c653230323030393238313130303030504f000000000000000060075560028054600160a060020a03199081163217909155600380549091163317905561214f806100dc6000396000f3fe6080604052600436106102035760003560e01c80636380501f1161011857806397ac4fd2116100a0578063c287e0ed1161006f578063c287e0ed146107e5578063e02dd9c2146107fa578063e1a707171461080f578063ef1d7dc2146108c2578063f2fde38b146108d757610203565b806397ac4fd2146106db5780639867db74146106f0578063aa024e8b146107a3578063af570c04146107d057610203565b80637886f747116100e75780637886f7471461062a5780637ca8f6181461065457806381beeb641461067e5780638da5cb5b1461069357806395a078e8146106a857610203565b80636380501f1461059a57806367e5c3bf146105af5780636d2e4b1b146105e25780636e3754271461061557610203565b8063331b86c01161019b578063446e88261161016a578063446e8826146104c957806354fd4d50146104d15780635f4fcae1146104e65780635f6a1301146104fb578063628449fd1461051057610203565b8063331b86c014610463578063375a6e7c1461048a57806340b87a261461049f57806341c0e1b5146104b457610203565b806314cfabb3116101d757806314cfabb3146102ba5780631bf7a912146102e357806322e564eb1461040a57806329adec141461044e57610203565b8062821de31461020557806302d05d3f146102365780630fe1b5a21461024b578063100508a21461028f575b005b34801561021157600080fd5b5061021a61090a565b60408051600160a060020a039092168252519081900360200190f35b34801561024257600080fd5b5061021a61091a565b34801561025757600080fd5b506102036004803603606081101561026e57600080fd5b50600160a060020a038135169060ff60208201358116916040013516610929565b34801561029b57600080fd5b506102a4610a0b565b6040805160ff9092168252519081900360200190f35b3480156102c657600080fd5b506102cf610a10565b604080519115158252519081900360200190f35b6102cf600480360360408110156102f957600080fd5b81019060208101813564010000000081111561031457600080fd5b82018360208201111561032657600080fd5b8035906020019184602083028401116401000000008311171561034857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561039857600080fd5b8201836020820111156103aa57600080fd5b803590602001918460208302840111640100000000831117156103cc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610a15945050505050565b34801561041657600080fd5b506102036004803603606081101561042d57600080fd5b50600160a060020a038135169060ff60208201358116916040013516610ab8565b34801561045a57600080fd5b506102a4610f7c565b34801561046f57600080fd5b50610478610f85565b60408051918252519081900360200190f35b34801561049657600080fd5b506102cf610f8b565b3480156104ab57600080fd5b50610478610f94565b3480156104c057600080fd5b50610203610f9a565b6102cf610fbf565b3480156104dd57600080fd5b506104786111c3565b3480156104f257600080fd5b506104786111c9565b34801561050757600080fd5b506102036111cf565b34801561051c57600080fd5b5061052561120d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561055f578181015183820152602001610547565b50505050905090810190601f16801561058c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105a657600080fd5b506102a461129b565b3480156105bb57600080fd5b506102cf600480360360208110156105d257600080fd5b5035600160a060020a03166112a9565b3480156105ee57600080fd5b506102036004803603602081101561060557600080fd5b5035600160a060020a0316611441565b34801561062157600080fd5b506102cf61149c565b34801561063657600080fd5b506104786004803603602081101561064d57600080fd5b50356114ad565b34801561066057600080fd5b506105256004803603602081101561067757600080fd5b50356114cc565b34801561068a57600080fd5b506102cf611540565b34801561069f57600080fd5b5061021a611550565b3480156106b457600080fd5b506102cf600480360360208110156106cb57600080fd5b5035600160a060020a031661155f565b3480156106e757600080fd5b506102a46116b9565b3480156106fc57600080fd5b506102036004803603602081101561071357600080fd5b81019060208101813564010000000081111561072e57600080fd5b82018360208201111561074057600080fd5b8035906020019184600183028401116401000000008311171561076257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506116be945050505050565b3480156107af57600080fd5b50610203600480360360208110156107c657600080fd5b503560ff166117eb565b3480156107dc57600080fd5b5061021a611865565b3480156107f157600080fd5b50610203611874565b34801561080657600080fd5b50610525611936565b34801561081b57600080fd5b506104786004803603602081101561083257600080fd5b81019060208101813564010000000081111561084d57600080fd5b82018360208201111561085f57600080fd5b8035906020019184600183028401116401000000008311171561088157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611991945050505050565b3480156108ce57600080fd5b506102a4611e02565b3480156108e357600080fd5b50610203600480360360208110156108fa57600080fd5b5035600160a060020a0316611e07565b600454600160a060020a03165b90565b600254600160a060020a031681565b610931611540565b151561093c57600080fd5b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd91602480820192602092909190829003018186803b1580156109ab57600080fd5b505afa1580156109bf573d6000803e3d6000fd5b505050506040513d60208110156109d557600080fd5b50519050600160a060020a03811615156109f9576109f4858585610ab8565b610a04565b610a04818585610ab8565b5050505050565b600181565b600090565b6000610a203361155f565b1515610a2b57600080fd5b604080513060601b602080830191909152426034808401829052845180850390910181526054840180865281519190930120600090811c9092526074830182905260948301919091523360b48301526103e80260d482015290517f545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c79181900360f40190a150600192915050565b600083905080600160a060020a031663091600e66040518163ffffffff1660e01b815260040160206040518083038186803b158015610af657600080fd5b505afa158015610b0a573d6000803e3d6000fd5b505050506040513d6020811015610b2057600080fd5b5051600654610100900460ff90811691161415610bc557604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691633def514091606480830192600092919082900301818387803b158015610ba857600080fd5b505af1158015610bbc573d6000803e3d6000fd5b50505050610f76565b80600160a060020a03166312915a306040518163ffffffff1660e01b815260040160206040518083038186803b158015610bfe57600080fd5b505afa158015610c12573d6000803e3d6000fd5b505050506040513d6020811015610c2857600080fd5b5051600654610100900460ff90811691161415610cb057604080517ff17bda9100000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163f17bda9191606480830192600092919082900301818387803b158015610ba857600080fd5b80600160a060020a03166316aed2326040518163ffffffff1660e01b815260040160206040518083038186803b158015610ce957600080fd5b505afa158015610cfd573d6000803e3d6000fd5b505050506040513d6020811015610d1357600080fd5b5051600654610100900460ff90811691161415610d9b57604080517f7cbb7bf200000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691637cbb7bf291606480830192600092919082900301818387803b158015610ba857600080fd5b80600160a060020a03166368a0469a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dd457600080fd5b505afa158015610de8573d6000803e3d6000fd5b505050506040513d6020811015610dfe57600080fd5b5051600654610100900460ff90811691161415610e8657604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a03831691638635adb591606480830192600092919082900301818387803b158015610ba857600080fd5b80600160a060020a0316636373a4116040518163ffffffff1660e01b815260040160206040518083038186803b158015610ebf57600080fd5b505afa158015610ed3573d6000803e3d6000fd5b505050506040513d6020811015610ee957600080fd5b5051600654610100900460ff90811691161415610f7157604080517f224dcba000000000000000000000000000000000000000000000000000000000815230600482015260ff8086166024830152841660448201529051600160a060020a0383169163224dcba091606480830192600092919082900301818387803b158015610ba857600080fd5b600080fd5b50505050565b60065460ff1681565b600a5490565b600d5460ff1681565b60095481565b600354600160a060020a03163314610fb157600080fd5b600354600160a060020a0316ff5b6000610fc9610a10565b1515610fd457600080fd5b600d5460ff161515610fe557600080fd5b60006008805460018160011615610100020316600290049050111561109457600a805460018181018084556000939093526008805461105b937fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80192600261010091831615919091026000190190911604611f66565b5050600954600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901555b600c80546110b79160089160026000196101006001841615020190911604611f66565b50426009556040805160208101918290526000908190526110da91600c91611feb565b50600d805460ff191690556004547fbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df90600160a060020a031661111b61090a565b60408051600160a060020a0380851682528316602082015260609181018281526008805460026000196101006001841615020190911604938301849052926080830190849080156111ad5780601f10611182576101008083540402835291602001916111ad565b820191906000526020600020905b81548152906001019060200180831161119057829003601f168201915b505094505050505060405180910390a150600190565b60075481565b60015481565b6111d761149c565b15156111e257600080fd5b60408051602081019182905260009081905261120091600c91611feb565b50600d805460ff19169055565b600c805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156112935780601f1061126857610100808354040283529160200191611293565b820191906000526020600020905b81548152906001019060200180831161127657829003601f168201915b505050505081565b600654610100900460ff1681565b600354600090600160a060020a03838116911614806112d05750600654606460ff90911610155b156112dd5750600161143c565b600654600061010090910460ff1611156114385760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b15801561135d57600080fd5b505afa158015611371573d6000803e3d6000fd5b505050506040513d602081101561138757600080fd5b5051600654604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526002604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561140357600080fd5b505afa158015611417573d6000803e3d6000fd5b505050506040513d602081101561142d57600080fd5b5051915061143c9050565b5060005b919050565b600254600160a060020a0316331461145857600080fd5b600160a060020a038116151561146d57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a0316331490565b600b8054829081106114bb57fe5b600091825260209091200154905081565b600a8054829081106114da57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152935090918301828280156112935780601f1061126857610100808354040283529160200191611293565b600061154b336112a9565b905090565b600354600160a060020a031681565b600354600090600160a060020a03838116911614806115865750600654600a60ff90911610155b156115935750600161143c565b600654600061010090910460ff1611156114385760048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03868116948201949094529051600093909216916363e6ffdd91602480820192602092909190829003018186803b15801561161357600080fd5b505afa158015611627573d6000803e3d6000fd5b505050506040513d602081101561163d57600080fd5b5051600654604080517f7fb52f1a00000000000000000000000000000000000000000000000000000000815261010090920460ff1660048301523060248301526001604483015251919250600160a060020a03831691637fb52f1a91606480820192602092909190829003018186803b15801561140357600080fd5b600a81565b6116c661149c565b15156116d157600080fd5b600d5460ff16156116e157600080fd5b80516080116116ef57600080fd5b805161170290600c906020840190611feb565b50600d805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a031661174661090a565b60408051600160a060020a038085168252831660208201526060918101828152600c805460026000196101006001841615020190911604938301849052926080830190849080156117d85780601f106117ad576101008083540402835291602001916117d8565b820191906000526020600020905b8154815290600101906020018083116117bb57829003601f168201915b505094505050505060405180910390a150565b6117f3611540565b15156117fe57600080fd5b6006805460ff191660ff838116919091179182905560045460408051600160a060020a039092168083526020830152929091168183015290517f369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500916060908290030190a150565b600454600160a060020a031681565b61187c611540565b151561188757600080fd5b60408051602080825260088054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156119265780601f106118fb57610100808354040283529160200191611926565b820191906000526020600020905b81548152906001019060200180831161190957829003601f168201915b50509250505060405180910390a1565b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156112935780601f1061126857610100808354040283529160200191611293565b600061199b61149c565b15156119a657600080fd5b6000826040516020018082805190602001908083835b602083106119db5780518252601f1990920191602091820191016119bc565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050600060086040516020018082805460018160011615610100020316600290048015611a7a5780601f10611a58576101008083540402835291820191611a7a565b820191906000526020600020905b815481529060010190602001808311611a66575b505091505060405160208183030381529060405280519060200120905080821415611c5157600a541515611ad157604080516020810191829052600090819052611ac691600891611feb565b506000600955611b75565b600080805b600a54811015611b295781600b82815481101515611af057fe5b90600052602060002001541115611b2157809250600b81815481101515611b1357fe5b906000526020600020015491505b600101611ad6565b50600a805483908110611b3857fe5b9060005260206000200160089080546001816001161561010002031660029004611b63929190611f66565b506009819055611b7282611e62565b50505b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a03168560006040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611c0a578181015183820152602001611bf2565b50505050905090810190601f168015611c375780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160009250505061143c565b60001960005b600a54811015611d1a576000600a82815481101515611c7257fe5b906000526020600020016040516020018082805460018160011615610100020316600290048015611cda5780601f10611cb8576101008083540402835291820191611cda565b820191906000526020600020905b815481529060010190602001808311611cc6575b505091505060405160208183030381529060405280519060200120905080851415611d1157611d0882611e62565b81925050611d1a565b50600101611c57565b50600019811415611d2a57600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a031686836040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611dbe578181015183820152602001611da6565b50505050905090810190601f168015611deb5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1949350505050565b606481565b600354600160a060020a03163314611e1e57600080fd5b600160a060020a0381161515611e3357600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600a805482908110611e7057fe5b906000526020600020016000611e869190612059565b600b805482908110611e9457fe5b6000918252602082200155600a54600019018114611f3a57600a80546000198101908110611ebe57fe5b90600052602060002001600a82815481101515611ed757fe5b906000526020600020019080546001816001161561010002031660029004611f00929190611f66565b50600b80546000198101908110611f1357fe5b9060005260206000200154600b82815481101515611f2d57fe5b6000918252602090912001555b600a805490611f4d90600019830161209d565b50600b805490611f619060001983016120c6565b505b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611f9f5780548555611fdb565b82800160010185558215611fdb57600052602060002091601f016020900482015b82811115611fdb578254825591600101919060010190611fc0565b50611fe79291506120e6565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061202c57805160ff1916838001178555611fdb565b82800160010185558215611fdb579182015b82811115611fdb57825182559160200191906001019061203e565b50805460018160011615610100020316600290046000825580601f1061207f5750611f63565b601f016020900490600052602060002090810190611f6391906120e6565b8154818355818111156120c1576000838152602090206120c1918101908301612100565b505050565b8154818355818111156120c1576000838152602090206120c19181019083015b61091791905b80821115611fe757600081556001016120ec565b61091791905b80821115611fe757600061211a8282612059565b5060010161210656fea165627a7a723058202bf20945db7036ccc16651fa78b2072f92667e35fdf17e7a39e0155f4243b5600029",
}

// EditableABI is the input ABI used to generate the binding from.
// Deprecated: Use EditableMetaData.ABI instead.
var EditableABI = EditableMetaData.ABI

// Deprecated: Use EditableMetaData.Sigs instead.
// EditableFuncSigs maps the 4-byte function signature to its string representation.
var EditableFuncSigs = EditableMetaData.Sigs

// EditableBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EditableMetaData.Bin instead.
var EditableBin = EditableMetaData.Bin

// DeployEditable deploys a new Ethereum contract, binding an instance of Editable to it.
func DeployEditable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Editable, error) {
	parsed, err := ParsedABI(K_Editable)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EditableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Editable{EditableCaller: EditableCaller{contract: contract}, EditableTransactor: EditableTransactor{contract: contract}, EditableFilterer: EditableFilterer{contract: contract}}, nil
}

// Editable is an auto generated Go binding around an Ethereum contract.
type Editable struct {
	EditableCaller     // Read-only binding to the contract
	EditableTransactor // Write-only binding to the contract
	EditableFilterer   // Log filterer for contract events
}

// EditableCaller is an auto generated read-only Go binding around an Ethereum contract.
type EditableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EditableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EditableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EditableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EditableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewEditable creates a new instance of Editable, bound to a specific deployed contract.
func NewEditable(address common.Address, backend bind.ContractBackend) (*Editable, error) {
	contract, err := bindEditable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Editable{EditableCaller: EditableCaller{contract: contract}, EditableTransactor: EditableTransactor{contract: contract}, EditableFilterer: EditableFilterer{contract: contract}}, nil
}

// NewEditableCaller creates a new read-only instance of Editable, bound to a specific deployed contract.
func NewEditableCaller(address common.Address, caller bind.ContractCaller) (*EditableCaller, error) {
	contract, err := bindEditable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EditableCaller{contract: contract}, nil
}

// NewEditableTransactor creates a new write-only instance of Editable, bound to a specific deployed contract.
func NewEditableTransactor(address common.Address, transactor bind.ContractTransactor) (*EditableTransactor, error) {
	contract, err := bindEditable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EditableTransactor{contract: contract}, nil
}

// NewEditableFilterer creates a new log filterer instance of Editable, bound to a specific deployed contract.
func NewEditableFilterer(address common.Address, filterer bind.ContractFilterer) (*EditableFilterer, error) {
	contract, err := bindEditable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EditableFilterer{contract: contract}, nil
}

// bindEditable binds a generic wrapper to an already deployed contract.
func bindEditable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Editable)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() view returns(uint8)
func (_Editable *EditableCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "CAN_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() view returns(uint8)
func (_Editable *EditableCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "CAN_EDIT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() view returns(uint8)
func (_Editable *EditableCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "CAN_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() view returns(bool)
func (_Editable *EditableCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "canCommit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() view returns(bool)
func (_Editable *EditableCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "canConfirm")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() view returns(bool)
func (_Editable *EditableCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "canEdit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() view returns(bool)
func (_Editable *EditableCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "commitPending")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_Editable *EditableCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() view returns(uint256)
func (_Editable *EditableCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "countVersionHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_Editable *EditableCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) view returns(bool)
func (_Editable *EditableCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "hasAccess", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasEditorRight is a free data retrieval call binding the contract method 0x67e5c3bf.
//
// Solidity: function hasEditorRight(address candidate) view returns(bool)
func (_Editable *EditableCaller) HasEditorRight(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "hasEditorRight", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IndexCategory is a free data retrieval call binding the contract method 0x6380501f.
//
// Solidity: function indexCategory() view returns(uint8)
func (_Editable *EditableCaller) IndexCategory(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "indexCategory")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() view returns(string)
func (_Editable *EditableCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "objectHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ObjectTimestamp is a free data retrieval call binding the contract method 0x40b87a26.
//
// Solidity: function objectTimestamp() view returns(uint256)
func (_Editable *EditableCaller) ObjectTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "objectTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Editable *EditableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_Editable *EditableCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "parentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() view returns(string)
func (_Editable *EditableCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "pendingHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_Editable *EditableCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_Editable *EditableCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) view returns(string)
func (_Editable *EditableCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "versionHashes", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) view returns(uint256)
func (_Editable *EditableCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "versionTimestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() view returns(uint8)
func (_Editable *EditableCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "visibility")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// AccessRequestV3 is a paid mutator transaction binding the contract method 0x1bf7a912.
//
// Solidity: function accessRequestV3(bytes32[] , address[] ) payable returns(bool)
func (_Editable *EditableTransactor) AccessRequestV3(opts *bind.TransactOpts, arg0 [][32]byte, arg1 []common.Address) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "accessRequestV3", arg0, arg1)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Editable *EditableTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "clearPending")
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Editable *EditableTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "commit", _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() payable returns(bool)
func (_Editable *EditableTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "confirmCommit")
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Editable *EditableTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "deleteVersion", _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Editable *EditableTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "kill")
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_Editable *EditableTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_Editable *EditableTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 _visibility_code) returns()
func (_Editable *EditableTransactor) SetVisibility(opts *bind.TransactOpts, _visibility_code uint8) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "setVisibility", _visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Editable *EditableTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Editable *EditableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "transferOwnership", newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Editable *EditableTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "updateRequest")
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Editable *EditableTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Editable.contract.RawTransact(opts, calldata)
}

// EditableAccessRequestV3Iterator is returned from FilterAccessRequestV3 and is used to iterate over the raw logs and unpacked data for AccessRequestV3 events raised by the Editable contract.
type EditableAccessRequestV3Iterator struct {
	Event *EditableAccessRequestV3 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableAccessRequestV3Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableAccessRequestV3)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableAccessRequestV3)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableAccessRequestV3Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableAccessRequestV3Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableAccessRequestV3 represents a AccessRequestV3 event raised by the Editable contract.
type EditableAccessRequestV3 struct {
	RequestNonce     *big.Int
	ParentAddress    common.Address
	ContextHash      [32]byte
	Accessor         common.Address
	RequestTimestamp *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestV3 is a free log retrieval operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Editable *EditableFilterer) FilterAccessRequestV3(opts *bind.FilterOpts) (*EditableAccessRequestV3Iterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return &EditableAccessRequestV3Iterator{contract: _Editable.contract, event: "AccessRequestV3", logs: logs, sub: sub}, nil
}

// WatchAccessRequestV3 is a free log subscription operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Editable *EditableFilterer) WatchAccessRequestV3(opts *bind.WatchOpts, sink chan<- *EditableAccessRequestV3) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "AccessRequestV3")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableAccessRequestV3)
				if err := _Editable.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestV3 is a log parse operation binding the contract event 0x545ceffc5093a8300777a74bb094968fbd62d128313df01eb72fd5350ec659c7.
//
// Solidity: event AccessRequestV3(uint256 requestNonce, address parentAddress, bytes32 contextHash, address accessor, uint256 requestTimestamp)
func (_Editable *EditableFilterer) ParseAccessRequestV3(log types.Log) (*EditableAccessRequestV3, error) {
	event := new(EditableAccessRequestV3)
	if err := _Editable.contract.UnpackLog(event, "AccessRequestV3", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EditableCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the Editable contract.
type EditableCommitPendingIterator struct {
	Event *EditableCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableCommitPending represents a CommitPending event raised by the Editable contract.
type EditableCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) FilterCommitPending(opts *bind.FilterOpts) (*EditableCommitPendingIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &EditableCommitPendingIterator{contract: _Editable.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *EditableCommitPending) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableCommitPending)
				if err := _Editable.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) ParseCommitPending(log types.Log) (*EditableCommitPending, error) {
	event := new(EditableCommitPending)
	if err := _Editable.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EditableUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the Editable contract.
type EditableUpdateRequestIterator struct {
	Event *EditableUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableUpdateRequest represents a UpdateRequest event raised by the Editable contract.
type EditableUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Editable *EditableFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*EditableUpdateRequestIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &EditableUpdateRequestIterator{contract: _Editable.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Editable *EditableFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *EditableUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableUpdateRequest)
				if err := _Editable.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Editable *EditableFilterer) ParseUpdateRequest(log types.Log) (*EditableUpdateRequest, error) {
	event := new(EditableUpdateRequest)
	if err := _Editable.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EditableVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the Editable contract.
type EditableVersionConfirmIterator struct {
	Event *EditableVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableVersionConfirm represents a VersionConfirm event raised by the Editable contract.
type EditableVersionConfirm struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*EditableVersionConfirmIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &EditableVersionConfirmIterator{contract: _Editable.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *EditableVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableVersionConfirm)
				if err := _Editable.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0xbdaffceabaaa783aa187fea6c2e815541d29e2290bf3f7d3c4fc53672b68f7df.
//
// Solidity: event VersionConfirm(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) ParseVersionConfirm(log types.Log) (*EditableVersionConfirm, error) {
	event := new(EditableVersionConfirm)
	if err := _Editable.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EditableVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the Editable contract.
type EditableVersionDeleteIterator struct {
	Event *EditableVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableVersionDelete represents a VersionDelete event raised by the Editable contract.
type EditableVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Editable *EditableFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*EditableVersionDeleteIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &EditableVersionDeleteIterator{contract: _Editable.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Editable *EditableFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *EditableVersionDelete) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableVersionDelete)
				if err := _Editable.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Editable *EditableFilterer) ParseVersionDelete(log types.Log) (*EditableVersionDelete, error) {
	event := new(EditableVersionDelete)
	if err := _Editable.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EditableVisibilityChangedIterator is returned from FilterVisibilityChanged and is used to iterate over the raw logs and unpacked data for VisibilityChanged events raised by the Editable contract.
type EditableVisibilityChangedIterator struct {
	Event *EditableVisibilityChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableVisibilityChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableVisibilityChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableVisibilityChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableVisibilityChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableVisibilityChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableVisibilityChanged represents a VisibilityChanged event raised by the Editable contract.
type EditableVisibilityChanged struct {
	ContentSpace  common.Address
	ParentAddress common.Address
	Visibility    uint8
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterVisibilityChanged is a free log retrieval operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Editable *EditableFilterer) FilterVisibilityChanged(opts *bind.FilterOpts) (*EditableVisibilityChangedIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return &EditableVisibilityChangedIterator{contract: _Editable.contract, event: "VisibilityChanged", logs: logs, sub: sub}, nil
}

// WatchVisibilityChanged is a free log subscription operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Editable *EditableFilterer) WatchVisibilityChanged(opts *bind.WatchOpts, sink chan<- *EditableVisibilityChanged) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "VisibilityChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableVisibilityChanged)
				if err := _Editable.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVisibilityChanged is a log parse operation binding the contract event 0x369a336baa7895746725663e717b3523139ebabfff8c32bc4b13e8f88e502500.
//
// Solidity: event VisibilityChanged(address contentSpace, address parentAddress, uint8 visibility)
func (_Editable *EditableFilterer) ParseVisibilityChanged(log types.Log) (*EditableVisibilityChanged, error) {
	event := new(EditableVisibilityChanged)
	if err := _Editable.contract.UnpackLog(event, "VisibilityChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EncTokenMetaData contains all meta data concerning the EncToken contract.
var EncTokenMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820ad616d278b50d58c1bdda3dbfc435cae8e925433e4ac1b27ab6dafe149dd56400029",
}

// EncTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use EncTokenMetaData.ABI instead.
var EncTokenABI = EncTokenMetaData.ABI

// EncTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EncTokenMetaData.Bin instead.
var EncTokenBin = EncTokenMetaData.Bin

// DeployEncToken deploys a new Ethereum contract, binding an instance of EncToken to it.
func DeployEncToken(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *EncToken, error) {
	parsed, err := ParsedABI(K_EncToken)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EncTokenBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EncToken{EncTokenCaller: EncTokenCaller{contract: contract}, EncTokenTransactor: EncTokenTransactor{contract: contract}, EncTokenFilterer: EncTokenFilterer{contract: contract}}, nil
}

// EncToken is an auto generated Go binding around an Ethereum contract.
type EncToken struct {
	EncTokenCaller     // Read-only binding to the contract
	EncTokenTransactor // Write-only binding to the contract
	EncTokenFilterer   // Log filterer for contract events
}

// EncTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type EncTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EncTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EncTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EncTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EncTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewEncToken creates a new instance of EncToken, bound to a specific deployed contract.
func NewEncToken(address common.Address, backend bind.ContractBackend) (*EncToken, error) {
	contract, err := bindEncToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EncToken{EncTokenCaller: EncTokenCaller{contract: contract}, EncTokenTransactor: EncTokenTransactor{contract: contract}, EncTokenFilterer: EncTokenFilterer{contract: contract}}, nil
}

// NewEncTokenCaller creates a new read-only instance of EncToken, bound to a specific deployed contract.
func NewEncTokenCaller(address common.Address, caller bind.ContractCaller) (*EncTokenCaller, error) {
	contract, err := bindEncToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EncTokenCaller{contract: contract}, nil
}

// NewEncTokenTransactor creates a new write-only instance of EncToken, bound to a specific deployed contract.
func NewEncTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*EncTokenTransactor, error) {
	contract, err := bindEncToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EncTokenTransactor{contract: contract}, nil
}

// NewEncTokenFilterer creates a new log filterer instance of EncToken, bound to a specific deployed contract.
func NewEncTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*EncTokenFilterer, error) {
	contract, err := bindEncToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EncTokenFilterer{contract: contract}, nil
}

// bindEncToken binds a generic wrapper to an already deployed contract.
func bindEncToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_EncToken)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ExternalCallMetaData contains all meta data concerning the ExternalCall contract.
var ExternalCallMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820a097425b1f026dc9916452e79fb5fd319cb66253cef6dfd490d3b2421b0a69c50029",
}

// ExternalCallABI is the input ABI used to generate the binding from.
// Deprecated: Use ExternalCallMetaData.ABI instead.
var ExternalCallABI = ExternalCallMetaData.ABI

// ExternalCallBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ExternalCallMetaData.Bin instead.
var ExternalCallBin = ExternalCallMetaData.Bin

// DeployExternalCall deploys a new Ethereum contract, binding an instance of ExternalCall to it.
func DeployExternalCall(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ExternalCall, error) {
	parsed, err := ParsedABI(K_ExternalCall)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ExternalCallBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ExternalCall{ExternalCallCaller: ExternalCallCaller{contract: contract}, ExternalCallTransactor: ExternalCallTransactor{contract: contract}, ExternalCallFilterer: ExternalCallFilterer{contract: contract}}, nil
}

// ExternalCall is an auto generated Go binding around an Ethereum contract.
type ExternalCall struct {
	ExternalCallCaller     // Read-only binding to the contract
	ExternalCallTransactor // Write-only binding to the contract
	ExternalCallFilterer   // Log filterer for contract events
}

// ExternalCallCaller is an auto generated read-only Go binding around an Ethereum contract.
type ExternalCallCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExternalCallTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ExternalCallTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExternalCallFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ExternalCallFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewExternalCall creates a new instance of ExternalCall, bound to a specific deployed contract.
func NewExternalCall(address common.Address, backend bind.ContractBackend) (*ExternalCall, error) {
	contract, err := bindExternalCall(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ExternalCall{ExternalCallCaller: ExternalCallCaller{contract: contract}, ExternalCallTransactor: ExternalCallTransactor{contract: contract}, ExternalCallFilterer: ExternalCallFilterer{contract: contract}}, nil
}

// NewExternalCallCaller creates a new read-only instance of ExternalCall, bound to a specific deployed contract.
func NewExternalCallCaller(address common.Address, caller bind.ContractCaller) (*ExternalCallCaller, error) {
	contract, err := bindExternalCall(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ExternalCallCaller{contract: contract}, nil
}

// NewExternalCallTransactor creates a new write-only instance of ExternalCall, bound to a specific deployed contract.
func NewExternalCallTransactor(address common.Address, transactor bind.ContractTransactor) (*ExternalCallTransactor, error) {
	contract, err := bindExternalCall(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ExternalCallTransactor{contract: contract}, nil
}

// NewExternalCallFilterer creates a new log filterer instance of ExternalCall, bound to a specific deployed contract.
func NewExternalCallFilterer(address common.Address, filterer bind.ContractFilterer) (*ExternalCallFilterer, error) {
	contract, err := bindExternalCall(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ExternalCallFilterer{contract: contract}, nil
}

// bindExternalCall binds a generic wrapper to an already deployed contract.
func bindExternalCall(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_ExternalCall)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// IAdminMetaData contains all meta data concerning the IAdmin contract.
var IAdminMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[{\"name\":\"_adminAddr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"24d7806c": "isAdmin(address)",
	},
}

// IAdminABI is the input ABI used to generate the binding from.
// Deprecated: Use IAdminMetaData.ABI instead.
var IAdminABI = IAdminMetaData.ABI

// Deprecated: Use IAdminMetaData.Sigs instead.
// IAdminFuncSigs maps the 4-byte function signature to its string representation.
var IAdminFuncSigs = IAdminMetaData.Sigs

// IAdmin is an auto generated Go binding around an Ethereum contract.
type IAdmin struct {
	IAdminCaller     // Read-only binding to the contract
	IAdminTransactor // Write-only binding to the contract
	IAdminFilterer   // Log filterer for contract events
}

// IAdminCaller is an auto generated read-only Go binding around an Ethereum contract.
type IAdminCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAdminTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IAdminTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAdminFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IAdminFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewIAdmin creates a new instance of IAdmin, bound to a specific deployed contract.
func NewIAdmin(address common.Address, backend bind.ContractBackend) (*IAdmin, error) {
	contract, err := bindIAdmin(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IAdmin{IAdminCaller: IAdminCaller{contract: contract}, IAdminTransactor: IAdminTransactor{contract: contract}, IAdminFilterer: IAdminFilterer{contract: contract}}, nil
}

// NewIAdminCaller creates a new read-only instance of IAdmin, bound to a specific deployed contract.
func NewIAdminCaller(address common.Address, caller bind.ContractCaller) (*IAdminCaller, error) {
	contract, err := bindIAdmin(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IAdminCaller{contract: contract}, nil
}

// NewIAdminTransactor creates a new write-only instance of IAdmin, bound to a specific deployed contract.
func NewIAdminTransactor(address common.Address, transactor bind.ContractTransactor) (*IAdminTransactor, error) {
	contract, err := bindIAdmin(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IAdminTransactor{contract: contract}, nil
}

// NewIAdminFilterer creates a new log filterer instance of IAdmin, bound to a specific deployed contract.
func NewIAdminFilterer(address common.Address, filterer bind.ContractFilterer) (*IAdminFilterer, error) {
	contract, err := bindIAdmin(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IAdminFilterer{contract: contract}, nil
}

// bindIAdmin binds a generic wrapper to an already deployed contract.
func bindIAdmin(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_IAdmin)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _adminAddr) view returns(bool)
func (_IAdmin *IAdminCaller) IsAdmin(opts *bind.CallOpts, _adminAddr common.Address) (bool, error) {
	var out []interface{}
	err := _IAdmin.contract.Call(opts, &out, "isAdmin", _adminAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ICheckAccessMetaData contains all meta data concerning the ICheckAccess contract.
var ICheckAccessMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"95a078e8": "hasAccess(address)",
	},
}

// ICheckAccessABI is the input ABI used to generate the binding from.
// Deprecated: Use ICheckAccessMetaData.ABI instead.
var ICheckAccessABI = ICheckAccessMetaData.ABI

// Deprecated: Use ICheckAccessMetaData.Sigs instead.
// ICheckAccessFuncSigs maps the 4-byte function signature to its string representation.
var ICheckAccessFuncSigs = ICheckAccessMetaData.Sigs

// ICheckAccess is an auto generated Go binding around an Ethereum contract.
type ICheckAccess struct {
	ICheckAccessCaller     // Read-only binding to the contract
	ICheckAccessTransactor // Write-only binding to the contract
	ICheckAccessFilterer   // Log filterer for contract events
}

// ICheckAccessCaller is an auto generated read-only Go binding around an Ethereum contract.
type ICheckAccessCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICheckAccessTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ICheckAccessTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICheckAccessFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ICheckAccessFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewICheckAccess creates a new instance of ICheckAccess, bound to a specific deployed contract.
func NewICheckAccess(address common.Address, backend bind.ContractBackend) (*ICheckAccess, error) {
	contract, err := bindICheckAccess(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ICheckAccess{ICheckAccessCaller: ICheckAccessCaller{contract: contract}, ICheckAccessTransactor: ICheckAccessTransactor{contract: contract}, ICheckAccessFilterer: ICheckAccessFilterer{contract: contract}}, nil
}

// NewICheckAccessCaller creates a new read-only instance of ICheckAccess, bound to a specific deployed contract.
func NewICheckAccessCaller(address common.Address, caller bind.ContractCaller) (*ICheckAccessCaller, error) {
	contract, err := bindICheckAccess(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ICheckAccessCaller{contract: contract}, nil
}

// NewICheckAccessTransactor creates a new write-only instance of ICheckAccess, bound to a specific deployed contract.
func NewICheckAccessTransactor(address common.Address, transactor bind.ContractTransactor) (*ICheckAccessTransactor, error) {
	contract, err := bindICheckAccess(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ICheckAccessTransactor{contract: contract}, nil
}

// NewICheckAccessFilterer creates a new log filterer instance of ICheckAccess, bound to a specific deployed contract.
func NewICheckAccessFilterer(address common.Address, filterer bind.ContractFilterer) (*ICheckAccessFilterer, error) {
	contract, err := bindICheckAccess(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ICheckAccessFilterer{contract: contract}, nil
}

// bindICheckAccess binds a generic wrapper to an already deployed contract.
func bindICheckAccess(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_ICheckAccess)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) view returns(bool)
func (_ICheckAccess *ICheckAccessCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _ICheckAccess.contract.Call(opts, &out, "hasAccess", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IFactorySpaceMetaData contains all meta data concerning the IFactorySpace contract.
var IFactorySpaceMetaData = &bind.MetaData{
	ABI: "[{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"createLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"bf4e088f": "createContent(address,address)",
		"b8cfaf05": "createContentType()",
		"575185ed": "createGroup()",
		"40b89f06": "createLibrary(address)",
	},
}

// IFactorySpaceABI is the input ABI used to generate the binding from.
// Deprecated: Use IFactorySpaceMetaData.ABI instead.
var IFactorySpaceABI = IFactorySpaceMetaData.ABI

// Deprecated: Use IFactorySpaceMetaData.Sigs instead.
// IFactorySpaceFuncSigs maps the 4-byte function signature to its string representation.
var IFactorySpaceFuncSigs = IFactorySpaceMetaData.Sigs

// IFactorySpace is an auto generated Go binding around an Ethereum contract.
type IFactorySpace struct {
	IFactorySpaceCaller     // Read-only binding to the contract
	IFactorySpaceTransactor // Write-only binding to the contract
	IFactorySpaceFilterer   // Log filterer for contract events
}

// IFactorySpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type IFactorySpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFactorySpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IFactorySpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFactorySpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IFactorySpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewIFactorySpace creates a new instance of IFactorySpace, bound to a specific deployed contract.
func NewIFactorySpace(address common.Address, backend bind.ContractBackend) (*IFactorySpace, error) {
	contract, err := bindIFactorySpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IFactorySpace{IFactorySpaceCaller: IFactorySpaceCaller{contract: contract}, IFactorySpaceTransactor: IFactorySpaceTransactor{contract: contract}, IFactorySpaceFilterer: IFactorySpaceFilterer{contract: contract}}, nil
}

// NewIFactorySpaceCaller creates a new read-only instance of IFactorySpace, bound to a specific deployed contract.
func NewIFactorySpaceCaller(address common.Address, caller bind.ContractCaller) (*IFactorySpaceCaller, error) {
	contract, err := bindIFactorySpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IFactorySpaceCaller{contract: contract}, nil
}

// NewIFactorySpaceTransactor creates a new write-only instance of IFactorySpace, bound to a specific deployed contract.
func NewIFactorySpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*IFactorySpaceTransactor, error) {
	contract, err := bindIFactorySpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IFactorySpaceTransactor{contract: contract}, nil
}

// NewIFactorySpaceFilterer creates a new log filterer instance of IFactorySpace, bound to a specific deployed contract.
func NewIFactorySpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*IFactorySpaceFilterer, error) {
	contract, err := bindIFactorySpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IFactorySpaceFilterer{contract: contract}, nil
}

// bindIFactorySpace binds a generic wrapper to an already deployed contract.
func bindIFactorySpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_IFactorySpace)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_IFactorySpace *IFactorySpaceTransactor) CreateContent(opts *bind.TransactOpts, lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _IFactorySpace.contract.Transact(opts, "createContent", lib, content_type)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_IFactorySpace *IFactorySpaceTransactor) CreateContentType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFactorySpace.contract.Transact(opts, "createContentType")
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_IFactorySpace *IFactorySpaceTransactor) CreateGroup(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFactorySpace.contract.Transact(opts, "createGroup")
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_IFactorySpace *IFactorySpaceTransactor) CreateLibrary(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _IFactorySpace.contract.Transact(opts, "createLibrary", address_KMS)
}

// IKmsSpaceMetaData contains all meta data concerning the IKmsSpace contract.
var IKmsSpaceMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"prefix\",\"type\":\"bytes\"}],\"name\":\"getKMSInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"getKMSID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsIdStr\",\"type\":\"string\"}],\"name\":\"checkKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"checkKMSAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"8d2a23db": "checkKMS(string)",
		"d6be0f49": "checkKMSAddr(address)",
		"589aafc1": "getKMSID(address)",
		"268bfac4": "getKMSInfo(string,bytes)",
	},
}

// IKmsSpaceABI is the input ABI used to generate the binding from.
// Deprecated: Use IKmsSpaceMetaData.ABI instead.
var IKmsSpaceABI = IKmsSpaceMetaData.ABI

// Deprecated: Use IKmsSpaceMetaData.Sigs instead.
// IKmsSpaceFuncSigs maps the 4-byte function signature to its string representation.
var IKmsSpaceFuncSigs = IKmsSpaceMetaData.Sigs

// IKmsSpace is an auto generated Go binding around an Ethereum contract.
type IKmsSpace struct {
	IKmsSpaceCaller     // Read-only binding to the contract
	IKmsSpaceTransactor // Write-only binding to the contract
	IKmsSpaceFilterer   // Log filterer for contract events
}

// IKmsSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type IKmsSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IKmsSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IKmsSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IKmsSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IKmsSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewIKmsSpace creates a new instance of IKmsSpace, bound to a specific deployed contract.
func NewIKmsSpace(address common.Address, backend bind.ContractBackend) (*IKmsSpace, error) {
	contract, err := bindIKmsSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IKmsSpace{IKmsSpaceCaller: IKmsSpaceCaller{contract: contract}, IKmsSpaceTransactor: IKmsSpaceTransactor{contract: contract}, IKmsSpaceFilterer: IKmsSpaceFilterer{contract: contract}}, nil
}

// NewIKmsSpaceCaller creates a new read-only instance of IKmsSpace, bound to a specific deployed contract.
func NewIKmsSpaceCaller(address common.Address, caller bind.ContractCaller) (*IKmsSpaceCaller, error) {
	contract, err := bindIKmsSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IKmsSpaceCaller{contract: contract}, nil
}

// NewIKmsSpaceTransactor creates a new write-only instance of IKmsSpace, bound to a specific deployed contract.
func NewIKmsSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*IKmsSpaceTransactor, error) {
	contract, err := bindIKmsSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IKmsSpaceTransactor{contract: contract}, nil
}

// NewIKmsSpaceFilterer creates a new log filterer instance of IKmsSpace, bound to a specific deployed contract.
func NewIKmsSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*IKmsSpaceFilterer, error) {
	contract, err := bindIKmsSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IKmsSpaceFilterer{contract: contract}, nil
}

// bindIKmsSpace binds a generic wrapper to an already deployed contract.
func bindIKmsSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_IKmsSpace)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) view returns(uint256)
func (_IKmsSpace *IKmsSpaceCaller) CheckKMS(opts *bind.CallOpts, _kmsIdStr string) (*big.Int, error) {
	var out []interface{}
	err := _IKmsSpace.contract.Call(opts, &out, "checkKMS", _kmsIdStr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) view returns(uint256)
func (_IKmsSpace *IKmsSpaceCaller) CheckKMSAddr(opts *bind.CallOpts, _kmsAddr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IKmsSpace.contract.Call(opts, &out, "checkKMSAddr", _kmsAddr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) view returns(string)
func (_IKmsSpace *IKmsSpaceCaller) GetKMSID(opts *bind.CallOpts, _kmsAddr common.Address) (string, error) {
	var out []interface{}
	err := _IKmsSpace.contract.Call(opts, &out, "getKMSID", _kmsAddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) view returns(string, string)
func (_IKmsSpace *IKmsSpaceCaller) GetKMSInfo(opts *bind.CallOpts, _kmsID string, prefix []byte) (string, string, error) {
	var out []interface{}
	err := _IKmsSpace.contract.Call(opts, &out, "getKMSInfo", _kmsID, prefix)

	if err != nil {
		return *new(string), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// INodeSpaceMetaData contains all meta data concerning the INodeSpace contract.
var INodeSpaceMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"26683e14": "canNodePublish(address)",
	},
}

// INodeSpaceABI is the input ABI used to generate the binding from.
// Deprecated: Use INodeSpaceMetaData.ABI instead.
var INodeSpaceABI = INodeSpaceMetaData.ABI

// Deprecated: Use INodeSpaceMetaData.Sigs instead.
// INodeSpaceFuncSigs maps the 4-byte function signature to its string representation.
var INodeSpaceFuncSigs = INodeSpaceMetaData.Sigs

// INodeSpace is an auto generated Go binding around an Ethereum contract.
type INodeSpace struct {
	INodeSpaceCaller     // Read-only binding to the contract
	INodeSpaceTransactor // Write-only binding to the contract
	INodeSpaceFilterer   // Log filterer for contract events
}

// INodeSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type INodeSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INodeSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type INodeSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INodeSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type INodeSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewINodeSpace creates a new instance of INodeSpace, bound to a specific deployed contract.
func NewINodeSpace(address common.Address, backend bind.ContractBackend) (*INodeSpace, error) {
	contract, err := bindINodeSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &INodeSpace{INodeSpaceCaller: INodeSpaceCaller{contract: contract}, INodeSpaceTransactor: INodeSpaceTransactor{contract: contract}, INodeSpaceFilterer: INodeSpaceFilterer{contract: contract}}, nil
}

// NewINodeSpaceCaller creates a new read-only instance of INodeSpace, bound to a specific deployed contract.
func NewINodeSpaceCaller(address common.Address, caller bind.ContractCaller) (*INodeSpaceCaller, error) {
	contract, err := bindINodeSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &INodeSpaceCaller{contract: contract}, nil
}

// NewINodeSpaceTransactor creates a new write-only instance of INodeSpace, bound to a specific deployed contract.
func NewINodeSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*INodeSpaceTransactor, error) {
	contract, err := bindINodeSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &INodeSpaceTransactor{contract: contract}, nil
}

// NewINodeSpaceFilterer creates a new log filterer instance of INodeSpace, bound to a specific deployed contract.
func NewINodeSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*INodeSpaceFilterer, error) {
	contract, err := bindINodeSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &INodeSpaceFilterer{contract: contract}, nil
}

// bindINodeSpace binds a generic wrapper to an already deployed contract.
func bindINodeSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_INodeSpace)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) view returns(bool)
func (_INodeSpace *INodeSpaceCaller) CanNodePublish(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _INodeSpace.contract.Call(opts, &out, "canNodePublish", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IUserSpaceMetaData contains all meta data concerning the IUserSpace contract.
var IUserSpaceMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[{\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"userWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"createUserWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"e7cf0c66": "createUserWallet(address)",
		"63e6ffdd": "userWallets(address)",
	},
}

// IUserSpaceABI is the input ABI used to generate the binding from.
// Deprecated: Use IUserSpaceMetaData.ABI instead.
var IUserSpaceABI = IUserSpaceMetaData.ABI

// Deprecated: Use IUserSpaceMetaData.Sigs instead.
// IUserSpaceFuncSigs maps the 4-byte function signature to its string representation.
var IUserSpaceFuncSigs = IUserSpaceMetaData.Sigs

// IUserSpace is an auto generated Go binding around an Ethereum contract.
type IUserSpace struct {
	IUserSpaceCaller     // Read-only binding to the contract
	IUserSpaceTransactor // Write-only binding to the contract
	IUserSpaceFilterer   // Log filterer for contract events
}

// IUserSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type IUserSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IUserSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IUserSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IUserSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IUserSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewIUserSpace creates a new instance of IUserSpace, bound to a specific deployed contract.
func NewIUserSpace(address common.Address, backend bind.ContractBackend) (*IUserSpace, error) {
	contract, err := bindIUserSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IUserSpace{IUserSpaceCaller: IUserSpaceCaller{contract: contract}, IUserSpaceTransactor: IUserSpaceTransactor{contract: contract}, IUserSpaceFilterer: IUserSpaceFilterer{contract: contract}}, nil
}

// NewIUserSpaceCaller creates a new read-only instance of IUserSpace, bound to a specific deployed contract.
func NewIUserSpaceCaller(address common.Address, caller bind.ContractCaller) (*IUserSpaceCaller, error) {
	contract, err := bindIUserSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IUserSpaceCaller{contract: contract}, nil
}

// NewIUserSpaceTransactor creates a new write-only instance of IUserSpace, bound to a specific deployed contract.
func NewIUserSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*IUserSpaceTransactor, error) {
	contract, err := bindIUserSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IUserSpaceTransactor{contract: contract}, nil
}

// NewIUserSpaceFilterer creates a new log filterer instance of IUserSpace, bound to a specific deployed contract.
func NewIUserSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*IUserSpaceFilterer, error) {
	contract, err := bindIUserSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IUserSpaceFilterer{contract: contract}, nil
}

// bindIUserSpace binds a generic wrapper to an already deployed contract.
func bindIUserSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_IUserSpace)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) view returns(address)
func (_IUserSpace *IUserSpaceCaller) UserWallets(opts *bind.CallOpts, _userAddr common.Address) (common.Address, error) {
	var out []interface{}
	err := _IUserSpace.contract.Call(opts, &out, "userWallets", _userAddr)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address _user) returns(address)
func (_IUserSpace *IUserSpaceTransactor) CreateUserWallet(opts *bind.TransactOpts, _user common.Address) (*types.Transaction, error) {
	return _IUserSpace.contract.Transact(opts, "createUserWallet", _user)
}

// KmsManagerMetaData contains all meta data concerning the KmsManager contract.
var KmsManagerMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"prefix\",\"type\":\"bytes\"}],\"name\":\"getKMSInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"getKMSID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"addKMSLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsIdStr\",\"type\":\"string\"}],\"name\":\"checkKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"_pubKey\",\"type\":\"string\"}],\"name\":\"setKMSPublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"checkKMSAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"removeKMSLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"AddKMSLocator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"RemoveKMSLocator\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"653a92f6": "addKMSLocator(string,bytes)",
		"8d2a23db": "checkKMS(string)",
		"d6be0f49": "checkKMSAddr(address)",
		"af570c04": "contentSpace()",
		"02d05d3f": "creator()",
		"589aafc1": "getKMSID(address)",
		"268bfac4": "getKMSInfo(string,bytes)",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"fe7ac19f": "removeKMSLocator(string,bytes)",
		"a69cb734": "setKMSPublicKey(string,string)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
	},
	Bin: "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060015560028054600160a060020a031990811632179091556003805490911633179055611a368061007b6000396000f3fe6080604052600436106100e85760003560e01c80636d2e4b1b1161008a578063af570c0411610059578063af570c0414610744578063d6be0f4914610759578063f2fde38b1461078c578063fe7ac19f146107bf576100e8565b80636d2e4b1b1461050f5780638d2a23db146105425780638da5cb5b146105f5578063a69cb7341461060a576100e8565b806354fd4d50116100c657806354fd4d50146102dd578063589aafc1146103045780635f4fcae1146103ac578063653a92f6146103c1576100e8565b806302d05d3f146100ea578063268bfac41461011b57806341c0e1b5146102c8575b005b3480156100f657600080fd5b506100ff6108f9565b60408051600160a060020a039092168252519081900360200190f35b34801561012757600080fd5b506101ea6004803603604081101561013e57600080fd5b81019060208101813564010000000081111561015957600080fd5b82018360208201111561016b57600080fd5b8035906020019184600183028401116401000000008311171561018d57600080fd5b9193909290916020810190356401000000008111156101ab57600080fd5b8201836020820111156101bd57600080fd5b803590602001918460018302840111640100000000831117156101df57600080fd5b509092509050610908565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561022b578181015183820152602001610213565b50505050905090810190601f1680156102585780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561028b578181015183820152602001610273565b50505050905090810190601f1680156102b85780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156102d457600080fd5b506100e8610d0b565b3480156102e957600080fd5b506102f2610d30565b60408051918252519081900360200190f35b34801561031057600080fd5b506103376004803603602081101561032757600080fd5b5035600160a060020a0316610d36565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610371578181015183820152602001610359565b50505050905090810190601f16801561039e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103b857600080fd5b506102f2610d4f565b3480156103cd57600080fd5b506104fb600480360360408110156103e457600080fd5b8101906020810181356401000000008111156103ff57600080fd5b82018360208201111561041157600080fd5b8035906020019184600183028401116401000000008311171561043357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561048657600080fd5b82018360208201111561049857600080fd5b803590602001918460018302840111640100000000831117156104ba57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610d55945050505050565b604080519115158252519081900360200190f35b34801561051b57600080fd5b506100e86004803603602081101561053257600080fd5b5035600160a060020a0316611043565b34801561054e57600080fd5b506102f26004803603602081101561056557600080fd5b81019060208101813564010000000081111561058057600080fd5b82018360208201111561059257600080fd5b803590602001918460018302840111640100000000831117156105b457600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061109e945050505050565b34801561060157600080fd5b506100ff611106565b34801561061657600080fd5b506100e86004803603604081101561062d57600080fd5b81019060208101813564010000000081111561064857600080fd5b82018360208201111561065a57600080fd5b8035906020019184600183028401116401000000008311171561067c57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156106cf57600080fd5b8201836020820111156106e157600080fd5b8035906020019184600183028401116401000000008311171561070357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611115945050505050565b34801561075057600080fd5b506100ff6111a5565b34801561076557600080fd5b506102f26004803603602081101561077c57600080fd5b5035600160a060020a03166111b4565b34801561079857600080fd5b506100e8600480360360208110156107af57600080fd5b5035600160a060020a031661122a565b3480156107cb57600080fd5b506104fb600480360360408110156107e257600080fd5b8101906020810181356401000000008111156107fd57600080fd5b82018360208201111561080f57600080fd5b8035906020019184600183028401116401000000008311171561083157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561088457600080fd5b82018360208201111561089657600080fd5b803590602001918460018302840111640100000000831117156108b857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611285945050505050565b600254600160a060020a031681565b60608060606005878760405180838380828437919091019485525050604080519384900360209081018520805480830287018301909352828652935090915060009084015b828210156109f85760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156109e45780601f106109b9576101008083540402835291602001916109e4565b820191906000526020600020905b8154815290600101906020018083116109c757829003601f168201915b50505050508152602001906001019061094d565b505050509050606060068888604051808383808284379190910194855250506040805160209481900385018120805460026001821615610100026000190190911604601f81018790048702830187019093528282529094909350909150830182828015610aa65780601f10610a7b57610100808354040283529160200191610aa6565b820191906000526020600020905b815481529060010190602001808311610a8957829003601f168201915b50505050509050815160001415610ad15760408051602081019091526000815293509150610d029050565b6060610b138388888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506116a092505050565b9050606060005b8251811015610cf9576001835103811415610bfe57818382815181101515610b3e57fe5b906020019060200201516040516020018083805190602001908083835b60208310610b7a5780518252601f199092019160209182019101610b5b565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310610bc25780518252601f199092019160209182019101610ba3565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529150610cf1565b818382815181101515610c0d57fe5b906020019060200201516040516020018083805190602001908083835b60208310610c495780518252601f199092019160209182019101610c2a565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310610c915780518252601f199092019160209182019101610c72565b6001836020036101000a038019825116818451168082178552505050505050905001807f2c000000000000000000000000000000000000000000000000000000000000008152506001019250505060405160208183030381529060405291505b600101610b1a565b50945090925050505b94509492505050565b600354600160a060020a03163314610d2257600080fd5b600354600160a060020a0316ff5b60005481565b6060610d49610d436117ab565b836117b1565b92915050565b60015481565b600354600090600160a060020a03163314610d6f57600080fd5b60606005846040518082805190602001908083835b60208310610da35780518252601f199092019160209182019101610d84565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820185208054808402870184019092528186529350915060009084015b82821015610e935760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610e7f5780601f10610e5457610100808354040283529160200191610e7f565b820191906000526020600020905b815481529060010190602001808311610e6257829003601f168201915b505050505081526020019060010190610de8565b509293506000925050505b8151811015610f7657835160208501208251839083908110610ebc57fe5b906020019060200201516040518082805190602001908083835b60208310610ef55780518252601f199092019160209182019101610ed6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390201415610f6e57604080513381526001602082015281517fdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319929181900390910190a1600092505050610d49565b600101610e9e565b506005846040518082805190602001908083835b60208310610fa95780518252601f199092019160209182019101610f8a565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810190932080546001810180835560009283529185902088519295610ffc9550910192508701906118e4565b5050604080513381526000602082015281517fdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319929181900390910190a15060019392505050565b600254600160a060020a0316331461105a57600080fd5b600160a060020a038116151561106f57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60006005826040518082805190602001908083835b602083106110d25780518252601f1990920191602091820191016110b3565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054949350505050565b600354600160a060020a031681565b600354600160a060020a0316331461112c57600080fd5b806006836040518082805190602001908083835b6020831061115f5780518252601f199092019160209182019101611140565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810190932084516111a095919491909101925090506118e4565b505050565b600454600160a060020a031681565b600060606111c183610d36565b90506005816040518082805190602001908083835b602083106111f55780518252601f1990920191602091820191016111d6565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205495945050505050565b600354600160a060020a0316331461124157600080fd5b600160a060020a038116151561125657600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600090600160a060020a0316331461129f57600080fd5b60606005846040518082805190602001908083835b602083106112d35780518252601f1990920191602091820191016112b4565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820185208054808402870184019092528186529350915060009084015b828210156113c35760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156113af5780601f10611384576101008083540402835291602001916113af565b820191906000526020600020905b81548152906001019060200180831161139257829003601f168201915b505050505081526020019060010190611318565b509293506000925050505b815181101561165a578351602085012082518390839081106113ec57fe5b906020019060200201516040518082805190602001908083835b602083106114255780518252601f199092019160209182019101611406565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020141561165257815160001901811461150c5781518290600019810190811061147657fe5b906020019060200201516005866040518082805190602001908083835b602083106114b25780518252601f199092019160209182019101611493565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805490925084915081106114ed57fe5b90600052602060002001908051906020019061150a9291906118e4565b505b6005856040518082805190602001908083835b6020831061153e5780518252601f19909201916020918201910161151f565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600183510381548110151561158257fe5b9060005260206000200160006115989190611962565b60016005866040518082805190602001908083835b602083106115cc5780518252601f1990920191602091820191016115ad565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092208054939093039261160b92509050826119a9565b50604080513381526000602082015281517f5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c929181900390910190a1600192505050610d49565b6001016113ce565b50604080513381526001602082015281517f5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c929181900390910190a15060009392505050565b60606000805b84518110156116e4576116d085828151811015156116c057fe5b906020019060200201518561182a565b156116dc576001909101905b6001016116a6565b5060608160405190808252806020026020018201604052801561171b57816020015b60608152602001906001900390816117065790505b50905081151561172e579150610d499050565b60009150815b85518110156117a25761175e868281518110151561174e57fe5b906020019060200201518661182a565b1561179a57858181518110151561177157fe5b90602001906020020151828481518110151561178957fe5b602090810290910101526001909201915b600101611734565b50949350505050565b600b5b90565b604080517f6d616b654944537472696e6728696e742c6164647265737329000000000000008152815190819003601901812080825260e085901b60048301819052600883018590526060939192909160ff919081602881856000fa80151561181857600080fd5b50604080820190529695505050505050565b805182516000919081111561183d575082515b60005b818110156118d957838181518110151561185657fe5b90602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916858281518110151561189257fe5b01602001517fff0000000000000000000000000000000000000000000000000000000000000060f891821c90911b16146118d157600092505050610d49565b600101611840565b506001949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061192557805160ff1916838001178555611952565b82800160010185558215611952579182015b82811115611952578251825591602001919060010190611937565b5061195e9291506119cd565b5090565b50805460018160011615610100020316600290046000825580601f1061198857506119a6565b601f0160209004906000526020600020908101906119a691906119cd565b50565b8154818355818111156111a0576000838152602090206111a09181019083016119e7565b6117ae91905b8082111561195e57600081556001016119d3565b6117ae91905b8082111561195e576000611a018282611962565b506001016119ed56fea165627a7a7230582014bb98179c20ed0eaccc1718562815ac1d9f123f1b10214811f7ed7b148c39dc0029",
}

// KmsManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use KmsManagerMetaData.ABI instead.
var KmsManagerABI = KmsManagerMetaData.ABI

// Deprecated: Use KmsManagerMetaData.Sigs instead.
// KmsManagerFuncSigs maps the 4-byte function signature to its string representation.
var KmsManagerFuncSigs = KmsManagerMetaData.Sigs

// KmsManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use KmsManagerMetaData.Bin instead.
var KmsManagerBin = KmsManagerMetaData.Bin

// DeployKmsManager deploys a new Ethereum contract, binding an instance of KmsManager to it.
func DeployKmsManager(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *KmsManager, error) {
	parsed, err := ParsedABI(K_KmsManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(KmsManagerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &KmsManager{KmsManagerCaller: KmsManagerCaller{contract: contract}, KmsManagerTransactor: KmsManagerTransactor{contract: contract}, KmsManagerFilterer: KmsManagerFilterer{contract: contract}}, nil
}

// KmsManager is an auto generated Go binding around an Ethereum contract.
type KmsManager struct {
	KmsManagerCaller     // Read-only binding to the contract
	KmsManagerTransactor // Write-only binding to the contract
	KmsManagerFilterer   // Log filterer for contract events
}

// KmsManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type KmsManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KmsManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KmsManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KmsManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KmsManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewKmsManager creates a new instance of KmsManager, bound to a specific deployed contract.
func NewKmsManager(address common.Address, backend bind.ContractBackend) (*KmsManager, error) {
	contract, err := bindKmsManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &KmsManager{KmsManagerCaller: KmsManagerCaller{contract: contract}, KmsManagerTransactor: KmsManagerTransactor{contract: contract}, KmsManagerFilterer: KmsManagerFilterer{contract: contract}}, nil
}

// NewKmsManagerCaller creates a new read-only instance of KmsManager, bound to a specific deployed contract.
func NewKmsManagerCaller(address common.Address, caller bind.ContractCaller) (*KmsManagerCaller, error) {
	contract, err := bindKmsManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KmsManagerCaller{contract: contract}, nil
}

// NewKmsManagerTransactor creates a new write-only instance of KmsManager, bound to a specific deployed contract.
func NewKmsManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*KmsManagerTransactor, error) {
	contract, err := bindKmsManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KmsManagerTransactor{contract: contract}, nil
}

// NewKmsManagerFilterer creates a new log filterer instance of KmsManager, bound to a specific deployed contract.
func NewKmsManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*KmsManagerFilterer, error) {
	contract, err := bindKmsManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KmsManagerFilterer{contract: contract}, nil
}

// bindKmsManager binds a generic wrapper to an already deployed contract.
func bindKmsManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_KmsManager)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) view returns(uint256)
func (_KmsManager *KmsManagerCaller) CheckKMS(opts *bind.CallOpts, _kmsIdStr string) (*big.Int, error) {
	var out []interface{}
	err := _KmsManager.contract.Call(opts, &out, "checkKMS", _kmsIdStr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) view returns(uint256)
func (_KmsManager *KmsManagerCaller) CheckKMSAddr(opts *bind.CallOpts, _kmsAddr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _KmsManager.contract.Call(opts, &out, "checkKMSAddr", _kmsAddr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_KmsManager *KmsManagerCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _KmsManager.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_KmsManager *KmsManagerCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _KmsManager.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) view returns(string)
func (_KmsManager *KmsManagerCaller) GetKMSID(opts *bind.CallOpts, _kmsAddr common.Address) (string, error) {
	var out []interface{}
	err := _KmsManager.contract.Call(opts, &out, "getKMSID", _kmsAddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) view returns(string, string)
func (_KmsManager *KmsManagerCaller) GetKMSInfo(opts *bind.CallOpts, _kmsID string, prefix []byte) (string, string, error) {
	var out []interface{}
	err := _KmsManager.contract.Call(opts, &out, "getKMSInfo", _kmsID, prefix)

	if err != nil {
		return *new(string), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_KmsManager *KmsManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _KmsManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_KmsManager *KmsManagerCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _KmsManager.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_KmsManager *KmsManagerCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _KmsManager.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AddKMSLocator is a paid mutator transaction binding the contract method 0x653a92f6.
//
// Solidity: function addKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_KmsManager *KmsManagerTransactor) AddKMSLocator(opts *bind.TransactOpts, _kmsID string, _locator []byte) (*types.Transaction, error) {
	return _KmsManager.contract.Transact(opts, "addKMSLocator", _kmsID, _locator)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_KmsManager *KmsManagerTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KmsManager.contract.Transact(opts, "kill")
}

// RemoveKMSLocator is a paid mutator transaction binding the contract method 0xfe7ac19f.
//
// Solidity: function removeKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_KmsManager *KmsManagerTransactor) RemoveKMSLocator(opts *bind.TransactOpts, _kmsID string, _locator []byte) (*types.Transaction, error) {
	return _KmsManager.contract.Transact(opts, "removeKMSLocator", _kmsID, _locator)
}

// SetKMSPublicKey is a paid mutator transaction binding the contract method 0xa69cb734.
//
// Solidity: function setKMSPublicKey(string _kmsID, string _pubKey) returns()
func (_KmsManager *KmsManagerTransactor) SetKMSPublicKey(opts *bind.TransactOpts, _kmsID string, _pubKey string) (*types.Transaction, error) {
	return _KmsManager.contract.Transact(opts, "setKMSPublicKey", _kmsID, _pubKey)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_KmsManager *KmsManagerTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _KmsManager.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_KmsManager *KmsManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _KmsManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_KmsManager *KmsManagerTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _KmsManager.contract.RawTransact(opts, calldata)
}

// KmsManagerAddKMSLocatorIterator is returned from FilterAddKMSLocator and is used to iterate over the raw logs and unpacked data for AddKMSLocator events raised by the KmsManager contract.
type KmsManagerAddKMSLocatorIterator struct {
	Event *KmsManagerAddKMSLocator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsManagerAddKMSLocatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsManagerAddKMSLocator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsManagerAddKMSLocator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsManagerAddKMSLocatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsManagerAddKMSLocatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsManagerAddKMSLocator represents a AddKMSLocator event raised by the KmsManager contract.
type KmsManagerAddKMSLocator struct {
	Sender common.Address
	Status *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterAddKMSLocator is a free log retrieval operation binding the contract event 0xdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319.
//
// Solidity: event AddKMSLocator(address sender, uint256 status)
func (_KmsManager *KmsManagerFilterer) FilterAddKMSLocator(opts *bind.FilterOpts) (*KmsManagerAddKMSLocatorIterator, error) {

	logs, sub, err := _KmsManager.contract.FilterLogs(opts, "AddKMSLocator")
	if err != nil {
		return nil, err
	}
	return &KmsManagerAddKMSLocatorIterator{contract: _KmsManager.contract, event: "AddKMSLocator", logs: logs, sub: sub}, nil
}

// WatchAddKMSLocator is a free log subscription operation binding the contract event 0xdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319.
//
// Solidity: event AddKMSLocator(address sender, uint256 status)
func (_KmsManager *KmsManagerFilterer) WatchAddKMSLocator(opts *bind.WatchOpts, sink chan<- *KmsManagerAddKMSLocator) (event.Subscription, error) {

	logs, sub, err := _KmsManager.contract.WatchLogs(opts, "AddKMSLocator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsManagerAddKMSLocator)
				if err := _KmsManager.contract.UnpackLog(event, "AddKMSLocator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddKMSLocator is a log parse operation binding the contract event 0xdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319.
//
// Solidity: event AddKMSLocator(address sender, uint256 status)
func (_KmsManager *KmsManagerFilterer) ParseAddKMSLocator(log types.Log) (*KmsManagerAddKMSLocator, error) {
	event := new(KmsManagerAddKMSLocator)
	if err := _KmsManager.contract.UnpackLog(event, "AddKMSLocator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KmsManagerRemoveKMSLocatorIterator is returned from FilterRemoveKMSLocator and is used to iterate over the raw logs and unpacked data for RemoveKMSLocator events raised by the KmsManager contract.
type KmsManagerRemoveKMSLocatorIterator struct {
	Event *KmsManagerRemoveKMSLocator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KmsManagerRemoveKMSLocatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KmsManagerRemoveKMSLocator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KmsManagerRemoveKMSLocator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KmsManagerRemoveKMSLocatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KmsManagerRemoveKMSLocatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KmsManagerRemoveKMSLocator represents a RemoveKMSLocator event raised by the KmsManager contract.
type KmsManagerRemoveKMSLocator struct {
	Sender common.Address
	Status *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRemoveKMSLocator is a free log retrieval operation binding the contract event 0x5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c.
//
// Solidity: event RemoveKMSLocator(address sender, uint256 status)
func (_KmsManager *KmsManagerFilterer) FilterRemoveKMSLocator(opts *bind.FilterOpts) (*KmsManagerRemoveKMSLocatorIterator, error) {

	logs, sub, err := _KmsManager.contract.FilterLogs(opts, "RemoveKMSLocator")
	if err != nil {
		return nil, err
	}
	return &KmsManagerRemoveKMSLocatorIterator{contract: _KmsManager.contract, event: "RemoveKMSLocator", logs: logs, sub: sub}, nil
}

// WatchRemoveKMSLocator is a free log subscription operation binding the contract event 0x5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c.
//
// Solidity: event RemoveKMSLocator(address sender, uint256 status)
func (_KmsManager *KmsManagerFilterer) WatchRemoveKMSLocator(opts *bind.WatchOpts, sink chan<- *KmsManagerRemoveKMSLocator) (event.Subscription, error) {

	logs, sub, err := _KmsManager.contract.WatchLogs(opts, "RemoveKMSLocator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KmsManagerRemoveKMSLocator)
				if err := _KmsManager.contract.UnpackLog(event, "RemoveKMSLocator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveKMSLocator is a log parse operation binding the contract event 0x5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c.
//
// Solidity: event RemoveKMSLocator(address sender, uint256 status)
func (_KmsManager *KmsManagerFilterer) ParseRemoveKMSLocator(log types.Log) (*KmsManagerRemoveKMSLocator, error) {
	event := new(KmsManagerRemoveKMSLocator)
	if err := _KmsManager.contract.UnpackLog(event, "RemoveKMSLocator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MetaObjectMetaData contains all meta data concerning the MetaObject contract.
var MetaObjectMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"af570c04": "contentSpace()",
		"02d05d3f": "creator()",
		"ac55c906": "getMeta(bytes)",
		"24d7806c": "isAdmin(address)",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"e542b7cb": "putMeta(bytes,bytes)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
	},
	Bin: "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060015560028054600160a060020a031990811632179091556003805490911633179055610a458061007b6000396000f3fe60806040526004361061009c5760003560e01c80636d2e4b1b116100645780636d2e4b1b146101675780638da5cb5b1461019a578063ac55c906146101af578063af570c04146102d7578063e542b7cb146102ec578063f2fde38b146104265761009c565b806302d05d3f1461009e57806324d7806c146100cf57806341c0e1b51461011657806354fd4d501461012b5780635f4fcae114610152575b005b3480156100aa57600080fd5b506100b3610459565b60408051600160a060020a039092168252519081900360200190f35b3480156100db57600080fd5b50610102600480360360208110156100f257600080fd5b5035600160a060020a0316610468565b604080519115158252519081900360200190f35b34801561012257600080fd5b5061009c610492565b34801561013757600080fd5b506101406104b7565b60408051918252519081900360200190f35b34801561015e57600080fd5b506101406104bd565b34801561017357600080fd5b5061009c6004803603602081101561018a57600080fd5b5035600160a060020a03166104c3565b3480156101a657600080fd5b506100b361051e565b3480156101bb57600080fd5b50610262600480360360208110156101d257600080fd5b8101906020810181356401000000008111156101ed57600080fd5b8201836020820111156101ff57600080fd5b8035906020019184600183028401116401000000008311171561022157600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061052d945050505050565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561029c578181015183820152602001610284565b50505050905090810190601f1680156102c95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102e357600080fd5b506100b36106d6565b3480156102f857600080fd5b5061009c6004803603604081101561030f57600080fd5b81019060208101813564010000000081111561032a57600080fd5b82018360208201111561033c57600080fd5b8035906020019184600183028401116401000000008311171561035e57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156103b157600080fd5b8201836020820111156103c357600080fd5b803590602001918460018302840111640100000000831117156103e557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506106e5945050505050565b34801561043257600080fd5b5061009c6004803603602081101561044957600080fd5b5035600160a060020a03166108dc565b600254600160a060020a031681565b600354600090600160a060020a03838116911614156104895750600161048d565b5060005b919050565b600354600160a060020a031633146104a957600080fd5b600354600160a060020a0316ff5b60005481565b60015481565b600254600160a060020a031633146104da57600080fd5b600160a060020a03811615156104ef57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b6060602082511115156105e45781518083015160008181526005602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845293949390918301828280156105d65780601f106105ab576101008083540402835291602001916105d6565b820191906000526020600020905b8154815290600101906020018083116105b957829003601f168201915b50505050509250505061048d565b6006826040518082805190602001908083835b602083106106165780518252601f1990920191602091820191016105f7565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156106ca5780601f1061069f576101008083540402835291602001916106ca565b820191906000526020600020905b8154815290600101906020018083116106ad57829003601f168201915b50505050509050919050565b600454600160a060020a031681565b6106ee33610468565b15156106f957600080fd5b815160201061075457815180830151600081815260056020526040812091929161072291610937565b60008351111561074d576000828152600560209081526040909120845161074b9286019061097e565b505b505061083f565b6006826040518082805190602001908083835b602083106107865780518252601f199092019160209182019101610767565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092206107bf925090506000610937565b60008151111561083f57806006836040518082805190602001908083835b602083106107fc5780518252601f1990920191602091820191016107dd565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320845161083d959194919091019250905061097e565b505b7fe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c826040518080602001828103825283818151815260200191508051906020019080838360005b8381101561089e578181015183820152602001610886565b50505050905090810190601f1680156108cb5780820380516001836020036101000a031916815260200191505b509250505060405180910390a15050565b600354600160a060020a031633146108f357600080fd5b600160a060020a038116151561090857600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b50805460018160011615610100020316600290046000825580601f1061095d575061097b565b601f01602090049060005260206000209081019061097b91906109fc565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106109bf57805160ff19168380011785556109ec565b828001600101855582156109ec579182015b828111156109ec5782518255916020019190600101906109d1565b506109f89291506109fc565b5090565b610a1691905b808211156109f85760008155600101610a02565b9056fea165627a7a7230582090d9581d56c4f32d6dde865d9012c9c1119f2cbe842063f1111a16ad81e29cfa0029",
}

// MetaObjectABI is the input ABI used to generate the binding from.
// Deprecated: Use MetaObjectMetaData.ABI instead.
var MetaObjectABI = MetaObjectMetaData.ABI

// Deprecated: Use MetaObjectMetaData.Sigs instead.
// MetaObjectFuncSigs maps the 4-byte function signature to its string representation.
var MetaObjectFuncSigs = MetaObjectMetaData.Sigs

// MetaObjectBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MetaObjectMetaData.Bin instead.
var MetaObjectBin = MetaObjectMetaData.Bin

// DeployMetaObject deploys a new Ethereum contract, binding an instance of MetaObject to it.
func DeployMetaObject(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MetaObject, error) {
	parsed, err := ParsedABI(K_MetaObject)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MetaObjectBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MetaObject{MetaObjectCaller: MetaObjectCaller{contract: contract}, MetaObjectTransactor: MetaObjectTransactor{contract: contract}, MetaObjectFilterer: MetaObjectFilterer{contract: contract}}, nil
}

// MetaObject is an auto generated Go binding around an Ethereum contract.
type MetaObject struct {
	MetaObjectCaller     // Read-only binding to the contract
	MetaObjectTransactor // Write-only binding to the contract
	MetaObjectFilterer   // Log filterer for contract events
}

// MetaObjectCaller is an auto generated read-only Go binding around an Ethereum contract.
type MetaObjectCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetaObjectTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MetaObjectTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetaObjectFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MetaObjectFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewMetaObject creates a new instance of MetaObject, bound to a specific deployed contract.
func NewMetaObject(address common.Address, backend bind.ContractBackend) (*MetaObject, error) {
	contract, err := bindMetaObject(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MetaObject{MetaObjectCaller: MetaObjectCaller{contract: contract}, MetaObjectTransactor: MetaObjectTransactor{contract: contract}, MetaObjectFilterer: MetaObjectFilterer{contract: contract}}, nil
}

// NewMetaObjectCaller creates a new read-only instance of MetaObject, bound to a specific deployed contract.
func NewMetaObjectCaller(address common.Address, caller bind.ContractCaller) (*MetaObjectCaller, error) {
	contract, err := bindMetaObject(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MetaObjectCaller{contract: contract}, nil
}

// NewMetaObjectTransactor creates a new write-only instance of MetaObject, bound to a specific deployed contract.
func NewMetaObjectTransactor(address common.Address, transactor bind.ContractTransactor) (*MetaObjectTransactor, error) {
	contract, err := bindMetaObject(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MetaObjectTransactor{contract: contract}, nil
}

// NewMetaObjectFilterer creates a new log filterer instance of MetaObject, bound to a specific deployed contract.
func NewMetaObjectFilterer(address common.Address, filterer bind.ContractFilterer) (*MetaObjectFilterer, error) {
	contract, err := bindMetaObject(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MetaObjectFilterer{contract: contract}, nil
}

// bindMetaObject binds a generic wrapper to an already deployed contract.
func bindMetaObject(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_MetaObject)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_MetaObject *MetaObjectCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MetaObject.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_MetaObject *MetaObjectCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MetaObject.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) view returns(bytes)
func (_MetaObject *MetaObjectCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var out []interface{}
	err := _MetaObject.contract.Call(opts, &out, "getMeta", key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) view returns(bool)
func (_MetaObject *MetaObjectCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _MetaObject.contract.Call(opts, &out, "isAdmin", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MetaObject *MetaObjectCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MetaObject.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_MetaObject *MetaObjectCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _MetaObject.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_MetaObject *MetaObjectCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _MetaObject.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_MetaObject *MetaObjectTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "kill")
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_MetaObject *MetaObjectTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "putMeta", key, value)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_MetaObject *MetaObjectTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MetaObject *MetaObjectTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_MetaObject *MetaObjectTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _MetaObject.contract.RawTransact(opts, calldata)
}

// MetaObjectObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the MetaObject contract.
type MetaObjectObjectMetaChangedIterator struct {
	Event *MetaObjectObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MetaObjectObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MetaObjectObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MetaObjectObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MetaObjectObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MetaObjectObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MetaObjectObjectMetaChanged represents a ObjectMetaChanged event raised by the MetaObject contract.
type MetaObjectObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_MetaObject *MetaObjectFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*MetaObjectObjectMetaChangedIterator, error) {

	logs, sub, err := _MetaObject.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &MetaObjectObjectMetaChangedIterator{contract: _MetaObject.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_MetaObject *MetaObjectFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *MetaObjectObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _MetaObject.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MetaObjectObjectMetaChanged)
				if err := _MetaObject.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_MetaObject *MetaObjectFilterer) ParseObjectMetaChanged(log types.Log) (*MetaObjectObjectMetaChanged, error) {
	event := new(MetaObjectObjectMetaChanged)
	if err := _MetaObject.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeMetaData contains all meta data concerning the Node contract.
var NodeMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"label\",\"type\":\"string\"}],\"name\":\"log\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"LogBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"uint256\"}],\"name\":\"LogUint256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"int256\"}],\"name\":\"LogInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"af570c04": "contentSpace()",
		"02d05d3f": "creator()",
		"41c0e1b5": "kill()",
		"41304fac": "log(string)",
		"8da5cb5b": "owner()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
	},
	Bin: "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f4e6f646532303139303331353130353130304d4c00000000000000000000000060055560028054600160a060020a0319908116321790915560038054909116331790556104408061009f6000396000f3fe6080604052600436106100865760003560e01c80635f4fcae1116100595780635f4fcae1146101a85780636d2e4b1b146101bd5780638da5cb5b146101f0578063af570c0414610205578063f2fde38b1461021a57610086565b806302d05d3f1461008857806341304fac146100b957806341c0e1b51461016c57806354fd4d5014610181575b005b34801561009457600080fd5b5061009d61024d565b60408051600160a060020a039092168252519081900360200190f35b3480156100c557600080fd5b50610086600480360360208110156100dc57600080fd5b8101906020810181356401000000008111156100f757600080fd5b82018360208201111561010957600080fd5b8035906020019184600183028401116401000000008311171561012b57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061025c945050505050565b34801561017857600080fd5b5061008661030f565b34801561018d57600080fd5b50610196610334565b60408051918252519081900360200190f35b3480156101b457600080fd5b5061019661033a565b3480156101c957600080fd5b50610086600480360360208110156101e057600080fd5b5035600160a060020a0316610340565b3480156101fc57600080fd5b5061009d61039b565b34801561021157600080fd5b5061009d6103aa565b34801561022657600080fd5b506100866004803603602081101561023d57600080fd5b5035600160a060020a03166103b9565b600254600160a060020a031681565b600354600160a060020a0316331461027357600080fd5b7fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab816040518080602001828103825283818151815260200191508051906020019080838360005b838110156102d25781810151838201526020016102ba565b50505050905090810190601f1680156102ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b600354600160a060020a0316331461032657600080fd5b600354600160a060020a0316ff5b60055481565b60015481565b600254600160a060020a0316331461035757600080fd5b600160a060020a038116151561036c57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b600354600160a060020a031633146103d057600080fd5b600160a060020a03811615156103e557600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a7230582046c9f812e7817b0cca47376ef7a772f3f179d92338960332cf7a853a1dd983f90029",
}

// NodeABI is the input ABI used to generate the binding from.
// Deprecated: Use NodeMetaData.ABI instead.
var NodeABI = NodeMetaData.ABI

// Deprecated: Use NodeMetaData.Sigs instead.
// NodeFuncSigs maps the 4-byte function signature to its string representation.
var NodeFuncSigs = NodeMetaData.Sigs

// NodeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NodeMetaData.Bin instead.
var NodeBin = NodeMetaData.Bin

// DeployNode deploys a new Ethereum contract, binding an instance of Node to it.
func DeployNode(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Node, error) {
	parsed, err := ParsedABI(K_Node)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NodeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Node{NodeCaller: NodeCaller{contract: contract}, NodeTransactor: NodeTransactor{contract: contract}, NodeFilterer: NodeFilterer{contract: contract}}, nil
}

// Node is an auto generated Go binding around an Ethereum contract.
type Node struct {
	NodeCaller     // Read-only binding to the contract
	NodeTransactor // Write-only binding to the contract
	NodeFilterer   // Log filterer for contract events
}

// NodeCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewNode creates a new instance of Node, bound to a specific deployed contract.
func NewNode(address common.Address, backend bind.ContractBackend) (*Node, error) {
	contract, err := bindNode(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Node{NodeCaller: NodeCaller{contract: contract}, NodeTransactor: NodeTransactor{contract: contract}, NodeFilterer: NodeFilterer{contract: contract}}, nil
}

// NewNodeCaller creates a new read-only instance of Node, bound to a specific deployed contract.
func NewNodeCaller(address common.Address, caller bind.ContractCaller) (*NodeCaller, error) {
	contract, err := bindNode(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodeCaller{contract: contract}, nil
}

// NewNodeTransactor creates a new write-only instance of Node, bound to a specific deployed contract.
func NewNodeTransactor(address common.Address, transactor bind.ContractTransactor) (*NodeTransactor, error) {
	contract, err := bindNode(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodeTransactor{contract: contract}, nil
}

// NewNodeFilterer creates a new log filterer instance of Node, bound to a specific deployed contract.
func NewNodeFilterer(address common.Address, filterer bind.ContractFilterer) (*NodeFilterer, error) {
	contract, err := bindNode(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodeFilterer{contract: contract}, nil
}

// bindNode binds a generic wrapper to an already deployed contract.
func bindNode(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Node)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_Node *NodeCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Node.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_Node *NodeCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Node.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Node *NodeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Node.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_Node *NodeCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Node.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_Node *NodeCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Node.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Node *NodeTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "kill")
}

// Log is a paid mutator transaction binding the contract method 0x41304fac.
//
// Solidity: function log(string label) returns()
func (_Node *NodeTransactor) Log(opts *bind.TransactOpts, label string) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "log", label)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Node *NodeTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Node *NodeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Node *NodeTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Node.contract.RawTransact(opts, calldata)
}

// NodeLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the Node contract.
type NodeLogIterator struct {
	Event *NodeLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLog represents a Log event raised by the Node contract.
type NodeLog struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Node *NodeFilterer) FilterLog(opts *bind.FilterOpts) (*NodeLogIterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return &NodeLogIterator{contract: _Node.contract, event: "Log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Node *NodeFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *NodeLog) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLog)
				if err := _Node.contract.UnpackLog(event, "Log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Node *NodeFilterer) ParseLog(log types.Log) (*NodeLog, error) {
	event := new(NodeLog)
	if err := _Node.contract.UnpackLog(event, "Log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the Node contract.
type NodeLogAddressIterator struct {
	Event *NodeLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogAddress represents a LogAddress event raised by the Node contract.
type NodeLogAddress struct {
	Label string
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Node *NodeFilterer) FilterLogAddress(opts *bind.FilterOpts) (*NodeLogAddressIterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return &NodeLogAddressIterator{contract: _Node.contract, event: "LogAddress", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Node *NodeFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *NodeLogAddress) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogAddress)
				if err := _Node.contract.UnpackLog(event, "LogAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Node *NodeFilterer) ParseLogAddress(log types.Log) (*NodeLogAddress, error) {
	event := new(NodeLogAddress)
	if err := _Node.contract.UnpackLog(event, "LogAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeLogBoolIterator is returned from FilterLogBool and is used to iterate over the raw logs and unpacked data for LogBool events raised by the Node contract.
type NodeLogBoolIterator struct {
	Event *NodeLogBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogBool represents a LogBool event raised by the Node contract.
type NodeLogBool struct {
	Label string
	B     bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBool is a free log retrieval operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Node *NodeFilterer) FilterLogBool(opts *bind.FilterOpts) (*NodeLogBoolIterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return &NodeLogBoolIterator{contract: _Node.contract, event: "LogBool", logs: logs, sub: sub}, nil
}

// WatchLogBool is a free log subscription operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Node *NodeFilterer) WatchLogBool(opts *bind.WatchOpts, sink chan<- *NodeLogBool) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogBool)
				if err := _Node.contract.UnpackLog(event, "LogBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBool is a log parse operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Node *NodeFilterer) ParseLogBool(log types.Log) (*NodeLogBool, error) {
	event := new(NodeLogBool)
	if err := _Node.contract.UnpackLog(event, "LogBool", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the Node contract.
type NodeLogBytes32Iterator struct {
	Event *NodeLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogBytes32 represents a LogBytes32 event raised by the Node contract.
type NodeLogBytes32 struct {
	Label string
	B     [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Node *NodeFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*NodeLogBytes32Iterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return &NodeLogBytes32Iterator{contract: _Node.contract, event: "LogBytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Node *NodeFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *NodeLogBytes32) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogBytes32)
				if err := _Node.contract.UnpackLog(event, "LogBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Node *NodeFilterer) ParseLogBytes32(log types.Log) (*NodeLogBytes32, error) {
	event := new(NodeLogBytes32)
	if err := _Node.contract.UnpackLog(event, "LogBytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeLogInt256Iterator is returned from FilterLogInt256 and is used to iterate over the raw logs and unpacked data for LogInt256 events raised by the Node contract.
type NodeLogInt256Iterator struct {
	Event *NodeLogInt256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogInt256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogInt256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogInt256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogInt256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogInt256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogInt256 represents a LogInt256 event raised by the Node contract.
type NodeLogInt256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogInt256 is a free log retrieval operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Node *NodeFilterer) FilterLogInt256(opts *bind.FilterOpts) (*NodeLogInt256Iterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return &NodeLogInt256Iterator{contract: _Node.contract, event: "LogInt256", logs: logs, sub: sub}, nil
}

// WatchLogInt256 is a free log subscription operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Node *NodeFilterer) WatchLogInt256(opts *bind.WatchOpts, sink chan<- *NodeLogInt256) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogInt256)
				if err := _Node.contract.UnpackLog(event, "LogInt256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt256 is a log parse operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Node *NodeFilterer) ParseLogInt256(log types.Log) (*NodeLogInt256, error) {
	event := new(NodeLogInt256)
	if err := _Node.contract.UnpackLog(event, "LogInt256", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeLogUint256Iterator is returned from FilterLogUint256 and is used to iterate over the raw logs and unpacked data for LogUint256 events raised by the Node contract.
type NodeLogUint256Iterator struct {
	Event *NodeLogUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogUint256 represents a LogUint256 event raised by the Node contract.
type NodeLogUint256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogUint256 is a free log retrieval operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Node *NodeFilterer) FilterLogUint256(opts *bind.FilterOpts) (*NodeLogUint256Iterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return &NodeLogUint256Iterator{contract: _Node.contract, event: "LogUint256", logs: logs, sub: sub}, nil
}

// WatchLogUint256 is a free log subscription operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Node *NodeFilterer) WatchLogUint256(opts *bind.WatchOpts, sink chan<- *NodeLogUint256) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogUint256)
				if err := _Node.contract.UnpackLog(event, "LogUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint256 is a log parse operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Node *NodeFilterer) ParseLogUint256(log types.Log) (*NodeLogUint256, error) {
	event := new(NodeLogUint256)
	if err := _Node.contract.UnpackLog(event, "LogUint256", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeSpaceMetaData contains all meta data concerning the NodeSpace contract.
var NodeSpaceMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"submitNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numActiveNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"addNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"removeNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"approveNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPendingNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"AddNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"RemoveNode\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"52f82dd8": "activeNodeAddresses(uint256)",
		"5272ae17": "activeNodeLocators(uint256)",
		"64f0f050": "addNode(address,bytes)",
		"dd4c97a0": "approveNode(address)",
		"26683e14": "canNodePublish(address)",
		"af570c04": "contentSpace()",
		"02d05d3f": "creator()",
		"41c0e1b5": "kill()",
		"43f59ec7": "numActiveNodes()",
		"f41a1587": "numPendingNodes()",
		"8da5cb5b": "owner()",
		"6be9514c": "pendingNodeAddresses(uint256)",
		"69e30ff8": "pendingNodeLocators(uint256)",
		"b2b99ec9": "removeNode(address)",
		"160eee74": "submitNode(bytes)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
	},
	Bin: "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e3000000000000000000000000000000000000000000000000000000000006001557f4e6f6465537061636532303139303532383137303130304d4c0000000000000060055560028054600160a060020a0319908116321790915560038054909116331790556115238061009f6000396000f3fe6080604052600436106101145760003560e01c806364f0f050116100a0578063af570c0411610064578063af570c04146104cf578063b2b99ec9146104e4578063dd4c97a014610517578063f2fde38b1461054a578063f41a15871461057d57610114565b806364f0f0501461037057806369e30ff8146104335780636be9514c1461045d5780636d2e4b1b146104875780638da5cb5b146104ba57610114565b806343f59ec7116100e757806343f59ec7146102565780635272ae171461027d57806352f82dd81461031c57806354fd4d50146103465780635f4fcae11461035b57610114565b806302d05d3f14610116578063160eee741461014757806326683e14146101fa57806341c0e1b514610241575b005b34801561012257600080fd5b5061012b610592565b60408051600160a060020a039092168252519081900360200190f35b34801561015357600080fd5b506101146004803603602081101561016a57600080fd5b81019060208101813564010000000081111561018557600080fd5b82018360208201111561019757600080fd5b803590602001918460018302840111640100000000831117156101b957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506105a1945050505050565b34801561020657600080fd5b5061022d6004803603602081101561021d57600080fd5b5035600160a060020a0316610961565b604080519115158252519081900360200190f35b34801561024d57600080fd5b506101146109c0565b34801561026257600080fd5b5061026b6109e5565b60408051918252519081900360200190f35b34801561028957600080fd5b506102a7600480360360208110156102a057600080fd5b50356109ec565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102e15781810151838201526020016102c9565b50505050905090810190601f16801561030e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561032857600080fd5b5061012b6004803603602081101561033f57600080fd5b5035610a93565b34801561035257600080fd5b5061026b610abb565b34801561036757600080fd5b5061026b610ac1565b34801561037c57600080fd5b506101146004803603604081101561039357600080fd5b600160a060020a0382351691908101906040810160208201356401000000008111156103be57600080fd5b8201836020820111156103d057600080fd5b803590602001918460018302840111640100000000831117156103f257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610ac7945050505050565b34801561043f57600080fd5b506102a76004803603602081101561045657600080fd5b5035610d02565b34801561046957600080fd5b5061012b6004803603602081101561048057600080fd5b5035610d10565b34801561049357600080fd5b50610114600480360360208110156104aa57600080fd5b5035600160a060020a0316610d1e565b3480156104c657600080fd5b5061012b610d79565b3480156104db57600080fd5b5061012b610d88565b3480156104f057600080fd5b506101146004803603602081101561050757600080fd5b5035600160a060020a0316610d97565b34801561052357600080fd5b506101146004803603602081101561053a57600080fd5b5035600160a060020a0316610e4c565b34801561055657600080fd5b506101146004803603602081101561056d57600080fd5b5035600160a060020a031661107c565b34801561058957600080fd5b5061026b6110d7565b600254600160a060020a031681565b6106d760088054806020026020016040519081016040528092919081815260200182805480156105fa57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116105dc575b50505050506009805480602002602001604051908101604052809291908181526020016000905b828210156106cc5760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156106b85780601f1061068d576101008083540402835291602001916106b8565b820191906000526020600020905b81548152906001019060200180831161069b57829003601f168201915b505050505081526020019060010190610621565b5050505033846110dd565b156106e157600080fd5b61080c600680548060200260200160405190810160405280929190818152602001828054801561073a57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161071c575b50505050506007805480602002602001604051908101604052809291908181526020016000905b828210156106cc5760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156107f85780601f106107cd576101008083540402835291602001916107f8565b820191906000526020600020905b8154815290600101906020018083116107db57829003601f168201915b505050505081526020019060010190610761565b1561081657600080fd5b60085460641161082557600080fd5b60098054600181018083556000929092528251610869917f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01906020850190611337565b50506008805460018101825560009182527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301805473ffffffffffffffffffffffffffffffffffffffff19163390811790915560408051828152602081810183815286519383019390935285517fae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d958794926060850192908601918190849084905b8381101561092357818101518382015260200161090b565b50505050905090810190601f1680156109505780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150565b6000805b6006548110156109b55782600160a060020a031660068281548110151561098857fe5b600091825260209091200154600160a060020a031614156109ad5760019150506109bb565b600101610965565b50600090505b919050565b600354600160a060020a031633146109d757600080fd5b600354600160a060020a0316ff5b6007545b90565b60078054829081106109fa57fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815293509091830182828015610a8b5780601f10610a6057610100808354040283529160200191610a8b565b820191906000526020600020905b815481529060010190602001808311610a6e57829003601f168201915b505050505081565b6006805482908110610aa157fe5b600091825260209091200154600160a060020a0316905081565b60055481565b60015481565b600354600160a060020a03163314610ade57600080fd5b610c146006805480602002602001604051908101604052809291908181526020018280548015610b3757602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610b19575b50505050506007805480602002602001604051908101604052809291908181526020016000905b82821015610c095760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610bf55780601f10610bca57610100808354040283529160200191610bf5565b820191906000526020600020905b815481529060010190602001808311610bd857829003601f168201915b505050505081526020019060010190610b5e565b5050505084846110dd565b15610c1e57600080fd5b6006805460018082019092557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385161790556007805491820180825560009190915282519091610cb9917fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688909101906020850190611337565b505060408051338152600160a060020a038416602082015281517f2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4929181900390910190a15050565b60098054829081106109fa57fe5b6008805482908110610aa157fe5b600254600160a060020a03163314610d3557600080fd5b600160a060020a0381161515610d4a57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b600354600160a060020a03163314610dae57600080fd5b60005b600654811015610e485781600160a060020a0316600682815481101515610dd457fe5b600091825260209091200154600160a060020a03161415610e4057610dfc81600660076111ce565b60408051338152600160a060020a038416602082015281517f41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d929181900390910190a15b600101610db1565b5050565b600354600160a060020a03163314610e6357600080fd5b6000805b60085481101561106f5782600160a060020a0316600882815481101515610e8a57fe5b600091825260209091200154600160a060020a03161415611067576006600882815481101515610eb657fe5b600091825260208083209091015483546001810185559383529120909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055600980546007919083908110610f1057fe5b60009182526020808320845460018181018088559686529290942092018054610f5494939093019290916002610100918316159190910260001901909116046113b5565b50507fd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54600882815481101515610f8657fe5b60009182526020909120015460098054600160a060020a039092169184908110610fac57fe5b600091825260209182902060408051600160a060020a03861681529384018181529190920180546002600019610100600184161502019091160492840183905292916060830190849080156110425780601f1061101757610100808354040283529160200191611042565b820191906000526020600020905b81548152906001019060200180831161102557829003601f168201915b5050935050505060405180910390a161105e81600860096111ce565b6001915061106f565b600101610e67565b50801515610e4857600080fd5b600354600160a060020a0316331461109357600080fd5b600160a060020a03811615156110a857600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60095490565b82518451600091146110ee57600080fd5b60005b85518110156111c05782516020840120855186908390811061110f57fe5b906020019060200201516040518082805190602001908083835b602083106111485780518252601f199092019160209182019101611129565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902014806111a9575083600160a060020a0316868281518110151561119457fe5b90602001906020020151600160a060020a0316145b156111b85760019150506111c6565b6001016110f1565b50600090505b949350505050565b8154831080156111de5750805483105b15156111e957600080fd5b81546000190183146112b05780548190600019810190811061120757fe5b90600052602060002001818481548110151561121f57fe5b9060005260206000200190805460018160011615610100020316600290046112489291906113b5565b5081548290600019810190811061125b57fe5b6000918252602090912001548254600160a060020a039091169083908590811061128157fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b8054819060001981019081106112c257fe5b9060005260206000200160006112d8919061142a565b80546112e8826000198301611471565b508154829060001981019081106112fb57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff19169055815461133183600019830161149a565b50505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061137857805160ff19168380011785556113a5565b828001600101855582156113a5579182015b828111156113a557825182559160200191906001019061138a565b506113b19291506114ba565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106113ee57805485556113a5565b828001600101855582156113a557600052602060002091601f016020900482015b828111156113a557825482559160010191906001019061140f565b50805460018160011615610100020316600290046000825580601f10611450575061146e565b601f01602090049060005260206000209081019061146e91906114ba565b50565b815481835581811115611495576000838152602090206114959181019083016114d4565b505050565b815481835581811115611495576000838152602090206114959181019083015b6109e991905b808211156113b157600081556001016114c0565b6109e991905b808211156113b15760006114ee828261142a565b506001016114da56fea165627a7a723058209655484f451a7c57056352ffea608670169b88ee78052dd4fad0642f15d007a60029",
}

// NodeSpaceABI is the input ABI used to generate the binding from.
// Deprecated: Use NodeSpaceMetaData.ABI instead.
var NodeSpaceABI = NodeSpaceMetaData.ABI

// Deprecated: Use NodeSpaceMetaData.Sigs instead.
// NodeSpaceFuncSigs maps the 4-byte function signature to its string representation.
var NodeSpaceFuncSigs = NodeSpaceMetaData.Sigs

// NodeSpaceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NodeSpaceMetaData.Bin instead.
var NodeSpaceBin = NodeSpaceMetaData.Bin

// DeployNodeSpace deploys a new Ethereum contract, binding an instance of NodeSpace to it.
func DeployNodeSpace(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *NodeSpace, error) {
	parsed, err := ParsedABI(K_NodeSpace)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NodeSpaceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NodeSpace{NodeSpaceCaller: NodeSpaceCaller{contract: contract}, NodeSpaceTransactor: NodeSpaceTransactor{contract: contract}, NodeSpaceFilterer: NodeSpaceFilterer{contract: contract}}, nil
}

// NodeSpace is an auto generated Go binding around an Ethereum contract.
type NodeSpace struct {
	NodeSpaceCaller     // Read-only binding to the contract
	NodeSpaceTransactor // Write-only binding to the contract
	NodeSpaceFilterer   // Log filterer for contract events
}

// NodeSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodeSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodeSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodeSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewNodeSpace creates a new instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpace(address common.Address, backend bind.ContractBackend) (*NodeSpace, error) {
	contract, err := bindNodeSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NodeSpace{NodeSpaceCaller: NodeSpaceCaller{contract: contract}, NodeSpaceTransactor: NodeSpaceTransactor{contract: contract}, NodeSpaceFilterer: NodeSpaceFilterer{contract: contract}}, nil
}

// NewNodeSpaceCaller creates a new read-only instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpaceCaller(address common.Address, caller bind.ContractCaller) (*NodeSpaceCaller, error) {
	contract, err := bindNodeSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodeSpaceCaller{contract: contract}, nil
}

// NewNodeSpaceTransactor creates a new write-only instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*NodeSpaceTransactor, error) {
	contract, err := bindNodeSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodeSpaceTransactor{contract: contract}, nil
}

// NewNodeSpaceFilterer creates a new log filterer instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*NodeSpaceFilterer, error) {
	contract, err := bindNodeSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodeSpaceFilterer{contract: contract}, nil
}

// bindNodeSpace binds a generic wrapper to an already deployed contract.
func bindNodeSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_NodeSpace)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) view returns(address)
func (_NodeSpace *NodeSpaceCaller) ActiveNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "activeNodeAddresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) view returns(bytes)
func (_NodeSpace *NodeSpaceCaller) ActiveNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "activeNodeLocators", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) view returns(bool)
func (_NodeSpace *NodeSpaceCaller) CanNodePublish(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "canNodePublish", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_NodeSpace *NodeSpaceCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_NodeSpace *NodeSpaceCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() view returns(uint256)
func (_NodeSpace *NodeSpaceCaller) NumActiveNodes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "numActiveNodes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() view returns(uint256)
func (_NodeSpace *NodeSpaceCaller) NumPendingNodes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "numPendingNodes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NodeSpace *NodeSpaceCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) view returns(address)
func (_NodeSpace *NodeSpaceCaller) PendingNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "pendingNodeAddresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) view returns(bytes)
func (_NodeSpace *NodeSpaceCaller) PendingNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "pendingNodeLocators", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_NodeSpace *NodeSpaceCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_NodeSpace *NodeSpaceCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_NodeSpace *NodeSpaceTransactor) AddNode(opts *bind.TransactOpts, _nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "addNode", _nodeAddr, _locator)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceTransactor) ApproveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "approveNode", _nodeAddr)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_NodeSpace *NodeSpaceTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "kill")
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceTransactor) RemoveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "removeNode", _nodeAddr)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_NodeSpace *NodeSpaceTransactor) SubmitNode(opts *bind.TransactOpts, _locator []byte) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "submitNode", _locator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_NodeSpace *NodeSpaceTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeSpace *NodeSpaceTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_NodeSpace *NodeSpaceTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _NodeSpace.contract.RawTransact(opts, calldata)
}

// NodeSpaceAddNodeIterator is returned from FilterAddNode and is used to iterate over the raw logs and unpacked data for AddNode events raised by the NodeSpace contract.
type NodeSpaceAddNodeIterator struct {
	Event *NodeSpaceAddNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceAddNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceAddNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceAddNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceAddNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceAddNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceAddNode represents a AddNode event raised by the NodeSpace contract.
type NodeSpaceAddNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddNode is a free log retrieval operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) FilterAddNode(opts *bind.FilterOpts) (*NodeSpaceAddNodeIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceAddNodeIterator{contract: _NodeSpace.contract, event: "AddNode", logs: logs, sub: sub}, nil
}

// WatchAddNode is a free log subscription operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) WatchAddNode(opts *bind.WatchOpts, sink chan<- *NodeSpaceAddNode) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceAddNode)
				if err := _NodeSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddNode is a log parse operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) ParseAddNode(log types.Log) (*NodeSpaceAddNode, error) {
	event := new(NodeSpaceAddNode)
	if err := _NodeSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeSpaceNodeApprovedIterator is returned from FilterNodeApproved and is used to iterate over the raw logs and unpacked data for NodeApproved events raised by the NodeSpace contract.
type NodeSpaceNodeApprovedIterator struct {
	Event *NodeSpaceNodeApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceNodeApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceNodeApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceNodeApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceNodeApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceNodeApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceNodeApproved represents a NodeApproved event raised by the NodeSpace contract.
type NodeSpaceNodeApproved struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeApproved is a free log retrieval operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) FilterNodeApproved(opts *bind.FilterOpts) (*NodeSpaceNodeApprovedIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceNodeApprovedIterator{contract: _NodeSpace.contract, event: "NodeApproved", logs: logs, sub: sub}, nil
}

// WatchNodeApproved is a free log subscription operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) WatchNodeApproved(opts *bind.WatchOpts, sink chan<- *NodeSpaceNodeApproved) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceNodeApproved)
				if err := _NodeSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeApproved is a log parse operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) ParseNodeApproved(log types.Log) (*NodeSpaceNodeApproved, error) {
	event := new(NodeSpaceNodeApproved)
	if err := _NodeSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeSpaceNodeSubmittedIterator is returned from FilterNodeSubmitted and is used to iterate over the raw logs and unpacked data for NodeSubmitted events raised by the NodeSpace contract.
type NodeSpaceNodeSubmittedIterator struct {
	Event *NodeSpaceNodeSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceNodeSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceNodeSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceNodeSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceNodeSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceNodeSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceNodeSubmitted represents a NodeSubmitted event raised by the NodeSpace contract.
type NodeSpaceNodeSubmitted struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeSubmitted is a free log retrieval operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) FilterNodeSubmitted(opts *bind.FilterOpts) (*NodeSpaceNodeSubmittedIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceNodeSubmittedIterator{contract: _NodeSpace.contract, event: "NodeSubmitted", logs: logs, sub: sub}, nil
}

// WatchNodeSubmitted is a free log subscription operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) WatchNodeSubmitted(opts *bind.WatchOpts, sink chan<- *NodeSpaceNodeSubmitted) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceNodeSubmitted)
				if err := _NodeSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeSubmitted is a log parse operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) ParseNodeSubmitted(log types.Log) (*NodeSpaceNodeSubmitted, error) {
	event := new(NodeSpaceNodeSubmitted)
	if err := _NodeSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeSpaceRemoveNodeIterator is returned from FilterRemoveNode and is used to iterate over the raw logs and unpacked data for RemoveNode events raised by the NodeSpace contract.
type NodeSpaceRemoveNodeIterator struct {
	Event *NodeSpaceRemoveNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceRemoveNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceRemoveNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceRemoveNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceRemoveNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceRemoveNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceRemoveNode represents a RemoveNode event raised by the NodeSpace contract.
type NodeSpaceRemoveNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRemoveNode is a free log retrieval operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) FilterRemoveNode(opts *bind.FilterOpts) (*NodeSpaceRemoveNodeIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceRemoveNodeIterator{contract: _NodeSpace.contract, event: "RemoveNode", logs: logs, sub: sub}, nil
}

// WatchRemoveNode is a free log subscription operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) WatchRemoveNode(opts *bind.WatchOpts, sink chan<- *NodeSpaceRemoveNode) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceRemoveNode)
				if err := _NodeSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveNode is a log parse operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) ParseRemoveNode(log types.Log) (*NodeSpaceRemoveNode, error) {
	event := new(NodeSpaceRemoveNode)
	if err := _NodeSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OwnableMetaData contains all meta data concerning the Ownable contract.
var OwnableMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
	Sigs: map[string]string{
		"af570c04": "contentSpace()",
		"02d05d3f": "creator()",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
	},
	Bin: "0x60806040527f4f776e61626c653230323030393238313130303030504f0000000000000000006000557f332e30000000000000000000000000000000000000000000000000000000000060015560028054600160a060020a0319908116321790915560038054909116331790556102cf8061007b6000396000f3fe60806040526004361061007b5760003560e01c80636d2e4b1b1161004e5780636d2e4b1b146100ff5780638da5cb5b14610132578063af570c0414610147578063f2fde38b1461015c5761007b565b806302d05d3f1461007d57806341c0e1b5146100ae57806354fd4d50146100c35780635f4fcae1146100ea575b005b34801561008957600080fd5b5061009261018f565b60408051600160a060020a039092168252519081900360200190f35b3480156100ba57600080fd5b5061007b61019e565b3480156100cf57600080fd5b506100d86101c3565b60408051918252519081900360200190f35b3480156100f657600080fd5b506100d86101c9565b34801561010b57600080fd5b5061007b6004803603602081101561012257600080fd5b5035600160a060020a03166101cf565b34801561013e57600080fd5b5061009261022a565b34801561015357600080fd5b50610092610239565b34801561016857600080fd5b5061007b6004803603602081101561017f57600080fd5b5035600160a060020a0316610248565b600254600160a060020a031681565b600354600160a060020a031633146101b557600080fd5b600354600160a060020a0316ff5b60005481565b60015481565b600254600160a060020a031633146101e657600080fd5b600160a060020a03811615156101fb57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600454600160a060020a031681565b600354600160a060020a0316331461025f57600080fd5b600160a060020a038116151561027457600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a723058201cfe81821eed06f575d410a6ca34c8ac62a6b6c7f7acbf022eefacbb6611ec600029",
}

// OwnableABI is the input ABI used to generate the binding from.
// Deprecated: Use OwnableMetaData.ABI instead.
var OwnableABI = OwnableMetaData.ABI

// Deprecated: Use OwnableMetaData.Sigs instead.
// OwnableFuncSigs maps the 4-byte function signature to its string representation.
var OwnableFuncSigs = OwnableMetaData.Sigs

// OwnableBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OwnableMetaData.Bin instead.
var OwnableBin = OwnableMetaData.Bin

// DeployOwnable deploys a new Ethereum contract, binding an instance of Ownable to it.
func DeployOwnable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Ownable, error) {
	parsed, err := ParsedABI(K_Ownable)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OwnableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Ownable{OwnableCaller: OwnableCaller{contract: contract}, OwnableTransactor: OwnableTransactor{contract: contract}, OwnableFilterer: OwnableFilterer{contract: contract}}, nil
}

// Ownable is an auto generated Go binding around an Ethereum contract.
type Ownable struct {
	OwnableCaller     // Read-only binding to the contract
	OwnableTransactor // Write-only binding to the contract
	OwnableFilterer   // Log filterer for contract events
}

// OwnableCaller is an auto generated read-only Go binding around an Ethereum contract.
type OwnableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OwnableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OwnableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewOwnable creates a new instance of Ownable, bound to a specific deployed contract.
func NewOwnable(address common.Address, backend bind.ContractBackend) (*Ownable, error) {
	contract, err := bindOwnable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Ownable{OwnableCaller: OwnableCaller{contract: contract}, OwnableTransactor: OwnableTransactor{contract: contract}, OwnableFilterer: OwnableFilterer{contract: contract}}, nil
}

// NewOwnableCaller creates a new read-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableCaller(address common.Address, caller bind.ContractCaller) (*OwnableCaller, error) {
	contract, err := bindOwnable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableCaller{contract: contract}, nil
}

// NewOwnableTransactor creates a new write-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableTransactor(address common.Address, transactor bind.ContractTransactor) (*OwnableTransactor, error) {
	contract, err := bindOwnable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableTransactor{contract: contract}, nil
}

// NewOwnableFilterer creates a new log filterer instance of Ownable, bound to a specific deployed contract.
func NewOwnableFilterer(address common.Address, filterer bind.ContractFilterer) (*OwnableFilterer, error) {
	contract, err := bindOwnable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OwnableFilterer{contract: contract}, nil
}

// bindOwnable binds a generic wrapper to an already deployed contract.
func bindOwnable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Ownable)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_Ownable *OwnableCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Ownable.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_Ownable *OwnableCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Ownable.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Ownable.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_Ownable *OwnableCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Ownable.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_Ownable *OwnableCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Ownable.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Ownable *OwnableTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "kill")
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Ownable *OwnableTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Ownable *OwnableTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Ownable.contract.RawTransact(opts, calldata)
}

// PrecompileMetaData contains all meta data concerning the Precompile contract.
var PrecompileMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"KMS\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEN\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"a6ca541e": "KMS()",
		"ee2f3a05": "TEN()",
	},
	Bin: "0x609661002f600b82828239805160001a6073146000811461001f57610021565bfe5b5030600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c8063a6ca541e146042578063ee2f3a0514605a575b600080fd5b60486060565b60408051918252519081900360200190f35b60486065565b600b81565b600e8156fea165627a7a723058200e29c6613fed0f0ac648c541a9b4e98bafeef72e3a6b15fd0074321d10a544490029",
}

// PrecompileABI is the input ABI used to generate the binding from.
// Deprecated: Use PrecompileMetaData.ABI instead.
var PrecompileABI = PrecompileMetaData.ABI

// Deprecated: Use PrecompileMetaData.Sigs instead.
// PrecompileFuncSigs maps the 4-byte function signature to its string representation.
var PrecompileFuncSigs = PrecompileMetaData.Sigs

// PrecompileBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PrecompileMetaData.Bin instead.
var PrecompileBin = PrecompileMetaData.Bin

// DeployPrecompile deploys a new Ethereum contract, binding an instance of Precompile to it.
func DeployPrecompile(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Precompile, error) {
	parsed, err := ParsedABI(K_Precompile)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PrecompileBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Precompile{PrecompileCaller: PrecompileCaller{contract: contract}, PrecompileTransactor: PrecompileTransactor{contract: contract}, PrecompileFilterer: PrecompileFilterer{contract: contract}}, nil
}

// Precompile is an auto generated Go binding around an Ethereum contract.
type Precompile struct {
	PrecompileCaller     // Read-only binding to the contract
	PrecompileTransactor // Write-only binding to the contract
	PrecompileFilterer   // Log filterer for contract events
}

// PrecompileCaller is an auto generated read-only Go binding around an Ethereum contract.
type PrecompileCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompileTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PrecompileTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompileFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PrecompileFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewPrecompile creates a new instance of Precompile, bound to a specific deployed contract.
func NewPrecompile(address common.Address, backend bind.ContractBackend) (*Precompile, error) {
	contract, err := bindPrecompile(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Precompile{PrecompileCaller: PrecompileCaller{contract: contract}, PrecompileTransactor: PrecompileTransactor{contract: contract}, PrecompileFilterer: PrecompileFilterer{contract: contract}}, nil
}

// NewPrecompileCaller creates a new read-only instance of Precompile, bound to a specific deployed contract.
func NewPrecompileCaller(address common.Address, caller bind.ContractCaller) (*PrecompileCaller, error) {
	contract, err := bindPrecompile(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompileCaller{contract: contract}, nil
}

// NewPrecompileTransactor creates a new write-only instance of Precompile, bound to a specific deployed contract.
func NewPrecompileTransactor(address common.Address, transactor bind.ContractTransactor) (*PrecompileTransactor, error) {
	contract, err := bindPrecompile(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompileTransactor{contract: contract}, nil
}

// NewPrecompileFilterer creates a new log filterer instance of Precompile, bound to a specific deployed contract.
func NewPrecompileFilterer(address common.Address, filterer bind.ContractFilterer) (*PrecompileFilterer, error) {
	contract, err := bindPrecompile(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PrecompileFilterer{contract: contract}, nil
}

// bindPrecompile binds a generic wrapper to an already deployed contract.
func bindPrecompile(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Precompile)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// KMS is a free data retrieval call binding the contract method 0xa6ca541e.
//
// Solidity: function KMS() view returns(int256)
func (_Precompile *PrecompileCaller) KMS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Precompile.contract.Call(opts, &out, "KMS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TEN is a free data retrieval call binding the contract method 0xee2f3a05.
//
// Solidity: function TEN() view returns(int256)
func (_Precompile *PrecompileCaller) TEN(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Precompile.contract.Call(opts, &out, "TEN")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TenantFuncsBaseMetaData contains all meta data concerning the TenantFuncsBase contract.
var TenantFuncsBaseMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"setAndGetBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getBit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"versionAPI\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"incrementCounter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_encAuthToken\",\"type\":\"bytes\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_encToken\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"applyGroups\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"},{\"name\":\"_ord\",\"type\":\"uint8\"}],\"name\":\"getCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ident\",\"type\":\"bytes32\"}],\"name\":\"deleteGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TenantTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"numGroups\",\"type\":\"uint256\"}],\"name\":\"ApplyGroups\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint32\"}],\"name\":\"CounterIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ord\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"prev\",\"type\":\"bool\"}],\"name\":\"BitSetAndGet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ident\",\"type\":\"bytes32\"}],\"name\":\"WordGroupDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"ObjectMetaChanged\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"d2771dee": "applyGroups(bytes,uint256,address)",
		"af570c04": "contentSpace()",
		"02d05d3f": "creator()",
		"e57097c9": "deleteGroup(bytes32)",
		"30f846a2": "getBit(bytes32,uint8)",
		"e1954b61": "getCounter(bytes32,uint8)",
		"ac55c906": "getMeta(bytes)",
		"7558cbf0": "incrementCounter(bytes32,uint8)",
		"24d7806c": "isAdmin(address)",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"e542b7cb": "putMeta(bytes,bytes)",
		"24d7c18d": "setAndGetBit(bytes32,uint8)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"c2153d2c": "transferToken(bytes,uint256,address)",
		"54fd4d50": "version()",
		"5f4fcae1": "versionAPI()",
	},
	Bin: "",
}

// TenantFuncsBaseABI is the input ABI used to generate the binding from.
// Deprecated: Use TenantFuncsBaseMetaData.ABI instead.
var TenantFuncsBaseABI = TenantFuncsBaseMetaData.ABI

// Deprecated: Use TenantFuncsBaseMetaData.Sigs instead.
// TenantFuncsBaseFuncSigs maps the 4-byte function signature to its string representation.
var TenantFuncsBaseFuncSigs = TenantFuncsBaseMetaData.Sigs

// TenantFuncsBaseBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TenantFuncsBaseMetaData.Bin instead.
var TenantFuncsBaseBin = TenantFuncsBaseMetaData.Bin

// DeployTenantFuncsBase deploys a new Ethereum contract, binding an instance of TenantFuncsBase to it.
func DeployTenantFuncsBase(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TenantFuncsBase, error) {
	parsed, err := ParsedABI(K_TenantFuncsBase)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TenantFuncsBaseBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TenantFuncsBase{TenantFuncsBaseCaller: TenantFuncsBaseCaller{contract: contract}, TenantFuncsBaseTransactor: TenantFuncsBaseTransactor{contract: contract}, TenantFuncsBaseFilterer: TenantFuncsBaseFilterer{contract: contract}}, nil
}

// TenantFuncsBase is an auto generated Go binding around an Ethereum contract.
type TenantFuncsBase struct {
	TenantFuncsBaseCaller     // Read-only binding to the contract
	TenantFuncsBaseTransactor // Write-only binding to the contract
	TenantFuncsBaseFilterer   // Log filterer for contract events
}

// TenantFuncsBaseCaller is an auto generated read-only Go binding around an Ethereum contract.
type TenantFuncsBaseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TenantFuncsBaseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TenantFuncsBaseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TenantFuncsBaseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TenantFuncsBaseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewTenantFuncsBase creates a new instance of TenantFuncsBase, bound to a specific deployed contract.
func NewTenantFuncsBase(address common.Address, backend bind.ContractBackend) (*TenantFuncsBase, error) {
	contract, err := bindTenantFuncsBase(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBase{TenantFuncsBaseCaller: TenantFuncsBaseCaller{contract: contract}, TenantFuncsBaseTransactor: TenantFuncsBaseTransactor{contract: contract}, TenantFuncsBaseFilterer: TenantFuncsBaseFilterer{contract: contract}}, nil
}

// NewTenantFuncsBaseCaller creates a new read-only instance of TenantFuncsBase, bound to a specific deployed contract.
func NewTenantFuncsBaseCaller(address common.Address, caller bind.ContractCaller) (*TenantFuncsBaseCaller, error) {
	contract, err := bindTenantFuncsBase(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseCaller{contract: contract}, nil
}

// NewTenantFuncsBaseTransactor creates a new write-only instance of TenantFuncsBase, bound to a specific deployed contract.
func NewTenantFuncsBaseTransactor(address common.Address, transactor bind.ContractTransactor) (*TenantFuncsBaseTransactor, error) {
	contract, err := bindTenantFuncsBase(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseTransactor{contract: contract}, nil
}

// NewTenantFuncsBaseFilterer creates a new log filterer instance of TenantFuncsBase, bound to a specific deployed contract.
func NewTenantFuncsBaseFilterer(address common.Address, filterer bind.ContractFilterer) (*TenantFuncsBaseFilterer, error) {
	contract, err := bindTenantFuncsBase(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseFilterer{contract: contract}, nil
}

// bindTenantFuncsBase binds a generic wrapper to an already deployed contract.
func bindTenantFuncsBase(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_TenantFuncsBase)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_TenantFuncsBase *TenantFuncsBaseCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TenantFuncsBase.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_TenantFuncsBase *TenantFuncsBaseCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TenantFuncsBase.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetBit is a free data retrieval call binding the contract method 0x30f846a2.
//
// Solidity: function getBit(bytes32 _ident, uint8 _ord) view returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseCaller) GetBit(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (bool, error) {
	var out []interface{}
	err := _TenantFuncsBase.contract.Call(opts, &out, "getBit", _ident, _ord)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetCounter is a free data retrieval call binding the contract method 0xe1954b61.
//
// Solidity: function getCounter(bytes32 _ident, uint8 _ord) view returns(uint32)
func (_TenantFuncsBase *TenantFuncsBaseCaller) GetCounter(opts *bind.CallOpts, _ident [32]byte, _ord uint8) (uint32, error) {
	var out []interface{}
	err := _TenantFuncsBase.contract.Call(opts, &out, "getCounter", _ident, _ord)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) view returns(bytes)
func (_TenantFuncsBase *TenantFuncsBaseCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var out []interface{}
	err := _TenantFuncsBase.contract.Call(opts, &out, "getMeta", key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// IsAdmin is a free data retrieval call binding the contract method 0x24d7806c.
//
// Solidity: function isAdmin(address _candidate) view returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseCaller) IsAdmin(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _TenantFuncsBase.contract.Call(opts, &out, "isAdmin", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TenantFuncsBase *TenantFuncsBaseCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TenantFuncsBase.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_TenantFuncsBase *TenantFuncsBaseCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _TenantFuncsBase.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionAPI is a free data retrieval call binding the contract method 0x5f4fcae1.
//
// Solidity: function versionAPI() view returns(bytes32)
func (_TenantFuncsBase *TenantFuncsBaseCaller) VersionAPI(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _TenantFuncsBase.contract.Call(opts, &out, "versionAPI")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ApplyGroups is a paid mutator transaction binding the contract method 0xd2771dee.
//
// Solidity: function applyGroups(bytes _encToken, uint256 , address _to) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) ApplyGroups(opts *bind.TransactOpts, _encToken []byte, arg1 *big.Int, _to common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "applyGroups", _encToken, arg1, _to)
}

// DeleteGroup is a paid mutator transaction binding the contract method 0xe57097c9.
//
// Solidity: function deleteGroup(bytes32 _ident) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) DeleteGroup(opts *bind.TransactOpts, _ident [32]byte) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "deleteGroup", _ident)
}

// IncrementCounter is a paid mutator transaction binding the contract method 0x7558cbf0.
//
// Solidity: function incrementCounter(bytes32 _ident, uint8 _ord) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) IncrementCounter(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "incrementCounter", _ident, _ord)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "kill")
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "putMeta", key, value)
}

// SetAndGetBit is a paid mutator transaction binding the contract method 0x24d7c18d.
//
// Solidity: function setAndGetBit(bytes32 _ident, uint8 _ord) returns(bool)
func (_TenantFuncsBase *TenantFuncsBaseTransactor) SetAndGetBit(opts *bind.TransactOpts, _ident [32]byte, _ord uint8) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "setAndGetBit", _ident, _ord)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferToken is a paid mutator transaction binding the contract method 0xc2153d2c.
//
// Solidity: function transferToken(bytes _encAuthToken, uint256 _amount, address _to) returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) TransferToken(opts *bind.TransactOpts, _encAuthToken []byte, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.Transact(opts, "transferToken", _encAuthToken, _amount, _to)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_TenantFuncsBase *TenantFuncsBaseTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _TenantFuncsBase.contract.RawTransact(opts, calldata)
}

// TenantFuncsBaseApplyGroupsIterator is returned from FilterApplyGroups and is used to iterate over the raw logs and unpacked data for ApplyGroups events raised by the TenantFuncsBase contract.
type TenantFuncsBaseApplyGroupsIterator struct {
	Event *TenantFuncsBaseApplyGroups // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantFuncsBaseApplyGroupsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantFuncsBaseApplyGroups)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantFuncsBaseApplyGroups)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantFuncsBaseApplyGroupsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantFuncsBaseApplyGroupsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantFuncsBaseApplyGroups represents a ApplyGroups event raised by the TenantFuncsBase contract.
type TenantFuncsBaseApplyGroups struct {
	To        common.Address
	NumGroups *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterApplyGroups is a free log retrieval operation binding the contract event 0xaf51ac2c635b218e7e5205267ea152c8c9f51fc74f818c332dcf630e82a3dc3f.
//
// Solidity: event ApplyGroups(address to, uint256 numGroups)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) FilterApplyGroups(opts *bind.FilterOpts) (*TenantFuncsBaseApplyGroupsIterator, error) {

	logs, sub, err := _TenantFuncsBase.contract.FilterLogs(opts, "ApplyGroups")
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseApplyGroupsIterator{contract: _TenantFuncsBase.contract, event: "ApplyGroups", logs: logs, sub: sub}, nil
}

// WatchApplyGroups is a free log subscription operation binding the contract event 0xaf51ac2c635b218e7e5205267ea152c8c9f51fc74f818c332dcf630e82a3dc3f.
//
// Solidity: event ApplyGroups(address to, uint256 numGroups)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) WatchApplyGroups(opts *bind.WatchOpts, sink chan<- *TenantFuncsBaseApplyGroups) (event.Subscription, error) {

	logs, sub, err := _TenantFuncsBase.contract.WatchLogs(opts, "ApplyGroups")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantFuncsBaseApplyGroups)
				if err := _TenantFuncsBase.contract.UnpackLog(event, "ApplyGroups", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApplyGroups is a log parse operation binding the contract event 0xaf51ac2c635b218e7e5205267ea152c8c9f51fc74f818c332dcf630e82a3dc3f.
//
// Solidity: event ApplyGroups(address to, uint256 numGroups)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) ParseApplyGroups(log types.Log) (*TenantFuncsBaseApplyGroups, error) {
	event := new(TenantFuncsBaseApplyGroups)
	if err := _TenantFuncsBase.contract.UnpackLog(event, "ApplyGroups", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TenantFuncsBaseBitSetAndGetIterator is returned from FilterBitSetAndGet and is used to iterate over the raw logs and unpacked data for BitSetAndGet events raised by the TenantFuncsBase contract.
type TenantFuncsBaseBitSetAndGetIterator struct {
	Event *TenantFuncsBaseBitSetAndGet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantFuncsBaseBitSetAndGetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantFuncsBaseBitSetAndGet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantFuncsBaseBitSetAndGet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantFuncsBaseBitSetAndGetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantFuncsBaseBitSetAndGetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantFuncsBaseBitSetAndGet represents a BitSetAndGet event raised by the TenantFuncsBase contract.
type TenantFuncsBaseBitSetAndGet struct {
	Ident [32]byte
	Ord   uint8
	Prev  bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterBitSetAndGet is a free log retrieval operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) FilterBitSetAndGet(opts *bind.FilterOpts) (*TenantFuncsBaseBitSetAndGetIterator, error) {

	logs, sub, err := _TenantFuncsBase.contract.FilterLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseBitSetAndGetIterator{contract: _TenantFuncsBase.contract, event: "BitSetAndGet", logs: logs, sub: sub}, nil
}

// WatchBitSetAndGet is a free log subscription operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) WatchBitSetAndGet(opts *bind.WatchOpts, sink chan<- *TenantFuncsBaseBitSetAndGet) (event.Subscription, error) {

	logs, sub, err := _TenantFuncsBase.contract.WatchLogs(opts, "BitSetAndGet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantFuncsBaseBitSetAndGet)
				if err := _TenantFuncsBase.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitSetAndGet is a log parse operation binding the contract event 0x4d04842102a74d85e502eec18f3048954c6d6e1d1c368c7bc49edcdcd45e9c3d.
//
// Solidity: event BitSetAndGet(bytes32 ident, uint8 ord, bool prev)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) ParseBitSetAndGet(log types.Log) (*TenantFuncsBaseBitSetAndGet, error) {
	event := new(TenantFuncsBaseBitSetAndGet)
	if err := _TenantFuncsBase.contract.UnpackLog(event, "BitSetAndGet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TenantFuncsBaseCounterIncrementedIterator is returned from FilterCounterIncremented and is used to iterate over the raw logs and unpacked data for CounterIncremented events raised by the TenantFuncsBase contract.
type TenantFuncsBaseCounterIncrementedIterator struct {
	Event *TenantFuncsBaseCounterIncremented // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantFuncsBaseCounterIncrementedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantFuncsBaseCounterIncremented)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantFuncsBaseCounterIncremented)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantFuncsBaseCounterIncrementedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantFuncsBaseCounterIncrementedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantFuncsBaseCounterIncremented represents a CounterIncremented event raised by the TenantFuncsBase contract.
type TenantFuncsBaseCounterIncremented struct {
	Ident [32]byte
	Slot  uint8
	Val   uint32
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCounterIncremented is a free log retrieval operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) FilterCounterIncremented(opts *bind.FilterOpts) (*TenantFuncsBaseCounterIncrementedIterator, error) {

	logs, sub, err := _TenantFuncsBase.contract.FilterLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseCounterIncrementedIterator{contract: _TenantFuncsBase.contract, event: "CounterIncremented", logs: logs, sub: sub}, nil
}

// WatchCounterIncremented is a free log subscription operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) WatchCounterIncremented(opts *bind.WatchOpts, sink chan<- *TenantFuncsBaseCounterIncremented) (event.Subscription, error) {

	logs, sub, err := _TenantFuncsBase.contract.WatchLogs(opts, "CounterIncremented")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantFuncsBaseCounterIncremented)
				if err := _TenantFuncsBase.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCounterIncremented is a log parse operation binding the contract event 0x77a2025a71f0f345cfd7e8a699b42215025b6ab4706dcfaa29393790aa63383f.
//
// Solidity: event CounterIncremented(bytes32 ident, uint8 slot, uint32 val)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) ParseCounterIncremented(log types.Log) (*TenantFuncsBaseCounterIncremented, error) {
	event := new(TenantFuncsBaseCounterIncremented)
	if err := _TenantFuncsBase.contract.UnpackLog(event, "CounterIncremented", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TenantFuncsBaseObjectMetaChangedIterator is returned from FilterObjectMetaChanged and is used to iterate over the raw logs and unpacked data for ObjectMetaChanged events raised by the TenantFuncsBase contract.
type TenantFuncsBaseObjectMetaChangedIterator struct {
	Event *TenantFuncsBaseObjectMetaChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantFuncsBaseObjectMetaChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantFuncsBaseObjectMetaChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantFuncsBaseObjectMetaChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantFuncsBaseObjectMetaChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantFuncsBaseObjectMetaChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantFuncsBaseObjectMetaChanged represents a ObjectMetaChanged event raised by the TenantFuncsBase contract.
type TenantFuncsBaseObjectMetaChanged struct {
	Key []byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterObjectMetaChanged is a free log retrieval operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) FilterObjectMetaChanged(opts *bind.FilterOpts) (*TenantFuncsBaseObjectMetaChangedIterator, error) {

	logs, sub, err := _TenantFuncsBase.contract.FilterLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseObjectMetaChangedIterator{contract: _TenantFuncsBase.contract, event: "ObjectMetaChanged", logs: logs, sub: sub}, nil
}

// WatchObjectMetaChanged is a free log subscription operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) WatchObjectMetaChanged(opts *bind.WatchOpts, sink chan<- *TenantFuncsBaseObjectMetaChanged) (event.Subscription, error) {

	logs, sub, err := _TenantFuncsBase.contract.WatchLogs(opts, "ObjectMetaChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantFuncsBaseObjectMetaChanged)
				if err := _TenantFuncsBase.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseObjectMetaChanged is a log parse operation binding the contract event 0xe2b310ec9dabdc05229a748e07666c3bc9c46c6ef465cce30d0aa3aa64a0644c.
//
// Solidity: event ObjectMetaChanged(bytes key)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) ParseObjectMetaChanged(log types.Log) (*TenantFuncsBaseObjectMetaChanged, error) {
	event := new(TenantFuncsBaseObjectMetaChanged)
	if err := _TenantFuncsBase.contract.UnpackLog(event, "ObjectMetaChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TenantFuncsBaseTenantTransferIterator is returned from FilterTenantTransfer and is used to iterate over the raw logs and unpacked data for TenantTransfer events raised by the TenantFuncsBase contract.
type TenantFuncsBaseTenantTransferIterator struct {
	Event *TenantFuncsBaseTenantTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantFuncsBaseTenantTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantFuncsBaseTenantTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantFuncsBaseTenantTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantFuncsBaseTenantTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantFuncsBaseTenantTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantFuncsBaseTenantTransfer represents a TenantTransfer event raised by the TenantFuncsBase contract.
type TenantFuncsBaseTenantTransfer struct {
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTenantTransfer is a free log retrieval operation binding the contract event 0x59d13df91c02dfa098820027bd861986b2712e8fa2e7e431fea189243656aebd.
//
// Solidity: event TenantTransfer(address to, uint256 amount)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) FilterTenantTransfer(opts *bind.FilterOpts) (*TenantFuncsBaseTenantTransferIterator, error) {

	logs, sub, err := _TenantFuncsBase.contract.FilterLogs(opts, "TenantTransfer")
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseTenantTransferIterator{contract: _TenantFuncsBase.contract, event: "TenantTransfer", logs: logs, sub: sub}, nil
}

// WatchTenantTransfer is a free log subscription operation binding the contract event 0x59d13df91c02dfa098820027bd861986b2712e8fa2e7e431fea189243656aebd.
//
// Solidity: event TenantTransfer(address to, uint256 amount)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) WatchTenantTransfer(opts *bind.WatchOpts, sink chan<- *TenantFuncsBaseTenantTransfer) (event.Subscription, error) {

	logs, sub, err := _TenantFuncsBase.contract.WatchLogs(opts, "TenantTransfer")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantFuncsBaseTenantTransfer)
				if err := _TenantFuncsBase.contract.UnpackLog(event, "TenantTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTenantTransfer is a log parse operation binding the contract event 0x59d13df91c02dfa098820027bd861986b2712e8fa2e7e431fea189243656aebd.
//
// Solidity: event TenantTransfer(address to, uint256 amount)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) ParseTenantTransfer(log types.Log) (*TenantFuncsBaseTenantTransfer, error) {
	event := new(TenantFuncsBaseTenantTransfer)
	if err := _TenantFuncsBase.contract.UnpackLog(event, "TenantTransfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TenantFuncsBaseWordGroupDeletedIterator is returned from FilterWordGroupDeleted and is used to iterate over the raw logs and unpacked data for WordGroupDeleted events raised by the TenantFuncsBase contract.
type TenantFuncsBaseWordGroupDeletedIterator struct {
	Event *TenantFuncsBaseWordGroupDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TenantFuncsBaseWordGroupDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TenantFuncsBaseWordGroupDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TenantFuncsBaseWordGroupDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TenantFuncsBaseWordGroupDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TenantFuncsBaseWordGroupDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TenantFuncsBaseWordGroupDeleted represents a WordGroupDeleted event raised by the TenantFuncsBase contract.
type TenantFuncsBaseWordGroupDeleted struct {
	Ident [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWordGroupDeleted is a free log retrieval operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) FilterWordGroupDeleted(opts *bind.FilterOpts) (*TenantFuncsBaseWordGroupDeletedIterator, error) {

	logs, sub, err := _TenantFuncsBase.contract.FilterLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return &TenantFuncsBaseWordGroupDeletedIterator{contract: _TenantFuncsBase.contract, event: "WordGroupDeleted", logs: logs, sub: sub}, nil
}

// WatchWordGroupDeleted is a free log subscription operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) WatchWordGroupDeleted(opts *bind.WatchOpts, sink chan<- *TenantFuncsBaseWordGroupDeleted) (event.Subscription, error) {

	logs, sub, err := _TenantFuncsBase.contract.WatchLogs(opts, "WordGroupDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TenantFuncsBaseWordGroupDeleted)
				if err := _TenantFuncsBase.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWordGroupDeleted is a log parse operation binding the contract event 0x87d0c300430cf9ba25931ff8bf37f633abe097e533463927bbfdc1e9ae1d0e9f.
//
// Solidity: event WordGroupDeleted(bytes32 ident)
func (_TenantFuncsBase *TenantFuncsBaseFilterer) ParseWordGroupDeleted(log types.Log) (*TenantFuncsBaseWordGroupDeleted, error) {
	event := new(TenantFuncsBaseWordGroupDeleted)
	if err := _TenantFuncsBase.contract.UnpackLog(event, "WordGroupDeleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TransactableMetaData contains all meta data concerning the Transactable contract.
var TransactableMetaData = &bind.MetaData{
	ABI: "[{\"constant\":false,\"inputs\":[{\"name\":\"_guarantor\",\"type\":\"address\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"508ad278": "execute(address,uint8,bytes32,bytes32,address,uint256,uint256)",
		"f50b2efe": "validateTimestamp(uint256)",
		"763d5ee6": "validateTransaction(uint8,bytes32,bytes32,address,uint256,uint256)",
	},
}

// TransactableABI is the input ABI used to generate the binding from.
// Deprecated: Use TransactableMetaData.ABI instead.
var TransactableABI = TransactableMetaData.ABI

// Deprecated: Use TransactableMetaData.Sigs instead.
// TransactableFuncSigs maps the 4-byte function signature to its string representation.
var TransactableFuncSigs = TransactableMetaData.Sigs

// Transactable is an auto generated Go binding around an Ethereum contract.
type Transactable struct {
	TransactableCaller     // Read-only binding to the contract
	TransactableTransactor // Write-only binding to the contract
	TransactableFilterer   // Log filterer for contract events
}

// TransactableCaller is an auto generated read-only Go binding around an Ethereum contract.
type TransactableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransactableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TransactableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransactableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TransactableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewTransactable creates a new instance of Transactable, bound to a specific deployed contract.
func NewTransactable(address common.Address, backend bind.ContractBackend) (*Transactable, error) {
	contract, err := bindTransactable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Transactable{TransactableCaller: TransactableCaller{contract: contract}, TransactableTransactor: TransactableTransactor{contract: contract}, TransactableFilterer: TransactableFilterer{contract: contract}}, nil
}

// NewTransactableCaller creates a new read-only instance of Transactable, bound to a specific deployed contract.
func NewTransactableCaller(address common.Address, caller bind.ContractCaller) (*TransactableCaller, error) {
	contract, err := bindTransactable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TransactableCaller{contract: contract}, nil
}

// NewTransactableTransactor creates a new write-only instance of Transactable, bound to a specific deployed contract.
func NewTransactableTransactor(address common.Address, transactor bind.ContractTransactor) (*TransactableTransactor, error) {
	contract, err := bindTransactable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TransactableTransactor{contract: contract}, nil
}

// NewTransactableFilterer creates a new log filterer instance of Transactable, bound to a specific deployed contract.
func NewTransactableFilterer(address common.Address, filterer bind.ContractFilterer) (*TransactableFilterer, error) {
	contract, err := bindTransactable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TransactableFilterer{contract: contract}, nil
}

// bindTransactable binds a generic wrapper to an already deployed contract.
func bindTransactable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Transactable)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) view returns(bool)
func (_Transactable *TransactableCaller) ValidateTimestamp(opts *bind.CallOpts, _ts *big.Int) (bool, error) {
	var out []interface{}
	err := _Transactable.contract.Call(opts, &out, "validateTimestamp", _ts)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) view returns(bool)
func (_Transactable *TransactableCaller) ValidateTransaction(opts *bind.CallOpts, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	var out []interface{}
	err := _Transactable.contract.Call(opts, &out, "validateTransaction", _v, _r, _s, _dest, _value, _ts)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_Transactable *TransactableTransactor) Execute(opts *bind.TransactOpts, _guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _Transactable.contract.Transact(opts, "execute", _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// UserSpaceMetaData contains all meta data concerning the UserSpace contract.
var UserSpaceMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"createUserWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"e7cf0c66": "createUserWallet(address)",
		"63e6ffdd": "userWallets(address)",
		"54fd4d50": "version()",
	},
	Bin: "0x60806040527f55736572537061636532303139303530363135353330304d4c0000000000000060005534801561003457600080fd5b5061014f806100446000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806354fd4d501461004657806363e6ffdd14610060578063e7cf0c66146100bc575b600080fd5b61004e6100ef565b60408051918252519081900360200190f35b6100936004803603602081101561007657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166100f5565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610093600480360360208110156100d257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661011d565b60005481565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60008080fdfea165627a7a7230582055651efd6c54842a7f652834c8fc90598e228baa9ae609cda4604046667e987d0029",
}

// UserSpaceABI is the input ABI used to generate the binding from.
// Deprecated: Use UserSpaceMetaData.ABI instead.
var UserSpaceABI = UserSpaceMetaData.ABI

// Deprecated: Use UserSpaceMetaData.Sigs instead.
// UserSpaceFuncSigs maps the 4-byte function signature to its string representation.
var UserSpaceFuncSigs = UserSpaceMetaData.Sigs

// UserSpaceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use UserSpaceMetaData.Bin instead.
var UserSpaceBin = UserSpaceMetaData.Bin

// DeployUserSpace deploys a new Ethereum contract, binding an instance of UserSpace to it.
func DeployUserSpace(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *UserSpace, error) {
	parsed, err := ParsedABI(K_UserSpace)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(UserSpaceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UserSpace{UserSpaceCaller: UserSpaceCaller{contract: contract}, UserSpaceTransactor: UserSpaceTransactor{contract: contract}, UserSpaceFilterer: UserSpaceFilterer{contract: contract}}, nil
}

// UserSpace is an auto generated Go binding around an Ethereum contract.
type UserSpace struct {
	UserSpaceCaller     // Read-only binding to the contract
	UserSpaceTransactor // Write-only binding to the contract
	UserSpaceFilterer   // Log filterer for contract events
}

// UserSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type UserSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UserSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UserSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewUserSpace creates a new instance of UserSpace, bound to a specific deployed contract.
func NewUserSpace(address common.Address, backend bind.ContractBackend) (*UserSpace, error) {
	contract, err := bindUserSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UserSpace{UserSpaceCaller: UserSpaceCaller{contract: contract}, UserSpaceTransactor: UserSpaceTransactor{contract: contract}, UserSpaceFilterer: UserSpaceFilterer{contract: contract}}, nil
}

// NewUserSpaceCaller creates a new read-only instance of UserSpace, bound to a specific deployed contract.
func NewUserSpaceCaller(address common.Address, caller bind.ContractCaller) (*UserSpaceCaller, error) {
	contract, err := bindUserSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UserSpaceCaller{contract: contract}, nil
}

// NewUserSpaceTransactor creates a new write-only instance of UserSpace, bound to a specific deployed contract.
func NewUserSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*UserSpaceTransactor, error) {
	contract, err := bindUserSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UserSpaceTransactor{contract: contract}, nil
}

// NewUserSpaceFilterer creates a new log filterer instance of UserSpace, bound to a specific deployed contract.
func NewUserSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*UserSpaceFilterer, error) {
	contract, err := bindUserSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UserSpaceFilterer{contract: contract}, nil
}

// bindUserSpace binds a generic wrapper to an already deployed contract.
func bindUserSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_UserSpace)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address ) view returns(address)
func (_UserSpace *UserSpaceCaller) UserWallets(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _UserSpace.contract.Call(opts, &out, "userWallets", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_UserSpace *UserSpaceCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _UserSpace.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CreateUserWallet is a paid mutator transaction binding the contract method 0xe7cf0c66.
//
// Solidity: function createUserWallet(address ) returns(address)
func (_UserSpace *UserSpaceTransactor) CreateUserWallet(opts *bind.TransactOpts, arg0 common.Address) (*types.Transaction, error) {
	return _UserSpace.contract.Transact(opts, "createUserWallet", arg0)
}

// UtilsMetaData contains all meta data concerning the Utils contract.
var UtilsMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820d3a92591584bb6772d01fc2c468ca44336434d12789afff3fc8ad203a11487390029",
}

// UtilsABI is the input ABI used to generate the binding from.
// Deprecated: Use UtilsMetaData.ABI instead.
var UtilsABI = UtilsMetaData.ABI

// UtilsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use UtilsMetaData.Bin instead.
var UtilsBin = UtilsMetaData.Bin

// DeployUtils deploys a new Ethereum contract, binding an instance of Utils to it.
func DeployUtils(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Utils, error) {
	parsed, err := ParsedABI(K_Utils)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(UtilsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Utils{UtilsCaller: UtilsCaller{contract: contract}, UtilsTransactor: UtilsTransactor{contract: contract}, UtilsFilterer: UtilsFilterer{contract: contract}}, nil
}

// Utils is an auto generated Go binding around an Ethereum contract.
type Utils struct {
	UtilsCaller     // Read-only binding to the contract
	UtilsTransactor // Write-only binding to the contract
	UtilsFilterer   // Log filterer for contract events
}

// UtilsCaller is an auto generated read-only Go binding around an Ethereum contract.
type UtilsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UtilsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UtilsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UtilsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UtilsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewUtils creates a new instance of Utils, bound to a specific deployed contract.
func NewUtils(address common.Address, backend bind.ContractBackend) (*Utils, error) {
	contract, err := bindUtils(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Utils{UtilsCaller: UtilsCaller{contract: contract}, UtilsTransactor: UtilsTransactor{contract: contract}, UtilsFilterer: UtilsFilterer{contract: contract}}, nil
}

// NewUtilsCaller creates a new read-only instance of Utils, bound to a specific deployed contract.
func NewUtilsCaller(address common.Address, caller bind.ContractCaller) (*UtilsCaller, error) {
	contract, err := bindUtils(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UtilsCaller{contract: contract}, nil
}

// NewUtilsTransactor creates a new write-only instance of Utils, bound to a specific deployed contract.
func NewUtilsTransactor(address common.Address, transactor bind.ContractTransactor) (*UtilsTransactor, error) {
	contract, err := bindUtils(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UtilsTransactor{contract: contract}, nil
}

// NewUtilsFilterer creates a new log filterer instance of Utils, bound to a specific deployed contract.
func NewUtilsFilterer(address common.Address, filterer bind.ContractFilterer) (*UtilsFilterer, error) {
	contract, err := bindUtils(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UtilsFilterer{contract: contract}, nil
}

// bindUtils binds a generic wrapper to an already deployed contract.
func bindUtils(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Utils)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// VerifierMetaData contains all meta data concerning the Verifier contract.
var VerifierMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"isSigned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"recoverAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"8677ebe8": "isSigned(address,bytes32,uint8,bytes32,bytes32)",
		"e5df669f": "recoverAddr(bytes32,uint8,bytes32,bytes32)",
	},
	Bin: "0x608060405234801561001057600080fd5b50610232806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638677ebe81461003b578063e5df669f1461009d575b600080fd5b610089600480360360a081101561005157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060208101359060ff60408201351690606081013590608001356100f8565b604080519115158252519081900360200190f35b6100cf600480360360808110156100b357600080fd5b5080359060ff602082013516906040810135906060013561019a565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60008573ffffffffffffffffffffffffffffffffffffffff1660018686868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561016e573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff1614905095945050505050565b604080516000808252602080830180855288905260ff87168385015260608301869052608083018590529251909260019260a080820193601f1981019281900390910190855afa1580156101f2573d6000803e3d6000fd5b5050604051601f190151969550505050505056fea165627a7a723058202b01bbc45894eea6e1b2061c2dd9a3da7ce9cba226c09e7d2b409d96684dedfb0029",
}

// VerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use VerifierMetaData.ABI instead.
var VerifierABI = VerifierMetaData.ABI

// Deprecated: Use VerifierMetaData.Sigs instead.
// VerifierFuncSigs maps the 4-byte function signature to its string representation.
var VerifierFuncSigs = VerifierMetaData.Sigs

// VerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use VerifierMetaData.Bin instead.
var VerifierBin = VerifierMetaData.Bin

// DeployVerifier deploys a new Ethereum contract, binding an instance of Verifier to it.
func DeployVerifier(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Verifier, error) {
	parsed, err := ParsedABI(K_Verifier)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VerifierBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// Verifier is an auto generated Go binding around an Ethereum contract.
type Verifier struct {
	VerifierCaller     // Read-only binding to the contract
	VerifierTransactor // Write-only binding to the contract
	VerifierFilterer   // Log filterer for contract events
}

// VerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type VerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewVerifier creates a new instance of Verifier, bound to a specific deployed contract.
func NewVerifier(address common.Address, backend bind.ContractBackend) (*Verifier, error) {
	contract, err := bindVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Verifier{VerifierCaller: VerifierCaller{contract: contract}, VerifierTransactor: VerifierTransactor{contract: contract}, VerifierFilterer: VerifierFilterer{contract: contract}}, nil
}

// NewVerifierCaller creates a new read-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierCaller(address common.Address, caller bind.ContractCaller) (*VerifierCaller, error) {
	contract, err := bindVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierCaller{contract: contract}, nil
}

// NewVerifierTransactor creates a new write-only instance of Verifier, bound to a specific deployed contract.
func NewVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*VerifierTransactor, error) {
	contract, err := bindVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VerifierTransactor{contract: contract}, nil
}

// NewVerifierFilterer creates a new log filterer instance of Verifier, bound to a specific deployed contract.
func NewVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*VerifierFilterer, error) {
	contract, err := bindVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VerifierFilterer{contract: contract}, nil
}

// bindVerifier binds a generic wrapper to an already deployed contract.
func bindVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Verifier)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// IsSigned is a free data retrieval call binding the contract method 0x8677ebe8.
//
// Solidity: function isSigned(address _addr, bytes32 msgHash, uint8 v, bytes32 r, bytes32 s) pure returns(bool)
func (_Verifier *VerifierCaller) IsSigned(opts *bind.CallOpts, _addr common.Address, msgHash [32]byte, v uint8, r [32]byte, s [32]byte) (bool, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "isSigned", _addr, msgHash, v, r, s)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// RecoverAddr is a free data retrieval call binding the contract method 0xe5df669f.
//
// Solidity: function recoverAddr(bytes32 msgHash, uint8 v, bytes32 r, bytes32 s) pure returns(address)
func (_Verifier *VerifierCaller) RecoverAddr(opts *bind.CallOpts, msgHash [32]byte, v uint8, r [32]byte, s [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Verifier.contract.Call(opts, &out, "recoverAddr", msgHash, v, r, s)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FactoryHelperMetaData contains all meta data concerning the FactoryHelper contract.
var FactoryHelperMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"tenantCreatorMetaKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"9e07331c": "tenantCreatorMetaKey()",
	},
	Bin: "0x610113610030600b82828239805160001a6073146000811461002057610022565bfe5b5030600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80639e07331c146038575b600080fd5b603e60b0565b6040805160208082528351818301528351919283929083019185019080838360005b8381101560765781810151838201526020016060565b50505050905090810190601f16801560a25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60408051808201909152601d81527f5f454c565f47524f55505f54454e414e545f415554484f52495449455300000060208201528156fea165627a7a72305820218dfa1223a42d7c193d752c459a5f4987c191f55529569bf0f60e911b601d790029",
}

// FactoryHelperABI is the input ABI used to generate the binding from.
// Deprecated: Use FactoryHelperMetaData.ABI instead.
var FactoryHelperABI = FactoryHelperMetaData.ABI

// Deprecated: Use FactoryHelperMetaData.Sigs instead.
// FactoryHelperFuncSigs maps the 4-byte function signature to its string representation.
var FactoryHelperFuncSigs = FactoryHelperMetaData.Sigs

// FactoryHelperBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FactoryHelperMetaData.Bin instead.
var FactoryHelperBin = FactoryHelperMetaData.Bin

// DeployFactoryHelper deploys a new Ethereum contract, binding an instance of FactoryHelper to it.
func DeployFactoryHelper(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FactoryHelper, error) {
	parsed, err := ParsedABI(K_FactoryHelper)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FactoryHelperBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FactoryHelper{FactoryHelperCaller: FactoryHelperCaller{contract: contract}, FactoryHelperTransactor: FactoryHelperTransactor{contract: contract}, FactoryHelperFilterer: FactoryHelperFilterer{contract: contract}}, nil
}

// FactoryHelper is an auto generated Go binding around an Ethereum contract.
type FactoryHelper struct {
	FactoryHelperCaller     // Read-only binding to the contract
	FactoryHelperTransactor // Write-only binding to the contract
	FactoryHelperFilterer   // Log filterer for contract events
}

// FactoryHelperCaller is an auto generated read-only Go binding around an Ethereum contract.
type FactoryHelperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FactoryHelperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FactoryHelperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FactoryHelperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FactoryHelperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewFactoryHelper creates a new instance of FactoryHelper, bound to a specific deployed contract.
func NewFactoryHelper(address common.Address, backend bind.ContractBackend) (*FactoryHelper, error) {
	contract, err := bindFactoryHelper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FactoryHelper{FactoryHelperCaller: FactoryHelperCaller{contract: contract}, FactoryHelperTransactor: FactoryHelperTransactor{contract: contract}, FactoryHelperFilterer: FactoryHelperFilterer{contract: contract}}, nil
}

// NewFactoryHelperCaller creates a new read-only instance of FactoryHelper, bound to a specific deployed contract.
func NewFactoryHelperCaller(address common.Address, caller bind.ContractCaller) (*FactoryHelperCaller, error) {
	contract, err := bindFactoryHelper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FactoryHelperCaller{contract: contract}, nil
}

// NewFactoryHelperTransactor creates a new write-only instance of FactoryHelper, bound to a specific deployed contract.
func NewFactoryHelperTransactor(address common.Address, transactor bind.ContractTransactor) (*FactoryHelperTransactor, error) {
	contract, err := bindFactoryHelper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FactoryHelperTransactor{contract: contract}, nil
}

// NewFactoryHelperFilterer creates a new log filterer instance of FactoryHelper, bound to a specific deployed contract.
func NewFactoryHelperFilterer(address common.Address, filterer bind.ContractFilterer) (*FactoryHelperFilterer, error) {
	contract, err := bindFactoryHelper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FactoryHelperFilterer{contract: contract}, nil
}

// bindFactoryHelper binds a generic wrapper to an already deployed contract.
func bindFactoryHelper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_FactoryHelper)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// TenantCreatorMetaKey is a free data retrieval call binding the contract method 0x9e07331c.
//
// Solidity: function tenantCreatorMetaKey() view returns(bytes)
func (_FactoryHelper *FactoryHelperCaller) TenantCreatorMetaKey(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _FactoryHelper.contract.Call(opts, &out, "tenantCreatorMetaKey")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// StringsMetaData contains all meta data concerning the Strings contract.
var StringsMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a723058205cb9dd9546b82ae13bcf725f5e671a4f5b9bd40ffac4793ff9ce94d8eb826b010029",
}

// StringsABI is the input ABI used to generate the binding from.
// Deprecated: Use StringsMetaData.ABI instead.
var StringsABI = StringsMetaData.ABI

// StringsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StringsMetaData.Bin instead.
var StringsBin = StringsMetaData.Bin

// DeployStrings deploys a new Ethereum contract, binding an instance of Strings to it.
func DeployStrings(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Strings, error) {
	parsed, err := ParsedABI(K_Strings)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StringsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Strings{StringsCaller: StringsCaller{contract: contract}, StringsTransactor: StringsTransactor{contract: contract}, StringsFilterer: StringsFilterer{contract: contract}}, nil
}

// Strings is an auto generated Go binding around an Ethereum contract.
type Strings struct {
	StringsCaller     // Read-only binding to the contract
	StringsTransactor // Write-only binding to the contract
	StringsFilterer   // Log filterer for contract events
}

// StringsCaller is an auto generated read-only Go binding around an Ethereum contract.
type StringsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StringsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StringsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewStrings creates a new instance of Strings, bound to a specific deployed contract.
func NewStrings(address common.Address, backend bind.ContractBackend) (*Strings, error) {
	contract, err := bindStrings(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Strings{StringsCaller: StringsCaller{contract: contract}, StringsTransactor: StringsTransactor{contract: contract}, StringsFilterer: StringsFilterer{contract: contract}}, nil
}

// NewStringsCaller creates a new read-only instance of Strings, bound to a specific deployed contract.
func NewStringsCaller(address common.Address, caller bind.ContractCaller) (*StringsCaller, error) {
	contract, err := bindStrings(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StringsCaller{contract: contract}, nil
}

// NewStringsTransactor creates a new write-only instance of Strings, bound to a specific deployed contract.
func NewStringsTransactor(address common.Address, transactor bind.ContractTransactor) (*StringsTransactor, error) {
	contract, err := bindStrings(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StringsTransactor{contract: contract}, nil
}

// NewStringsFilterer creates a new log filterer instance of Strings, bound to a specific deployed contract.
func NewStringsFilterer(address common.Address, filterer bind.ContractFilterer) (*StringsFilterer, error) {
	contract, err := bindStrings(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StringsFilterer{contract: contract}, nil
}

// bindStrings binds a generic wrapper to an already deployed contract.
func bindStrings(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Strings)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

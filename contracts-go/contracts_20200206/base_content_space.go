// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts_20200206

import (
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"math/big"
	"reflect"
	"strings"

	c "github.com/eluv-io/contracts/contracts-go/events"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// Map of ABI names to *abi.ABI
// ABI names are constants starting with K_
var ParsedABIS = map[string]*abi.ABI{}

// Map of ABI names to *bind.BoundContract for log parsing only
// ABI names are constants starting with K_
var BoundContracts = map[string]*bind.BoundContract{}

// Map of Unique events names to *EventInfo.
// Unique events names are constants starting with E_
var UniqueEvents = map[string]*EventInfo{}

// Map of Unique events types to *EventInfo
var EventsByType = map[reflect.Type]*EventInfo{}

// Map of Unique events IDs to *EventInfo
var EventsByID = map[common.Hash]*EventInfo{}

// JSON returns a parsed ABI interface and error if it failed.
func JSON(reader io.Reader) (*abi.ABI, error) {
	dec := json.NewDecoder(reader)

	var anAbi abi.ABI
	if err := dec.Decode(&anAbi); err != nil {
		return nil, err
	}

	return &anAbi, nil
}

func parseABI(name string) (*abi.ABI, error) {
	sabi := ABIS[name]
	if sabi == "" {
		return nil, fmt.Errorf("no such ABI %s", name)
	}
	return JSON(strings.NewReader(sabi))
}

func ParsedABI(name string) (*abi.ABI, error) {
	pabi, ok := ParsedABIS[name]
	if ok {
		return pabi, nil
	}
	return parseABI(name)
}

func BoundContract(name string) *bind.BoundContract {
	bc, ok := BoundContracts[name]
	if !ok {
		anABI, err := ParsedABI(name)
		if err != nil {
			panic(err)
		}
		bc = bind.NewBoundContract(common.Address{}, *anABI, nil, nil, nil)
		BoundContracts[name] = bc
	}
	return bc
}

// Type names of contract binding
const (
	K_AccessIndexor           = "AccessIndexor"
	K_Accessible              = "Accessible"
	K_BaseAccessControlGroup  = "BaseAccessControlGroup"
	K_BaseAccessWallet        = "BaseAccessWallet"
	K_BaseAccessWalletFactory = "BaseAccessWalletFactory"
	K_BaseContent             = "BaseContent"
	K_BaseContentFactory      = "BaseContentFactory"
	K_BaseContentFactoryExt   = "BaseContentFactoryExt"
	K_BaseContentSpace        = "BaseContentSpace"
	K_BaseContentType         = "BaseContentType"
	K_BaseFactory             = "BaseFactory"
	K_BaseGroupFactory        = "BaseGroupFactory"
	K_BaseLibrary             = "BaseLibrary"
	K_BaseLibraryFactory      = "BaseLibraryFactory"
	K_Container               = "Container"
	K_Content                 = "Content"
	K_Editable                = "Editable"
	K_IFactorySpace           = "IFactorySpace"
	K_IKmsSpace               = "IKmsSpace"
	K_INodeSpace              = "INodeSpace"
	K_IUserSpace              = "IUserSpace"
	K_LvRecordableStream      = "LvRecordableStream"
	K_LvRecording             = "LvRecording"
	K_LvStreamRightsHolder    = "LvStreamRightsHolder"
	K_MetaObject              = "MetaObject"
	K_Node                    = "Node"
	K_NodeSpace               = "NodeSpace"
	K_Ownable                 = "Ownable"
	K_Precompile              = "Precompile"
	K_Transactable            = "Transactable"
	K_UserSpace               = "UserSpace"
	K_Strings                 = "Strings"
)

var ABIS = map[string]string{

	K_AccessIndexor:           AccessIndexorABI,
	K_Accessible:              AccessibleABI,
	K_BaseAccessControlGroup:  BaseAccessControlGroupABI,
	K_BaseAccessWallet:        BaseAccessWalletABI,
	K_BaseAccessWalletFactory: BaseAccessWalletFactoryABI,
	K_BaseContent:             BaseContentABI,
	K_BaseContentFactory:      BaseContentFactoryABI,
	K_BaseContentFactoryExt:   BaseContentFactoryExtABI,
	K_BaseContentSpace:        BaseContentSpaceABI,
	K_BaseContentType:         BaseContentTypeABI,
	K_BaseFactory:             BaseFactoryABI,
	K_BaseGroupFactory:        BaseGroupFactoryABI,
	K_BaseLibrary:             BaseLibraryABI,
	K_BaseLibraryFactory:      BaseLibraryFactoryABI,
	K_Container:               ContainerABI,
	K_Content:                 ContentABI,
	K_Editable:                EditableABI,
	K_IFactorySpace:           IFactorySpaceABI,
	K_IKmsSpace:               IKmsSpaceABI,
	K_INodeSpace:              INodeSpaceABI,
	K_IUserSpace:              IUserSpaceABI,
	K_LvRecordableStream:      LvRecordableStreamABI,
	K_LvRecording:             LvRecordingABI,
	K_LvStreamRightsHolder:    LvStreamRightsHolderABI,
	K_MetaObject:              MetaObjectABI,
	K_Node:                    NodeABI,
	K_NodeSpace:               NodeSpaceABI,
	K_Ownable:                 OwnableABI,
	K_Precompile:              PrecompileABI,
	K_Transactable:            TransactableABI,
	K_UserSpace:               UserSpaceABI,
	K_Strings:                 StringsABI,
}

// Unique events names.
// Unique events are events whose ID and name are unique across contracts.
const (
	E_AccessGrant                = "AccessGrant"
	E_AccessRequest              = "AccessRequest"
	E_AccessRequestStakeholder   = "AccessRequestStakeholder"
	E_AccessRequestValue         = "AccessRequestValue"
	E_AccessorGroupAdded         = "AccessorGroupAdded"
	E_AccessorGroupRemoved       = "AccessorGroupRemoved"
	E_AddKMSLocator              = "AddKMSLocator"
	E_AddNode                    = "AddNode"
	E_ApproveContent             = "ApproveContent"
	E_ApproveContentRequest      = "ApproveContentRequest"
	E_BindUserWallet             = "BindUserWallet"
	E_CommitPending              = "CommitPending"
	E_ContentObjectCreate        = "ContentObjectCreate"
	E_ContentObjectCreated       = "ContentObjectCreated"
	E_ContentObjectDeleted       = "ContentObjectDeleted"
	E_ContentTypeAdded           = "ContentTypeAdded"
	E_ContentTypeRemoved         = "ContentTypeRemoved"
	E_ContributorGroupAdded      = "ContributorGroupAdded"
	E_ContributorGroupRemoved    = "ContributorGroupRemoved"
	E_CreateAccessWallet         = "CreateAccessWallet"
	E_CreateContent              = "CreateContent"
	E_CreateContentType          = "CreateContentType"
	E_CreateGroup                = "CreateGroup"
	E_CreateLibrary              = "CreateLibrary"
	E_CreateRecording            = "CreateRecording"
	E_CreateSpace                = "CreateSpace"
	E_DbgAccess                  = "DbgAccess"
	E_DbgAccessCode              = "DbgAccessCode"
	E_DbgAddress                 = "DbgAddress"
	E_DeleteRecording            = "DeleteRecording"
	E_EngageAccountLibrary       = "EngageAccountLibrary"
	E_ExecStatus                 = "ExecStatus"
	E_GetAccessCharge            = "GetAccessCharge"
	E_GetAccessWallet            = "GetAccessWallet"
	E_InsufficientFunds          = "InsufficientFunds"
	E_InvokeCustomPostHook       = "InvokeCustomPostHook"
	E_InvokeCustomPreHook        = "InvokeCustomPreHook"
	E_Log                        = "Log"
	E_LogAddress                 = "LogAddress"
	E_LogBool                    = "LogBool"
	E_LogBytes32                 = "LogBytes32"
	E_LogInt256                  = "LogInt256"
	E_LogUint256                 = "LogUint256"
	E_ManagerAccessGranted       = "ManagerAccessGranted"
	E_ManagerAccessRevoked       = "ManagerAccessRevoked"
	E_MemberAdded                = "MemberAdded"
	E_MemberRevoked              = "MemberRevoked"
	E_MembershipGroupAdded       = "MembershipGroupAdded"
	E_MembershipGroupRemoved     = "MembershipGroupRemoved"
	E_NodeApproved               = "NodeApproved"
	E_NodeSubmitted              = "NodeSubmitted"
	E_Publish                    = "Publish"
	E_RecordProgramId            = "RecordProgramId"
	E_RecordedProgramId          = "RecordedProgramId"
	E_RecordingPlaybackCompleted = "RecordingPlaybackCompleted"
	E_RecordingPlaybackStarted   = "RecordingPlaybackStarted"
	E_RegisterNode               = "RegisterNode"
	E_RemoveKMSLocator           = "RemoveKMSLocator"
	E_RemoveNode                 = "RemoveNode"
	E_ReturnCustomHook           = "ReturnCustomHook"
	E_ReviewerGroupAdded         = "ReviewerGroupAdded"
	E_ReviewerGroupRemoved       = "ReviewerGroupRemoved"
	E_RightsChanged              = "RightsChanged"
	E_RunAccess                  = "RunAccess"
	E_RunAccessCharge            = "RunAccessCharge"
	E_RunCreate                  = "RunCreate"
	E_RunFinalize                = "RunFinalize"
	E_RunKill                    = "RunKill"
	E_RunStatusChange            = "RunStatusChange"
	E_SetAccessCharge            = "SetAccessCharge"
	E_SetContentContract         = "SetContentContract"
	E_SetContentType             = "SetContentType"
	E_SetFactory                 = "SetFactory"
	E_SetRecordingStatus         = "SetRecordingStatus"
	E_SetRecordingTimes          = "SetRecordingTimes"
	E_SetStatusCode              = "SetStatusCode"
	E_SetTimes                   = "SetTimes"
	E_StartStream                = "StartStream"
	E_StopStream                 = "StopStream"
	E_UnauthorizedOperation      = "UnauthorizedOperation"
	E_UnregisterNode             = "UnregisterNode"
	E_UpdateKmsAddress           = "UpdateKmsAddress"
	E_UpdateRecordingStatus      = "UpdateRecordingStatus"
	E_UpdateRequest              = "UpdateRequest"
	E_VersionConfirm             = "VersionConfirm"
	E_VersionDelete              = "VersionDelete"
)

type EventInfo = c.EventInfo
type EventType = c.EventType

func init() {
	for name, _ := range ABIS {
		a, err := parseABI(name)
		if err == nil {
			ParsedABIS[name] = a
		}
	}
	var ev *EventInfo

	ev = &EventInfo{
		Name: "AccessGrant",
		ID:   common.HexToHash("0x475e9d68ca61f129cebee5af694af00ed0e3b3b0d4b74071fbb81d0e2b912718"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*AccessGrant)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_AccessGrant] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "AccessRequest",
		ID:   common.HexToHash("0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*AccessRequest)(nil)),
				BoundContract: BoundContract(K_Accessible),
			},
		},
	}
	UniqueEvents[E_AccessRequest] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "AccessRequestStakeholder",
		ID:   common.HexToHash("0xb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b684"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*AccessRequestStakeholder)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_AccessRequestStakeholder] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "AccessRequestValue",
		ID:   common.HexToHash("0x515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c38"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*AccessRequestValue)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_AccessRequestValue] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "AccessorGroupAdded",
		ID:   common.HexToHash("0x3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d411"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*AccessorGroupAdded)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_AccessorGroupAdded] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "AccessorGroupRemoved",
		ID:   common.HexToHash("0xc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f081"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*AccessorGroupRemoved)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_AccessorGroupRemoved] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "AddKMSLocator",
		ID:   common.HexToHash("0xdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*AddKMSLocator)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_AddKMSLocator] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "AddNode",
		ID:   common.HexToHash("0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*AddNode)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_AddNode] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ApproveContent",
		ID:   common.HexToHash("0x70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ApproveContent)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_ApproveContent] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ApproveContentRequest",
		ID:   common.HexToHash("0x0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ApproveContentRequest)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_ApproveContentRequest] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "BindUserWallet",
		ID:   common.HexToHash("0x05e3f3adaf96d565bb326088a1d8e0d78497549df2c99a8ab681e5fbc7a9b3f2"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*BindUserWallet)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_BindUserWallet] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "CommitPending",
		ID:   common.HexToHash("0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*CommitPending)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_CommitPending] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ContentObjectCreate",
		ID:   common.HexToHash("0xc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ContentObjectCreate)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_ContentObjectCreate] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ContentObjectCreated",
		ID:   common.HexToHash("0xadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ContentObjectCreated)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_ContentObjectCreated] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ContentObjectDeleted",
		ID:   common.HexToHash("0x36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ContentObjectDeleted)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_ContentObjectDeleted] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ContentTypeAdded",
		ID:   common.HexToHash("0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ContentTypeAdded)(nil)),
				BoundContract: BoundContract(K_BaseAccessWallet),
			},
		},
	}
	UniqueEvents[E_ContentTypeAdded] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ContentTypeRemoved",
		ID:   common.HexToHash("0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ContentTypeRemoved)(nil)),
				BoundContract: BoundContract(K_BaseAccessWallet),
			},
		},
	}
	UniqueEvents[E_ContentTypeRemoved] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ContributorGroupAdded",
		ID:   common.HexToHash("0x218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d61"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ContributorGroupAdded)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_ContributorGroupAdded] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ContributorGroupRemoved",
		ID:   common.HexToHash("0xbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ContributorGroupRemoved)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_ContributorGroupRemoved] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "CreateAccessWallet",
		ID:   common.HexToHash("0x56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*CreateAccessWallet)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_CreateAccessWallet] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "CreateContent",
		ID:   common.HexToHash("0xa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*CreateContent)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_CreateContent] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "CreateContentType",
		ID:   common.HexToHash("0x9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*CreateContentType)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_CreateContentType] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "CreateGroup",
		ID:   common.HexToHash("0xa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*CreateGroup)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_CreateGroup] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "CreateLibrary",
		ID:   common.HexToHash("0x473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*CreateLibrary)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_CreateLibrary] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "CreateRecording",
		ID:   common.HexToHash("0x41b90676ca6c9f288172c8f4f1f0253bfc527115acd3f7a972a5219ea4b0d0c5"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*CreateRecording)(nil)),
				BoundContract: BoundContract(K_LvRecordableStream),
			},
		},
	}
	UniqueEvents[E_CreateRecording] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "CreateSpace",
		ID:   common.HexToHash("0x599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf54"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*CreateSpace)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_CreateSpace] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "DbgAccess",
		ID:   common.HexToHash("0xfdcd1c148f180968772efab9ef7e26a2ec7a58d82572587ad224c36c91236175"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*DbgAccess)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_DbgAccess] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "DbgAccessCode",
		ID:   common.HexToHash("0x14c078593b5fe597db0b1293557c1a5315f2b7e708477ea38b41929534d96bdd"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*DbgAccessCode)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_DbgAccessCode] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "DbgAddress",
		ID:   common.HexToHash("0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*DbgAddress)(nil)),
				BoundContract: BoundContract(K_AccessIndexor),
			},
		},
	}
	UniqueEvents[E_DbgAddress] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "DeleteRecording",
		ID:   common.HexToHash("0x9d3bb073bb2ef4d4a880f32fbbc665abfad2b29f532a231d93ab2207396f0b25"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*DeleteRecording)(nil)),
				BoundContract: BoundContract(K_LvRecordableStream),
			},
		},
	}
	UniqueEvents[E_DeleteRecording] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "EngageAccountLibrary",
		ID:   common.HexToHash("0x53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*EngageAccountLibrary)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_EngageAccountLibrary] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ExecStatus",
		ID:   common.HexToHash("0x583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefad"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ExecStatus)(nil)),
				BoundContract: BoundContract(K_BaseAccessWallet),
			},
		},
	}
	UniqueEvents[E_ExecStatus] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "GetAccessCharge",
		ID:   common.HexToHash("0xa58326ee5bb617cb8b4f0d0f5f557c469d2d05d7a738f777037deda9c724b370"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*GetAccessCharge)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_GetAccessCharge] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "GetAccessWallet",
		ID:   common.HexToHash("0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*GetAccessWallet)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_GetAccessWallet] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "InsufficientFunds",
		ID:   common.HexToHash("0x03eb8b54a949acec2cd08fdb6d6bd4647a1f2c907d75d6900648effa92eb147f"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*InsufficientFunds)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_InsufficientFunds] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "InvokeCustomPostHook",
		ID:   common.HexToHash("0x97d9c9779ed3ed8b9a6edfe16d17b1fdec843245747a19abfb621806e37d4a89"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*InvokeCustomPostHook)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_InvokeCustomPostHook] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "InvokeCustomPreHook",
		ID:   common.HexToHash("0x12b04791b5caab768e2757268992f0c62801e3921d9e310c893f0d5f9caa5f71"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*InvokeCustomPreHook)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_InvokeCustomPreHook] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "Log",
		ID:   common.HexToHash("0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*Log)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_Log] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "LogAddress",
		ID:   common.HexToHash("0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*LogAddress)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_LogAddress] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "LogBool",
		ID:   common.HexToHash("0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*LogBool)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_LogBool] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "LogBytes32",
		ID:   common.HexToHash("0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*LogBytes32)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_LogBytes32] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "LogInt256",
		ID:   common.HexToHash("0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*LogInt256)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_LogInt256] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "LogUint256",
		ID:   common.HexToHash("0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*LogUint256)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_LogUint256] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ManagerAccessGranted",
		ID:   common.HexToHash("0x93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d61117"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ManagerAccessGranted)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_ManagerAccessGranted] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ManagerAccessRevoked",
		ID:   common.HexToHash("0x2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b95"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ManagerAccessRevoked)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_ManagerAccessRevoked] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "MemberAdded",
		ID:   common.HexToHash("0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*MemberAdded)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_MemberAdded] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "MemberRevoked",
		ID:   common.HexToHash("0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*MemberRevoked)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_MemberRevoked] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "MembershipGroupAdded",
		ID:   common.HexToHash("0x467a7c1305f91e354a8a1e9046906d4d1a4852f958a073a392555d809be313a7"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*MembershipGroupAdded)(nil)),
				BoundContract: BoundContract(K_LvRecordableStream),
			},
		},
	}
	UniqueEvents[E_MembershipGroupAdded] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "MembershipGroupRemoved",
		ID:   common.HexToHash("0x7b4822b1021af568bad37d56a35fbc255dc67153c544aa4116a289632a4e5955"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*MembershipGroupRemoved)(nil)),
				BoundContract: BoundContract(K_LvRecordableStream),
			},
		},
	}
	UniqueEvents[E_MembershipGroupRemoved] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "NodeApproved",
		ID:   common.HexToHash("0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*NodeApproved)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_NodeApproved] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "NodeSubmitted",
		ID:   common.HexToHash("0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*NodeSubmitted)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_NodeSubmitted] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "Publish",
		ID:   common.HexToHash("0xad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*Publish)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_Publish] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RecordProgramId",
		ID:   common.HexToHash("0x453384b91e17e6c44d171f27d5d32a864cf9cc9740578ffd6552d323aa973372"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RecordProgramId)(nil)),
				BoundContract: BoundContract(K_LvRecording),
			},
		},
	}
	UniqueEvents[E_RecordProgramId] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RecordedProgramId",
		ID:   common.HexToHash("0xe3b30c4da7320d1a542eb57f205a34d2fc36ecd114595f3d50be2a73b3426e6b"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RecordedProgramId)(nil)),
				BoundContract: BoundContract(K_LvRecordableStream),
			},
		},
	}
	UniqueEvents[E_RecordedProgramId] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RecordingPlaybackCompleted",
		ID:   common.HexToHash("0x208745b583bd0c257eced13411dc4b50e9a3a9c1ef0cc2f95b30a7457ec50cc1"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RecordingPlaybackCompleted)(nil)),
				BoundContract: BoundContract(K_LvRecordableStream),
			},
		},
	}
	UniqueEvents[E_RecordingPlaybackCompleted] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RecordingPlaybackStarted",
		ID:   common.HexToHash("0x182a726f966f22c96d651085c2a7143482b8d96fb0964ff2664ab8bdf2b703aa"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RecordingPlaybackStarted)(nil)),
				BoundContract: BoundContract(K_LvRecordableStream),
			},
		},
	}
	UniqueEvents[E_RecordingPlaybackStarted] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RegisterNode",
		ID:   common.HexToHash("0x4575facd117046c9c28b69a3eb9c08939f2462a5a22ea6c6dcd4f79b8dd124e9"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RegisterNode)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_RegisterNode] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RemoveKMSLocator",
		ID:   common.HexToHash("0x5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RemoveKMSLocator)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_RemoveKMSLocator] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RemoveNode",
		ID:   common.HexToHash("0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RemoveNode)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_RemoveNode] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ReturnCustomHook",
		ID:   common.HexToHash("0x8c693e8b27db7caf9b9637b66dcc11444760023a4d53e95407a3acef1b249f50"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ReturnCustomHook)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_ReturnCustomHook] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ReviewerGroupAdded",
		ID:   common.HexToHash("0x1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ReviewerGroupAdded)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_ReviewerGroupAdded] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "ReviewerGroupRemoved",
		ID:   common.HexToHash("0xdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*ReviewerGroupRemoved)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_ReviewerGroupRemoved] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RightsChanged",
		ID:   common.HexToHash("0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RightsChanged)(nil)),
				BoundContract: BoundContract(K_AccessIndexor),
			},
		},
	}
	UniqueEvents[E_RightsChanged] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RunAccess",
		ID:   common.HexToHash("0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RunAccess)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_RunAccess] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RunAccessCharge",
		ID:   common.HexToHash("0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RunAccessCharge)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_RunAccessCharge] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RunCreate",
		ID:   common.HexToHash("0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RunCreate)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_RunCreate] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RunFinalize",
		ID:   common.HexToHash("0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RunFinalize)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_RunFinalize] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RunKill",
		ID:   common.HexToHash("0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RunKill)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_RunKill] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "RunStatusChange",
		ID:   common.HexToHash("0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*RunStatusChange)(nil)),
				BoundContract: BoundContract(K_Content),
			},
		},
	}
	UniqueEvents[E_RunStatusChange] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "SetAccessCharge",
		ID:   common.HexToHash("0x4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a3"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*SetAccessCharge)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_SetAccessCharge] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "SetContentContract",
		ID:   common.HexToHash("0xa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb7"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*SetContentContract)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_SetContentContract] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "SetContentType",
		ID:   common.HexToHash("0x4f692e87baf302f7281e83eec109053efc2ca8e7bddfc6ce88c579cd9767f71f"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*SetContentType)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_SetContentType] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "SetFactory",
		ID:   common.HexToHash("0x1c893ef9379093af30f458b9e74d2aba13c499660b68dec5e29af7b199c188b9"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*SetFactory)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_SetFactory] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "SetRecordingStatus",
		ID:   common.HexToHash("0x93ee8bc66b5d08a5dc39e788b1f78aa5f9ff2deda9e1387aa1fe22f9c329ed85"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*SetRecordingStatus)(nil)),
				BoundContract: BoundContract(K_LvRecordableStream),
			},
		},
	}
	UniqueEvents[E_SetRecordingStatus] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "SetRecordingTimes",
		ID:   common.HexToHash("0x8e6b298cf577550234f0d0de33a4910d4bf1c4e08fe31b1173b2c6232297b3f4"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*SetRecordingTimes)(nil)),
				BoundContract: BoundContract(K_LvRecordableStream),
			},
		},
	}
	UniqueEvents[E_SetRecordingTimes] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "SetStatusCode",
		ID:   common.HexToHash("0xda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a2"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*SetStatusCode)(nil)),
				BoundContract: BoundContract(K_BaseContent),
			},
		},
	}
	UniqueEvents[E_SetStatusCode] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "SetTimes",
		ID:   common.HexToHash("0x3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c54"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*SetTimes)(nil)),
				BoundContract: BoundContract(K_LvRecording),
			},
		},
	}
	UniqueEvents[E_SetTimes] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "StartStream",
		ID:   common.HexToHash("0x8d7e6a8f23ccc8845c41fd09bebe570a0885272343268bbdfd71090b878b4b21"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*StartStream)(nil)),
				BoundContract: BoundContract(K_LvRecordableStream),
			},
		},
	}
	UniqueEvents[E_StartStream] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "StopStream",
		ID:   common.HexToHash("0x1b01b687e3428bc184341f729ec8a57bdd569536206cfb59e5d0cecb30dfcb7e"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*StopStream)(nil)),
				BoundContract: BoundContract(K_LvRecordableStream),
			},
		},
	}
	UniqueEvents[E_StopStream] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "UnauthorizedOperation",
		ID:   common.HexToHash("0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*UnauthorizedOperation)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_UnauthorizedOperation] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "UnregisterNode",
		ID:   common.HexToHash("0xb98695ab4c6cedb3b4dfe62479a9d39a59aa2cb38b8bd92bbb6ce5856e42bdf4"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*UnregisterNode)(nil)),
				BoundContract: BoundContract(K_BaseContentSpace),
			},
		},
	}
	UniqueEvents[E_UnregisterNode] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "UpdateKmsAddress",
		ID:   common.HexToHash("0x74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*UpdateKmsAddress)(nil)),
				BoundContract: BoundContract(K_BaseLibrary),
			},
		},
	}
	UniqueEvents[E_UpdateKmsAddress] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "UpdateRecordingStatus",
		ID:   common.HexToHash("0x6fff8c8938f3906f27a679f8d6b6652c28d82df5e27e55ef5cdc5f96b06dee09"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*UpdateRecordingStatus)(nil)),
				BoundContract: BoundContract(K_LvRecording),
			},
		},
	}
	UniqueEvents[E_UpdateRecordingStatus] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "UpdateRequest",
		ID:   common.HexToHash("0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*UpdateRequest)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_UpdateRequest] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "VersionConfirm",
		ID:   common.HexToHash("0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*VersionConfirm)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_VersionConfirm] = ev
	EventsByType[ev.Types[0].Type] = ev

	ev = &EventInfo{
		Name: "VersionDelete",
		ID:   common.HexToHash("0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51"),
		Types: []EventType{
			{
				Type:          reflect.TypeOf((*VersionDelete)(nil)),
				BoundContract: BoundContract(K_BaseAccessControlGroup),
			},
		},
	}
	UniqueEvents[E_VersionDelete] = ev
	EventsByType[ev.Types[0].Type] = ev

}

// Unique events structs

// AccessGrant event with ID 0x475e9d68ca61f129cebee5af694af00ed0e3b3b0d4b74071fbb81d0e2b912718
type AccessGrant struct {
	RequestID       *big.Int
	AccessGranted   bool
	ReKey           string
	EncryptedAESKey string
	Raw             types.Log // Blockchain specific contextual infos
}

// AccessRequest event with ID 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88
type AccessRequest struct {
	Raw types.Log // Blockchain specific contextual infos
}

// AccessRequestStakeholder event with ID 0xb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b684
type AccessRequestStakeholder struct {
	Stakeholder common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// AccessRequestValue event with ID 0x515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c38
type AccessRequestValue struct {
	CustomValue [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// AccessorGroupAdded event with ID 0x3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d411
type AccessorGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// AccessorGroupRemoved event with ID 0xc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f081
type AccessorGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// AddKMSLocator event with ID 0xdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319
type AddKMSLocator struct {
	Sender common.Address
	Status *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// AddNode event with ID 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4
type AddNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// ApproveContent event with ID 0x70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442
type ApproveContent struct {
	ContentAddress common.Address
	Approved       bool
	Note           string
	Raw            types.Log // Blockchain specific contextual infos
}

// ApproveContentRequest event with ID 0x0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a
type ApproveContentRequest struct {
	ContentAddress common.Address
	Submitter      common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// BindUserWallet event with ID 0x05e3f3adaf96d565bb326088a1d8e0d78497549df2c99a8ab681e5fbc7a9b3f2
type BindUserWallet struct {
	Wallet   common.Address
	UserAddr common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// CommitPending event with ID 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75
type CommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// ContentObjectCreate event with ID 0xc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19
type ContentObjectCreate struct {
	ContainingLibrary common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// ContentObjectCreated event with ID 0xadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878
type ContentObjectCreated struct {
	ContentAddress common.Address
	ContentType    common.Address
	SpaceAddress   common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// ContentObjectDeleted event with ID 0x36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e
type ContentObjectDeleted struct {
	ContentAddress common.Address
	SpaceAddress   common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// ContentTypeAdded event with ID 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7
type ContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// ContentTypeRemoved event with ID 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2
type ContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// ContributorGroupAdded event with ID 0x218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d61
type ContributorGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// ContributorGroupRemoved event with ID 0xbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c
type ContributorGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// CreateAccessWallet event with ID 0x56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca
type CreateAccessWallet struct {
	Wallet common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// CreateContent event with ID 0xa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce
type CreateContent struct {
	ContentAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// CreateContentType event with ID 0x9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8
type CreateContentType struct {
	ContentTypeAddress common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// CreateGroup event with ID 0xa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159
type CreateGroup struct {
	GroupAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// CreateLibrary event with ID 0x473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571
type CreateLibrary struct {
	LibraryAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// CreateRecording event with ID 0x41b90676ca6c9f288172c8f4f1f0253bfc527115acd3f7a972a5219ea4b0d0c5
type CreateRecording struct {
	Timestamp   *big.Int
	Accessor    common.Address
	RecObj      common.Address
	RecContract common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// CreateSpace event with ID 0x599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf54
type CreateSpace struct {
	Version [32]byte
	Owner   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// DbgAccess event with ID 0xfdcd1c148f180968772efab9ef7e26a2ec7a58d82572587ad224c36c91236175
type DbgAccess struct {
	Charged   *big.Int
	Received  *big.Int
	Converted *big.Int
	Enough    bool
	Raw       types.Log // Blockchain specific contextual infos
}

// DbgAccessCode event with ID 0x14c078593b5fe597db0b1293557c1a5315f2b7e708477ea38b41929534d96bdd
type DbgAccessCode struct {
	Code uint8
	Raw  types.Log // Blockchain specific contextual infos
}

// DbgAddress event with ID 0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260
type DbgAddress struct {
	Label string
	Index *big.Int
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// DeleteRecording event with ID 0x9d3bb073bb2ef4d4a880f32fbbc665abfad2b29f532a231d93ab2207396f0b25
type DeleteRecording struct {
	Timestamp   *big.Int
	Accessor    common.Address
	RecObj      common.Address
	RecContract common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// EngageAccountLibrary event with ID 0x53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca
type EngageAccountLibrary struct {
	AccountAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// ExecStatus event with ID 0x583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefad
type ExecStatus struct {
	Guarantor common.Address
	Code      *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// GetAccessCharge event with ID 0xa58326ee5bb617cb8b4f0d0f5f557c469d2d05d7a738f777037deda9c724b370
type GetAccessCharge struct {
	Level        uint8
	AccessCharge *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// GetAccessWallet event with ID 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157
type GetAccessWallet struct {
	WalletAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// InsufficientFunds event with ID 0x03eb8b54a949acec2cd08fdb6d6bd4647a1f2c907d75d6900648effa92eb147f
type InsufficientFunds struct {
	AccessCharge   *big.Int
	AmountProvided *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// InvokeCustomPostHook event with ID 0x97d9c9779ed3ed8b9a6edfe16d17b1fdec843245747a19abfb621806e37d4a89
type InvokeCustomPostHook struct {
	CustomContract common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// InvokeCustomPreHook event with ID 0x12b04791b5caab768e2757268992f0c62801e3921d9e310c893f0d5f9caa5f71
type InvokeCustomPreHook struct {
	CustomContract common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// Log event with ID 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab
type Log struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// LogAddress event with ID 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e
type LogAddress struct {
	Label string
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// LogBool event with ID 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47
type LogBool struct {
	Label string
	B     bool
	Raw   types.Log // Blockchain specific contextual infos
}

// LogBytes32 event with ID 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7
type LogBytes32 struct {
	Label string
	B     [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// LogInt256 event with ID 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22
type LogInt256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// LogUint256 event with ID 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d
type LogUint256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// ManagerAccessGranted event with ID 0x93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d61117
type ManagerAccessGranted struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// ManagerAccessRevoked event with ID 0x2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b95
type ManagerAccessRevoked struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// MemberAdded event with ID 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914
type MemberAdded struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// MemberRevoked event with ID 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c
type MemberRevoked struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// MembershipGroupAdded event with ID 0x467a7c1305f91e354a8a1e9046906d4d1a4852f958a073a392555d809be313a7
type MembershipGroupAdded struct {
	Timestamp *big.Int
	Group     common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// MembershipGroupRemoved event with ID 0x7b4822b1021af568bad37d56a35fbc255dc67153c544aa4116a289632a4e5955
type MembershipGroupRemoved struct {
	Timestamp *big.Int
	Group     common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// NodeApproved event with ID 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54
type NodeApproved struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// NodeSubmitted event with ID 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d
type NodeSubmitted struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// Publish event with ID 0xad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4
type Publish struct {
	RequestStatus bool
	StatusCode    *big.Int
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// RecordProgramId event with ID 0x453384b91e17e6c44d171f27d5d32a864cf9cc9740578ffd6552d323aa973372
type RecordProgramId struct {
	Timestamp *big.Int
	ProgramId string
	Raw       types.Log // Blockchain specific contextual infos
}

// RecordedProgramId event with ID 0xe3b30c4da7320d1a542eb57f205a34d2fc36ecd114595f3d50be2a73b3426e6b
type RecordedProgramId struct {
	Timestamp    *big.Int
	Accessor     common.Address
	RecObj       common.Address
	ProgramId    string
	ProgramStart *big.Int
	ProgramEnd   *big.Int
	ProgramTitle string
	Raw          types.Log // Blockchain specific contextual infos
}

// RecordingPlaybackCompleted event with ID 0x208745b583bd0c257eced13411dc4b50e9a3a9c1ef0cc2f95b30a7457ec50cc1
type RecordingPlaybackCompleted struct {
	Timestamp         *big.Int
	Accessor          common.Address
	RecObj            common.Address
	RequestID         *big.Int
	PercentPlayed     uint8
	FinalizeTimestamp *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// RecordingPlaybackStarted event with ID 0x182a726f966f22c96d651085c2a7143482b8d96fb0964ff2664ab8bdf2b703aa
type RecordingPlaybackStarted struct {
	Timestamp       *big.Int
	Accessor        common.Address
	RecObj          common.Address
	RequestID       *big.Int
	AccessTimestamp *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// RegisterNode event with ID 0x4575facd117046c9c28b69a3eb9c08939f2462a5a22ea6c6dcd4f79b8dd124e9
type RegisterNode struct {
	NodeObjAddr common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// RemoveKMSLocator event with ID 0x5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c
type RemoveKMSLocator struct {
	Sender common.Address
	Status *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// RemoveNode event with ID 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d
type RemoveNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// ReturnCustomHook event with ID 0x8c693e8b27db7caf9b9637b66dcc11444760023a4d53e95407a3acef1b249f50
type ReturnCustomHook struct {
	CustomContract common.Address
	Result         *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// ReviewerGroupAdded event with ID 0x1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb
type ReviewerGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// ReviewerGroupRemoved event with ID 0xdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb
type ReviewerGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// RightsChanged event with ID 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4
type RightsChanged struct {
	Principal common.Address
	Entity    common.Address
	Aggregate uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// RunAccess event with ID 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58
type RunAccess struct {
	RequestID *big.Int
	Result    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// RunAccessCharge event with ID 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385
type RunAccessCharge struct {
	Level                 uint8
	CalculateAccessCharge *big.Int
	Raw                   types.Log // Blockchain specific contextual infos
}

// RunCreate event with ID 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b
type RunCreate struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// RunFinalize event with ID 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891
type RunFinalize struct {
	RequestID *big.Int
	Result    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// RunKill event with ID 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86
type RunKill struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// RunStatusChange event with ID 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff
type RunStatusChange struct {
	ProposedStatusCode *big.Int
	ReturnStatusCode   *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// SetAccessCharge event with ID 0x4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a3
type SetAccessCharge struct {
	AccessCharge *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// SetContentContract event with ID 0xa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb7
type SetContentContract struct {
	ContentContractAddress common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// SetContentType event with ID 0x4f692e87baf302f7281e83eec109053efc2ca8e7bddfc6ce88c579cd9767f71f
type SetContentType struct {
	ContentType            common.Address
	ContentContractAddress common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// SetFactory event with ID 0x1c893ef9379093af30f458b9e74d2aba13c499660b68dec5e29af7b199c188b9
type SetFactory struct {
	Factory common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// SetRecordingStatus event with ID 0x93ee8bc66b5d08a5dc39e788b1f78aa5f9ff2deda9e1387aa1fe22f9c329ed85
type SetRecordingStatus struct {
	Timestamp *big.Int
	Accessor  common.Address
	RecObj    common.Address
	RecStatus string
	Raw       types.Log // Blockchain specific contextual infos
}

// SetRecordingTimes event with ID 0x8e6b298cf577550234f0d0de33a4910d4bf1c4e08fe31b1173b2c6232297b3f4
type SetRecordingTimes struct {
	Timestamp    *big.Int
	Accessor     common.Address
	RecObj       common.Address
	RecStartTime *big.Int
	RecEndTime   *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// SetStatusCode event with ID 0xda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a2
type SetStatusCode struct {
	StatusCode *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// SetTimes event with ID 0x3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c54
type SetTimes struct {
	Timestamp *big.Int
	StartTime *big.Int
	EndTime   *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// StartStream event with ID 0x8d7e6a8f23ccc8845c41fd09bebe570a0885272343268bbdfd71090b878b4b21
type StartStream struct {
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// StopStream event with ID 0x1b01b687e3428bc184341f729ec8a57bdd569536206cfb59e5d0cecb30dfcb7e
type StopStream struct {
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// UnauthorizedOperation event with ID 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7
type UnauthorizedOperation struct {
	OperationCode *big.Int
	Candidate     common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// UnregisterNode event with ID 0xb98695ab4c6cedb3b4dfe62479a9d39a59aa2cb38b8bd92bbb6ce5856e42bdf4
type UnregisterNode struct {
	NodeObjAddr common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// UpdateKmsAddress event with ID 0x74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608
type UpdateKmsAddress struct {
	AddressKms common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// UpdateRecordingStatus event with ID 0x6fff8c8938f3906f27a679f8d6b6652c28d82df5e27e55ef5cdc5f96b06dee09
type UpdateRecordingStatus struct {
	Timestamp *big.Int
	Status    uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// UpdateRequest event with ID 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65
type UpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// VersionConfirm event with ID 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e
type VersionConfirm struct {
	SpaceAddress common.Address
	ObjectHash   string
	Raw          types.Log // Blockchain specific contextual infos
}

// VersionDelete event with ID 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51
type VersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// AccessIndexorMetaData contains all meta data concerning the AccessIndexor contract.
var AccessIndexorMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentObjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"name\":\"setContentSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_OBJECT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccessGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_GROUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_LIBRARY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_CONFIRMED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContractRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getAccessGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessGroups\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentObjectRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasManagerAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_TENTATIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contracts\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setLibraryRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_NONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentTypeRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpLibraries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkDirectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentObjects\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAccessRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraries\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLibrariesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentObject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAccessGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentObjectsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setAccessGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"}],\"name\":\"getLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"principal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"aggregate\",\"type\":\"uint8\"}],\"name\":\"RightsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"dbgAddress\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"18689733": "ACCESS_CONFIRMED()",
		"8232f3f1": "ACCESS_NONE()",
		"479a0c51": "ACCESS_TENTATIVE()",
		"091600e6": "CATEGORY_CONTENT_OBJECT()",
		"68a0469a": "CATEGORY_CONTENT_TYPE()",
		"6373a411": "CATEGORY_CONTRACT()",
		"12915a30": "CATEGORY_GROUP()",
		"16aed232": "CATEGORY_LIBRARY()",
		"d1aeb651": "TYPE_ACCESS()",
		"5d97b6c2": "TYPE_EDIT()",
		"96eba03d": "TYPE_SEE()",
		"30e66949": "accessGroups()",
		"15c0bac1": "checkAccessGroupRights(address,uint8)",
		"5faecb76": "checkContentObjectRights(address,uint8)",
		"fe538c5a": "checkContentTypeRights(address,uint8)",
		"a864dfa5": "checkContractRights(address,uint8)",
		"a00b38c4": "checkDirectRights(uint8,address,uint8)",
		"6813b6d1": "checkLibraryRights(address,uint8)",
		"7fb52f1a": "checkRights(uint8,address,uint8)",
		"d30f8cd0": "cleanUpAccessGroups()",
		"2fa5c842": "cleanUpAll()",
		"048bd529": "cleanUpContentObjects()",
		"85e0a200": "cleanUpContentTypes()",
		"92297d7b": "cleanUpLibraries()",
		"a980892d": "contentObjects()",
		"af570c04": "contentSpace()",
		"9f46133e": "contentTypes()",
		"7709bc78": "contractExists(address)",
		"6c0f79b6": "contracts()",
		"02d05d3f": "creator()",
		"2d474cbd": "getAccessGroup(uint256)",
		"304f4a7b": "getAccessGroupRights(address)",
		"0dc10d3f": "getAccessGroupsLength()",
		"cf8a7503": "getContentObject(uint256)",
		"69881c0c": "getContentObjectRights(address)",
		"ebe9314e": "getContentObjectsLength()",
		"aa3f6952": "getContentType(uint256)",
		"a4081d62": "getContentTypeRights(address)",
		"5c1d3059": "getContentTypesLength()",
		"6ebc8c86": "getContract(uint256)",
		"08d865d7": "getContractRights(address)",
		"fccc134f": "getContractsLength()",
		"cb86806d": "getLibrariesLength()",
		"d15d62a7": "getLibrary(uint256)",
		"fb52222c": "getLibraryRights(address)",
		"42e7ba7b": "hasManagerAccess(address)",
		"41c0e1b5": "kill()",
		"c4b1978d": "libraries()",
		"8da5cb5b": "owner()",
		"f17bda91": "setAccessGroupRights(address,uint8,uint8)",
		"b8ff1dba": "setAccessRights()",
		"3def5140": "setContentObjectRights(address,uint8,uint8)",
		"055af48f": "setContentSpace(address)",
		"8635adb5": "setContentTypeRights(address,uint8,uint8)",
		"224dcba0": "setContractRights(address,uint8,uint8)",
		"7cbb7bf2": "setLibraryRights(address,uint8,uint8)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
	},
	Bin: "0x7f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f416363657373496e6465786f7232303139313131333230323430304d4c00000060045560058054600160ff19909116811761ff0019166102001762ff00001916620300001763ff000000191663040000001764ff0000000019166405000000001790915560e06040526080908152600a60a052606460c052620000ac9060069060036200013a565b506001805432600160a060020a031991821681179092556002805490911690911790556005546007805462010000830460ff90811660ff1992831617909255600f805461010085048416908316179055600b805483851690831617905560138054630100000085048416908316179055601780546401000000009094049092169216919091179055620001f8565b600183019183908215620001c25791602002820160005b838211156200019157835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000151565b8015620001c05782816101000a81549060ff021916905560010160208160000104928301926001030262000191565b505b50620001d0929150620001d4565b5090565b620001f591905b80821115620001d057805460ff19168155600101620001db565b90565b611a9f80620002086000396000f3006080604052600436106102a55763ffffffff60e060020a60003504166302d05d3f81146102a7578063048bd529146102d8578063055af48f146102ff57806308d865d714610320578063091600e6146103575780630dc10d3f1461036c57806312915a301461038157806315c0bac11461039657806316aed232146103d157806318689733146103e6578063224dcba0146103fb5780632d474cbd146104285780632fa5c84214610440578063304f4a7b1461048057806330e66949146104a15780633def5140146104d357806341c0e1b51461050057806342e7ba7b14610515578063479a0c511461053657806354fd4d501461054b5780635c1d3059146105605780635d97b6c2146103e65780635faecb76146105755780636373a4111461059c5780636813b6d1146105b157806368a0469a146105d857806369881c0c146105ed5780636c0f79b61461060e5780636d2e4b1b146106235780636ebc8c86146106445780637709bc781461065c5780637cbb7bf21461067d5780637fb52f1a146106aa5780638232f3f1146106d857806385e0a200146106ed5780638635adb5146107025780638da5cb5b1461072f57806392297d7b1461074457806396eba03d146106d85780639f46133e14610759578063a00b38c41461076e578063a4081d621461079c578063a864dfa5146107bd578063a980892d146107e4578063aa3f6952146107f9578063af570c0414610811578063b8ff1dba14610826578063c4b1978d1461083b578063cb86806d14610850578063cf8a750314610865578063d15d62a71461087d578063d1aeb65114610536578063d30f8cd014610895578063ebe9314e146108aa578063f17bda91146108bf578063f2fde38b146108ec578063fb52222c1461090d578063fccc134f1461092e578063fe538c5a14610943575b005b3480156102b357600080fd5b506102bc61096a565b60408051600160a060020a039092168252519081900360200190f35b3480156102e457600080fd5b506102ed610979565b60408051918252519081900360200190f35b34801561030b57600080fd5b506102a5600160a060020a036004351661098a565b34801561032c57600080fd5b50610341600160a060020a03600435166109da565b6040805160ff9092168252519081900360200190f35b34801561036357600080fd5b506103416109f8565b34801561037857600080fd5b506102ed610a01565b34801561038d57600080fd5b50610341610a07565b3480156103a257600080fd5b506103bd600160a060020a036004351660ff60243516610a15565b604080519115158252519081900360200190f35b3480156103dd57600080fd5b50610341610a35565b3480156103f257600080fd5b50610341610a44565b34801561040757600080fd5b506102a5600160a060020a036004351660ff60243581169060443516610a49565b34801561043457600080fd5b506102bc600435610a5b565b34801561044c57600080fd5b50610455610a88565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561048c57600080fd5b50610341600160a060020a0360043516610ad3565b3480156104ad57600080fd5b506104b6610af1565b6040805160ff909316835260208301919091528051918290030190f35b3480156104df57600080fd5b506102a5600160a060020a036004351660ff60243581169060443516610b00565b34801561050c57600080fd5b506102a5610b0d565b34801561052157600080fd5b506103bd600160a060020a0360043516610b49565b34801561054257600080fd5b50610341610b5d565b34801561055757600080fd5b506102ed610b62565b34801561056c57600080fd5b506102ed610b68565b34801561058157600080fd5b506103bd600160a060020a036004351660ff60243516610b6e565b3480156105a857600080fd5b50610341610b82565b3480156105bd57600080fd5b506103bd600160a060020a036004351660ff60243516610b93565b3480156105e457600080fd5b50610341610bad565b3480156105f957600080fd5b50610341600160a060020a0360043516610bbd565b34801561061a57600080fd5b506104b6610bdb565b34801561062f57600080fd5b506102a5600160a060020a0360043516610bea565b34801561065057600080fd5b506102bc600435610c38565b34801561066857600080fd5b506103bd600160a060020a0360043516610c4a565b34801561068957600080fd5b506102a5600160a060020a036004351660ff60243581169060443516610c52565b3480156106b657600080fd5b506103bd60ff600435811690600160a060020a03602435169060443516610c5f565b3480156106e457600080fd5b50610341610e66565b3480156106f957600080fd5b506102ed610e6b565b34801561070e57600080fd5b506102a5600160a060020a036004351660ff60243581169060443516610e77565b34801561073b57600080fd5b506102bc610e84565b34801561075057600080fd5b506102ed610e93565b34801561076557600080fd5b506104b6610e9f565b34801561077a57600080fd5b506103bd60ff600435811690600160a060020a03602435169060443516610eae565b3480156107a857600080fd5b50610341600160a060020a0360043516610f68565b3480156107c957600080fd5b506103bd600160a060020a036004351660ff60243516610f86565b3480156107f057600080fd5b506104b6610fa2565b34801561080557600080fd5b506102bc600435610fb1565b34801561081d57600080fd5b506102bc610fc3565b34801561083257600080fd5b506102a5610fd2565b34801561084757600080fd5b506104b66110bc565b34801561085c57600080fd5b506102ed6110cb565b34801561087157600080fd5b506102bc6004356110d1565b34801561088957600080fd5b506102bc6004356110e3565b3480156108a157600080fd5b506102ed6110f5565b3480156108b657600080fd5b506102ed611101565b3480156108cb57600080fd5b506102a5600160a060020a036004351660ff60243581169060443516611107565b3480156108f857600080fd5b506102a5600160a060020a0360043516611114565b34801561091957600080fd5b50610341600160a060020a0360043516611179565b34801561093a57600080fd5b506102ed611197565b34801561094f57600080fd5b506103bd600160a060020a036004351660ff6024351661119d565b600154600160a060020a031681565b6000610985600b6111b8565b905090565b600254600160a060020a03163214806109ad5750600254600160a060020a031633145b15156109b857600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a031660009081526018602052604090205460ff1690565b60055460ff1681565b60125490565b600554610100900460ff1681565b600554600090610a2e90610100900460ff168484610c5f565b9392505050565b60055462010000900460ff1681565b600281565b610a566017848484611425565b505050565b601180546000919083908110610a6d57fe5b600091825260209091200154600160a060020a031692915050565b6000806000806000610a9a60076111b8565b610aa4600f6111b8565b610aae600b6111b8565b610ab860136111b8565b610ac260176111b8565b945094509450945094509091929394565b600160a060020a031660009081526010602052604090205460ff1690565b600f5460125460ff9091169082565b610a56600b848484611425565b600254600160a060020a0316321480610b305750600254600160a060020a031633145b1515610b3b57600080fd5b600254600160a060020a0316ff5b600254600160a060020a0390811691161490565b600181565b60045481565b60165490565b600554600090610a2e9060ff168484610c5f565b600554640100000000900460ff1681565b600554600090610a2e9062010000900460ff168484610c5f565b6005546301000000900460ff1681565b600160a060020a03166000908152600c602052604090205460ff1690565b601754601a5460ff9091169082565b600154600160a060020a03163214610c0157600080fd5b600160a060020a0381161515610c1657600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b601980546000919083908110610a6d57fe5b6000903b1190565b610a566007848484611425565b600080600080600080879450600260009054906101000a9004600160a060020a0316600160a060020a031685600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610cc857600080fd5b505af1158015610cdc573d6000803e3d6000fd5b505050506040513d6020811015610cf257600080fd5b5051600160a060020a03161415610d0c5760019550610e5a565b610d17898989610eae565b935060018415151415610d2d5760019550610e5a565b5060005b601254811015610e55576011805482908110610d4957fe5b600091825260209091200154600160a060020a031691508115801590610d8d5750600160a060020a038216600090815260106020526040902054600a60ff90911610155b15610e4d57604080517fa00b38c400000000000000000000000000000000000000000000000000000000815260ff808c166004830152600160a060020a038b81166024840152908a166044830152915193945084939184169163a00b38c4916064808201926020929091908290030181600087803b158015610e0e57600080fd5b505af1158015610e22573d6000803e3d6000fd5b505050506040513d6020811015610e3857600080fd5b5051151560011415610e4d5760019550610e5a565b600101610d31565b600095505b50505050509392505050565b600081565b600061098560136111b8565b610a566013848484611425565b600254600160a060020a031681565b600061098560076111b8565b60135460165460ff9091169082565b60055460009060ff85811691161415610ed457610ecd600b848461182e565b9050610a2e565b60055460ff858116610100909204161415610ef557610ecd600f848461182e565b60055460ff85811662010000909204161415610f1757610ecd6007848461182e565b60055460ff858116640100000000909204161415610f3b57610ecd6017848461182e565b60055460ff8581166301000000909204161415610f5e57610ecd6013848461182e565b5060009392505050565b600160a060020a031660009081526014602052604090205460ff1690565b600554600090610a2e90640100000000900460ff168484610c5f565b600b54600e5460ff9091169082565b601580546000919083908110610a6d57fe5b600354600160a060020a031681565b600080610fdd611a54565b336000818152600c602081815260408084208054600a60ff8083169182068116808b5260648306819003821683038190038216958b018690526006546101009004821660020282168b8801819052988a9052969095529590940190910191821660ff19909316831790559295509093501580159061105c575060ff8316155b1561106c5761106c600b85611882565b60408051308152600160a060020a038616602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a150505050565b600754600a5460ff9091169082565b600a5490565b600d80546000919083908110610a6d57fe5b600980546000919083908110610a6d57fe5b6000610985600f6111b8565b600e5490565b610a56600f848484611425565b600254600160a060020a03163214806111375750600254600160a060020a031633145b151561114257600080fd5b600160a060020a038116151561115757600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a031660009081526008602052604090205460ff1690565b601a5490565b600554600090610a2e906301000000900460ff168484610c5f565b600080805b836003015481101561141e576111f784600201828154811015156111dd57fe5b600091825260209091200154600160a060020a0316610c4a565b1515611381577fa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b26081856002018381548110151561123057fe5b600091825260209182902001546040805192830193909352600160a060020a03168183015260608082526004908201527f6465616400000000000000000000000000000000000000000000000000000000608082015290519081900360a00190a1600284018054829081106112a157fe5b60009182526020909120018054600160a060020a0319169055600384015460019290920191600019018114611370578360020160018560030154038154811015156112e857fe5b600091825260209091200154600285018054600160a060020a03909216918390811061131057fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555083600201600185600301540381548110151561135657fe5b60009182526020909120018054600160a060020a03191690555b600384018054600019019055611419565b7fa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b2608185600201838154811015156113b457fe5b600091825260209182902001546040805192830193909352600160a060020a03168183015260608082526005908201527f616c697665000000000000000000000000000000000000000000000000000000608082015290519081900360a00190a16001015b6111bd565b5092915050565b600080600080600080611436611a54565b600080600061144432610b49565b600354604080517f63e6ffdd0000000000000000000000000000000000000000000000000000000081523260048201529051929c5060009b50600160a060020a03909116995089916363e6ffdd9160248082019260209290919082900301818f87803b1580156114b357600080fd5b505af11580156114c7573d6000803e3d6000fd5b505050506040513d60208110156114dd57600080fd5b8101908080519060200190929190505050965086955085600160a060020a0316637fb52f1a8f60000160009054906101000a900460ff168f60026040518463ffffffff1660e060020a028152600401808460ff1660ff16815260200183600160a060020a0316600160a060020a031681526020018260ff1660ff1681526020019350505050602060405180830381600087803b15801561157c57600080fd5b505af1158015611590573d6000803e3d6000fd5b505050506040513d60208110156115a657600080fd5b810190808051906020019092919050505098508d60010160008e600160a060020a0316600160a060020a0316815260200190815260200160002060009054906101000a900460ff169450600a8560ff168115156115ff57fe5b0660ff90811680865260648783160681900382166020870181905287030381166040860152600093508b9250821615801561163e5750898061163e5750885b1561164857600192505b60ff8b16158015906116575750895b8015611679575060018460ff8e166003811061166f57fe5b602002015160ff16145b156116875760019250600291505b60ff8b16158015906116965750885b80156116b9575060028460ff8e16600381106116ae57fe5b602002015160ff1614155b156116c75760019250600191505b60ff8b16158015906116d65750895b80156116df5750885b156116ed5760019250600291505b8215156116f957600080fd5b600660ff8d166003811061170957fe5b602081049091015460ff601f9092166101000a9004811683029085908e166003811061173157fe5b60ff909216602092909202015283600260200201518460016020020151856000602002015101019050808e60010160008f600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508060ff166000141580156117af575060ff8516155b156117be576117be8e8e611882565b60ff811615156117d4576117d28e8e611919565b505b60408051308152600160a060020a038f16602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a15050505050505050505050505050565b600160a060020a038216600090815260018401602052604081205460ff9081169060069084166003811061185e57fe5b60208104919091015460ff601f9092166101000a9004811691161015949350505050565b6002820154600383015410156118db57808260020183600301548154811015156118a857fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555061190c565b60028201805460018101825560009182526020909120018054600160a060020a031916600160a060020a0383161790555b5060030180546001019055565b6000805b8360030154811015610f5e5782600160a060020a0316846002018281548110151561194457fe5b600091825260209091200154600160a060020a03161415611a4c576002840180548290811061196f57fe5b60009182526020909120018054600160a060020a03191690556003840154600019018114611a37578360020160018560030154038154811015156119af57fe5b600091825260209091200154600285018054600160a060020a0390921691839081106119d757fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550836002016001856003015403815481101515611a1d57fe5b60009182526020909120018054600160a060020a03191690555b6003840180546000190190556001915061141e565b60010161191d565b60606040519081016040528060039060208202803883395091929150505600a165627a7a72305820d30b65e428b063d28d7644d2f73c5689ded7f6b943cc85812fce98cba9fe17c20029",
}

// AccessIndexorABI is the input ABI used to generate the binding from.
// Deprecated: Use AccessIndexorMetaData.ABI instead.
var AccessIndexorABI = AccessIndexorMetaData.ABI

// Deprecated: Use AccessIndexorMetaData.Sigs instead.
// AccessIndexorFuncSigs maps the 4-byte function signature to its string representation.
var AccessIndexorFuncSigs = AccessIndexorMetaData.Sigs

// AccessIndexorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccessIndexorMetaData.Bin instead.
var AccessIndexorBin = AccessIndexorMetaData.Bin

// DeployAccessIndexor deploys a new Ethereum contract, binding an instance of AccessIndexor to it.
func DeployAccessIndexor(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AccessIndexor, error) {
	parsed, err := ParsedABI(K_AccessIndexor)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccessIndexorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AccessIndexor{AccessIndexorCaller: AccessIndexorCaller{contract: contract}, AccessIndexorTransactor: AccessIndexorTransactor{contract: contract}, AccessIndexorFilterer: AccessIndexorFilterer{contract: contract}}, nil
}

// AccessIndexor is an auto generated Go binding around an Ethereum contract.
type AccessIndexor struct {
	AccessIndexorCaller     // Read-only binding to the contract
	AccessIndexorTransactor // Write-only binding to the contract
	AccessIndexorFilterer   // Log filterer for contract events
}

// AccessIndexorCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessIndexorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessIndexorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessIndexorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessIndexorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessIndexorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewAccessIndexor creates a new instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexor(address common.Address, backend bind.ContractBackend) (*AccessIndexor, error) {
	contract, err := bindAccessIndexor(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AccessIndexor{AccessIndexorCaller: AccessIndexorCaller{contract: contract}, AccessIndexorTransactor: AccessIndexorTransactor{contract: contract}, AccessIndexorFilterer: AccessIndexorFilterer{contract: contract}}, nil
}

// NewAccessIndexorCaller creates a new read-only instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexorCaller(address common.Address, caller bind.ContractCaller) (*AccessIndexorCaller, error) {
	contract, err := bindAccessIndexor(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessIndexorCaller{contract: contract}, nil
}

// NewAccessIndexorTransactor creates a new write-only instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexorTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessIndexorTransactor, error) {
	contract, err := bindAccessIndexor(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessIndexorTransactor{contract: contract}, nil
}

// NewAccessIndexorFilterer creates a new log filterer instance of AccessIndexor, bound to a specific deployed contract.
func NewAccessIndexorFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessIndexorFilterer, error) {
	contract, err := bindAccessIndexor(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessIndexorFilterer{contract: contract}, nil
}

// bindAccessIndexor binds a generic wrapper to an already deployed contract.
func bindAccessIndexor(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_AccessIndexor)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) ACCESSCONFIRMED(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "ACCESS_CONFIRMED")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) ACCESSNONE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "ACCESS_NONE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) ACCESSTENTATIVE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "ACCESS_TENTATIVE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYCONTENTOBJECT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "CATEGORY_CONTENT_OBJECT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYCONTENTTYPE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "CATEGORY_CONTENT_TYPE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYCONTRACT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "CATEGORY_CONTRACT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYGROUP(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "CATEGORY_GROUP")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) CATEGORYLIBRARY(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "CATEGORY_LIBRARY")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) TYPEACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "TYPE_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) TYPEEDIT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "TYPE_EDIT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) TYPESEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "TYPE_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() view returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) AccessGroups(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "accessGroups")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) view returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckAccessGroupRights(opts *bind.CallOpts, group common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "checkAccessGroupRights", group, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) view returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckContentObjectRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "checkContentObjectRights", obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) view returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckContentTypeRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "checkContentTypeRights", obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) view returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckContractRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "checkContractRights", obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) view returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckDirectRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "checkDirectRights", index_type, obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) view returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckLibraryRights(opts *bind.CallOpts, lib common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "checkLibraryRights", lib, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) view returns(bool)
func (_AccessIndexor *AccessIndexorCaller) CheckRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "checkRights", index_type, obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() view returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) ContentObjects(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "contentObjects")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_AccessIndexor *AccessIndexorCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() view returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) ContentTypes(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "contentTypes")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) view returns(bool)
func (_AccessIndexor *AccessIndexorCaller) ContractExists(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "contractExists", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() view returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) Contracts(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "contracts")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_AccessIndexor *AccessIndexorCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) view returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetAccessGroup(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getAccessGroup", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetAccessGroupRights(opts *bind.CallOpts, group common.Address) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getAccessGroupRights", group)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() view returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetAccessGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getAccessGroupsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) view returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetContentObject(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getContentObject", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetContentObjectRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getContentObjectRights", obj)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() view returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetContentObjectsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getContentObjectsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) view returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetContentType(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getContentType", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetContentTypeRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getContentTypeRights", obj)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() view returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getContentTypesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) view returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetContract(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getContract", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetContractRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getContractRights", obj)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() view returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetContractsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getContractsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() view returns(uint256)
func (_AccessIndexor *AccessIndexorCaller) GetLibrariesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getLibrariesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) view returns(address)
func (_AccessIndexor *AccessIndexorCaller) GetLibrary(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getLibrary", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) view returns(uint8)
func (_AccessIndexor *AccessIndexorCaller) GetLibraryRights(opts *bind.CallOpts, lib common.Address) (uint8, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "getLibraryRights", lib)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) view returns(bool)
func (_AccessIndexor *AccessIndexorCaller) HasManagerAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "hasManagerAccess", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() view returns(uint8 category, uint256 length)
func (_AccessIndexor *AccessIndexorCaller) Libraries(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "libraries")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_AccessIndexor *AccessIndexorCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_AccessIndexor *AccessIndexorCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _AccessIndexor.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpAccessGroups(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpAccessGroups")
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpAll")
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpContentObjects(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpContentObjects")
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpContentTypes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpContentTypes")
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_AccessIndexor *AccessIndexorTransactor) CleanUpLibraries(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "cleanUpLibraries")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_AccessIndexor *AccessIndexorTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "kill")
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetAccessGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setAccessGroupRights", group, access_type, access)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_AccessIndexor *AccessIndexorTransactor) SetAccessRights(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setAccessRights")
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContentObjectRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContentObjectRights", obj, access_type, access)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContentSpace(opts *bind.TransactOpts, content_space common.Address) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContentSpace", content_space)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContentTypeRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContentTypeRights", obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetContractRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setContractRights", obj, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_AccessIndexor *AccessIndexorTransactor) SetLibraryRights(opts *bind.TransactOpts, lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "setLibraryRights", lib, access_type, access)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_AccessIndexor *AccessIndexorTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AccessIndexor *AccessIndexorTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _AccessIndexor.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_AccessIndexor *AccessIndexorTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _AccessIndexor.contract.RawTransact(opts, calldata)
}

// AccessIndexorRightsChangedIterator is returned from FilterRightsChanged and is used to iterate over the raw logs and unpacked data for RightsChanged events raised by the AccessIndexor contract.
type AccessIndexorRightsChangedIterator struct {
	Event *AccessIndexorRightsChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessIndexorRightsChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessIndexorRightsChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessIndexorRightsChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessIndexorRightsChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessIndexorRightsChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessIndexorRightsChanged represents a RightsChanged event raised by the AccessIndexor contract.
type AccessIndexorRightsChanged struct {
	Principal common.Address
	Entity    common.Address
	Aggregate uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRightsChanged is a free log retrieval operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_AccessIndexor *AccessIndexorFilterer) FilterRightsChanged(opts *bind.FilterOpts) (*AccessIndexorRightsChangedIterator, error) {

	logs, sub, err := _AccessIndexor.contract.FilterLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return &AccessIndexorRightsChangedIterator{contract: _AccessIndexor.contract, event: "RightsChanged", logs: logs, sub: sub}, nil
}

// WatchRightsChanged is a free log subscription operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_AccessIndexor *AccessIndexorFilterer) WatchRightsChanged(opts *bind.WatchOpts, sink chan<- *AccessIndexorRightsChanged) (event.Subscription, error) {

	logs, sub, err := _AccessIndexor.contract.WatchLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessIndexorRightsChanged)
				if err := _AccessIndexor.contract.UnpackLog(event, "RightsChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRightsChanged is a log parse operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_AccessIndexor *AccessIndexorFilterer) ParseRightsChanged(log types.Log) (*AccessIndexorRightsChanged, error) {
	event := new(AccessIndexorRightsChanged)
	if err := _AccessIndexor.contract.UnpackLog(event, "RightsChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccessIndexorDbgAddressIterator is returned from FilterDbgAddress and is used to iterate over the raw logs and unpacked data for DbgAddress events raised by the AccessIndexor contract.
type AccessIndexorDbgAddressIterator struct {
	Event *AccessIndexorDbgAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessIndexorDbgAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessIndexorDbgAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessIndexorDbgAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessIndexorDbgAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessIndexorDbgAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessIndexorDbgAddress represents a DbgAddress event raised by the AccessIndexor contract.
type AccessIndexorDbgAddress struct {
	Label string
	Index *big.Int
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDbgAddress is a free log retrieval operation binding the contract event 0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260.
//
// Solidity: event dbgAddress(string label, uint256 index, address a)
func (_AccessIndexor *AccessIndexorFilterer) FilterDbgAddress(opts *bind.FilterOpts) (*AccessIndexorDbgAddressIterator, error) {

	logs, sub, err := _AccessIndexor.contract.FilterLogs(opts, "dbgAddress")
	if err != nil {
		return nil, err
	}
	return &AccessIndexorDbgAddressIterator{contract: _AccessIndexor.contract, event: "dbgAddress", logs: logs, sub: sub}, nil
}

// WatchDbgAddress is a free log subscription operation binding the contract event 0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260.
//
// Solidity: event dbgAddress(string label, uint256 index, address a)
func (_AccessIndexor *AccessIndexorFilterer) WatchDbgAddress(opts *bind.WatchOpts, sink chan<- *AccessIndexorDbgAddress) (event.Subscription, error) {

	logs, sub, err := _AccessIndexor.contract.WatchLogs(opts, "dbgAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessIndexorDbgAddress)
				if err := _AccessIndexor.contract.UnpackLog(event, "dbgAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDbgAddress is a log parse operation binding the contract event 0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260.
//
// Solidity: event dbgAddress(string label, uint256 index, address a)
func (_AccessIndexor *AccessIndexorFilterer) ParseDbgAddress(log types.Log) (*AccessIndexorDbgAddress, error) {
	event := new(AccessIndexorDbgAddress)
	if err := _AccessIndexor.contract.UnpackLog(event, "dbgAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AccessibleMetaData contains all meta data concerning the Accessible contract.
var AccessibleMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accessRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AccessRequest\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"f1551887": "accessRequest()",
		"54fd4d50": "version()",
	},
	Bin: "0x60806040527f41636365737369626c6532303139303232323133353930304d4c00000000000060005534801561003457600080fd5b5060fa806100436000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166354fd4d508114604d578063f1551887146071575b600080fd5b348015605857600080fd5b50605f6097565b60408051918252519081900360200190f35b348015607c57600080fd5b506083609d565b604080519115158252519081900360200190f35b60005481565b6040516000907fed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88908290a1506001905600a165627a7a72305820bec58e816050bb0f256a76993bcb5f7ad9daac448844d592b5c932571b97dd930029",
}

// AccessibleABI is the input ABI used to generate the binding from.
// Deprecated: Use AccessibleMetaData.ABI instead.
var AccessibleABI = AccessibleMetaData.ABI

// Deprecated: Use AccessibleMetaData.Sigs instead.
// AccessibleFuncSigs maps the 4-byte function signature to its string representation.
var AccessibleFuncSigs = AccessibleMetaData.Sigs

// AccessibleBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AccessibleMetaData.Bin instead.
var AccessibleBin = AccessibleMetaData.Bin

// DeployAccessible deploys a new Ethereum contract, binding an instance of Accessible to it.
func DeployAccessible(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Accessible, error) {
	parsed, err := ParsedABI(K_Accessible)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AccessibleBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Accessible{AccessibleCaller: AccessibleCaller{contract: contract}, AccessibleTransactor: AccessibleTransactor{contract: contract}, AccessibleFilterer: AccessibleFilterer{contract: contract}}, nil
}

// Accessible is an auto generated Go binding around an Ethereum contract.
type Accessible struct {
	AccessibleCaller     // Read-only binding to the contract
	AccessibleTransactor // Write-only binding to the contract
	AccessibleFilterer   // Log filterer for contract events
}

// AccessibleCaller is an auto generated read-only Go binding around an Ethereum contract.
type AccessibleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessibleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AccessibleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AccessibleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AccessibleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewAccessible creates a new instance of Accessible, bound to a specific deployed contract.
func NewAccessible(address common.Address, backend bind.ContractBackend) (*Accessible, error) {
	contract, err := bindAccessible(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Accessible{AccessibleCaller: AccessibleCaller{contract: contract}, AccessibleTransactor: AccessibleTransactor{contract: contract}, AccessibleFilterer: AccessibleFilterer{contract: contract}}, nil
}

// NewAccessibleCaller creates a new read-only instance of Accessible, bound to a specific deployed contract.
func NewAccessibleCaller(address common.Address, caller bind.ContractCaller) (*AccessibleCaller, error) {
	contract, err := bindAccessible(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AccessibleCaller{contract: contract}, nil
}

// NewAccessibleTransactor creates a new write-only instance of Accessible, bound to a specific deployed contract.
func NewAccessibleTransactor(address common.Address, transactor bind.ContractTransactor) (*AccessibleTransactor, error) {
	contract, err := bindAccessible(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AccessibleTransactor{contract: contract}, nil
}

// NewAccessibleFilterer creates a new log filterer instance of Accessible, bound to a specific deployed contract.
func NewAccessibleFilterer(address common.Address, filterer bind.ContractFilterer) (*AccessibleFilterer, error) {
	contract, err := bindAccessible(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AccessibleFilterer{contract: contract}, nil
}

// bindAccessible binds a generic wrapper to an already deployed contract.
func bindAccessible(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Accessible)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_Accessible *AccessibleCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Accessible.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_Accessible *AccessibleTransactor) AccessRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Accessible.contract.Transact(opts, "accessRequest")
}

// AccessibleAccessRequestIterator is returned from FilterAccessRequest and is used to iterate over the raw logs and unpacked data for AccessRequest events raised by the Accessible contract.
type AccessibleAccessRequestIterator struct {
	Event *AccessibleAccessRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AccessibleAccessRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AccessibleAccessRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AccessibleAccessRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AccessibleAccessRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AccessibleAccessRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AccessibleAccessRequest represents a AccessRequest event raised by the Accessible contract.
type AccessibleAccessRequest struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAccessRequest is a free log retrieval operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_Accessible *AccessibleFilterer) FilterAccessRequest(opts *bind.FilterOpts) (*AccessibleAccessRequestIterator, error) {

	logs, sub, err := _Accessible.contract.FilterLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return &AccessibleAccessRequestIterator{contract: _Accessible.contract, event: "AccessRequest", logs: logs, sub: sub}, nil
}

// WatchAccessRequest is a free log subscription operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_Accessible *AccessibleFilterer) WatchAccessRequest(opts *bind.WatchOpts, sink chan<- *AccessibleAccessRequest) (event.Subscription, error) {

	logs, sub, err := _Accessible.contract.WatchLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AccessibleAccessRequest)
				if err := _Accessible.contract.UnpackLog(event, "AccessRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequest is a log parse operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_Accessible *AccessibleFilterer) ParseAccessRequest(log types.Log) (*AccessibleAccessRequest, error) {
	event := new(AccessibleAccessRequest)
	if err := _Accessible.contract.UnpackLog(event, "AccessRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupMetaData contains all meta data concerning the BaseAccessControlGroup contract.
var BaseAccessControlGroupMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentObjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"name\":\"setContentSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_OBJECT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"grantAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccessGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_GROUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"membersList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_LIBRARY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_CONFIRMED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managersList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContractRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getAccessGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessGroups\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentObjectRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasManagerAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_TENTATIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"membersNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managersNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contracts\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"grantManagerAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setLibraryRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_NONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentTypeRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpLibraries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkDirectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentObjects\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAccessRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraries\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLibrariesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"revokeManagerAccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentObject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAccessGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"},{\"name\":\"mgr\",\"type\":\"bool\"}],\"name\":\"hasAccessRight\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentObjectsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setAccessGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"}],\"name\":\"getLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"ManagerAccessGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"MemberRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"ManagerAccessRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operationCode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"UnauthorizedOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"principal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"aggregate\",\"type\":\"uint8\"}],\"name\":\"RightsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"dbgAddress\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"18689733": "ACCESS_CONFIRMED()",
		"8232f3f1": "ACCESS_NONE()",
		"479a0c51": "ACCESS_TENTATIVE()",
		"091600e6": "CATEGORY_CONTENT_OBJECT()",
		"68a0469a": "CATEGORY_CONTENT_TYPE()",
		"6373a411": "CATEGORY_CONTRACT()",
		"12915a30": "CATEGORY_GROUP()",
		"16aed232": "CATEGORY_LIBRARY()",
		"d1aeb651": "TYPE_ACCESS()",
		"5d97b6c2": "TYPE_EDIT()",
		"96eba03d": "TYPE_SEE()",
		"30e66949": "accessGroups()",
		"6e375427": "canCommit()",
		"14cfabb3": "canConfirm()",
		"81beeb64": "canEdit()",
		"15c0bac1": "checkAccessGroupRights(address,uint8)",
		"5faecb76": "checkContentObjectRights(address,uint8)",
		"fe538c5a": "checkContentTypeRights(address,uint8)",
		"a864dfa5": "checkContractRights(address,uint8)",
		"a00b38c4": "checkDirectRights(uint8,address,uint8)",
		"6813b6d1": "checkLibraryRights(address,uint8)",
		"7fb52f1a": "checkRights(uint8,address,uint8)",
		"d30f8cd0": "cleanUpAccessGroups()",
		"2fa5c842": "cleanUpAll()",
		"048bd529": "cleanUpContentObjects()",
		"85e0a200": "cleanUpContentTypes()",
		"92297d7b": "cleanUpLibraries()",
		"5f6a1301": "clearPending()",
		"9867db74": "commit(string)",
		"375a6e7c": "commitPending()",
		"446e8826": "confirmCommit()",
		"a980892d": "contentObjects()",
		"af570c04": "contentSpace()",
		"9f46133e": "contentTypes()",
		"7709bc78": "contractExists(address)",
		"6c0f79b6": "contracts()",
		"331b86c0": "countVersionHashes()",
		"02d05d3f": "creator()",
		"e1a70717": "deleteVersion(string)",
		"2d474cbd": "getAccessGroup(uint256)",
		"304f4a7b": "getAccessGroupRights(address)",
		"0dc10d3f": "getAccessGroupsLength()",
		"cf8a7503": "getContentObject(uint256)",
		"69881c0c": "getContentObjectRights(address)",
		"ebe9314e": "getContentObjectsLength()",
		"aa3f6952": "getContentType(uint256)",
		"a4081d62": "getContentTypeRights(address)",
		"5c1d3059": "getContentTypesLength()",
		"6ebc8c86": "getContract(uint256)",
		"08d865d7": "getContractRights(address)",
		"fccc134f": "getContractsLength()",
		"cb86806d": "getLibrariesLength()",
		"d15d62a7": "getLibrary(uint256)",
		"fb52222c": "getLibraryRights(address)",
		"0ae5e739": "grantAccess(address)",
		"75861a95": "grantManagerAccess(address)",
		"95a078e8": "hasAccess(address)",
		"d8961c8d": "hasAccessRight(address,bool)",
		"42e7ba7b": "hasManagerAccess(address)",
		"41c0e1b5": "kill()",
		"c4b1978d": "libraries()",
		"1fcd7794": "managersList(uint256)",
		"638d0290": "managersNum()",
		"13b8ad31": "membersList(uint256)",
		"55277a5b": "membersNum()",
		"e02dd9c2": "objectHash()",
		"8da5cb5b": "owner()",
		"00821de3": "parentAddress()",
		"628449fd": "pendingHash()",
		"85e68531": "revokeAccess(address)",
		"cdb849b7": "revokeManagerAccess(address)",
		"f17bda91": "setAccessGroupRights(address,uint8,uint8)",
		"b8ff1dba": "setAccessRights()",
		"3def5140": "setContentObjectRights(address,uint8,uint8)",
		"055af48f": "setContentSpace(address)",
		"8635adb5": "setContentTypeRights(address,uint8,uint8)",
		"224dcba0": "setContractRights(address,uint8,uint8)",
		"7cbb7bf2": "setLibraryRights(address,uint8,uint8)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"c287e0ed": "updateRequest()",
		"54fd4d50": "version()",
		"7ca8f618": "versionHashes(uint256)",
		"7886f747": "versionTimestamp(uint256)",
	},
	Bin: "0x7f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f416363657373496e6465786f7232303139313131333230323430304d4c00000060045560058054600160ff19909116811761ff0019166102001762ff00001916620300001763ff000000191663040000001764ff0000000019166405000000001790915560e06040526080908152600a60a052606460c052620000ac906006906003620001fd565b507f4564697461626c6532303139313231393133343630304d4c0000000000000000601b557f42734163636573734374726c47727032303139303732333136353930304d4c006022553480156200010257600080fd5b5060405160208062003dcc833981016040525160018054600160a060020a0319908116329081178084556002805484169092179091556005546007805460ff1990811660ff620100008504811691909117909255600f8054821661010085048416179055600b805482168385161790556013805482166301000000850484161790556017805490911664010000000090930490911691909117905560038054600160a060020a039586169084161790556000602481905560258054808601825591527f401968ff42a154441da5f6c4c935ac46b8671f0e062baaa62a7545ba53bb6e4c018054909216931692909217909155602655620002bb565b600183019183908215620002855791602002820160005b838211156200025457835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000214565b8015620002835782816101000a81549060ff021916905560010160208160000104928301926001030262000254565b505b506200029392915062000297565b5090565b620002b891905b808211156200029357805460ff191681556001016200029e565b90565b613b0180620002cb6000396000f3006080604052600436106103b75763ffffffff60e060020a600035041662821de381146103b957806302d05d3f146103ea578063048bd529146103ff578063055af48f1461042657806308d865d714610447578063091600e61461047e5780630ae5e739146104935780630dc10d3f146104b457806312915a30146104c957806313b8ad31146104de57806314cfabb3146104f657806315c0bac11461051f57806316aed23214610546578063186897331461055b5780631fcd779414610570578063224dcba0146105885780632d474cbd146105b55780632fa5c842146105cd578063304f4a7b1461060d57806330e669491461062e578063331b86c014610660578063375a6e7c146106755780633def51401461068a57806341c0e1b5146106b757806342e7ba7b146106cc578063446e8826146106ed578063479a0c51146106f557806354fd4d501461070a57806355277a5b1461071f5780635c1d3059146107345780635d97b6c21461055b5780635f6a1301146107495780635faecb761461075e578063628449fd146107855780636373a4111461080f578063638d0290146108245780636813b6d11461083957806368a0469a1461086057806369881c0c146108755780636c0f79b6146108965780636d2e4b1b146108ab5780636e375427146108cc5780636ebc8c86146108e157806375861a95146108f95780637709bc781461091a5780637886f7471461093b5780637ca8f618146109535780637cbb7bf21461096b5780637fb52f1a1461099857806381beeb64146109c65780638232f3f1146109db57806385e0a200146109f057806385e6853114610a055780638635adb514610a265780638da5cb5b14610a5357806392297d7b14610a6857806395a078e814610a7d57806396eba03d146109db5780639867db7414610a9e5780639f46133e14610af7578063a00b38c414610b0c578063a4081d6214610b3a578063a864dfa514610b5b578063a980892d14610b82578063aa3f695214610b97578063af570c0414610baf578063b8ff1dba14610bc4578063c287e0ed14610bd9578063c4b1978d14610bee578063cb86806d14610c03578063cdb849b714610c18578063cf8a750314610c39578063d15d62a714610c51578063d1aeb651146106f5578063d30f8cd014610c69578063d8961c8d14610c7e578063e02dd9c214610ca4578063e1a7071714610cb9578063ebe9314e14610d12578063f17bda9114610d27578063f2fde38b14610d54578063fb52222c14610d75578063fccc134f14610d96578063fe538c5a14610dab575b005b3480156103c557600080fd5b506103ce610dd2565b60408051600160a060020a039092168252519081900360200190f35b3480156103f657600080fd5b506103ce610de2565b34801561040b57600080fd5b50610414610df1565b60408051918252519081900360200190f35b34801561043257600080fd5b506103b7600160a060020a0360043516610e02565b34801561045357600080fd5b50610468600160a060020a0360043516610e52565b6040805160ff9092168252519081900360200190f35b34801561048a57600080fd5b50610468610e70565b34801561049f57600080fd5b506103b7600160a060020a0360043516610e79565b3480156104c057600080fd5b506104146111eb565b3480156104d557600080fd5b506104686111f1565b3480156104ea57600080fd5b506103ce6004356111ff565b34801561050257600080fd5b5061050b611227565b604080519115158252519081900360200190f35b34801561052b57600080fd5b5061050b600160a060020a036004351660ff602435166112c2565b34801561055257600080fd5b506104686112e2565b34801561056757600080fd5b506104686112f1565b34801561057c57600080fd5b506103ce6004356112f6565b34801561059457600080fd5b506103b7600160a060020a036004351660ff60243581169060443516611304565b3480156105c157600080fd5b506103ce600435611316565b3480156105d957600080fd5b506105e2611343565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561061957600080fd5b50610468600160a060020a036004351661138e565b34801561063a57600080fd5b506106436113ac565b6040805160ff909316835260208301919091528051918290030190f35b34801561066c57600080fd5b506104146113bb565b34801561068157600080fd5b5061050b6113c1565b34801561069657600080fd5b506103b7600160a060020a036004351660ff602435811690604435166113ca565b3480156106c357600080fd5b506103b76113d7565b3480156106d857600080fd5b5061050b600160a060020a0360043516611413565b61050b611426565b34801561070157600080fd5b50610468611616565b34801561071657600080fd5b5061041461161b565b34801561072b57600080fd5b50610414611621565b34801561074057600080fd5b50610414611627565b34801561075557600080fd5b506103b761162d565b34801561076a57600080fd5b5061050b600160a060020a036004351660ff6024351661166b565b34801561079157600080fd5b5061079a61167f565b6040805160208082528351818301528351919283929083019185019080838360005b838110156107d45781810151838201526020016107bc565b50505050905090810190601f1680156108015780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561081b57600080fd5b5061046861170d565b34801561083057600080fd5b5061041461171e565b34801561084557600080fd5b5061050b600160a060020a036004351660ff60243516611724565b34801561086c57600080fd5b5061046861173e565b34801561088157600080fd5b50610468600160a060020a036004351661174e565b3480156108a257600080fd5b5061064361176c565b3480156108b757600080fd5b506103b7600160a060020a036004351661177b565b3480156108d857600080fd5b5061050b6117c9565b3480156108ed57600080fd5b506103ce6004356117da565b34801561090557600080fd5b506103b7600160a060020a03600435166117ec565b34801561092657600080fd5b5061050b600160a060020a0360043516611a51565b34801561094757600080fd5b50610414600435611a59565b34801561095f57600080fd5b5061079a600435611a78565b34801561097757600080fd5b506103b7600160a060020a036004351660ff60243581169060443516611aec565b3480156109a457600080fd5b5061050b60ff600435811690600160a060020a03602435169060443516611af9565b3480156109d257600080fd5b5061050b611d00565b3480156109e757600080fd5b50610468611d11565b3480156109fc57600080fd5b50610414611d16565b348015610a1157600080fd5b506103b7600160a060020a0360043516611d22565b348015610a3257600080fd5b506103b7600160a060020a036004351660ff602435811690604435166120c5565b348015610a5f57600080fd5b506103ce6120d2565b348015610a7457600080fd5b506104146120e1565b348015610a8957600080fd5b5061050b600160a060020a03600435166120ed565b348015610aaa57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103b79436949293602493928401919081908401838280828437509497506120fa9650505050505050565b348015610b0357600080fd5b50610643612229565b348015610b1857600080fd5b5061050b60ff600435811690600160a060020a03602435169060443516612238565b348015610b4657600080fd5b50610468600160a060020a03600435166122f2565b348015610b6757600080fd5b5061050b600160a060020a036004351660ff60243516612310565b348015610b8e57600080fd5b5061064361232c565b348015610ba357600080fd5b506103ce60043561233b565b348015610bbb57600080fd5b506103ce61234d565b348015610bd057600080fd5b506103b761235c565b348015610be557600080fd5b506103b7612446565b348015610bfa57600080fd5b50610643612516565b348015610c0f57600080fd5b50610414612525565b348015610c2457600080fd5b506103b7600160a060020a036004351661252b565b348015610c4557600080fd5b506103ce6004356127aa565b348015610c5d57600080fd5b506103ce6004356127bc565b348015610c7557600080fd5b506104146127ce565b348015610c8a57600080fd5b5061050b600160a060020a036004351660243515156127da565b348015610cb057600080fd5b5061079a6129bf565b348015610cc557600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610414943694929360249392840191908190840183828082843750949750612a1a9650505050505050565b348015610d1e57600080fd5b50610414612fc2565b348015610d3357600080fd5b506103b7600160a060020a036004351660ff60243581169060443516612fc8565b348015610d6057600080fd5b506103b7600160a060020a0360043516612fd5565b348015610d8157600080fd5b50610468600160a060020a036004351661303a565b348015610da257600080fd5b50610414613058565b348015610db757600080fd5b5061050b600160a060020a036004351660ff6024351661305e565b600354600160a060020a03165b90565b600154600160a060020a031681565b6000610dfd600b613079565b905090565b600254600160a060020a0316321480610e255750600254600160a060020a031633145b1515610e3057600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a031660009081526018602052604090205460ff1690565b60055460ff1681565b600080600080610e8833611413565b1515600114610e9657600080fd5b60009350600092505b602454831015610ef15784600160a060020a0316602384815481101515610ec257fe5b600091825260209091200154600160a060020a03161415610ee65760019350610ef1565b600190920191610e9f565b831515610f9f576024546023541415610f5457602380546001810182556000919091527fd57b2b5166478fd4318d2acc6cc2c704584312bdd8781b32d5d06abda57f4230018054600160a060020a031916600160a060020a038716179055610f95565b846023602454815481101515610f6657fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b6024805460010190555b60408051600160a060020a038716815290517fb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd9149181900360200190a16003546040805160e060020a6363e6ffdd028152600160a060020a038881166004830152915191909216916363e6ffdd9160248083019260209291908290030181600087803b15801561102d57600080fd5b505af1158015611041573d6000803e3d6000fd5b505050506040513d602081101561105757600080fd5b5051604080517fd1aeb6510000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a0383169163f17bda91913091849163d1aeb6519160048083019260209291908290030181600087803b1580156110c457600080fd5b505af11580156110d8573d6000803e3d6000fd5b505050506040513d60208110156110ee57600080fd5b5051604080517f479a0c510000000000000000000000000000000000000000000000000000000081529051600160a060020a0387169163479a0c519160048083019260209291908290030181600087803b15801561114b57600080fd5b505af115801561115f573d6000803e3d6000fd5b505050506040513d602081101561117557600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03909416600485015260ff92831660248501529116604483015251606480830192600092919082900301818387803b1580156111cc57600080fd5b505af11580156111e0573d6000803e3d6000fd5b505050505050505050565b60125490565b600554610100900460ff1681565b602380548290811061120d57fe5b600091825260209091200154600160a060020a0316905081565b600354604080517f26683e140000000000000000000000000000000000000000000000000000000081523360048201529051600092600160a060020a03169182916326683e149160248082019260209290919082900301818887803b15801561128f57600080fd5b505af11580156112a3573d6000803e3d6000fd5b505050506040513d60208110156112b957600080fd5b505191505b5090565b6005546000906112db90610100900460ff168484611af9565b9392505050565b60055462010000900460ff1681565b600281565b602580548290811061120d57fe5b61131160178484846132e6565b505050565b60118054600091908390811061132857fe5b600091825260209091200154600160a060020a031692915050565b60008060008060006113556007613079565b61135f600f613079565b611369600b613079565b6113736013613079565b61137d6017613079565b945094509450945094509091929394565b600160a060020a031660009081526010602052604090205460ff1690565b600f5460125460ff9091169082565b601e5490565b60215460ff1681565b611311600b8484846132e6565b600254600160a060020a03163214806113fa5750600254600160a060020a031633145b151561140557600080fd5b600254600160a060020a0316ff5b60006114208260016127da565b92915050565b6000611430611227565b151561143b57600080fd5b60215460ff16151561144c57600080fd5b6000601c80546001816001161561010002031660029004905011156114fb57601e80546001818101808455600093909352601c80546114c2937f50bb669a95c7b50b7e8a6f09454034b2b14cf2b85c730dca9a539ca82cb6e35001926002610100918316159190910260001901909116046138ff565b5050601d54601f80546001810182556000919091527fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d80701555b6020805461151e91601c91600260001961010060018416150201909116046138ff565b5042601d5560408051602081810192839052600091829052611541929091613980565b506021805460ff1916905560035460408051600160a060020a0390921680835260208301828152601c8054600260001960018316156101000201909116049385018490527f482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e949293909291906060830190849080156116015780601f106115d657610100808354040283529160200191611601565b820191906000526020600020905b8154815290600101906020018083116115e457829003601f168201915b5050935050505060405180910390a150600190565b600181565b60225481565b60245481565b60165490565b6116356117c9565b151561164057600080fd5b6040805160208181019283905260009182905261165e929091613980565b506021805460ff19169055565b6005546000906112db9060ff168484611af9565b6020805460408051601f600260001961010060018716150201909416939093049283018490048402810184019091528181529190828201828280156117055780601f106116da57610100808354040283529160200191611705565b820191906000526020600020905b8154815290600101906020018083116116e857829003601f168201915b505050505081565b600554640100000000900460ff1681565b60265481565b6005546000906112db9062010000900460ff168484611af9565b6005546301000000900460ff1681565b600160a060020a03166000908152600c602052604090205460ff1690565b601754601a5460ff9091169082565b600154600160a060020a0316321461179257600080fd5b600160a060020a03811615156117a757600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b600254600160a060020a0316321490565b60198054600091908390811061132857fe5b600254600090819081908190600160a060020a03163214806118185750600254600160a060020a031633145b151561182357600080fd5b60009350600092505b60265483101561187e5784600160a060020a031660258481548110151561184f57fe5b600091825260209091200154600160a060020a03161415611873576001935061187e565b60019092019161182c565b83151561192c5760265460255414156118e157602580546001810182556000919091527f401968ff42a154441da5f6c4c935ac46b8671f0e062baaa62a7545ba53bb6e4c018054600160a060020a031916600160a060020a038716179055611922565b8460256026548154811015156118f357fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b6026805460010190555b60408051600160a060020a038716815290517f93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d611179181900360200190a16003546040805160e060020a6363e6ffdd028152600160a060020a038881166004830152915191909216916363e6ffdd9160248083019260209291908290030181600087803b1580156119ba57600080fd5b505af11580156119ce573d6000803e3d6000fd5b505050506040513d60208110156119e457600080fd5b5051604080517f5d97b6c20000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a0383169163f17bda919130918491635d97b6c29160048083019260209291908290030181600087803b1580156110c457600080fd5b6000903b1190565b601f805482908110611a6757fe5b600091825260209091200154905081565b601e805482908110611a8657fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152935090918301828280156117055780601f106116da57610100808354040283529160200191611705565b61131160078484846132e6565b600080600080600080879450600260009054906101000a9004600160a060020a0316600160a060020a031685600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611b6257600080fd5b505af1158015611b76573d6000803e3d6000fd5b505050506040513d6020811015611b8c57600080fd5b5051600160a060020a03161415611ba65760019550611cf4565b611bb1898989612238565b935060018415151415611bc75760019550611cf4565b5060005b601254811015611cef576011805482908110611be357fe5b600091825260209091200154600160a060020a031691508115801590611c275750600160a060020a038216600090815260106020526040902054600a60ff90911610155b15611ce757604080517fa00b38c400000000000000000000000000000000000000000000000000000000815260ff808c166004830152600160a060020a038b81166024840152908a166044830152915193945084939184169163a00b38c4916064808201926020929091908290030181600087803b158015611ca857600080fd5b505af1158015611cbc573d6000803e3d6000fd5b505050506040513d6020811015611cd257600080fd5b5051151560011415611ce75760019550611cf4565b600101611bcb565b600095505b50505050509392505050565b600254600160a060020a0316331490565b600081565b6000610dfd6013613079565b6000806000611d3033611413565b151560011480611d48575033600160a060020a038516145b1515611d5357600080fd5b600092505b602454831015611e7a5783600160a060020a0316602384815481101515611d7b57fe5b600091825260209091200154600160a060020a03161415611e6f576023805484908110611da457fe5b60009182526020909120018054600160a060020a0319169055602454600019018314611e60576023600160245403815481101515611dde57fe5b60009182526020909120015460238054600160a060020a039092169185908110611e0457fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055506023600160245403815481101515611e4657fe5b60009182526020909120018054600160a060020a03191690555b60248054600019019055611e7a565b600190920191611d58565b60408051600160a060020a038616815290517f745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c9181900360200190a16003546040805160e060020a6363e6ffdd028152600160a060020a038781166004830152915191909216916363e6ffdd9160248083019260209291908290030181600087803b158015611f0857600080fd5b505af1158015611f1c573d6000803e3d6000fd5b505050506040513d6020811015611f3257600080fd5b5051604080517fd1aeb6510000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a0383169163f17bda91913091849163d1aeb6519160048083019260209291908290030181600087803b158015611f9f57600080fd5b505af1158015611fb3573d6000803e3d6000fd5b505050506040513d6020811015611fc957600080fd5b5051604080517f8232f3f10000000000000000000000000000000000000000000000000000000081529051600160a060020a03871691638232f3f19160048083019260209291908290030181600087803b15801561202657600080fd5b505af115801561203a573d6000803e3d6000fd5b505050506040513d602081101561205057600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03909416600485015260ff92831660248501529116604483015251606480830192600092919082900301818387803b1580156120a757600080fd5b505af11580156120bb573d6000803e3d6000fd5b5050505050505050565b61131160138484846132e6565b600254600160a060020a031681565b6000610dfd6007613079565b60006114208260006127da565b6121026117c9565b151561210d57600080fd5b60215460ff161561211d57600080fd5b805160801161212b57600080fd5b805161213d9060209081840190613980565b506021805460ff191660011790556003547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316612181610dd2565b60408051600160a060020a0380851682528316602082810191909152606092820183815281546002600019610100600184161502019091160493830184905290926080830190849080156122165780601f106121eb57610100808354040283529160200191612216565b820191906000526020600020905b8154815290600101906020018083116121f957829003601f168201915b505094505050505060405180910390a150565b60135460165460ff9091169082565b60055460009060ff8581169116141561225e57612257600b84846136d9565b90506112db565b60055460ff85811661010090920416141561227f57612257600f84846136d9565b60055460ff858116620100009092041614156122a157612257600784846136d9565b60055460ff8581166401000000009092041614156122c557612257601784846136d9565b60055460ff85811663010000009092041614156122e857612257601384846136d9565b5060009392505050565b600160a060020a031660009081526014602052604090205460ff1690565b6005546000906112db90640100000000900460ff168484611af9565b600b54600e5460ff9091169082565b60158054600091908390811061132857fe5b600354600160a060020a031681565b6000806123676139ee565b336000818152600c602081815260408084208054600a60ff8083169182068116808b5260648306819003821683038190038216958b018690526006546101009004821660020282168b8801819052988a9052969095529590940190910191821660ff1990931683179055929550909350158015906123e6575060ff8316155b156123f6576123f6600b8561372d565b60408051308152600160a060020a038616602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a150505050565b61244e611d00565b8061245c575061245c611227565b151561246757600080fd5b604080516020808252601c8054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156125065780601f106124db57610100808354040283529160200191612506565b820191906000526020600020905b8154815290600101906020018083116124e957829003601f168201915b50509250505060405180910390a1565b600754600a5460ff9091169082565b600a5490565b60025460009081908190600160a060020a0316331480612553575033600160a060020a038516145b151561255e57600080fd5b600092505b6026548310156126855783600160a060020a031660258481548110151561258657fe5b600091825260209091200154600160a060020a0316141561267a5760258054849081106125af57fe5b60009182526020909120018054600160a060020a031916905560265460001901831461266b5760256001602654038154811015156125e957fe5b60009182526020909120015460258054600160a060020a03909216918590811061260f57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550602560016026540381548110151561265157fe5b60009182526020909120018054600160a060020a03191690555b60268054600019019055612685565b600190920191612563565b60408051600160a060020a038616815290517f2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b959181900360200190a16003546040805160e060020a6363e6ffdd028152600160a060020a038781166004830152915191909216916363e6ffdd9160248083019260209291908290030181600087803b15801561271357600080fd5b505af1158015612727573d6000803e3d6000fd5b505050506040513d602081101561273d57600080fd5b5051604080517f5d97b6c20000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a0383169163f17bda919130918491635d97b6c29160048083019260209291908290030181600087803b158015611f9f57600080fd5b600d8054600091908390811061132857fe5b60098054600091908390811061132857fe5b6000610dfd600f613079565b6003546040805160e060020a6363e6ffdd028152600160a060020a0385811660048301529151600093849384939116916363e6ffdd9160248082019260209290919082900301818787803b15801561283157600080fd5b505af1158015612845573d6000803e3d6000fd5b505050506040513d602081101561285b57600080fd5b50519150819050600184151514156129695780600160a060020a03166315c0bac13083600160a060020a0316635d97b6c26040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156128bb57600080fd5b505af11580156128cf573d6000803e3d6000fd5b505050506040513d60208110156128e557600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260ff90911660248301525160448083019260209291908290030181600087803b15801561293657600080fd5b505af115801561294a573d6000803e3d6000fd5b505050506040513d602081101561296057600080fd5b505192506129b7565b80600160a060020a03166315c0bac13083600160a060020a031663d1aeb6516040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156128bb57600080fd5b505092915050565b601c805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156117055780601f106116da57610100808354040283529160200191611705565b600080600080600080612a2b6117c9565b1515612a3657600080fd5b866040516020018082805190602001908083835b60208310612a695780518252601f199092019160209182019101612a4a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310612acc5780518252601f199092019160209182019101612aad565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209450601c6040516020018082805460018160011615610100020316600290048015612b5b5780601f10612b39576101008083540402835291820191612b5b565b820191906000526020600020905b815481529060010190602001808311612b47575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310612b9e5780518252601f199092019160209182019101612b7f565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120965050505084841415612cbf57604080516020810191829052600090819052612bf291601c91613980565b506000601d81905560035460408051600160a060020a03909216808352908201839052606060208084018281528c51928501929092528b517f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f519593948d9493909290916080840191860190808383885b83811015612c7a578181015183820152602001612c62565b50505050905090810190601f168015612ca75780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160009550612fb8565b6000199250600091505b601e54821015612ed557601e805483908110612ce157fe5b906000526020600020016040516020018082805460018160011615610100020316600290048015612d495780601f10612d27576101008083540402835291820191612d49565b820191906000526020600020905b815481529060010190602001808311612d35575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310612d8c5780518252601f199092019160209182019101612d6d565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120935050505084811415612eca57601e805483908110612dd057fe5b906000526020600020016000612de69190613a0d565b601f805483908110612df457fe5b6000918252602082200155601e54600019018214612e9a57601e80546000198101908110612e1e57fe5b90600052602060002001601e83815481101515612e3757fe5b906000526020600020019080546001816001161561010002031660029004612e609291906138ff565b50601f80546000198101908110612e7357fe5b9060005260206000200154601f83815481101515612e8d57fe5b6000918252602090912001555b601e805490612ead906000198301613a54565b50601f805490612ec1906000198301613a78565b50819250612ed5565b600190910190612cc9565b600019831415612ee457600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600360009054906101000a9004600160a060020a031688856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015612f78578181015183820152602001612f60565b50505050905090810190601f168015612fa55780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18295505b5050505050919050565b600e5490565b611311600f8484846132e6565b600254600160a060020a0316321480612ff85750600254600160a060020a031633145b151561300357600080fd5b600160a060020a038116151561301857600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a031660009081526008602052604090205460ff1690565b601a5490565b6005546000906112db906301000000900460ff168484611af9565b600080805b83600301548110156132df576130b8846002018281548110151561309e57fe5b600091825260209091200154600160a060020a0316611a51565b1515613242577fa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b2608185600201838154811015156130f157fe5b600091825260209182902001546040805192830193909352600160a060020a03168183015260608082526004908201527f6465616400000000000000000000000000000000000000000000000000000000608082015290519081900360a00190a16002840180548290811061316257fe5b60009182526020909120018054600160a060020a0319169055600384015460019290920191600019018114613231578360020160018560030154038154811015156131a957fe5b600091825260209091200154600285018054600160a060020a0390921691839081106131d157fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555083600201600185600301540381548110151561321757fe5b60009182526020909120018054600160a060020a03191690555b6003840180546000190190556132da565b7fa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b26081856002018381548110151561327557fe5b600091825260209182902001546040805192830193909352600160a060020a03168183015260608082526005908201527f616c697665000000000000000000000000000000000000000000000000000000608082015290519081900360a00190a16001015b61307e565b5092915050565b6000806000806000806132f76139ee565b600080600061330532611413565b6003546040805160e060020a6363e6ffdd0281523260048201529051929c5060009b50600160a060020a03909116995089916363e6ffdd9160248082019260209290919082900301818f87803b15801561335e57600080fd5b505af1158015613372573d6000803e3d6000fd5b505050506040513d602081101561338857600080fd5b8101908080519060200190929190505050965086955085600160a060020a0316637fb52f1a8f60000160009054906101000a900460ff168f60026040518463ffffffff1660e060020a028152600401808460ff1660ff16815260200183600160a060020a0316600160a060020a031681526020018260ff1660ff1681526020019350505050602060405180830381600087803b15801561342757600080fd5b505af115801561343b573d6000803e3d6000fd5b505050506040513d602081101561345157600080fd5b810190808051906020019092919050505098508d60010160008e600160a060020a0316600160a060020a0316815260200190815260200160002060009054906101000a900460ff169450600a8560ff168115156134aa57fe5b0660ff90811680865260648783160681900382166020870181905287030381166040860152600093508b925082161580156134e9575089806134e95750885b156134f357600192505b60ff8b16158015906135025750895b8015613524575060018460ff8e166003811061351a57fe5b602002015160ff16145b156135325760019250600291505b60ff8b16158015906135415750885b8015613564575060028460ff8e166003811061355957fe5b602002015160ff1614155b156135725760019250600191505b60ff8b16158015906135815750895b801561358a5750885b156135985760019250600291505b8215156135a457600080fd5b600660ff8d16600381106135b457fe5b602081049091015460ff601f9092166101000a9004811683029085908e16600381106135dc57fe5b60ff909216602092909202015283600260200201518460016020020151856000602002015101019050808e60010160008f600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508060ff1660001415801561365a575060ff8516155b15613669576136698e8e61372d565b60ff8116151561367f5761367d8e8e6137c4565b505b60408051308152600160a060020a038f16602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a15050505050505050505050505050565b600160a060020a038216600090815260018401602052604081205460ff9081169060069084166003811061370957fe5b60208104919091015460ff601f9092166101000a9004811691161015949350505050565b600282015460038301541015613786578082600201836003015481548110151561375357fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055506137b7565b60028201805460018101825560009182526020909120018054600160a060020a031916600160a060020a0383161790555b5060030180546001019055565b6000805b83600301548110156122e85782600160a060020a031684600201828154811015156137ef57fe5b600091825260209091200154600160a060020a031614156138f7576002840180548290811061381a57fe5b60009182526020909120018054600160a060020a031916905560038401546000190181146138e25783600201600185600301540381548110151561385a57fe5b600091825260209091200154600285018054600160a060020a03909216918390811061388257fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055508360020160018560030154038154811015156138c857fe5b60009182526020909120018054600160a060020a03191690555b600384018054600019019055600191506132df565b6001016137c8565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106139385780548555613974565b8280016001018555821561397457600052602060002091601f016020900482015b82811115613974578254825591600101919060010190613959565b506112be929150613a98565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106139c157805160ff1916838001178555613974565b82800160010185558215613974579182015b828111156139745782518255916020019190600101906139d3565b6060604051908101604052806003906020820280388339509192915050565b50805460018160011615610100020316600290046000825580601f10613a335750613a51565b601f016020900490600052602060002090810190613a519190613a98565b50565b81548183558181111561131157600083815260209020611311918101908301613ab2565b815481835581811115611311576000838152602090206113119181019083015b610ddf91905b808211156112be5760008155600101613a9e565b610ddf91905b808211156112be576000613acc8282613a0d565b50600101613ab85600a165627a7a7230582006134fc74acd62b9ab5178c9fed19e8dc630e497dd2c6b825e7e6b10bd0f5e130029",
}

// BaseAccessControlGroupABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseAccessControlGroupMetaData.ABI instead.
var BaseAccessControlGroupABI = BaseAccessControlGroupMetaData.ABI

// Deprecated: Use BaseAccessControlGroupMetaData.Sigs instead.
// BaseAccessControlGroupFuncSigs maps the 4-byte function signature to its string representation.
var BaseAccessControlGroupFuncSigs = BaseAccessControlGroupMetaData.Sigs

// BaseAccessControlGroupBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseAccessControlGroupMetaData.Bin instead.
var BaseAccessControlGroupBin = BaseAccessControlGroupMetaData.Bin

// DeployBaseAccessControlGroup deploys a new Ethereum contract, binding an instance of BaseAccessControlGroup to it.
func DeployBaseAccessControlGroup(auth *bind.TransactOpts, backend bind.ContractBackend, content_space common.Address) (common.Address, *types.Transaction, *BaseAccessControlGroup, error) {
	parsed, err := ParsedABI(K_BaseAccessControlGroup)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseAccessControlGroupBin), backend, content_space)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseAccessControlGroup{BaseAccessControlGroupCaller: BaseAccessControlGroupCaller{contract: contract}, BaseAccessControlGroupTransactor: BaseAccessControlGroupTransactor{contract: contract}, BaseAccessControlGroupFilterer: BaseAccessControlGroupFilterer{contract: contract}}, nil
}

// BaseAccessControlGroup is an auto generated Go binding around an Ethereum contract.
type BaseAccessControlGroup struct {
	BaseAccessControlGroupCaller     // Read-only binding to the contract
	BaseAccessControlGroupTransactor // Write-only binding to the contract
	BaseAccessControlGroupFilterer   // Log filterer for contract events
}

// BaseAccessControlGroupCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseAccessControlGroupCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessControlGroupTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseAccessControlGroupTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessControlGroupFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseAccessControlGroupFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseAccessControlGroup creates a new instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroup(address common.Address, backend bind.ContractBackend) (*BaseAccessControlGroup, error) {
	contract, err := bindBaseAccessControlGroup(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroup{BaseAccessControlGroupCaller: BaseAccessControlGroupCaller{contract: contract}, BaseAccessControlGroupTransactor: BaseAccessControlGroupTransactor{contract: contract}, BaseAccessControlGroupFilterer: BaseAccessControlGroupFilterer{contract: contract}}, nil
}

// NewBaseAccessControlGroupCaller creates a new read-only instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroupCaller(address common.Address, caller bind.ContractCaller) (*BaseAccessControlGroupCaller, error) {
	contract, err := bindBaseAccessControlGroup(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupCaller{contract: contract}, nil
}

// NewBaseAccessControlGroupTransactor creates a new write-only instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroupTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseAccessControlGroupTransactor, error) {
	contract, err := bindBaseAccessControlGroup(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupTransactor{contract: contract}, nil
}

// NewBaseAccessControlGroupFilterer creates a new log filterer instance of BaseAccessControlGroup, bound to a specific deployed contract.
func NewBaseAccessControlGroupFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseAccessControlGroupFilterer, error) {
	contract, err := bindBaseAccessControlGroup(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupFilterer{contract: contract}, nil
}

// bindBaseAccessControlGroup binds a generic wrapper to an already deployed contract.
func bindBaseAccessControlGroup(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseAccessControlGroup)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ACCESSCONFIRMED(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "ACCESS_CONFIRMED")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ACCESSNONE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "ACCESS_NONE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ACCESSTENTATIVE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "ACCESS_TENTATIVE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYCONTENTOBJECT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "CATEGORY_CONTENT_OBJECT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYCONTENTTYPE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "CATEGORY_CONTENT_TYPE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYCONTRACT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "CATEGORY_CONTRACT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYGROUP(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "CATEGORY_GROUP")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CATEGORYLIBRARY(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "CATEGORY_LIBRARY")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) TYPEACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "TYPE_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) TYPEEDIT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "TYPE_EDIT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) TYPESEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "TYPE_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() view returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) AccessGroups(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "accessGroups")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "canCommit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "canConfirm")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "canEdit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckAccessGroupRights(opts *bind.CallOpts, group common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "checkAccessGroupRights", group, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckContentObjectRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "checkContentObjectRights", obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckContentTypeRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "checkContentTypeRights", obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckContractRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "checkContractRights", obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckDirectRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "checkDirectRights", index_type, obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckLibraryRights(opts *bind.CallOpts, lib common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "checkLibraryRights", lib, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CheckRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "checkRights", index_type, obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "commitPending")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() view returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContentObjects(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "contentObjects")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypes is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() view returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContentTypes(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "contentTypes")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ContractExists(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "contractExists", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() view returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Contracts(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "contracts")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() view returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "countVersionHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetAccessGroup(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getAccessGroup", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetAccessGroupRights(opts *bind.CallOpts, group common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getAccessGroupRights", group)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() view returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetAccessGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getAccessGroupsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentObject(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getContentObject", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentObjectRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getContentObjectRights", obj)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() view returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentObjectsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getContentObjectsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentType(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getContentType", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentTypeRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getContentTypeRights", obj)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() view returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getContentTypesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContract(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getContract", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContractRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getContractRights", obj)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() view returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetContractsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getContractsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() view returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetLibrariesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getLibrariesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetLibrary(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getLibrary", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) view returns(uint8)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) GetLibraryRights(opts *bind.CallOpts, lib common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "getLibraryRights", lib)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address candidate) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) HasAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "hasAccess", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasAccessRight is a free data retrieval call binding the contract method 0xd8961c8d.
//
// Solidity: function hasAccessRight(address candidate, bool mgr) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) HasAccessRight(opts *bind.CallOpts, candidate common.Address, mgr bool) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "hasAccessRight", candidate, mgr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) view returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) HasManagerAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "hasManagerAccess", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() view returns(uint8 category, uint256 length)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Libraries(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "libraries")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ManagersList is a free data retrieval call binding the contract method 0x1fcd7794.
//
// Solidity: function managersList(uint256 ) view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ManagersList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "managersList", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ManagersNum is a free data retrieval call binding the contract method 0x638d0290.
//
// Solidity: function managersNum() view returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ManagersNum(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "managersNum")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MembersList is a free data retrieval call binding the contract method 0x13b8ad31.
//
// Solidity: function membersList(uint256 ) view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) MembersList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "membersList", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MembersNum is a free data retrieval call binding the contract method 0x55277a5b.
//
// Solidity: function membersNum() view returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) MembersNum(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "membersNum")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() view returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "objectHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "parentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() view returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "pendingHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) view returns(string)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "versionHashes", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) view returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessControlGroup.contract.Call(opts, &out, "versionTimestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpAccessGroups(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpAccessGroups")
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpAll")
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpContentObjects(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpContentObjects")
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpContentTypes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpContentTypes")
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) CleanUpLibraries(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "cleanUpLibraries")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "clearPending")
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "commit", _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() payable returns(bool)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "confirmCommit")
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "deleteVersion", _versionHash)
}

// GrantAccess is a paid mutator transaction binding the contract method 0x0ae5e739.
//
// Solidity: function grantAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) GrantAccess(opts *bind.TransactOpts, candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "grantAccess", candidate)
}

// GrantManagerAccess is a paid mutator transaction binding the contract method 0x75861a95.
//
// Solidity: function grantManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) GrantManagerAccess(opts *bind.TransactOpts, manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "grantManagerAccess", manager)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "kill")
}

// RevokeAccess is a paid mutator transaction binding the contract method 0x85e68531.
//
// Solidity: function revokeAccess(address candidate) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) RevokeAccess(opts *bind.TransactOpts, candidate common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "revokeAccess", candidate)
}

// RevokeManagerAccess is a paid mutator transaction binding the contract method 0xcdb849b7.
//
// Solidity: function revokeManagerAccess(address manager) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) RevokeManagerAccess(opts *bind.TransactOpts, manager common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "revokeManagerAccess", manager)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetAccessGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setAccessGroupRights", group, access_type, access)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetAccessRights(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setAccessRights")
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContentObjectRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContentObjectRights", obj, access_type, access)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContentSpace(opts *bind.TransactOpts, content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContentSpace", content_space)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContentTypeRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContentTypeRights", obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetContractRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setContractRights", obj, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) SetLibraryRights(opts *bind.TransactOpts, lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "setLibraryRights", lib, access_type, access)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "transferOwnership", newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.Transact(opts, "updateRequest")
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseAccessControlGroup *BaseAccessControlGroupTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseAccessControlGroup.contract.RawTransact(opts, calldata)
}

// BaseAccessControlGroupCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupCommitPendingIterator struct {
	Event *BaseAccessControlGroupCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupCommitPending represents a CommitPending event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseAccessControlGroupCommitPendingIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupCommitPendingIterator{contract: _BaseAccessControlGroup.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupCommitPending)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseCommitPending(log types.Log) (*BaseAccessControlGroupCommitPending, error) {
	event := new(BaseAccessControlGroupCommitPending)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupManagerAccessGrantedIterator is returned from FilterManagerAccessGranted and is used to iterate over the raw logs and unpacked data for ManagerAccessGranted events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessGrantedIterator struct {
	Event *BaseAccessControlGroupManagerAccessGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupManagerAccessGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupManagerAccessGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupManagerAccessGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupManagerAccessGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupManagerAccessGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupManagerAccessGranted represents a ManagerAccessGranted event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessGranted struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterManagerAccessGranted is a free log retrieval operation binding the contract event 0x93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d61117.
//
// Solidity: event ManagerAccessGranted(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterManagerAccessGranted(opts *bind.FilterOpts) (*BaseAccessControlGroupManagerAccessGrantedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "ManagerAccessGranted")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupManagerAccessGrantedIterator{contract: _BaseAccessControlGroup.contract, event: "ManagerAccessGranted", logs: logs, sub: sub}, nil
}

// WatchManagerAccessGranted is a free log subscription operation binding the contract event 0x93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d61117.
//
// Solidity: event ManagerAccessGranted(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchManagerAccessGranted(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupManagerAccessGranted) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "ManagerAccessGranted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupManagerAccessGranted)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseManagerAccessGranted is a log parse operation binding the contract event 0x93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d61117.
//
// Solidity: event ManagerAccessGranted(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseManagerAccessGranted(log types.Log) (*BaseAccessControlGroupManagerAccessGranted, error) {
	event := new(BaseAccessControlGroupManagerAccessGranted)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupManagerAccessRevokedIterator is returned from FilterManagerAccessRevoked and is used to iterate over the raw logs and unpacked data for ManagerAccessRevoked events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessRevokedIterator struct {
	Event *BaseAccessControlGroupManagerAccessRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupManagerAccessRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupManagerAccessRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupManagerAccessRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupManagerAccessRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupManagerAccessRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupManagerAccessRevoked represents a ManagerAccessRevoked event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupManagerAccessRevoked struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterManagerAccessRevoked is a free log retrieval operation binding the contract event 0x2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b95.
//
// Solidity: event ManagerAccessRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterManagerAccessRevoked(opts *bind.FilterOpts) (*BaseAccessControlGroupManagerAccessRevokedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "ManagerAccessRevoked")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupManagerAccessRevokedIterator{contract: _BaseAccessControlGroup.contract, event: "ManagerAccessRevoked", logs: logs, sub: sub}, nil
}

// WatchManagerAccessRevoked is a free log subscription operation binding the contract event 0x2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b95.
//
// Solidity: event ManagerAccessRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchManagerAccessRevoked(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupManagerAccessRevoked) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "ManagerAccessRevoked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupManagerAccessRevoked)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseManagerAccessRevoked is a log parse operation binding the contract event 0x2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b95.
//
// Solidity: event ManagerAccessRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseManagerAccessRevoked(log types.Log) (*BaseAccessControlGroupManagerAccessRevoked, error) {
	event := new(BaseAccessControlGroupManagerAccessRevoked)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "ManagerAccessRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupMemberAddedIterator is returned from FilterMemberAdded and is used to iterate over the raw logs and unpacked data for MemberAdded events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberAddedIterator struct {
	Event *BaseAccessControlGroupMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupMemberAdded represents a MemberAdded event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberAdded struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMemberAdded is a free log retrieval operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterMemberAdded(opts *bind.FilterOpts) (*BaseAccessControlGroupMemberAddedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "MemberAdded")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupMemberAddedIterator{contract: _BaseAccessControlGroup.contract, event: "MemberAdded", logs: logs, sub: sub}, nil
}

// WatchMemberAdded is a free log subscription operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchMemberAdded(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupMemberAdded) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "MemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupMemberAdded)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMemberAdded is a log parse operation binding the contract event 0xb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd914.
//
// Solidity: event MemberAdded(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseMemberAdded(log types.Log) (*BaseAccessControlGroupMemberAdded, error) {
	event := new(BaseAccessControlGroupMemberAdded)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupMemberRevokedIterator is returned from FilterMemberRevoked and is used to iterate over the raw logs and unpacked data for MemberRevoked events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberRevokedIterator struct {
	Event *BaseAccessControlGroupMemberRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupMemberRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupMemberRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupMemberRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupMemberRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupMemberRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupMemberRevoked represents a MemberRevoked event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupMemberRevoked struct {
	Candidate common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMemberRevoked is a free log retrieval operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterMemberRevoked(opts *bind.FilterOpts) (*BaseAccessControlGroupMemberRevokedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "MemberRevoked")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupMemberRevokedIterator{contract: _BaseAccessControlGroup.contract, event: "MemberRevoked", logs: logs, sub: sub}, nil
}

// WatchMemberRevoked is a free log subscription operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchMemberRevoked(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupMemberRevoked) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "MemberRevoked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupMemberRevoked)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMemberRevoked is a log parse operation binding the contract event 0x745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c.
//
// Solidity: event MemberRevoked(address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseMemberRevoked(log types.Log) (*BaseAccessControlGroupMemberRevoked, error) {
	event := new(BaseAccessControlGroupMemberRevoked)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "MemberRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupRightsChangedIterator is returned from FilterRightsChanged and is used to iterate over the raw logs and unpacked data for RightsChanged events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupRightsChangedIterator struct {
	Event *BaseAccessControlGroupRightsChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupRightsChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupRightsChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupRightsChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupRightsChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupRightsChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupRightsChanged represents a RightsChanged event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupRightsChanged struct {
	Principal common.Address
	Entity    common.Address
	Aggregate uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRightsChanged is a free log retrieval operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterRightsChanged(opts *bind.FilterOpts) (*BaseAccessControlGroupRightsChangedIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupRightsChangedIterator{contract: _BaseAccessControlGroup.contract, event: "RightsChanged", logs: logs, sub: sub}, nil
}

// WatchRightsChanged is a free log subscription operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchRightsChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupRightsChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupRightsChanged)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "RightsChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRightsChanged is a log parse operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseRightsChanged(log types.Log) (*BaseAccessControlGroupRightsChanged, error) {
	event := new(BaseAccessControlGroupRightsChanged)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "RightsChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupUnauthorizedOperationIterator is returned from FilterUnauthorizedOperation and is used to iterate over the raw logs and unpacked data for UnauthorizedOperation events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUnauthorizedOperationIterator struct {
	Event *BaseAccessControlGroupUnauthorizedOperation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupUnauthorizedOperationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupUnauthorizedOperation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupUnauthorizedOperation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupUnauthorizedOperationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupUnauthorizedOperationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupUnauthorizedOperation represents a UnauthorizedOperation event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUnauthorizedOperation struct {
	OperationCode *big.Int
	Candidate     common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterUnauthorizedOperation is a free log retrieval operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterUnauthorizedOperation(opts *bind.FilterOpts) (*BaseAccessControlGroupUnauthorizedOperationIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupUnauthorizedOperationIterator{contract: _BaseAccessControlGroup.contract, event: "UnauthorizedOperation", logs: logs, sub: sub}, nil
}

// WatchUnauthorizedOperation is a free log subscription operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchUnauthorizedOperation(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupUnauthorizedOperation) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupUnauthorizedOperation)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnauthorizedOperation is a log parse operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseUnauthorizedOperation(log types.Log) (*BaseAccessControlGroupUnauthorizedOperation, error) {
	event := new(BaseAccessControlGroupUnauthorizedOperation)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUpdateRequestIterator struct {
	Event *BaseAccessControlGroupUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupUpdateRequest represents a UpdateRequest event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseAccessControlGroupUpdateRequestIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupUpdateRequestIterator{contract: _BaseAccessControlGroup.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupUpdateRequest)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseUpdateRequest(log types.Log) (*BaseAccessControlGroupUpdateRequest, error) {
	event := new(BaseAccessControlGroupUpdateRequest)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionConfirmIterator struct {
	Event *BaseAccessControlGroupVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupVersionConfirm represents a VersionConfirm event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionConfirm struct {
	SpaceAddress common.Address
	ObjectHash   string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseAccessControlGroupVersionConfirmIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupVersionConfirmIterator{contract: _BaseAccessControlGroup.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupVersionConfirm)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseVersionConfirm(log types.Log) (*BaseAccessControlGroupVersionConfirm, error) {
	event := new(BaseAccessControlGroupVersionConfirm)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionDeleteIterator struct {
	Event *BaseAccessControlGroupVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupVersionDelete represents a VersionDelete event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseAccessControlGroupVersionDeleteIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupVersionDeleteIterator{contract: _BaseAccessControlGroup.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupVersionDelete)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseVersionDelete(log types.Log) (*BaseAccessControlGroupVersionDelete, error) {
	event := new(BaseAccessControlGroupVersionDelete)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessControlGroupDbgAddressIterator is returned from FilterDbgAddress and is used to iterate over the raw logs and unpacked data for DbgAddress events raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupDbgAddressIterator struct {
	Event *BaseAccessControlGroupDbgAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessControlGroupDbgAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessControlGroupDbgAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessControlGroupDbgAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessControlGroupDbgAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessControlGroupDbgAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessControlGroupDbgAddress represents a DbgAddress event raised by the BaseAccessControlGroup contract.
type BaseAccessControlGroupDbgAddress struct {
	Label string
	Index *big.Int
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDbgAddress is a free log retrieval operation binding the contract event 0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260.
//
// Solidity: event dbgAddress(string label, uint256 index, address a)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) FilterDbgAddress(opts *bind.FilterOpts) (*BaseAccessControlGroupDbgAddressIterator, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.FilterLogs(opts, "dbgAddress")
	if err != nil {
		return nil, err
	}
	return &BaseAccessControlGroupDbgAddressIterator{contract: _BaseAccessControlGroup.contract, event: "dbgAddress", logs: logs, sub: sub}, nil
}

// WatchDbgAddress is a free log subscription operation binding the contract event 0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260.
//
// Solidity: event dbgAddress(string label, uint256 index, address a)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) WatchDbgAddress(opts *bind.WatchOpts, sink chan<- *BaseAccessControlGroupDbgAddress) (event.Subscription, error) {

	logs, sub, err := _BaseAccessControlGroup.contract.WatchLogs(opts, "dbgAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessControlGroupDbgAddress)
				if err := _BaseAccessControlGroup.contract.UnpackLog(event, "dbgAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDbgAddress is a log parse operation binding the contract event 0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260.
//
// Solidity: event dbgAddress(string label, uint256 index, address a)
func (_BaseAccessControlGroup *BaseAccessControlGroupFilterer) ParseDbgAddress(log types.Log) (*BaseAccessControlGroupDbgAddress, error) {
	event := new(BaseAccessControlGroupDbgAddress)
	if err := _BaseAccessControlGroup.contract.UnpackLog(event, "dbgAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletMetaData contains all meta data concerning the BaseAccessWallet contract.
var BaseAccessWalletMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentObjects\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusNonceFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"name\":\"setContentSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusSendFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_OBJECT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_address\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"pke_requestor\",\"type\":\"string\"},{\"name\":\"pke_AFGH\",\"type\":\"string\"},{\"name\":\"custom_values\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"contentAccessRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccessGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_GROUP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_LIBRARY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_CONFIRMED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContractRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getAccessGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getAccessGroupRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessGroups\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_address\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"request_ID\",\"type\":\"uint256\"},{\"name\":\"score_pct\",\"type\":\"uint256\"},{\"name\":\"ml_out_hash\",\"type\":\"bytes32\"}],\"name\":\"contentAccessComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentObjectRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"hasManagerAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_TENTATIVE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_guarantor\",\"type\":\"address\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CATEGORY_CONTENT_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentObjectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contracts\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"contractExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setLibraryRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACCESS_NONE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpContentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setContentTypeRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpLibraries\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusBalanceFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_address\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"pke_requestor\",\"type\":\"string\"},{\"name\":\"pke_AFGH\",\"type\":\"string\"},{\"name\":\"custom_values\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequestMsg\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusOk\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_address\",\"type\":\"address\"},{\"name\":\"request_ID\",\"type\":\"uint256\"},{\"name\":\"score_pct\",\"type\":\"uint256\"},{\"name\":\"ml_out_hash\",\"type\":\"bytes32\"}],\"name\":\"accessCompleteMsg\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index_type\",\"type\":\"uint8\"},{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkDirectRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"}],\"name\":\"getContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContractRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentObjects\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setAccessRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraries\",\"outputs\":[{\"name\":\"category\",\"type\":\"uint8\"},{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLibrariesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getContentObject\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TYPE_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cleanUpAccessGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"execStatusSigFail\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContentObjectsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accessRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setAccessGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"}],\"name\":\"getLibraryRights\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"obj\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"}],\"name\":\"checkContentTypeRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"guarantor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"code\",\"type\":\"int256\"}],\"name\":\"ExecStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"principal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"aggregate\",\"type\":\"uint8\"}],\"name\":\"RightsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"dbgAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AccessRequest\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"18689733": "ACCESS_CONFIRMED()",
		"8232f3f1": "ACCESS_NONE()",
		"479a0c51": "ACCESS_TENTATIVE()",
		"091600e6": "CATEGORY_CONTENT_OBJECT()",
		"68a0469a": "CATEGORY_CONTENT_TYPE()",
		"6373a411": "CATEGORY_CONTRACT()",
		"12915a30": "CATEGORY_GROUP()",
		"16aed232": "CATEGORY_LIBRARY()",
		"d1aeb651": "TYPE_ACCESS()",
		"5d97b6c2": "TYPE_EDIT()",
		"96eba03d": "TYPE_SEE()",
		"97510671": "accessCompleteMsg(address,uint256,uint256,bytes32)",
		"30e66949": "accessGroups()",
		"f1551887": "accessRequest()",
		"957a3aa4": "accessRequestMsg(address,uint8,string,string,bytes32[],address[])",
		"0f58a786": "addContentType(address,address)",
		"32eaf21b": "addressKMS()",
		"6e375427": "canCommit()",
		"14cfabb3": "canConfirm()",
		"0eaec2c5": "canContribute(address)",
		"81beeb64": "canEdit()",
		"9b55f901": "canPublish(address)",
		"29d00219": "canReview(address)",
		"15c0bac1": "checkAccessGroupRights(address,uint8)",
		"5faecb76": "checkContentObjectRights(address,uint8)",
		"fe538c5a": "checkContentTypeRights(address,uint8)",
		"a864dfa5": "checkContractRights(address,uint8)",
		"a00b38c4": "checkDirectRights(uint8,address,uint8)",
		"6813b6d1": "checkLibraryRights(address,uint8)",
		"7fb52f1a": "checkRights(uint8,address,uint8)",
		"d30f8cd0": "cleanUpAccessGroups()",
		"2fa5c842": "cleanUpAll()",
		"048bd529": "cleanUpContentObjects()",
		"85e0a200": "cleanUpContentTypes()",
		"92297d7b": "cleanUpLibraries()",
		"5f6a1301": "clearPending()",
		"9867db74": "commit(string)",
		"375a6e7c": "commitPending()",
		"446e8826": "confirmCommit()",
		"3abaae55": "contentAccessComplete(address,bytes,uint256,uint256,bytes32)",
		"0add6d2a": "contentAccessRequest(address,bytes,uint8,string,string,bytes32[],address[])",
		"a980892d": "contentObjects()",
		"af570c04": "contentSpace()",
		"1cdbee5a": "contentTypeContracts(address)",
		"9f46133e": "contentTypes()",
		"991a3a7c": "contentTypes(uint256)",
		"c65bcbe2": "contentTypesLength()",
		"7709bc78": "contractExists(address)",
		"6c0f79b6": "contracts()",
		"331b86c0": "countVersionHashes()",
		"02d05d3f": "creator()",
		"1e2ff94f": "currentTimestamp()",
		"e1a70717": "deleteVersion(string)",
		"9476c478": "execStatusBalanceFail()",
		"04f55daf": "execStatusNonceFail()",
		"95ba60ba": "execStatusOk()",
		"07a08237": "execStatusSendFail()",
		"eb23b7aa": "execStatusSigFail()",
		"508ad278": "execute(address,uint8,bytes32,bytes32,address,uint256,uint256)",
		"1f2caaec": "findTypeByHash(bytes32)",
		"2d474cbd": "getAccessGroup(uint256)",
		"304f4a7b": "getAccessGroupRights(address)",
		"0dc10d3f": "getAccessGroupsLength()",
		"cf8a7503": "getContentObject(uint256)",
		"69881c0c": "getContentObjectRights(address)",
		"ebe9314e": "getContentObjectsLength()",
		"aa3f6952": "getContentType(uint256)",
		"a4081d62": "getContentTypeRights(address)",
		"5c1d3059": "getContentTypesLength()",
		"6ebc8c86": "getContract(uint256)",
		"08d865d7": "getContractRights(address)",
		"fccc134f": "getContractsLength()",
		"cb86806d": "getLibrariesLength()",
		"d15d62a7": "getLibrary(uint256)",
		"fb52222c": "getLibraryRights(address)",
		"95a078e8": "hasAccess(address)",
		"42e7ba7b": "hasManagerAccess(address)",
		"41c0e1b5": "kill()",
		"c4b1978d": "libraries()",
		"e02dd9c2": "objectHash()",
		"8da5cb5b": "owner()",
		"00821de3": "parentAddress()",
		"628449fd": "pendingHash()",
		"2cf99422": "publish(address)",
		"fd089196": "removeContentType(address)",
		"3dd71d99": "requiresReview()",
		"f17bda91": "setAccessGroupRights(address,uint8,uint8)",
		"b8ff1dba": "setAccessRights()",
		"c9e8e72d": "setAddressKMS(address)",
		"3def5140": "setContentObjectRights(address,uint8,uint8)",
		"055af48f": "setContentSpace(address)",
		"8635adb5": "setContentTypeRights(address,uint8,uint8)",
		"224dcba0": "setContractRights(address,uint8,uint8)",
		"7cbb7bf2": "setLibraryRights(address,uint8,uint8)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"c287e0ed": "updateRequest()",
		"29dedde5": "validType(address)",
		"f50b2efe": "validateTimestamp(uint256)",
		"763d5ee6": "validateTransaction(uint8,bytes32,bytes32,address,uint256,uint256)",
		"54fd4d50": "version()",
		"7ca8f618": "versionHashes(uint256)",
		"7886f747": "versionTimestamp(uint256)",
		"9cb121ba": "whitelistedType(address)",
	},
	Bin: "0x7f41636365737369626c6532303139303232323133353930304d4c00000000000060009081557f4f776e61626c6532303139303532383139333830304d4c00000000000000000060019081557f4564697461626c6532303139313231393133343630304d4c00000000000000006005557f436f6e7461696e657232303139303532393039313830304d4c00000000000000600c55600f919091557f416363657373496e6465786f7232303139313131333230323430304d4c0000006011556012805460ff1916821761ff0019166102001762ff00001916620300001763ff000000191663040000001764ff00000000191664050000000017905560e06040526080908152600a60a052606460c0526200011d906013906003620001f9565b507f427341636365737357616c6c657432303139313230333130323930304d4c00006028556040516020806200487b83398101604052516002805432600160a060020a031991821681179092556003805482169092179091556012546014805462010000830460ff90811660ff1992831617909255601c805461010085048416908316179055601880548385169083161790556020805463010000008504841690831617905560248054640100000000909404909216921691909117905560048054909116600160a060020a03909216919091179055620002b7565b600183019183908215620002815791602002820160005b838211156200025057835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000210565b80156200027f5782816101000a81549060ff021916905560010160208160000104928301926001030262000250565b505b506200028f92915062000293565b5090565b620002b491905b808211156200028f57805460ff191681556001016200029a565b90565b6145b480620002c76000396000f3006080604052600436106104935763ffffffff60e060020a600035041662821de3811461049557806302d05d3f146104c6578063048bd529146104db57806304f55daf14610502578063055af48f1461051757806307a082371461053857806308d865d71461054d578063091600e6146105845780630add6d2a146105995780630dc10d3f146106f75780630eaec2c51461070c5780630f58a7861461074157806312915a301461076857806314cfabb31461077d57806315c0bac11461079257806316aed232146107b957806318689733146107ce5780631cdbee5a146107e35780631e2ff94f146108045780631f2caaec14610819578063224dcba01461083157806329d002191461085e57806329dedde51461087f5780632cf99422146108a05780632d474cbd146108c15780632fa5c842146108d9578063304f4a7b1461091957806330e669491461093a57806332eaf21b1461096c578063331b86c014610981578063375a6e7c146109965780633abaae55146109ab5780633dd71d9914610a125780633def514014610a2757806341c0e1b514610a5457806342e7ba7b14610a69578063446e882614610a8a578063479a0c5114610a92578063508ad27814610aa757806354fd4d5014610ae35780635c1d305914610af85780635d97b6c2146107ce5780635f6a130114610b0d5780635faecb7614610b22578063628449fd14610b495780636373a41114610bd35780636813b6d114610be857806368a0469a14610c0f57806369881c0c14610c245780636c0f79b614610c455780636d2e4b1b14610c5a5780636e37542714610c7b5780636ebc8c8614610c90578063763d5ee614610ca85780637709bc7814610cdb5780637886f74714610cfc5780637ca8f61814610d145780637cbb7bf214610d2c5780637fb52f1a14610d5957806381beeb6414610d875780638232f3f114610d9c57806385e0a20014610db15780638635adb514610dc65780638da5cb5b14610df357806392297d7b14610e085780639476c47814610e1d578063957a3aa414610e3257806395a078e814610f4e57806395ba60ba14610f6f57806396eba03d14610d9c5780639751067114610f845780639867db7414610fae578063991a3a7c146110075780639b55f9011461070c5780639cb121ba1461101f5780639f46133e14611040578063a00b38c414611055578063a4081d6214611083578063a864dfa5146110a4578063a980892d146110cb578063aa3f6952146110e0578063af570c04146110f8578063b8ff1dba1461110d578063c287e0ed14611122578063c4b1978d14611137578063c65bcbe21461114c578063c9e8e72d14611161578063cb86806d14611182578063cf8a750314611197578063d15d62a7146111af578063d1aeb65114610a92578063d30f8cd0146111c7578063e02dd9c2146111dc578063e1a70717146111f1578063eb23b7aa1461124a578063ebe9314e1461125f578063f155188714611274578063f17bda9114611289578063f2fde38b146112b6578063f50b2efe146112d7578063fb52222c146112ef578063fccc134f14611310578063fd08919614611325578063fe538c5a14611346575b005b3480156104a157600080fd5b506104aa61136d565b60408051600160a060020a039092168252519081900360200190f35b3480156104d257600080fd5b506104aa61137d565b3480156104e757600080fd5b506104f061138c565b60408051918252519081900360200190f35b34801561050e57600080fd5b506104f061139d565b34801561052357600080fd5b50610493600160a060020a03600435166113a2565b34801561054457600080fd5b506104f06113f2565b34801561055957600080fd5b5061056e600160a060020a03600435166113f7565b6040805160ff9092168252519081900360200190f35b34801561059057600080fd5b5061056e611419565b3480156105a557600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526104f0958335600160a060020a031695369560449491939091019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b60ff8b35169b909a90999401975091955091820193509150819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506114229650505050505050565b34801561070357600080fd5b506104f061174d565b34801561071857600080fd5b5061072d600160a060020a0360043516611753565b604080519115158252519081900360200190f35b34801561074d57600080fd5b50610493600160a060020a0360043581169060243516611782565b34801561077457600080fd5b5061056e6118f7565b34801561078957600080fd5b5061072d611905565b34801561079e57600080fd5b5061072d600160a060020a036004351660ff602435166119a4565b3480156107c557600080fd5b5061056e6119c4565b3480156107da57600080fd5b5061056e6119d3565b3480156107ef57600080fd5b506104aa600160a060020a03600435166119d8565b34801561081057600080fd5b506104f06119f3565b34801561082557600080fd5b506104aa6004356119f9565b34801561083d57600080fd5b50610493600160a060020a036004351660ff60243581169060443516611c7d565b34801561086a57600080fd5b5061072d600160a060020a0360043516611c8f565b34801561088b57600080fd5b5061072d600160a060020a0360043516611c95565b3480156108ac57600080fd5b5061072d600160a060020a0360043516611cb3565b3480156108cd57600080fd5b506104aa600435611dd3565b3480156108e557600080fd5b506108ee611e00565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561092557600080fd5b5061056e600160a060020a0360043516611e4b565b34801561094657600080fd5b5061094f611e69565b6040805160ff909316835260208301919091528051918290030190f35b34801561097857600080fd5b506104aa611e78565b34801561098d57600080fd5b506104f0611e87565b3480156109a257600080fd5b5061072d611e8d565b60408051602060046024803582810135601f810185900485028601850190965285855261072d958335600160a060020a031695369560449491939091019190819084018382808284375094975050843595505050602083013592604001359150611e969050565b348015610a1e57600080fd5b5061072d611f41565b348015610a3357600080fd5b50610493600160a060020a036004351660ff60243581169060443516611f46565b348015610a6057600080fd5b50610493611f53565b348015610a7557600080fd5b5061072d600160a060020a0360043516611f8f565b61072d611fa3565b348015610a9e57600080fd5b5061056e61139d565b348015610ab357600080fd5b5061072d600160a060020a0360043581169060ff602435169060443590606435906084351660a43560c435612193565b348015610aef57600080fd5b506104f061246a565b348015610b0457600080fd5b506104f0612470565b348015610b1957600080fd5b50610493612476565b348015610b2e57600080fd5b5061072d600160a060020a036004351660ff602435166124b4565b348015610b5557600080fd5b50610b5e6124c8565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610b98578181015183820152602001610b80565b50505050905090810190601f168015610bc55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610bdf57600080fd5b5061056e612556565b348015610bf457600080fd5b5061072d600160a060020a036004351660ff60243516612567565b348015610c1b57600080fd5b5061056e612581565b348015610c3057600080fd5b5061056e600160a060020a0360043516612591565b348015610c5157600080fd5b5061094f6125af565b348015610c6657600080fd5b50610493600160a060020a03600435166125be565b348015610c8757600080fd5b5061072d61260c565b348015610c9c57600080fd5b506104aa60043561261d565b348015610cb457600080fd5b5061072d60ff60043516602435604435600160a060020a036064351660843560a43561262f565b348015610ce757600080fd5b5061072d600160a060020a0360043516612798565b348015610d0857600080fd5b506104f06004356127a0565b348015610d2057600080fd5b50610b5e6004356127bf565b348015610d3857600080fd5b50610493600160a060020a036004351660ff60243581169060443516612833565b348015610d6557600080fd5b5061072d60ff600435811690600160a060020a03602435169060443516612840565b348015610d9357600080fd5b5061072d612a47565b348015610da857600080fd5b5061056e612a58565b348015610dbd57600080fd5b506104f0612a5d565b348015610dd257600080fd5b50610493600160a060020a036004351660ff60243581169060443516612a69565b348015610dff57600080fd5b506104aa612a76565b348015610e1457600080fd5b506104f0612a85565b348015610e2957600080fd5b506104f06119d3565b348015610e3e57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526104f0948235600160a060020a0316946024803560ff169536959460649492019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750612a919650505050505050565b348015610f5a57600080fd5b5061072d600160a060020a0360043516612c61565b348015610f7b57600080fd5b506104f0612a58565b348015610f9057600080fd5b506104f0600160a060020a0360043516602435604435606435612c67565b348015610fba57600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610493943694929360249392840191908190840183828082843750949750612d1a9650505050505050565b34801561101357600080fd5b506104aa600435612e47565b34801561102b57600080fd5b5061072d600160a060020a0360043516612e6f565b34801561104c57600080fd5b5061094f612ec6565b34801561106157600080fd5b5061072d60ff600435811690600160a060020a03602435169060443516612ed5565b34801561108f57600080fd5b5061056e600160a060020a0360043516612f8f565b3480156110b057600080fd5b5061072d600160a060020a036004351660ff60243516612fad565b3480156110d757600080fd5b5061094f612fc9565b3480156110ec57600080fd5b506104aa600435612fd8565b34801561110457600080fd5b506104aa612fea565b34801561111957600080fd5b50610493612ff9565b34801561112e57600080fd5b506104936130e3565b34801561114357600080fd5b5061094f6131b3565b34801561115857600080fd5b506104f06131c2565b34801561116d57600080fd5b50610493600160a060020a03600435166131c8565b34801561118e57600080fd5b506104f0613218565b3480156111a357600080fd5b506104aa60043561321e565b3480156111bb57600080fd5b506104aa600435613230565b3480156111d357600080fd5b506104f0613242565b3480156111e857600080fd5b50610b5e61324e565b3480156111fd57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104f09436949293602493928401919081908401838280828437509497506132a99650505050505050565b34801561125657600080fd5b506104f0613851565b34801561126b57600080fd5b506104f0613856565b34801561128057600080fd5b5061072d61385c565b34801561129557600080fd5b50610493600160a060020a036004351660ff6024358116906044351661388d565b3480156112c257600080fd5b50610493600160a060020a036004351661389a565b3480156112e357600080fd5b5061072d6004356138ff565b3480156112fb57600080fd5b5061056e600160a060020a036004351661391b565b34801561131c57600080fd5b506104f0613939565b34801561133157600080fd5b5061072d600160a060020a036004351661393f565b34801561135257600080fd5b5061072d600160a060020a036004351660ff60243516613ae2565b600454600160a060020a03165b90565b600254600160a060020a031681565b60006113986018613afd565b905090565b600181565b600354600160a060020a03163214806113c55750600354600160a060020a031633145b15156113d057600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b600481565b600160a060020a03811660009081526025602052604090205460ff165b919050565b60125460ff1681565b6000806000806000808c945084600160a060020a03166338d0f5048c8a8a6040518463ffffffff1660e060020a028152600401808460ff1660ff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156114a257818101518382015260200161148a565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156114e15781810151838201526020016114c9565b5050505090500195505050505050606060405180830381600087803b15801561150957600080fd5b505af115801561151d573d6000803e3d6000fd5b505050506040513d606081101561153357600080fd5b508051602082015160409092015195509350915060ff83161561155557600080fd5b600160a060020a03851663a1ff106e60ff84161515611575576000611577565b855b8d8d8d8d8d6040518763ffffffff1660e060020a028152600401808660ff1660ff16815260200180602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b838110156115e35781810151838201526020016115cb565b50505050905090810190601f1680156116105780820380516001836020036101000a031916815260200191505b5085810384528851815288516020918201918a019080838360005b8381101561164357818101518382015260200161162b565b50505050905090810190601f1680156116705780820380516001836020036101000a031916815260200191505b508581038352875181528751602091820191808a01910280838360005b838110156116a557818101518382015260200161168d565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156116e45781810151838201526020016116cc565b5050505090500199505050505050505050506020604051808303818588803b15801561170f57600080fd5b505af1158015611723573d6000803e3d6000fd5b50505050506040513d602081101561173a57600080fd5b50519d9c50505050505050505050505050565b601f5490565b600354600090600160a060020a038381169116148061177c5750600354600160a060020a031633145b92915050565b600354600160a060020a03163214806117a55750600354600160a060020a031633145b15156117b057600080fd5b600160a060020a03808316600090815260106020526040902054161580156117de57506117dc82612e6f565b155b1561188a57600e54600f5410156118345781600e600f5481548110151561180157fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550611880565b600e80546001810182556000919091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd018054600160a060020a031916600160a060020a0384161790555b600f805460010190555b600160a060020a038281166000818152601060209081526040918290208054600160a060020a0319169486169485179055815192835282019290925281517f280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7929181900390910190a15050565b601254610100900460ff1681565b60048054604080517f26683e14000000000000000000000000000000000000000000000000000000008152339381019390935251600092600160a060020a039092169182916326683e149160248082019260209290919082900301818887803b15801561197157600080fd5b505af1158015611985573d6000803e3d6000fd5b505050506040513d602081101561199b57600080fd5b505191505b5090565b6012546000906119bd90610100900460ff168484612840565b9392505050565b60125462010000900460ff1681565b600281565b601060205260009081526040902054600160a060020a031681565b60295481565b600080805b600e54821015611c7157600e805483908110611a1657fe5b6000918252602091829020015460408051808401889052815180820385018152908201918290528051600160a060020a03909316945092909182918401908083835b60208310611a775780518252601f199092019160209182019101611a58565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191681600160a060020a031663e02dd9c26040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015611ae657600080fd5b505af1158015611afa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611b2357600080fd5b810190808051640100000000811115611b3b57600080fd5b82016020810184811115611b4e57600080fd5b8151640100000000811182820187101715611b6857600080fd5b50509291905050506040516020018082805190602001908083835b60208310611ba25780518252601f199092019160209182019101611b83565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611c055780518252601f199092019160209182019101611be6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415611c6657600e805483908110611c4a57fe5b600091825260209091200154600160a060020a03169250611c76565b6001909101906119fe565b600092505b5050919050565b611c8a6024848484613d63565b505050565b50600090565b6000600f5460001415611caa57506001611414565b61177c82612e6f565b60008033600160a060020a03841614611ccb57600080fd5b82905080600160a060020a0316638280dd8f60006040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b158015611d1857600080fd5b505af1158015611d2c573d6000803e3d6000fd5b505050506040513d6020811015611d4257600080fd5b5050604080517f27c1c21d0000000000000000000000000000000000000000000000000000000081529051600160a060020a038316916327c1c21d9160048083019260209291908290030181600087803b158015611d9f57600080fd5b505af1158015611db3573d6000803e3d6000fd5b505050506040513d6020811015611dc957600080fd5b5051159392505050565b601e80546000919083908110611de557fe5b600091825260209091200154600160a060020a031692915050565b6000806000806000611e126014613afd565b611e1c601c613afd565b611e266018613afd565b611e306020613afd565b611e3a6024613afd565b945094509450945094509091929394565b600160a060020a03166000908152601d602052604090205460ff1690565b601c54601f5460ff9091169082565b600d54600160a060020a031681565b60085490565b600b5460ff1681565b604080517f5cc4aa9b00000000000000000000000000000000000000000000000000000000815260048101859052602481018490526044810183905290516000918791600160a060020a03831691635cc4aa9b91606480830192602092919082900301818887803b158015611f0a57600080fd5b505af1158015611f1e573d6000803e3d6000fd5b505050506040513d6020811015611f3457600080fd5b5051979650505050505050565b600090565b611c8a6018848484613d63565b600354600160a060020a0316321480611f765750600354600160a060020a031633145b1515611f8157600080fd5b600354600160a060020a0316ff5b600354600160a060020a0390811691161490565b6000611fad611905565b1515611fb857600080fd5b600b5460ff161515611fc957600080fd5b600060068054600181600116156101000203166002900490501115612078576008805460018181018084556000939093526006805461203f937ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30192600261010091831615919091026000190190911604614392565b5050600754600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01555b600a805461209b9160069160026000196101006001841615020190911604614392565b50426007556040805160208101918290526000908190526120be91600a91614413565b50600b805460ff1916905560045460408051600160a060020a039092168083526020830182815260068054600260001960018316156101000201909116049385018490527f482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e9492939092919060608301908490801561217e5780601f106121535761010080835404028352916020019161217e565b820191906000526020600020905b81548152906001019060200180831161216157829003601f168201915b5050935050505060405180910390a150600190565b600454600090600160a060020a031681803383148061223f5750604080517fd6be0f490000000000000000000000000000000000000000000000000000000081523360048201529051600091600160a060020a0386169163d6be0f499160248082019260209290919082900301818787803b15801561221157600080fd5b505af1158015612225573d6000803e3d6000fd5b505050506040513d602081101561223b57600080fd5b5051115b151561224a57600080fd5b600083600160a060020a031663d6be0f498d6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156122a757600080fd5b505af11580156122bb573d6000803e3d6000fd5b505050506040513d60208110156122d157600080fd5b5051116122dd57600080fd5b60295485116123215760408051600160a060020a038d168152600160208201528151600080516020614569833981519152929181900390910190a16000935061245c565b30318611156123655760408051600160a060020a038d168152600260208201528151600080516020614569833981519152929181900390910190a16000935061245c565b6123738a8a8a8a8a8a61262f565b91508115156123b75760408051600160a060020a038d168152600360208201528151600080516020614569833981519152929181900390910190a16000935061245c565b6029859055604051600160a060020a0388169087156108fc029088906000818181858888f1935050505090508015156124255760408051600160a060020a038d168152600460208201528151600080516020614569833981519152929181900390910190a16000935061245c565b60408051600160a060020a038d168152600060208201528151600080516020614569833981519152929181900390910190a1600193505b505050979650505050505050565b60285481565b60235490565b61247e61260c565b151561248957600080fd5b6040805160208101918290526000908190526124a791600a91614413565b50600b805460ff19169055565b6012546000906119bd9060ff168484612840565b600a805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561254e5780601f106125235761010080835404028352916020019161254e565b820191906000526020600020905b81548152906001019060200180831161253157829003601f168201915b505050505081565b601254640100000000900460ff1681565b6012546000906119bd9062010000900460ff168484612840565b6012546301000000900460ff1681565b600160a060020a031660009081526019602052604090205460ff1690565b60245460275460ff9091169082565b600254600160a060020a031632146125d557600080fd5b600160a060020a03811615156125ea57600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600354600160a060020a0316321490565b602680546000919083908110611de557fe5b604080516c01000000000000000000000000308102602080840191909152600160a060020a038716909102603483015260488201859052606880830185905283518084039091018152608890920192839052815160009384938493909282918401908083835b602083106126b45780518252601f199092019160209182019101612695565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902091506001828a8a8a604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af115801561275a573d6000803e3d6000fd5b5050604051601f190151600354909250600160a060020a038084169116149050612787576000925061278c565b600192505b50509695505050505050565b6000903b1190565b60098054829081106127ae57fe5b600091825260209091200154905081565b60088054829081106127cd57fe5b600091825260209182902001805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529350909183018282801561254e5780601f106125235761010080835404028352916020019161254e565b611c8a6014848484613d63565b600080600080600080879450600360009054906101000a9004600160a060020a0316600160a060020a031685600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156128a957600080fd5b505af11580156128bd573d6000803e3d6000fd5b505050506040513d60208110156128d357600080fd5b5051600160a060020a031614156128ed5760019550612a3b565b6128f8898989612ed5565b93506001841515141561290e5760019550612a3b565b5060005b601f54811015612a3657601e80548290811061292a57fe5b600091825260209091200154600160a060020a03169150811580159061296e5750600160a060020a0382166000908152601d6020526040902054600a60ff90911610155b15612a2e57604080517fa00b38c400000000000000000000000000000000000000000000000000000000815260ff808c166004830152600160a060020a038b81166024840152908a166044830152915193945084939184169163a00b38c4916064808201926020929091908290030181600087803b1580156129ef57600080fd5b505af1158015612a03573d6000803e3d6000fd5b505050506040513d6020811015612a1957600080fd5b5051151560011415612a2e5760019550612a3b565b600101612912565b600095505b50505050509392505050565b600354600160a060020a0316331490565b600081565b60006113986020613afd565b611c8a6020848484613d63565b600354600160a060020a031681565b60006113986014613afd565b60008686868686866040516020018087600160a060020a0316600160a060020a03166c010000000000000000000000000281526014018660ff1660ff167f010000000000000000000000000000000000000000000000000000000000000002815260010185805190602001908083835b60208310612b205780518252601f199092019160209182019101612b01565b51815160209384036101000a600019018019909216911617905287519190930192870191508083835b60208310612b685780518252601f199092019160209182019101612b49565b51815160209384036101000a60001901801990921691161790528651919093019286810192500280838360005b83811015612bad578181015183820152602001612b95565b50505050905001828051906020019060200280838360005b83811015612bdd578181015183820152602001612bc5565b5050505090500196505050505050506040516020818303038152906040526040518082805190602001908083835b60208310612c2a5780518252601f199092019160209182019101612c0b565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209a9950505050505050505050565b50600190565b604080516c01000000000000000000000000600160a060020a0387160260208083019190915260348201869052605482018590526074808301859052835180840390910181526094909201928390528151600093918291908401908083835b60208310612ce55780518252601f199092019160209182019101612cc6565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912098975050505050505050565b612d2261260c565b1515612d2d57600080fd5b600b5460ff1615612d3d57600080fd5b8051608011612d4b57600080fd5b8051612d5e90600a906020840190614413565b50600b805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316612da261136d565b60408051600160a060020a038085168252831660208201526060918101828152600a80546002600019610100600184161502019091160493830184905292608083019084908015612e345780601f10612e0957610100808354040283529160200191612e34565b820191906000526020600020905b815481529060010190602001808311612e1757829003601f168201915b505094505050505060405180910390a150565b600e805482908110612e5557fe5b600091825260209091200154600160a060020a0316905081565b600080805b600f54811015612ebf5783600160a060020a0316600e82815481101515612e9757fe5b600091825260209091200154600160a060020a03161415612eb757600191505b600101612e74565b5092915050565b60205460235460ff9091169082565b60125460009060ff85811691161415612efb57612ef46018848461416c565b90506119bd565b60125460ff858116610100909204161415612f1c57612ef4601c848461416c565b60125460ff85811662010000909204161415612f3e57612ef46014848461416c565b60125460ff858116640100000000909204161415612f6257612ef46024848461416c565b60125460ff8581166301000000909204161415612f8557612ef46020848461416c565b5060009392505050565b600160a060020a031660009081526021602052604090205460ff1690565b6012546000906119bd90640100000000900460ff168484612840565b601854601b5460ff9091169082565b602280546000919083908110611de557fe5b600454600160a060020a031681565b600080613004614481565b3360008181526019602081815260408084208054600a60ff8083169182068116808b5260648306819003821683038190038216958b018690526013546101009004821660020282168b8801819052988a9052969095529590940190910191821660ff199093168317905592955090935015801590613083575060ff8316155b15613093576130936018856141c0565b60408051308152600160a060020a038616602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a150505050565b6130eb612a47565b806130f957506130f9611905565b151561310457600080fd5b60408051602080825260068054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156131a35780601f10613178576101008083540402835291602001916131a3565b820191906000526020600020905b81548152906001019060200180831161318657829003601f168201915b50509250505060405180910390a1565b60145460175460ff9091169082565b600f5481565b600354600160a060020a03163214806131eb5750600354600160a060020a031633145b15156131f657600080fd5b600d8054600160a060020a031916600160a060020a0392909216919091179055565b60175490565b601a80546000919083908110611de557fe5b601680546000919083908110611de557fe5b6000611398601c613afd565b6006805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561254e5780601f106125235761010080835404028352916020019161254e565b6000806000806000806132ba61260c565b15156132c557600080fd5b866040516020018082805190602001908083835b602083106132f85780518252601f1990920191602091820191016132d9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831061335b5780518252601f19909201916020918201910161333c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209450600660405160200180828054600181600116156101000203166002900480156133ea5780601f106133c85761010080835404028352918201916133ea565b820191906000526020600020905b8154815290600101906020018083116133d6575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831061342d5780518252601f19909201916020918201910161340e565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912096505050508484141561354e5760408051602081019182905260009081905261348191600691614413565b506000600781905560045460408051600160a060020a03909216808352908201839052606060208084018281528c51928501929092528b517f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f519593948d9493909290916080840191860190808383885b838110156135095781810151838201526020016134f1565b50505050905090810190601f1680156135365780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160009550613847565b6000199250600091505b60085482101561376457600880548390811061357057fe5b9060005260206000200160405160200180828054600181600116156101000203166002900480156135d85780601f106135b65761010080835404028352918201916135d8565b820191906000526020600020905b8154815290600101906020018083116135c4575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831061361b5780518252601f1990920191602091820191016135fc565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912093505050508481141561375957600880548390811061365f57fe5b90600052602060002001600061367591906144a0565b600980548390811061368357fe5b6000918252602082200155600854600019018214613729576008805460001981019081106136ad57fe5b906000526020600020016008838154811015156136c657fe5b9060005260206000200190805460018160011615610100020316600290046136ef929190614392565b5060098054600019810190811061370257fe5b906000526020600020015460098381548110151561371c57fe5b6000918252602090912001555b600880549061373c9060001983016144e7565b50600980549061375090600019830161450b565b50819250613764565b600190910190613558565b60001983141561377357600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a031688856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156138075781810151838201526020016137ef565b50505050905090810190601f1680156138345780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18295505b5050505050919050565b600381565b601b5490565b6040516000907fed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88908290a150600190565b611c8a601c848484613d63565b600354600160a060020a03163214806138bd5750600354600160a060020a031633145b15156138c857600080fd5b600160a060020a03811615156138dd57600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600060295482111561391357506001611414565b506000919050565b600160a060020a031660009081526015602052604090205460ff1690565b60275490565b60035460009081908190600160a060020a03163214806139695750600354600160a060020a031633145b151561397457600080fd5b5050600f546000190160005b600f54811015611c715783600160a060020a0316600e828154811015156139a357fe5b600091825260209091200154600160a060020a03161415613ada57600e8054829081106139cc57fe5b60009182526020909120018054600160a060020a0319169055808214613a7157600e8054839081106139fa57fe5b600091825260209091200154600e8054600160a060020a039092169183908110613a2057fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600e805483908110613a5757fe5b60009182526020909120018054600160a060020a03191690555b600f829055600160a060020a0384166000818152601060209081526040918290208054600160a060020a0319169055815192835290517fd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e29281900390910190a160019250611c76565b600101613980565b6012546000906119bd906301000000900460ff168484612840565b600080805b8360030154811015612ebf57613b3c8460020182815481101515613b2257fe5b600091825260209091200154600160a060020a0316612798565b1515613cc6577fa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260818560020183815481101515613b7557fe5b600091825260209182902001546040805192830193909352600160a060020a03168183015260608082526004908201527f6465616400000000000000000000000000000000000000000000000000000000608082015290519081900360a00190a160028401805482908110613be657fe5b60009182526020909120018054600160a060020a0319169055600384015460019290920191600019018114613cb557836002016001856003015403815481101515613c2d57fe5b600091825260209091200154600285018054600160a060020a039092169183908110613c5557fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550836002016001856003015403815481101515613c9b57fe5b60009182526020909120018054600160a060020a03191690555b600384018054600019019055613d5e565b7fa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260818560020183815481101515613cf957fe5b600091825260209182902001546040805192830193909352600160a060020a03168183015260608082526005908201527f616c697665000000000000000000000000000000000000000000000000000000608082015290519081900360a00190a16001015b613b02565b600080600080600080613d74614481565b6000806000613d8232611f8f565b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152329381019390935251929c5060009b50600160a060020a0316995089916363e6ffdd9160248082019260209290919082900301818f87803b158015613df157600080fd5b505af1158015613e05573d6000803e3d6000fd5b505050506040513d6020811015613e1b57600080fd5b8101908080519060200190929190505050965086955085600160a060020a0316637fb52f1a8f60000160009054906101000a900460ff168f60026040518463ffffffff1660e060020a028152600401808460ff1660ff16815260200183600160a060020a0316600160a060020a031681526020018260ff1660ff1681526020019350505050602060405180830381600087803b158015613eba57600080fd5b505af1158015613ece573d6000803e3d6000fd5b505050506040513d6020811015613ee457600080fd5b810190808051906020019092919050505098508d60010160008e600160a060020a0316600160a060020a0316815260200190815260200160002060009054906101000a900460ff169450600a8560ff16811515613f3d57fe5b0660ff90811680865260648783160681900382166020870181905287030381166040860152600093508b92508216158015613f7c57508980613f7c5750885b15613f8657600192505b60ff8b1615801590613f955750895b8015613fb7575060018460ff8e1660038110613fad57fe5b602002015160ff16145b15613fc55760019250600291505b60ff8b1615801590613fd45750885b8015613ff7575060028460ff8e1660038110613fec57fe5b602002015160ff1614155b156140055760019250600191505b60ff8b16158015906140145750895b801561401d5750885b1561402b5760019250600291505b82151561403757600080fd5b601360ff8d166003811061404757fe5b602081049091015460ff601f9092166101000a9004811683029085908e166003811061406f57fe5b60ff909216602092909202015283600260200201518460016020020151856000602002015101019050808e60010160008f600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508060ff166000141580156140ed575060ff8516155b156140fc576140fc8e8e6141c0565b60ff81161515614112576141108e8e614257565b505b60408051308152600160a060020a038f16602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a15050505050505050505050505050565b600160a060020a038216600090815260018401602052604081205460ff9081169060139084166003811061419c57fe5b60208104919091015460ff601f9092166101000a9004811691161015949350505050565b60028201546003830154101561421957808260020183600301548154811015156141e657fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555061424a565b60028201805460018101825560009182526020909120018054600160a060020a031916600160a060020a0383161790555b5060030180546001019055565b6000805b8360030154811015612f855782600160a060020a0316846002018281548110151561428257fe5b600091825260209091200154600160a060020a0316141561438a57600284018054829081106142ad57fe5b60009182526020909120018054600160a060020a03191690556003840154600019018114614375578360020160018560030154038154811015156142ed57fe5b600091825260209091200154600285018054600160a060020a03909216918390811061431557fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555083600201600185600301540381548110151561435b57fe5b60009182526020909120018054600160a060020a03191690555b60038401805460001901905560019150612ebf565b60010161425b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106143cb5780548555614407565b8280016001018555821561440757600052602060002091601f016020900482015b828111156144075782548255916001019190600101906143ec565b506119a092915061452b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061445457805160ff1916838001178555614407565b82800160010185558215614407579182015b82811115614407578251825591602001919060010190614466565b6060604051908101604052806003906020820280388339509192915050565b50805460018160011615610100020316600290046000825580601f106144c657506144e4565b601f0160209004906000526020600020908101906144e4919061452b565b50565b815481835581811115611c8a57600083815260209020611c8a918101908301614545565b815481835581811115611c8a57600083815260209020611c8a9181019083015b61137a91905b808211156119a05760008155600101614531565b61137a91905b808211156119a057600061455f82826144a0565b5060010161454b5600583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefada165627a7a7230582003e3afa77ccc2a499dd02c2abcb368b4c3eff59665898d90e6d2f1161910b5910029",
}

// BaseAccessWalletABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseAccessWalletMetaData.ABI instead.
var BaseAccessWalletABI = BaseAccessWalletMetaData.ABI

// Deprecated: Use BaseAccessWalletMetaData.Sigs instead.
// BaseAccessWalletFuncSigs maps the 4-byte function signature to its string representation.
var BaseAccessWalletFuncSigs = BaseAccessWalletMetaData.Sigs

// BaseAccessWalletBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseAccessWalletMetaData.Bin instead.
var BaseAccessWalletBin = BaseAccessWalletMetaData.Bin

// DeployBaseAccessWallet deploys a new Ethereum contract, binding an instance of BaseAccessWallet to it.
func DeployBaseAccessWallet(auth *bind.TransactOpts, backend bind.ContractBackend, content_space common.Address) (common.Address, *types.Transaction, *BaseAccessWallet, error) {
	parsed, err := ParsedABI(K_BaseAccessWallet)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseAccessWalletBin), backend, content_space)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseAccessWallet{BaseAccessWalletCaller: BaseAccessWalletCaller{contract: contract}, BaseAccessWalletTransactor: BaseAccessWalletTransactor{contract: contract}, BaseAccessWalletFilterer: BaseAccessWalletFilterer{contract: contract}}, nil
}

// BaseAccessWallet is an auto generated Go binding around an Ethereum contract.
type BaseAccessWallet struct {
	BaseAccessWalletCaller     // Read-only binding to the contract
	BaseAccessWalletTransactor // Write-only binding to the contract
	BaseAccessWalletFilterer   // Log filterer for contract events
}

// BaseAccessWalletCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseAccessWalletCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseAccessWalletTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseAccessWalletFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseAccessWallet creates a new instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWallet(address common.Address, backend bind.ContractBackend) (*BaseAccessWallet, error) {
	contract, err := bindBaseAccessWallet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWallet{BaseAccessWalletCaller: BaseAccessWalletCaller{contract: contract}, BaseAccessWalletTransactor: BaseAccessWalletTransactor{contract: contract}, BaseAccessWalletFilterer: BaseAccessWalletFilterer{contract: contract}}, nil
}

// NewBaseAccessWalletCaller creates a new read-only instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWalletCaller(address common.Address, caller bind.ContractCaller) (*BaseAccessWalletCaller, error) {
	contract, err := bindBaseAccessWallet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletCaller{contract: contract}, nil
}

// NewBaseAccessWalletTransactor creates a new write-only instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWalletTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseAccessWalletTransactor, error) {
	contract, err := bindBaseAccessWallet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletTransactor{contract: contract}, nil
}

// NewBaseAccessWalletFilterer creates a new log filterer instance of BaseAccessWallet, bound to a specific deployed contract.
func NewBaseAccessWalletFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseAccessWalletFilterer, error) {
	contract, err := bindBaseAccessWallet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFilterer{contract: contract}, nil
}

// bindBaseAccessWallet binds a generic wrapper to an already deployed contract.
func bindBaseAccessWallet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseAccessWallet)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ACCESSCONFIRMED is a free data retrieval call binding the contract method 0x18689733.
//
// Solidity: function ACCESS_CONFIRMED() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) ACCESSCONFIRMED(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "ACCESS_CONFIRMED")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ACCESSNONE is a free data retrieval call binding the contract method 0x8232f3f1.
//
// Solidity: function ACCESS_NONE() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) ACCESSNONE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "ACCESS_NONE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ACCESSTENTATIVE is a free data retrieval call binding the contract method 0x479a0c51.
//
// Solidity: function ACCESS_TENTATIVE() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) ACCESSTENTATIVE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "ACCESS_TENTATIVE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYCONTENTOBJECT is a free data retrieval call binding the contract method 0x091600e6.
//
// Solidity: function CATEGORY_CONTENT_OBJECT() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYCONTENTOBJECT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "CATEGORY_CONTENT_OBJECT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYCONTENTTYPE is a free data retrieval call binding the contract method 0x68a0469a.
//
// Solidity: function CATEGORY_CONTENT_TYPE() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYCONTENTTYPE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "CATEGORY_CONTENT_TYPE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYCONTRACT is a free data retrieval call binding the contract method 0x6373a411.
//
// Solidity: function CATEGORY_CONTRACT() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYCONTRACT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "CATEGORY_CONTRACT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYGROUP is a free data retrieval call binding the contract method 0x12915a30.
//
// Solidity: function CATEGORY_GROUP() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYGROUP(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "CATEGORY_GROUP")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CATEGORYLIBRARY is a free data retrieval call binding the contract method 0x16aed232.
//
// Solidity: function CATEGORY_LIBRARY() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) CATEGORYLIBRARY(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "CATEGORY_LIBRARY")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TYPEACCESS is a free data retrieval call binding the contract method 0xd1aeb651.
//
// Solidity: function TYPE_ACCESS() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) TYPEACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "TYPE_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TYPEEDIT is a free data retrieval call binding the contract method 0x5d97b6c2.
//
// Solidity: function TYPE_EDIT() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) TYPEEDIT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "TYPE_EDIT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// TYPESEE is a free data retrieval call binding the contract method 0x96eba03d.
//
// Solidity: function TYPE_SEE() view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) TYPESEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "TYPE_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// AccessCompleteMsg is a free data retrieval call binding the contract method 0x97510671.
//
// Solidity: function accessCompleteMsg(address content_address, uint256 request_ID, uint256 score_pct, bytes32 ml_out_hash) pure returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletCaller) AccessCompleteMsg(opts *bind.CallOpts, content_address common.Address, request_ID *big.Int, score_pct *big.Int, ml_out_hash [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "accessCompleteMsg", content_address, request_ID, score_pct, ml_out_hash)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AccessGroups is a free data retrieval call binding the contract method 0x30e66949.
//
// Solidity: function accessGroups() view returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) AccessGroups(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "accessGroups")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// AccessRequestMsg is a free data retrieval call binding the contract method 0x957a3aa4.
//
// Solidity: function accessRequestMsg(address content_address, uint8 level, string pke_requestor, string pke_AFGH, bytes32[] custom_values, address[] stakeholders) pure returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletCaller) AccessRequestMsg(opts *bind.CallOpts, content_address common.Address, level uint8, pke_requestor string, pke_AFGH string, custom_values [][32]byte, stakeholders []common.Address) ([32]byte, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "accessRequestMsg", content_address, level, pke_requestor, pke_AFGH, custom_values, stakeholders)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "addressKMS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "canCommit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "canConfirm")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "canContribute", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "canEdit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "canPublish", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CanReview(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "canReview", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckAccessGroupRights is a free data retrieval call binding the contract method 0x15c0bac1.
//
// Solidity: function checkAccessGroupRights(address group, uint8 access_type) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckAccessGroupRights(opts *bind.CallOpts, group common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "checkAccessGroupRights", group, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckContentObjectRights is a free data retrieval call binding the contract method 0x5faecb76.
//
// Solidity: function checkContentObjectRights(address obj, uint8 access_type) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckContentObjectRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "checkContentObjectRights", obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckContentTypeRights is a free data retrieval call binding the contract method 0xfe538c5a.
//
// Solidity: function checkContentTypeRights(address obj, uint8 access_type) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckContentTypeRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "checkContentTypeRights", obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckContractRights is a free data retrieval call binding the contract method 0xa864dfa5.
//
// Solidity: function checkContractRights(address obj, uint8 access_type) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckContractRights(opts *bind.CallOpts, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "checkContractRights", obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckDirectRights is a free data retrieval call binding the contract method 0xa00b38c4.
//
// Solidity: function checkDirectRights(uint8 index_type, address obj, uint8 access_type) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckDirectRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "checkDirectRights", index_type, obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckLibraryRights is a free data retrieval call binding the contract method 0x6813b6d1.
//
// Solidity: function checkLibraryRights(address lib, uint8 access_type) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckLibraryRights(opts *bind.CallOpts, lib common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "checkLibraryRights", lib, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckRights is a free data retrieval call binding the contract method 0x7fb52f1a.
//
// Solidity: function checkRights(uint8 index_type, address obj, uint8 access_type) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CheckRights(opts *bind.CallOpts, index_type uint8, obj common.Address, access_type uint8) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "checkRights", index_type, obj, access_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "commitPending")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentObjects is a free data retrieval call binding the contract method 0xa980892d.
//
// Solidity: function contentObjects() view returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentObjects(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "contentObjects")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "contentTypeContracts", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "contentTypes", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypes0 is a free data retrieval call binding the contract method 0x9f46133e.
//
// Solidity: function contentTypes() view returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypes0(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "contentTypes0")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() view returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "contentTypesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ContractExists is a free data retrieval call binding the contract method 0x7709bc78.
//
// Solidity: function contractExists(address addr) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ContractExists(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "contractExists", addr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Contracts is a free data retrieval call binding the contract method 0x6c0f79b6.
//
// Solidity: function contracts() view returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) Contracts(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "contracts")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() view returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "countVersionHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CurrentTimestamp is a free data retrieval call binding the contract method 0x1e2ff94f.
//
// Solidity: function currentTimestamp() view returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) CurrentTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "currentTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExecStatusBalanceFail is a free data retrieval call binding the contract method 0x9476c478.
//
// Solidity: function execStatusBalanceFail() view returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusBalanceFail(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "execStatusBalanceFail")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExecStatusNonceFail is a free data retrieval call binding the contract method 0x04f55daf.
//
// Solidity: function execStatusNonceFail() view returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusNonceFail(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "execStatusNonceFail")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExecStatusOk is a free data retrieval call binding the contract method 0x95ba60ba.
//
// Solidity: function execStatusOk() view returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusOk(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "execStatusOk")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExecStatusSendFail is a free data retrieval call binding the contract method 0x07a08237.
//
// Solidity: function execStatusSendFail() view returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusSendFail(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "execStatusSendFail")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExecStatusSigFail is a free data retrieval call binding the contract method 0xeb23b7aa.
//
// Solidity: function execStatusSigFail() view returns(int256)
func (_BaseAccessWallet *BaseAccessWalletCaller) ExecStatusSigFail(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "execStatusSigFail")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "findTypeByHash", typeHash)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAccessGroup is a free data retrieval call binding the contract method 0x2d474cbd.
//
// Solidity: function getAccessGroup(uint256 position) view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetAccessGroup(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getAccessGroup", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAccessGroupRights is a free data retrieval call binding the contract method 0x304f4a7b.
//
// Solidity: function getAccessGroupRights(address group) view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetAccessGroupRights(opts *bind.CallOpts, group common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getAccessGroupRights", group)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetAccessGroupsLength is a free data retrieval call binding the contract method 0x0dc10d3f.
//
// Solidity: function getAccessGroupsLength() view returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetAccessGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getAccessGroupsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetContentObject is a free data retrieval call binding the contract method 0xcf8a7503.
//
// Solidity: function getContentObject(uint256 position) view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentObject(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getContentObject", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContentObjectRights is a free data retrieval call binding the contract method 0x69881c0c.
//
// Solidity: function getContentObjectRights(address obj) view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentObjectRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getContentObjectRights", obj)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetContentObjectsLength is a free data retrieval call binding the contract method 0xebe9314e.
//
// Solidity: function getContentObjectsLength() view returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentObjectsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getContentObjectsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetContentType is a free data retrieval call binding the contract method 0xaa3f6952.
//
// Solidity: function getContentType(uint256 position) view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentType(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getContentType", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContentTypeRights is a free data retrieval call binding the contract method 0xa4081d62.
//
// Solidity: function getContentTypeRights(address obj) view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentTypeRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getContentTypeRights", obj)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetContentTypesLength is a free data retrieval call binding the contract method 0x5c1d3059.
//
// Solidity: function getContentTypesLength() view returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getContentTypesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetContract is a free data retrieval call binding the contract method 0x6ebc8c86.
//
// Solidity: function getContract(uint256 position) view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContract(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getContract", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetContractRights is a free data retrieval call binding the contract method 0x08d865d7.
//
// Solidity: function getContractRights(address obj) view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContractRights(opts *bind.CallOpts, obj common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getContractRights", obj)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetContractsLength is a free data retrieval call binding the contract method 0xfccc134f.
//
// Solidity: function getContractsLength() view returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetContractsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getContractsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLibrariesLength is a free data retrieval call binding the contract method 0xcb86806d.
//
// Solidity: function getLibrariesLength() view returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetLibrariesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getLibrariesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLibrary is a free data retrieval call binding the contract method 0xd15d62a7.
//
// Solidity: function getLibrary(uint256 position) view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetLibrary(opts *bind.CallOpts, position *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getLibrary", position)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLibraryRights is a free data retrieval call binding the contract method 0xfb52222c.
//
// Solidity: function getLibraryRights(address lib) view returns(uint8)
func (_BaseAccessWallet *BaseAccessWalletCaller) GetLibraryRights(opts *bind.CallOpts, lib common.Address) (uint8, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "getLibraryRights", lib)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address ) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) HasAccess(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "hasAccess", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasManagerAccess is a free data retrieval call binding the contract method 0x42e7ba7b.
//
// Solidity: function hasManagerAccess(address candidate) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) HasManagerAccess(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "hasManagerAccess", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Libraries is a free data retrieval call binding the contract method 0xc4b1978d.
//
// Solidity: function libraries() view returns(uint8 category, uint256 length)
func (_BaseAccessWallet *BaseAccessWalletCaller) Libraries(opts *bind.CallOpts) (struct {
	Category uint8
	Length   *big.Int
}, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "libraries")

	outstruct := new(struct {
		Category uint8
		Length   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Category = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() view returns(string)
func (_BaseAccessWallet *BaseAccessWalletCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "objectHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_BaseAccessWallet *BaseAccessWalletCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "parentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() view returns(string)
func (_BaseAccessWallet *BaseAccessWalletCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "pendingHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "requiresReview")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "validType", content_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ValidateTimestamp(opts *bind.CallOpts, _ts *big.Int) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "validateTimestamp", _ts)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) ValidateTransaction(opts *bind.CallOpts, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "validateTransaction", _v, _r, _s, _dest, _value, _ts)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseAccessWallet *BaseAccessWalletCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) view returns(string)
func (_BaseAccessWallet *BaseAccessWalletCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "versionHashes", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) view returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "versionTimestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) view returns(bool)
func (_BaseAccessWallet *BaseAccessWalletCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var out []interface{}
	err := _BaseAccessWallet.contract.Call(opts, &out, "whitelistedType", content_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) AccessRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "accessRequest")
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// CleanUpAccessGroups is a paid mutator transaction binding the contract method 0xd30f8cd0.
//
// Solidity: function cleanUpAccessGroups() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpAccessGroups(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpAccessGroups")
}

// CleanUpAll is a paid mutator transaction binding the contract method 0x2fa5c842.
//
// Solidity: function cleanUpAll() returns(uint256, uint256, uint256, uint256, uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpAll")
}

// CleanUpContentObjects is a paid mutator transaction binding the contract method 0x048bd529.
//
// Solidity: function cleanUpContentObjects() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpContentObjects(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpContentObjects")
}

// CleanUpContentTypes is a paid mutator transaction binding the contract method 0x85e0a200.
//
// Solidity: function cleanUpContentTypes() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpContentTypes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpContentTypes")
}

// CleanUpLibraries is a paid mutator transaction binding the contract method 0x92297d7b.
//
// Solidity: function cleanUpLibraries() returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) CleanUpLibraries(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "cleanUpLibraries")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "clearPending")
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "commit", _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() payable returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "confirmCommit")
}

// ContentAccessComplete is a paid mutator transaction binding the contract method 0x3abaae55.
//
// Solidity: function contentAccessComplete(address content_address, bytes , uint256 request_ID, uint256 score_pct, bytes32 ml_out_hash) payable returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) ContentAccessComplete(opts *bind.TransactOpts, content_address common.Address, arg1 []byte, request_ID *big.Int, score_pct *big.Int, ml_out_hash [32]byte) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "contentAccessComplete", content_address, arg1, request_ID, score_pct, ml_out_hash)
}

// ContentAccessRequest is a paid mutator transaction binding the contract method 0x0add6d2a.
//
// Solidity: function contentAccessRequest(address content_address, bytes , uint8 level, string pke_requestor, string pke_AFGH, bytes32[] custom_values, address[] stakeholders) returns(uint256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) ContentAccessRequest(opts *bind.TransactOpts, content_address common.Address, arg1 []byte, level uint8, pke_requestor string, pke_AFGH string, custom_values [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "contentAccessRequest", content_address, arg1, level, pke_requestor, pke_AFGH, custom_values, stakeholders)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseAccessWallet *BaseAccessWalletTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "deleteVersion", _versionHash)
}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) Execute(opts *bind.TransactOpts, _guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "execute", _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "kill")
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "publish", contentObj)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseAccessWallet *BaseAccessWalletTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "removeContentType", content_type)
}

// SetAccessGroupRights is a paid mutator transaction binding the contract method 0xf17bda91.
//
// Solidity: function setAccessGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetAccessGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setAccessGroupRights", group, access_type, access)
}

// SetAccessRights is a paid mutator transaction binding the contract method 0xb8ff1dba.
//
// Solidity: function setAccessRights() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetAccessRights(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setAccessRights")
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetContentObjectRights is a paid mutator transaction binding the contract method 0x3def5140.
//
// Solidity: function setContentObjectRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContentObjectRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContentObjectRights", obj, access_type, access)
}

// SetContentSpace is a paid mutator transaction binding the contract method 0x055af48f.
//
// Solidity: function setContentSpace(address content_space) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContentSpace(opts *bind.TransactOpts, content_space common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContentSpace", content_space)
}

// SetContentTypeRights is a paid mutator transaction binding the contract method 0x8635adb5.
//
// Solidity: function setContentTypeRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContentTypeRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContentTypeRights", obj, access_type, access)
}

// SetContractRights is a paid mutator transaction binding the contract method 0x224dcba0.
//
// Solidity: function setContractRights(address obj, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetContractRights(opts *bind.TransactOpts, obj common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setContractRights", obj, access_type, access)
}

// SetLibraryRights is a paid mutator transaction binding the contract method 0x7cbb7bf2.
//
// Solidity: function setLibraryRights(address lib, uint8 access_type, uint8 access) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) SetLibraryRights(opts *bind.TransactOpts, lib common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "setLibraryRights", lib, access_type, access)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "transferOwnership", newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.Transact(opts, "updateRequest")
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseAccessWallet *BaseAccessWalletTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseAccessWallet.contract.RawTransact(opts, calldata)
}

// BaseAccessWalletAccessRequestIterator is returned from FilterAccessRequest and is used to iterate over the raw logs and unpacked data for AccessRequest events raised by the BaseAccessWallet contract.
type BaseAccessWalletAccessRequestIterator struct {
	Event *BaseAccessWalletAccessRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletAccessRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletAccessRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletAccessRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletAccessRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletAccessRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletAccessRequest represents a AccessRequest event raised by the BaseAccessWallet contract.
type BaseAccessWalletAccessRequest struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAccessRequest is a free log retrieval operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterAccessRequest(opts *bind.FilterOpts) (*BaseAccessWalletAccessRequestIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletAccessRequestIterator{contract: _BaseAccessWallet.contract, event: "AccessRequest", logs: logs, sub: sub}, nil
}

// WatchAccessRequest is a free log subscription operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchAccessRequest(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletAccessRequest) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletAccessRequest)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "AccessRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequest is a log parse operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseAccessRequest(log types.Log) (*BaseAccessWalletAccessRequest, error) {
	event := new(BaseAccessWalletAccessRequest)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "AccessRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseAccessWallet contract.
type BaseAccessWalletCommitPendingIterator struct {
	Event *BaseAccessWalletCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletCommitPending represents a CommitPending event raised by the BaseAccessWallet contract.
type BaseAccessWalletCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseAccessWalletCommitPendingIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletCommitPendingIterator{contract: _BaseAccessWallet.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletCommitPending)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseCommitPending(log types.Log) (*BaseAccessWalletCommitPending, error) {
	event := new(BaseAccessWalletCommitPending)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeAddedIterator struct {
	Event *BaseAccessWalletContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletContentTypeAdded represents a ContentTypeAdded event raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*BaseAccessWalletContentTypeAddedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletContentTypeAddedIterator{contract: _BaseAccessWallet.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletContentTypeAdded)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseContentTypeAdded(log types.Log) (*BaseAccessWalletContentTypeAdded, error) {
	event := new(BaseAccessWalletContentTypeAdded)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeRemovedIterator struct {
	Event *BaseAccessWalletContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletContentTypeRemoved represents a ContentTypeRemoved event raised by the BaseAccessWallet contract.
type BaseAccessWalletContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*BaseAccessWalletContentTypeRemovedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletContentTypeRemovedIterator{contract: _BaseAccessWallet.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletContentTypeRemoved)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseContentTypeRemoved(log types.Log) (*BaseAccessWalletContentTypeRemoved, error) {
	event := new(BaseAccessWalletContentTypeRemoved)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletExecStatusIterator is returned from FilterExecStatus and is used to iterate over the raw logs and unpacked data for ExecStatus events raised by the BaseAccessWallet contract.
type BaseAccessWalletExecStatusIterator struct {
	Event *BaseAccessWalletExecStatus // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletExecStatusIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletExecStatus)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletExecStatus)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletExecStatusIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletExecStatusIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletExecStatus represents a ExecStatus event raised by the BaseAccessWallet contract.
type BaseAccessWalletExecStatus struct {
	Guarantor common.Address
	Code      *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterExecStatus is a free log retrieval operation binding the contract event 0x583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefad.
//
// Solidity: event ExecStatus(address guarantor, int256 code)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterExecStatus(opts *bind.FilterOpts) (*BaseAccessWalletExecStatusIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "ExecStatus")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletExecStatusIterator{contract: _BaseAccessWallet.contract, event: "ExecStatus", logs: logs, sub: sub}, nil
}

// WatchExecStatus is a free log subscription operation binding the contract event 0x583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefad.
//
// Solidity: event ExecStatus(address guarantor, int256 code)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchExecStatus(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletExecStatus) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "ExecStatus")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletExecStatus)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "ExecStatus", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecStatus is a log parse operation binding the contract event 0x583d8312ef7016406c7ea8ba9796b9e55ac1fdc22455754cbc93869509faefad.
//
// Solidity: event ExecStatus(address guarantor, int256 code)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseExecStatus(log types.Log) (*BaseAccessWalletExecStatus, error) {
	event := new(BaseAccessWalletExecStatus)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "ExecStatus", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletRightsChangedIterator is returned from FilterRightsChanged and is used to iterate over the raw logs and unpacked data for RightsChanged events raised by the BaseAccessWallet contract.
type BaseAccessWalletRightsChangedIterator struct {
	Event *BaseAccessWalletRightsChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletRightsChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletRightsChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletRightsChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletRightsChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletRightsChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletRightsChanged represents a RightsChanged event raised by the BaseAccessWallet contract.
type BaseAccessWalletRightsChanged struct {
	Principal common.Address
	Entity    common.Address
	Aggregate uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRightsChanged is a free log retrieval operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterRightsChanged(opts *bind.FilterOpts) (*BaseAccessWalletRightsChangedIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletRightsChangedIterator{contract: _BaseAccessWallet.contract, event: "RightsChanged", logs: logs, sub: sub}, nil
}

// WatchRightsChanged is a free log subscription operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchRightsChanged(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletRightsChanged) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "RightsChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletRightsChanged)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "RightsChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRightsChanged is a log parse operation binding the contract event 0x23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff4.
//
// Solidity: event RightsChanged(address principal, address entity, uint8 aggregate)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseRightsChanged(log types.Log) (*BaseAccessWalletRightsChanged, error) {
	event := new(BaseAccessWalletRightsChanged)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "RightsChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseAccessWallet contract.
type BaseAccessWalletUpdateRequestIterator struct {
	Event *BaseAccessWalletUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletUpdateRequest represents a UpdateRequest event raised by the BaseAccessWallet contract.
type BaseAccessWalletUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseAccessWalletUpdateRequestIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletUpdateRequestIterator{contract: _BaseAccessWallet.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletUpdateRequest)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseUpdateRequest(log types.Log) (*BaseAccessWalletUpdateRequest, error) {
	event := new(BaseAccessWalletUpdateRequest)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionConfirmIterator struct {
	Event *BaseAccessWalletVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletVersionConfirm represents a VersionConfirm event raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionConfirm struct {
	SpaceAddress common.Address
	ObjectHash   string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseAccessWalletVersionConfirmIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletVersionConfirmIterator{contract: _BaseAccessWallet.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletVersionConfirm)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseVersionConfirm(log types.Log) (*BaseAccessWalletVersionConfirm, error) {
	event := new(BaseAccessWalletVersionConfirm)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionDeleteIterator struct {
	Event *BaseAccessWalletVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletVersionDelete represents a VersionDelete event raised by the BaseAccessWallet contract.
type BaseAccessWalletVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseAccessWalletVersionDeleteIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletVersionDeleteIterator{contract: _BaseAccessWallet.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletVersionDelete)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseVersionDelete(log types.Log) (*BaseAccessWalletVersionDelete, error) {
	event := new(BaseAccessWalletVersionDelete)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletDbgAddressIterator is returned from FilterDbgAddress and is used to iterate over the raw logs and unpacked data for DbgAddress events raised by the BaseAccessWallet contract.
type BaseAccessWalletDbgAddressIterator struct {
	Event *BaseAccessWalletDbgAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseAccessWalletDbgAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseAccessWalletDbgAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseAccessWalletDbgAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseAccessWalletDbgAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseAccessWalletDbgAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseAccessWalletDbgAddress represents a DbgAddress event raised by the BaseAccessWallet contract.
type BaseAccessWalletDbgAddress struct {
	Label string
	Index *big.Int
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDbgAddress is a free log retrieval operation binding the contract event 0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260.
//
// Solidity: event dbgAddress(string label, uint256 index, address a)
func (_BaseAccessWallet *BaseAccessWalletFilterer) FilterDbgAddress(opts *bind.FilterOpts) (*BaseAccessWalletDbgAddressIterator, error) {

	logs, sub, err := _BaseAccessWallet.contract.FilterLogs(opts, "dbgAddress")
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletDbgAddressIterator{contract: _BaseAccessWallet.contract, event: "dbgAddress", logs: logs, sub: sub}, nil
}

// WatchDbgAddress is a free log subscription operation binding the contract event 0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260.
//
// Solidity: event dbgAddress(string label, uint256 index, address a)
func (_BaseAccessWallet *BaseAccessWalletFilterer) WatchDbgAddress(opts *bind.WatchOpts, sink chan<- *BaseAccessWalletDbgAddress) (event.Subscription, error) {

	logs, sub, err := _BaseAccessWallet.contract.WatchLogs(opts, "dbgAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseAccessWalletDbgAddress)
				if err := _BaseAccessWallet.contract.UnpackLog(event, "dbgAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDbgAddress is a log parse operation binding the contract event 0xa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b260.
//
// Solidity: event dbgAddress(string label, uint256 index, address a)
func (_BaseAccessWallet *BaseAccessWalletFilterer) ParseDbgAddress(log types.Log) (*BaseAccessWalletDbgAddress, error) {
	event := new(BaseAccessWalletDbgAddress)
	if err := _BaseAccessWallet.contract.UnpackLog(event, "dbgAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseAccessWalletFactoryMetaData contains all meta data concerning the BaseAccessWalletFactory contract.
var BaseAccessWalletFactoryMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createAccessWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
	Sigs: map[string]string{
		"af570c04": "contentSpace()",
		"7708bc41": "createAccessWallet()",
		"02d05d3f": "creator()",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
	},
	Bin: "",
}

// BaseAccessWalletFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseAccessWalletFactoryMetaData.ABI instead.
var BaseAccessWalletFactoryABI = BaseAccessWalletFactoryMetaData.ABI

// Deprecated: Use BaseAccessWalletFactoryMetaData.Sigs instead.
// BaseAccessWalletFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseAccessWalletFactoryFuncSigs = BaseAccessWalletFactoryMetaData.Sigs

// BaseAccessWalletFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseAccessWalletFactoryMetaData.Bin instead.
var BaseAccessWalletFactoryBin = BaseAccessWalletFactoryMetaData.Bin

// DeployBaseAccessWalletFactory deploys a new Ethereum contract, binding an instance of BaseAccessWalletFactory to it.
func DeployBaseAccessWalletFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseAccessWalletFactory, error) {
	parsed, err := ParsedABI(K_BaseAccessWalletFactory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseAccessWalletFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseAccessWalletFactory{BaseAccessWalletFactoryCaller: BaseAccessWalletFactoryCaller{contract: contract}, BaseAccessWalletFactoryTransactor: BaseAccessWalletFactoryTransactor{contract: contract}, BaseAccessWalletFactoryFilterer: BaseAccessWalletFactoryFilterer{contract: contract}}, nil
}

// BaseAccessWalletFactory is an auto generated Go binding around an Ethereum contract.
type BaseAccessWalletFactory struct {
	BaseAccessWalletFactoryCaller     // Read-only binding to the contract
	BaseAccessWalletFactoryTransactor // Write-only binding to the contract
	BaseAccessWalletFactoryFilterer   // Log filterer for contract events
}

// BaseAccessWalletFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseAccessWalletFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseAccessWalletFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseAccessWalletFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseAccessWalletFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseAccessWalletFactory creates a new instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactory(address common.Address, backend bind.ContractBackend) (*BaseAccessWalletFactory, error) {
	contract, err := bindBaseAccessWalletFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactory{BaseAccessWalletFactoryCaller: BaseAccessWalletFactoryCaller{contract: contract}, BaseAccessWalletFactoryTransactor: BaseAccessWalletFactoryTransactor{contract: contract}, BaseAccessWalletFactoryFilterer: BaseAccessWalletFactoryFilterer{contract: contract}}, nil
}

// NewBaseAccessWalletFactoryCaller creates a new read-only instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseAccessWalletFactoryCaller, error) {
	contract, err := bindBaseAccessWalletFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactoryCaller{contract: contract}, nil
}

// NewBaseAccessWalletFactoryTransactor creates a new write-only instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseAccessWalletFactoryTransactor, error) {
	contract, err := bindBaseAccessWalletFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactoryTransactor{contract: contract}, nil
}

// NewBaseAccessWalletFactoryFilterer creates a new log filterer instance of BaseAccessWalletFactory, bound to a specific deployed contract.
func NewBaseAccessWalletFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseAccessWalletFactoryFilterer, error) {
	contract, err := bindBaseAccessWalletFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseAccessWalletFactoryFilterer{contract: contract}, nil
}

// bindBaseAccessWalletFactory binds a generic wrapper to an already deployed contract.
func bindBaseAccessWalletFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseAccessWalletFactory)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWalletFactory.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWalletFactory.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseAccessWalletFactory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseAccessWalletFactory.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) CreateAccessWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "createAccessWallet")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "kill")
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseAccessWalletFactory *BaseAccessWalletFactoryTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseAccessWalletFactory.contract.RawTransact(opts, calldata)
}

// BaseContentMetaData contains all meta data concerning the BaseContent contract.
var BaseContentMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"STATUS_PUBLISHED\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"request_ID\",\"type\":\"uint256\"},{\"name\":\"payee\",\"type\":\"address\"},{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"processRequestPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestMap\",\"outputs\":[{\"name\":\"originator\",\"type\":\"address\"},{\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"int8\"},{\"name\":\"settled\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"statusCode\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"visibility\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"status_code\",\"type\":\"int256\"}],\"name\":\"statusCodeDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"custom_values\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"getAccessInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"custom_values\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"getCustomInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATUS_DRAFT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status_code\",\"type\":\"int256\"}],\"name\":\"setStatusCode\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"request_ID\",\"type\":\"uint256\"},{\"name\":\"score_pct\",\"type\":\"uint256\"},{\"name\":\"ml_out_hash\",\"type\":\"bytes32\"}],\"name\":\"accessComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessCharge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status_code\",\"type\":\"int256\"}],\"name\":\"updateStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contentType\",\"type\":\"address\"},{\"name\":\"_addressKMS\",\"type\":\"address\"},{\"name\":\"_contentContractAddress\",\"type\":\"address\"},{\"name\":\"_accessCharge\",\"type\":\"uint256\"},{\"name\":\"_statusCode\",\"type\":\"int256\"},{\"name\":\"_requestID\",\"type\":\"uint256\"},{\"name\":\"_visibility\",\"type\":\"uint8\"},{\"name\":\"_objectHash\",\"type\":\"string\"},{\"name\":\"_versionHashes\",\"type\":\"string\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"pke_requestor\",\"type\":\"string\"},{\"name\":\"pke_AFGH\",\"type\":\"string\"},{\"name\":\"custom_values\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"accessRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"prefix\",\"type\":\"bytes\"}],\"name\":\"getKMSInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"visibility_code\",\"type\":\"uint8\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STATUS_REVIEW\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setContentContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"request_ID\",\"type\":\"uint256\"},{\"name\":\"access_granted\",\"type\":\"bool\"},{\"name\":\"re_key\",\"type\":\"string\"},{\"name\":\"encrypted_AES_key\",\"type\":\"string\"}],\"name\":\"accessGrant\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CAN_EDIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"charge\",\"type\":\"uint256\"}],\"name\":\"setAccessCharge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"statusDescription\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"},{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"containingLibrary\",\"type\":\"address\"}],\"name\":\"ContentObjectCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContractAddress\",\"type\":\"address\"}],\"name\":\"SetContentType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"contentHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pkeRequestor\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"pkeAFGH\",\"type\":\"string\"}],\"name\":\"AccessRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"access_granted\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"reKey\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"encryptedAESKey\",\"type\":\"string\"}],\"name\":\"AccessGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customValue\",\"type\":\"bytes32\"}],\"name\":\"AccessRequestValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stakeholder\",\"type\":\"address\"}],\"name\":\"AccessRequestStakeholder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"scorePct\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customContractResult\",\"type\":\"bool\"}],\"name\":\"AccessComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentContractAddress\",\"type\":\"address\"}],\"name\":\"SetContentContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accessCharge\",\"type\":\"uint256\"}],\"name\":\"SetAccessCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"accessCharge\",\"type\":\"uint256\"}],\"name\":\"GetAccessCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accessCharge\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountProvided\",\"type\":\"uint256\"}],\"name\":\"InsufficientFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"statusCode\",\"type\":\"int256\"}],\"name\":\"SetStatusCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestStatus\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"statusCode\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"Publish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"custom_contract\",\"type\":\"address\"}],\"name\":\"InvokeCustomPreHook\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"custom_contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"ReturnCustomHook\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"custom_contract\",\"type\":\"address\"}],\"name\":\"InvokeCustomPostHook\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"charged\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"received\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"converted\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"enough\",\"type\":\"bool\"}],\"name\":\"DbgAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"code\",\"type\":\"uint8\"}],\"name\":\"DbgAccessCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"97ac4fd2": "CAN_ACCESS()",
		"ef1d7dc2": "CAN_EDIT()",
		"100508a2": "CAN_SEE()",
		"4dd70788": "STATUS_DRAFT()",
		"0017de98": "STATUS_PUBLISHED()",
		"d810f8c8": "STATUS_REVIEW()",
		"64ade32b": "accessCharge()",
		"5cc4aa9b": "accessComplete(uint256,uint256,bytes32)",
		"ee56d767": "accessGrant(uint256,bool,string,string)",
		"a1ff106e": "accessRequest(uint8,string,string,bytes32[],address[])",
		"32eaf21b": "addressKMS()",
		"6e375427": "canCommit()",
		"14cfabb3": "canConfirm()",
		"81beeb64": "canEdit()",
		"cbcd4461": "canPublish()",
		"5f6a1301": "clearPending()",
		"9867db74": "commit(string)",
		"375a6e7c": "commitPending()",
		"446e8826": "confirmCommit()",
		"2310167f": "contentContractAddress()",
		"af570c04": "contentSpace()",
		"36ebffca": "contentType()",
		"331b86c0": "countVersionHashes()",
		"02d05d3f": "creator()",
		"e1a70717": "deleteVersion(string)",
		"38d0f504": "getAccessInfo(uint8,bytes32[],address[])",
		"3ba58afb": "getCustomInfo(uint8,bytes32[],address[])",
		"a8d4160e": "getKMSInfo(bytes)",
		"41c0e1b5": "kill()",
		"b816f513": "libraryAddress()",
		"8c8c61e9": "migrate(address,address,address,uint256,int256,uint256,uint8,string,string)",
		"e02dd9c2": "objectHash()",
		"8da5cb5b": "owner()",
		"00821de3": "parentAddress()",
		"628449fd": "pendingHash()",
		"0c6d3f93": "processRequestPayment(uint256,address,string,uint256)",
		"075d4782": "publish()",
		"8f779201": "requestID()",
		"1a735f18": "requestMap(uint256)",
		"f4d9bae8": "setAccessCharge(uint256)",
		"c9e8e72d": "setAddressKMS(address)",
		"e5385303": "setContentContractAddress(address)",
		"22e564eb": "setGroupRights(address,uint8,uint8)",
		"0fe1b5a2": "setRights(address,uint8,uint8)",
		"5267db44": "setStatusCode(int256)",
		"aa024e8b": "setVisibility(uint8)",
		"27c1c21d": "statusCode()",
		"38864284": "statusCodeDescription(int256)",
		"f81ab0ae": "statusDescription()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"c287e0ed": "updateRequest()",
		"8280dd8f": "updateStatus(int256)",
		"54fd4d50": "version()",
		"7ca8f618": "versionHashes(uint256)",
		"7886f747": "versionTimestamp(uint256)",
		"29adec14": "visibility()",
	},
	Bin: "",
}

// BaseContentABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseContentMetaData.ABI instead.
var BaseContentABI = BaseContentMetaData.ABI

// Deprecated: Use BaseContentMetaData.Sigs instead.
// BaseContentFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentFuncSigs = BaseContentMetaData.Sigs

// BaseContentBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseContentMetaData.Bin instead.
var BaseContentBin = BaseContentMetaData.Bin

// DeployBaseContent deploys a new Ethereum contract, binding an instance of BaseContent to it.
func DeployBaseContent(auth *bind.TransactOpts, backend bind.ContractBackend, content_space common.Address, lib common.Address, content_type common.Address) (common.Address, *types.Transaction, *BaseContent, error) {
	parsed, err := ParsedABI(K_BaseContent)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseContentBin), backend, content_space, lib, content_type)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContent{BaseContentCaller: BaseContentCaller{contract: contract}, BaseContentTransactor: BaseContentTransactor{contract: contract}, BaseContentFilterer: BaseContentFilterer{contract: contract}}, nil
}

// BaseContent is an auto generated Go binding around an Ethereum contract.
type BaseContent struct {
	BaseContentCaller     // Read-only binding to the contract
	BaseContentTransactor // Write-only binding to the contract
	BaseContentFilterer   // Log filterer for contract events
}

// BaseContentCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseContent creates a new instance of BaseContent, bound to a specific deployed contract.
func NewBaseContent(address common.Address, backend bind.ContractBackend) (*BaseContent, error) {
	contract, err := bindBaseContent(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContent{BaseContentCaller: BaseContentCaller{contract: contract}, BaseContentTransactor: BaseContentTransactor{contract: contract}, BaseContentFilterer: BaseContentFilterer{contract: contract}}, nil
}

// NewBaseContentCaller creates a new read-only instance of BaseContent, bound to a specific deployed contract.
func NewBaseContentCaller(address common.Address, caller bind.ContractCaller) (*BaseContentCaller, error) {
	contract, err := bindBaseContent(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentCaller{contract: contract}, nil
}

// NewBaseContentTransactor creates a new write-only instance of BaseContent, bound to a specific deployed contract.
func NewBaseContentTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentTransactor, error) {
	contract, err := bindBaseContent(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentTransactor{contract: contract}, nil
}

// NewBaseContentFilterer creates a new log filterer instance of BaseContent, bound to a specific deployed contract.
func NewBaseContentFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentFilterer, error) {
	contract, err := bindBaseContent(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentFilterer{contract: contract}, nil
}

// bindBaseContent binds a generic wrapper to an already deployed contract.
func bindBaseContent(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseContent)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// CANACCESS is a free data retrieval call binding the contract method 0x97ac4fd2.
//
// Solidity: function CAN_ACCESS() view returns(uint8)
func (_BaseContent *BaseContentCaller) CANACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "CAN_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANEDIT is a free data retrieval call binding the contract method 0xef1d7dc2.
//
// Solidity: function CAN_EDIT() view returns(uint8)
func (_BaseContent *BaseContentCaller) CANEDIT(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "CAN_EDIT")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CANSEE is a free data retrieval call binding the contract method 0x100508a2.
//
// Solidity: function CAN_SEE() view returns(uint8)
func (_BaseContent *BaseContentCaller) CANSEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "CAN_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// STATUSDRAFT is a free data retrieval call binding the contract method 0x4dd70788.
//
// Solidity: function STATUS_DRAFT() view returns(bytes32)
func (_BaseContent *BaseContentCaller) STATUSDRAFT(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "STATUS_DRAFT")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// STATUSPUBLISHED is a free data retrieval call binding the contract method 0x0017de98.
//
// Solidity: function STATUS_PUBLISHED() view returns(bytes32)
func (_BaseContent *BaseContentCaller) STATUSPUBLISHED(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "STATUS_PUBLISHED")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// STATUSREVIEW is a free data retrieval call binding the contract method 0xd810f8c8.
//
// Solidity: function STATUS_REVIEW() view returns(bytes32)
func (_BaseContent *BaseContentCaller) STATUSREVIEW(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "STATUS_REVIEW")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AccessCharge is a free data retrieval call binding the contract method 0x64ade32b.
//
// Solidity: function accessCharge() view returns(uint256)
func (_BaseContent *BaseContentCaller) AccessCharge(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "accessCharge")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() view returns(address)
func (_BaseContent *BaseContentCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "addressKMS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() view returns(bool)
func (_BaseContent *BaseContentCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "canCommit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() view returns(bool)
func (_BaseContent *BaseContentCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "canConfirm")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() view returns(bool)
func (_BaseContent *BaseContentCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "canEdit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanPublish is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() view returns(bool)
func (_BaseContent *BaseContentCaller) CanPublish(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "canPublish")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() view returns(bool)
func (_BaseContent *BaseContentCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "commitPending")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentContractAddress is a free data retrieval call binding the contract method 0x2310167f.
//
// Solidity: function contentContractAddress() view returns(address)
func (_BaseContent *BaseContentCaller) ContentContractAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "contentContractAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseContent *BaseContentCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentType is a free data retrieval call binding the contract method 0x36ebffca.
//
// Solidity: function contentType() view returns(address)
func (_BaseContent *BaseContentCaller) ContentType(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "contentType")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() view returns(uint256)
func (_BaseContent *BaseContentCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "countVersionHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseContent *BaseContentCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAccessInfo is a free data retrieval call binding the contract method 0x38d0f504.
//
// Solidity: function getAccessInfo(uint8 level, bytes32[] custom_values, address[] stakeholders) view returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCaller) GetAccessInfo(opts *bind.CallOpts, level uint8, custom_values [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "getAccessInfo", level, custom_values, stakeholders)

	if err != nil {
		return *new(uint8), *new(uint8), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetCustomInfo is a free data retrieval call binding the contract method 0x3ba58afb.
//
// Solidity: function getCustomInfo(uint8 level, bytes32[] custom_values, address[] stakeholders) view returns(uint8, uint8, uint256)
func (_BaseContent *BaseContentCaller) GetCustomInfo(opts *bind.CallOpts, level uint8, custom_values [][32]byte, stakeholders []common.Address) (uint8, uint8, *big.Int, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "getCustomInfo", level, custom_values, stakeholders)

	if err != nil {
		return *new(uint8), *new(uint8), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetKMSInfo is a free data retrieval call binding the contract method 0xa8d4160e.
//
// Solidity: function getKMSInfo(bytes prefix) view returns(string, string)
func (_BaseContent *BaseContentCaller) GetKMSInfo(opts *bind.CallOpts, prefix []byte) (string, string, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "getKMSInfo", prefix)

	if err != nil {
		return *new(string), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// LibraryAddress is a free data retrieval call binding the contract method 0xb816f513.
//
// Solidity: function libraryAddress() view returns(address)
func (_BaseContent *BaseContentCaller) LibraryAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "libraryAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() view returns(string)
func (_BaseContent *BaseContentCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "objectHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseContent *BaseContentCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_BaseContent *BaseContentCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "parentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() view returns(string)
func (_BaseContent *BaseContentCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "pendingHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RequestID is a free data retrieval call binding the contract method 0x8f779201.
//
// Solidity: function requestID() view returns(uint256)
func (_BaseContent *BaseContentCaller) RequestID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "requestID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequestMap is a free data retrieval call binding the contract method 0x1a735f18.
//
// Solidity: function requestMap(uint256 ) view returns(address originator, uint256 amountPaid, int8 status, uint256 settled)
func (_BaseContent *BaseContentCaller) RequestMap(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Originator common.Address
	AmountPaid *big.Int
	Status     int8
	Settled    *big.Int
}, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "requestMap", arg0)

	outstruct := new(struct {
		Originator common.Address
		AmountPaid *big.Int
		Status     int8
		Settled    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Originator = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.AmountPaid = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Status = *abi.ConvertType(out[2], new(int8)).(*int8)
	outstruct.Settled = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// StatusCode is a free data retrieval call binding the contract method 0x27c1c21d.
//
// Solidity: function statusCode() view returns(int256)
func (_BaseContent *BaseContentCaller) StatusCode(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "statusCode")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StatusCodeDescription is a free data retrieval call binding the contract method 0x38864284.
//
// Solidity: function statusCodeDescription(int256 status_code) view returns(bytes32)
func (_BaseContent *BaseContentCaller) StatusCodeDescription(opts *bind.CallOpts, status_code *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "statusCodeDescription", status_code)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StatusDescription is a free data retrieval call binding the contract method 0xf81ab0ae.
//
// Solidity: function statusDescription() view returns(bytes32)
func (_BaseContent *BaseContentCaller) StatusDescription(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "statusDescription")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseContent *BaseContentCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) view returns(string)
func (_BaseContent *BaseContentCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "versionHashes", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) view returns(uint256)
func (_BaseContent *BaseContentCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "versionTimestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Visibility is a free data retrieval call binding the contract method 0x29adec14.
//
// Solidity: function visibility() view returns(uint8)
func (_BaseContent *BaseContentCaller) Visibility(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BaseContent.contract.Call(opts, &out, "visibility")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// AccessComplete is a paid mutator transaction binding the contract method 0x5cc4aa9b.
//
// Solidity: function accessComplete(uint256 request_ID, uint256 score_pct, bytes32 ml_out_hash) payable returns(bool)
func (_BaseContent *BaseContentTransactor) AccessComplete(opts *bind.TransactOpts, request_ID *big.Int, score_pct *big.Int, ml_out_hash [32]byte) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessComplete", request_ID, score_pct, ml_out_hash)
}

// AccessGrant is a paid mutator transaction binding the contract method 0xee56d767.
//
// Solidity: function accessGrant(uint256 request_ID, bool access_granted, string re_key, string encrypted_AES_key) returns(bool)
func (_BaseContent *BaseContentTransactor) AccessGrant(opts *bind.TransactOpts, request_ID *big.Int, access_granted bool, re_key string, encrypted_AES_key string) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessGrant", request_ID, access_granted, re_key, encrypted_AES_key)
}

// AccessRequest is a paid mutator transaction binding the contract method 0xa1ff106e.
//
// Solidity: function accessRequest(uint8 level, string pke_requestor, string pke_AFGH, bytes32[] custom_values, address[] stakeholders) payable returns(uint256)
func (_BaseContent *BaseContentTransactor) AccessRequest(opts *bind.TransactOpts, level uint8, pke_requestor string, pke_AFGH string, custom_values [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "accessRequest", level, pke_requestor, pke_AFGH, custom_values, stakeholders)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContent *BaseContentTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "clearPending")
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContent *BaseContentTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "commit", _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() payable returns(bool)
func (_BaseContent *BaseContentTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "confirmCommit")
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContent *BaseContentTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "deleteVersion", _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContent *BaseContentTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "kill")
}

// Migrate is a paid mutator transaction binding the contract method 0x8c8c61e9.
//
// Solidity: function migrate(address _contentType, address _addressKMS, address _contentContractAddress, uint256 _accessCharge, int256 _statusCode, uint256 _requestID, uint8 _visibility, string _objectHash, string _versionHashes) returns()
func (_BaseContent *BaseContentTransactor) Migrate(opts *bind.TransactOpts, _contentType common.Address, _addressKMS common.Address, _contentContractAddress common.Address, _accessCharge *big.Int, _statusCode *big.Int, _requestID *big.Int, _visibility uint8, _objectHash string, _versionHashes string) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "migrate", _contentType, _addressKMS, _contentContractAddress, _accessCharge, _statusCode, _requestID, _visibility, _objectHash, _versionHashes)
}

// ProcessRequestPayment is a paid mutator transaction binding the contract method 0x0c6d3f93.
//
// Solidity: function processRequestPayment(uint256 request_ID, address payee, string label, uint256 amount) returns(bool)
func (_BaseContent *BaseContentTransactor) ProcessRequestPayment(opts *bind.TransactOpts, request_ID *big.Int, payee common.Address, label string, amount *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "processRequestPayment", request_ID, payee, label, amount)
}

// Publish is a paid mutator transaction binding the contract method 0x075d4782.
//
// Solidity: function publish() payable returns(bool)
func (_BaseContent *BaseContentTransactor) Publish(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "publish")
}

// SetAccessCharge is a paid mutator transaction binding the contract method 0xf4d9bae8.
//
// Solidity: function setAccessCharge(uint256 charge) returns(uint256)
func (_BaseContent *BaseContentTransactor) SetAccessCharge(opts *bind.TransactOpts, charge *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setAccessCharge", charge)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContent *BaseContentTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetContentContractAddress is a paid mutator transaction binding the contract method 0xe5385303.
//
// Solidity: function setContentContractAddress(address addr) returns()
func (_BaseContent *BaseContentTransactor) SetContentContractAddress(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setContentContractAddress", addr)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContent *BaseContentTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SetStatusCode is a paid mutator transaction binding the contract method 0x5267db44.
//
// Solidity: function setStatusCode(int256 status_code) returns(int256)
func (_BaseContent *BaseContentTransactor) SetStatusCode(opts *bind.TransactOpts, status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setStatusCode", status_code)
}

// SetVisibility is a paid mutator transaction binding the contract method 0xaa024e8b.
//
// Solidity: function setVisibility(uint8 visibility_code) returns()
func (_BaseContent *BaseContentTransactor) SetVisibility(opts *bind.TransactOpts, visibility_code uint8) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "setVisibility", visibility_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContent *BaseContentTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContent *BaseContentTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "transferOwnership", newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContent *BaseContentTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "updateRequest")
}

// UpdateStatus is a paid mutator transaction binding the contract method 0x8280dd8f.
//
// Solidity: function updateStatus(int256 status_code) returns(int256)
func (_BaseContent *BaseContentTransactor) UpdateStatus(opts *bind.TransactOpts, status_code *big.Int) (*types.Transaction, error) {
	return _BaseContent.contract.Transact(opts, "updateStatus", status_code)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseContent *BaseContentTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseContent.contract.RawTransact(opts, calldata)
}

// BaseContentAccessCompleteIterator is returned from FilterAccessComplete and is used to iterate over the raw logs and unpacked data for AccessComplete events raised by the BaseContent contract.
type BaseContentAccessCompleteIterator struct {
	Event *BaseContentAccessComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessComplete represents a AccessComplete event raised by the BaseContent contract.
type BaseContentAccessComplete struct {
	RequestID            *big.Int
	ScorePct             *big.Int
	CustomContractResult bool
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterAccessComplete is a free log retrieval operation binding the contract event 0x2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac06.
//
// Solidity: event AccessComplete(uint256 requestID, uint256 scorePct, bool customContractResult)
func (_BaseContent *BaseContentFilterer) FilterAccessComplete(opts *bind.FilterOpts) (*BaseContentAccessCompleteIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessComplete")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessCompleteIterator{contract: _BaseContent.contract, event: "AccessComplete", logs: logs, sub: sub}, nil
}

// WatchAccessComplete is a free log subscription operation binding the contract event 0x2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac06.
//
// Solidity: event AccessComplete(uint256 requestID, uint256 scorePct, bool customContractResult)
func (_BaseContent *BaseContentFilterer) WatchAccessComplete(opts *bind.WatchOpts, sink chan<- *BaseContentAccessComplete) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessComplete)
				if err := _BaseContent.contract.UnpackLog(event, "AccessComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessComplete is a log parse operation binding the contract event 0x2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac06.
//
// Solidity: event AccessComplete(uint256 requestID, uint256 scorePct, bool customContractResult)
func (_BaseContent *BaseContentFilterer) ParseAccessComplete(log types.Log) (*BaseContentAccessComplete, error) {
	event := new(BaseContentAccessComplete)
	if err := _BaseContent.contract.UnpackLog(event, "AccessComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentAccessGrantIterator is returned from FilterAccessGrant and is used to iterate over the raw logs and unpacked data for AccessGrant events raised by the BaseContent contract.
type BaseContentAccessGrantIterator struct {
	Event *BaseContentAccessGrant // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessGrantIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessGrant)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessGrant)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessGrantIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessGrantIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessGrant represents a AccessGrant event raised by the BaseContent contract.
type BaseContentAccessGrant struct {
	RequestID       *big.Int
	AccessGranted   bool
	ReKey           string
	EncryptedAESKey string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterAccessGrant is a free log retrieval operation binding the contract event 0x475e9d68ca61f129cebee5af694af00ed0e3b3b0d4b74071fbb81d0e2b912718.
//
// Solidity: event AccessGrant(uint256 requestID, bool access_granted, string reKey, string encryptedAESKey)
func (_BaseContent *BaseContentFilterer) FilterAccessGrant(opts *bind.FilterOpts) (*BaseContentAccessGrantIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessGrant")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessGrantIterator{contract: _BaseContent.contract, event: "AccessGrant", logs: logs, sub: sub}, nil
}

// WatchAccessGrant is a free log subscription operation binding the contract event 0x475e9d68ca61f129cebee5af694af00ed0e3b3b0d4b74071fbb81d0e2b912718.
//
// Solidity: event AccessGrant(uint256 requestID, bool access_granted, string reKey, string encryptedAESKey)
func (_BaseContent *BaseContentFilterer) WatchAccessGrant(opts *bind.WatchOpts, sink chan<- *BaseContentAccessGrant) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessGrant")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessGrant)
				if err := _BaseContent.contract.UnpackLog(event, "AccessGrant", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessGrant is a log parse operation binding the contract event 0x475e9d68ca61f129cebee5af694af00ed0e3b3b0d4b74071fbb81d0e2b912718.
//
// Solidity: event AccessGrant(uint256 requestID, bool access_granted, string reKey, string encryptedAESKey)
func (_BaseContent *BaseContentFilterer) ParseAccessGrant(log types.Log) (*BaseContentAccessGrant, error) {
	event := new(BaseContentAccessGrant)
	if err := _BaseContent.contract.UnpackLog(event, "AccessGrant", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentAccessRequestIterator is returned from FilterAccessRequest and is used to iterate over the raw logs and unpacked data for AccessRequest events raised by the BaseContent contract.
type BaseContentAccessRequestIterator struct {
	Event *BaseContentAccessRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessRequest represents a AccessRequest event raised by the BaseContent contract.
type BaseContentAccessRequest struct {
	RequestID    *big.Int
	Level        uint8
	ContentHash  string
	PkeRequestor string
	PkeAFGH      string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterAccessRequest is a free log retrieval operation binding the contract event 0x50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a06.
//
// Solidity: event AccessRequest(uint256 requestID, uint8 level, string contentHash, string pkeRequestor, string pkeAFGH)
func (_BaseContent *BaseContentFilterer) FilterAccessRequest(opts *bind.FilterOpts) (*BaseContentAccessRequestIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessRequestIterator{contract: _BaseContent.contract, event: "AccessRequest", logs: logs, sub: sub}, nil
}

// WatchAccessRequest is a free log subscription operation binding the contract event 0x50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a06.
//
// Solidity: event AccessRequest(uint256 requestID, uint8 level, string contentHash, string pkeRequestor, string pkeAFGH)
func (_BaseContent *BaseContentFilterer) WatchAccessRequest(opts *bind.WatchOpts, sink chan<- *BaseContentAccessRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessRequest)
				if err := _BaseContent.contract.UnpackLog(event, "AccessRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequest is a log parse operation binding the contract event 0x50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a06.
//
// Solidity: event AccessRequest(uint256 requestID, uint8 level, string contentHash, string pkeRequestor, string pkeAFGH)
func (_BaseContent *BaseContentFilterer) ParseAccessRequest(log types.Log) (*BaseContentAccessRequest, error) {
	event := new(BaseContentAccessRequest)
	if err := _BaseContent.contract.UnpackLog(event, "AccessRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentAccessRequestStakeholderIterator is returned from FilterAccessRequestStakeholder and is used to iterate over the raw logs and unpacked data for AccessRequestStakeholder events raised by the BaseContent contract.
type BaseContentAccessRequestStakeholderIterator struct {
	Event *BaseContentAccessRequestStakeholder // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessRequestStakeholderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessRequestStakeholder)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessRequestStakeholder)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessRequestStakeholderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessRequestStakeholderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessRequestStakeholder represents a AccessRequestStakeholder event raised by the BaseContent contract.
type BaseContentAccessRequestStakeholder struct {
	Stakeholder common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestStakeholder is a free log retrieval operation binding the contract event 0xb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b684.
//
// Solidity: event AccessRequestStakeholder(address stakeholder)
func (_BaseContent *BaseContentFilterer) FilterAccessRequestStakeholder(opts *bind.FilterOpts) (*BaseContentAccessRequestStakeholderIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessRequestStakeholder")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessRequestStakeholderIterator{contract: _BaseContent.contract, event: "AccessRequestStakeholder", logs: logs, sub: sub}, nil
}

// WatchAccessRequestStakeholder is a free log subscription operation binding the contract event 0xb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b684.
//
// Solidity: event AccessRequestStakeholder(address stakeholder)
func (_BaseContent *BaseContentFilterer) WatchAccessRequestStakeholder(opts *bind.WatchOpts, sink chan<- *BaseContentAccessRequestStakeholder) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessRequestStakeholder")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessRequestStakeholder)
				if err := _BaseContent.contract.UnpackLog(event, "AccessRequestStakeholder", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestStakeholder is a log parse operation binding the contract event 0xb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b684.
//
// Solidity: event AccessRequestStakeholder(address stakeholder)
func (_BaseContent *BaseContentFilterer) ParseAccessRequestStakeholder(log types.Log) (*BaseContentAccessRequestStakeholder, error) {
	event := new(BaseContentAccessRequestStakeholder)
	if err := _BaseContent.contract.UnpackLog(event, "AccessRequestStakeholder", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentAccessRequestValueIterator is returned from FilterAccessRequestValue and is used to iterate over the raw logs and unpacked data for AccessRequestValue events raised by the BaseContent contract.
type BaseContentAccessRequestValueIterator struct {
	Event *BaseContentAccessRequestValue // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentAccessRequestValueIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentAccessRequestValue)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentAccessRequestValue)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentAccessRequestValueIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentAccessRequestValueIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentAccessRequestValue represents a AccessRequestValue event raised by the BaseContent contract.
type BaseContentAccessRequestValue struct {
	CustomValue [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAccessRequestValue is a free log retrieval operation binding the contract event 0x515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c38.
//
// Solidity: event AccessRequestValue(bytes32 customValue)
func (_BaseContent *BaseContentFilterer) FilterAccessRequestValue(opts *bind.FilterOpts) (*BaseContentAccessRequestValueIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "AccessRequestValue")
	if err != nil {
		return nil, err
	}
	return &BaseContentAccessRequestValueIterator{contract: _BaseContent.contract, event: "AccessRequestValue", logs: logs, sub: sub}, nil
}

// WatchAccessRequestValue is a free log subscription operation binding the contract event 0x515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c38.
//
// Solidity: event AccessRequestValue(bytes32 customValue)
func (_BaseContent *BaseContentFilterer) WatchAccessRequestValue(opts *bind.WatchOpts, sink chan<- *BaseContentAccessRequestValue) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "AccessRequestValue")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentAccessRequestValue)
				if err := _BaseContent.contract.UnpackLog(event, "AccessRequestValue", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequestValue is a log parse operation binding the contract event 0x515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c38.
//
// Solidity: event AccessRequestValue(bytes32 customValue)
func (_BaseContent *BaseContentFilterer) ParseAccessRequestValue(log types.Log) (*BaseContentAccessRequestValue, error) {
	event := new(BaseContentAccessRequestValue)
	if err := _BaseContent.contract.UnpackLog(event, "AccessRequestValue", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseContent contract.
type BaseContentCommitPendingIterator struct {
	Event *BaseContentCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentCommitPending represents a CommitPending event raised by the BaseContent contract.
type BaseContentCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseContentCommitPendingIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseContentCommitPendingIterator{contract: _BaseContent.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseContentCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentCommitPending)
				if err := _BaseContent.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) ParseCommitPending(log types.Log) (*BaseContentCommitPending, error) {
	event := new(BaseContentCommitPending)
	if err := _BaseContent.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentContentObjectCreateIterator is returned from FilterContentObjectCreate and is used to iterate over the raw logs and unpacked data for ContentObjectCreate events raised by the BaseContent contract.
type BaseContentContentObjectCreateIterator struct {
	Event *BaseContentContentObjectCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentContentObjectCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentContentObjectCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentContentObjectCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentContentObjectCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentContentObjectCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentContentObjectCreate represents a ContentObjectCreate event raised by the BaseContent contract.
type BaseContentContentObjectCreate struct {
	ContainingLibrary common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterContentObjectCreate is a free log retrieval operation binding the contract event 0xc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19.
//
// Solidity: event ContentObjectCreate(address containingLibrary)
func (_BaseContent *BaseContentFilterer) FilterContentObjectCreate(opts *bind.FilterOpts) (*BaseContentContentObjectCreateIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "ContentObjectCreate")
	if err != nil {
		return nil, err
	}
	return &BaseContentContentObjectCreateIterator{contract: _BaseContent.contract, event: "ContentObjectCreate", logs: logs, sub: sub}, nil
}

// WatchContentObjectCreate is a free log subscription operation binding the contract event 0xc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19.
//
// Solidity: event ContentObjectCreate(address containingLibrary)
func (_BaseContent *BaseContentFilterer) WatchContentObjectCreate(opts *bind.WatchOpts, sink chan<- *BaseContentContentObjectCreate) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "ContentObjectCreate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentContentObjectCreate)
				if err := _BaseContent.contract.UnpackLog(event, "ContentObjectCreate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentObjectCreate is a log parse operation binding the contract event 0xc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19.
//
// Solidity: event ContentObjectCreate(address containingLibrary)
func (_BaseContent *BaseContentFilterer) ParseContentObjectCreate(log types.Log) (*BaseContentContentObjectCreate, error) {
	event := new(BaseContentContentObjectCreate)
	if err := _BaseContent.contract.UnpackLog(event, "ContentObjectCreate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentDbgAccessIterator is returned from FilterDbgAccess and is used to iterate over the raw logs and unpacked data for DbgAccess events raised by the BaseContent contract.
type BaseContentDbgAccessIterator struct {
	Event *BaseContentDbgAccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentDbgAccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentDbgAccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentDbgAccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentDbgAccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentDbgAccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentDbgAccess represents a DbgAccess event raised by the BaseContent contract.
type BaseContentDbgAccess struct {
	Charged   *big.Int
	Received  *big.Int
	Converted *big.Int
	Enough    bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDbgAccess is a free log retrieval operation binding the contract event 0xfdcd1c148f180968772efab9ef7e26a2ec7a58d82572587ad224c36c91236175.
//
// Solidity: event DbgAccess(uint256 charged, uint256 received, uint256 converted, bool enough)
func (_BaseContent *BaseContentFilterer) FilterDbgAccess(opts *bind.FilterOpts) (*BaseContentDbgAccessIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "DbgAccess")
	if err != nil {
		return nil, err
	}
	return &BaseContentDbgAccessIterator{contract: _BaseContent.contract, event: "DbgAccess", logs: logs, sub: sub}, nil
}

// WatchDbgAccess is a free log subscription operation binding the contract event 0xfdcd1c148f180968772efab9ef7e26a2ec7a58d82572587ad224c36c91236175.
//
// Solidity: event DbgAccess(uint256 charged, uint256 received, uint256 converted, bool enough)
func (_BaseContent *BaseContentFilterer) WatchDbgAccess(opts *bind.WatchOpts, sink chan<- *BaseContentDbgAccess) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "DbgAccess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentDbgAccess)
				if err := _BaseContent.contract.UnpackLog(event, "DbgAccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDbgAccess is a log parse operation binding the contract event 0xfdcd1c148f180968772efab9ef7e26a2ec7a58d82572587ad224c36c91236175.
//
// Solidity: event DbgAccess(uint256 charged, uint256 received, uint256 converted, bool enough)
func (_BaseContent *BaseContentFilterer) ParseDbgAccess(log types.Log) (*BaseContentDbgAccess, error) {
	event := new(BaseContentDbgAccess)
	if err := _BaseContent.contract.UnpackLog(event, "DbgAccess", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentDbgAccessCodeIterator is returned from FilterDbgAccessCode and is used to iterate over the raw logs and unpacked data for DbgAccessCode events raised by the BaseContent contract.
type BaseContentDbgAccessCodeIterator struct {
	Event *BaseContentDbgAccessCode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentDbgAccessCodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentDbgAccessCode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentDbgAccessCode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentDbgAccessCodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentDbgAccessCodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentDbgAccessCode represents a DbgAccessCode event raised by the BaseContent contract.
type BaseContentDbgAccessCode struct {
	Code uint8
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterDbgAccessCode is a free log retrieval operation binding the contract event 0x14c078593b5fe597db0b1293557c1a5315f2b7e708477ea38b41929534d96bdd.
//
// Solidity: event DbgAccessCode(uint8 code)
func (_BaseContent *BaseContentFilterer) FilterDbgAccessCode(opts *bind.FilterOpts) (*BaseContentDbgAccessCodeIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "DbgAccessCode")
	if err != nil {
		return nil, err
	}
	return &BaseContentDbgAccessCodeIterator{contract: _BaseContent.contract, event: "DbgAccessCode", logs: logs, sub: sub}, nil
}

// WatchDbgAccessCode is a free log subscription operation binding the contract event 0x14c078593b5fe597db0b1293557c1a5315f2b7e708477ea38b41929534d96bdd.
//
// Solidity: event DbgAccessCode(uint8 code)
func (_BaseContent *BaseContentFilterer) WatchDbgAccessCode(opts *bind.WatchOpts, sink chan<- *BaseContentDbgAccessCode) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "DbgAccessCode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentDbgAccessCode)
				if err := _BaseContent.contract.UnpackLog(event, "DbgAccessCode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDbgAccessCode is a log parse operation binding the contract event 0x14c078593b5fe597db0b1293557c1a5315f2b7e708477ea38b41929534d96bdd.
//
// Solidity: event DbgAccessCode(uint8 code)
func (_BaseContent *BaseContentFilterer) ParseDbgAccessCode(log types.Log) (*BaseContentDbgAccessCode, error) {
	event := new(BaseContentDbgAccessCode)
	if err := _BaseContent.contract.UnpackLog(event, "DbgAccessCode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentGetAccessChargeIterator is returned from FilterGetAccessCharge and is used to iterate over the raw logs and unpacked data for GetAccessCharge events raised by the BaseContent contract.
type BaseContentGetAccessChargeIterator struct {
	Event *BaseContentGetAccessCharge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentGetAccessChargeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentGetAccessCharge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentGetAccessCharge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentGetAccessChargeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentGetAccessChargeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentGetAccessCharge represents a GetAccessCharge event raised by the BaseContent contract.
type BaseContentGetAccessCharge struct {
	Level        uint8
	AccessCharge *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterGetAccessCharge is a free log retrieval operation binding the contract event 0xa58326ee5bb617cb8b4f0d0f5f557c469d2d05d7a738f777037deda9c724b370.
//
// Solidity: event GetAccessCharge(uint8 level, uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) FilterGetAccessCharge(opts *bind.FilterOpts) (*BaseContentGetAccessChargeIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "GetAccessCharge")
	if err != nil {
		return nil, err
	}
	return &BaseContentGetAccessChargeIterator{contract: _BaseContent.contract, event: "GetAccessCharge", logs: logs, sub: sub}, nil
}

// WatchGetAccessCharge is a free log subscription operation binding the contract event 0xa58326ee5bb617cb8b4f0d0f5f557c469d2d05d7a738f777037deda9c724b370.
//
// Solidity: event GetAccessCharge(uint8 level, uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) WatchGetAccessCharge(opts *bind.WatchOpts, sink chan<- *BaseContentGetAccessCharge) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "GetAccessCharge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentGetAccessCharge)
				if err := _BaseContent.contract.UnpackLog(event, "GetAccessCharge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGetAccessCharge is a log parse operation binding the contract event 0xa58326ee5bb617cb8b4f0d0f5f557c469d2d05d7a738f777037deda9c724b370.
//
// Solidity: event GetAccessCharge(uint8 level, uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) ParseGetAccessCharge(log types.Log) (*BaseContentGetAccessCharge, error) {
	event := new(BaseContentGetAccessCharge)
	if err := _BaseContent.contract.UnpackLog(event, "GetAccessCharge", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentInsufficientFundsIterator is returned from FilterInsufficientFunds and is used to iterate over the raw logs and unpacked data for InsufficientFunds events raised by the BaseContent contract.
type BaseContentInsufficientFundsIterator struct {
	Event *BaseContentInsufficientFunds // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentInsufficientFundsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentInsufficientFunds)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentInsufficientFunds)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentInsufficientFundsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentInsufficientFundsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentInsufficientFunds represents a InsufficientFunds event raised by the BaseContent contract.
type BaseContentInsufficientFunds struct {
	AccessCharge   *big.Int
	AmountProvided *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterInsufficientFunds is a free log retrieval operation binding the contract event 0x03eb8b54a949acec2cd08fdb6d6bd4647a1f2c907d75d6900648effa92eb147f.
//
// Solidity: event InsufficientFunds(uint256 accessCharge, uint256 amountProvided)
func (_BaseContent *BaseContentFilterer) FilterInsufficientFunds(opts *bind.FilterOpts) (*BaseContentInsufficientFundsIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "InsufficientFunds")
	if err != nil {
		return nil, err
	}
	return &BaseContentInsufficientFundsIterator{contract: _BaseContent.contract, event: "InsufficientFunds", logs: logs, sub: sub}, nil
}

// WatchInsufficientFunds is a free log subscription operation binding the contract event 0x03eb8b54a949acec2cd08fdb6d6bd4647a1f2c907d75d6900648effa92eb147f.
//
// Solidity: event InsufficientFunds(uint256 accessCharge, uint256 amountProvided)
func (_BaseContent *BaseContentFilterer) WatchInsufficientFunds(opts *bind.WatchOpts, sink chan<- *BaseContentInsufficientFunds) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "InsufficientFunds")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentInsufficientFunds)
				if err := _BaseContent.contract.UnpackLog(event, "InsufficientFunds", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInsufficientFunds is a log parse operation binding the contract event 0x03eb8b54a949acec2cd08fdb6d6bd4647a1f2c907d75d6900648effa92eb147f.
//
// Solidity: event InsufficientFunds(uint256 accessCharge, uint256 amountProvided)
func (_BaseContent *BaseContentFilterer) ParseInsufficientFunds(log types.Log) (*BaseContentInsufficientFunds, error) {
	event := new(BaseContentInsufficientFunds)
	if err := _BaseContent.contract.UnpackLog(event, "InsufficientFunds", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentInvokeCustomPostHookIterator is returned from FilterInvokeCustomPostHook and is used to iterate over the raw logs and unpacked data for InvokeCustomPostHook events raised by the BaseContent contract.
type BaseContentInvokeCustomPostHookIterator struct {
	Event *BaseContentInvokeCustomPostHook // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentInvokeCustomPostHookIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentInvokeCustomPostHook)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentInvokeCustomPostHook)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentInvokeCustomPostHookIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentInvokeCustomPostHookIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentInvokeCustomPostHook represents a InvokeCustomPostHook event raised by the BaseContent contract.
type BaseContentInvokeCustomPostHook struct {
	CustomContract common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterInvokeCustomPostHook is a free log retrieval operation binding the contract event 0x97d9c9779ed3ed8b9a6edfe16d17b1fdec843245747a19abfb621806e37d4a89.
//
// Solidity: event InvokeCustomPostHook(address custom_contract)
func (_BaseContent *BaseContentFilterer) FilterInvokeCustomPostHook(opts *bind.FilterOpts) (*BaseContentInvokeCustomPostHookIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "InvokeCustomPostHook")
	if err != nil {
		return nil, err
	}
	return &BaseContentInvokeCustomPostHookIterator{contract: _BaseContent.contract, event: "InvokeCustomPostHook", logs: logs, sub: sub}, nil
}

// WatchInvokeCustomPostHook is a free log subscription operation binding the contract event 0x97d9c9779ed3ed8b9a6edfe16d17b1fdec843245747a19abfb621806e37d4a89.
//
// Solidity: event InvokeCustomPostHook(address custom_contract)
func (_BaseContent *BaseContentFilterer) WatchInvokeCustomPostHook(opts *bind.WatchOpts, sink chan<- *BaseContentInvokeCustomPostHook) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "InvokeCustomPostHook")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentInvokeCustomPostHook)
				if err := _BaseContent.contract.UnpackLog(event, "InvokeCustomPostHook", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInvokeCustomPostHook is a log parse operation binding the contract event 0x97d9c9779ed3ed8b9a6edfe16d17b1fdec843245747a19abfb621806e37d4a89.
//
// Solidity: event InvokeCustomPostHook(address custom_contract)
func (_BaseContent *BaseContentFilterer) ParseInvokeCustomPostHook(log types.Log) (*BaseContentInvokeCustomPostHook, error) {
	event := new(BaseContentInvokeCustomPostHook)
	if err := _BaseContent.contract.UnpackLog(event, "InvokeCustomPostHook", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentInvokeCustomPreHookIterator is returned from FilterInvokeCustomPreHook and is used to iterate over the raw logs and unpacked data for InvokeCustomPreHook events raised by the BaseContent contract.
type BaseContentInvokeCustomPreHookIterator struct {
	Event *BaseContentInvokeCustomPreHook // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentInvokeCustomPreHookIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentInvokeCustomPreHook)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentInvokeCustomPreHook)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentInvokeCustomPreHookIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentInvokeCustomPreHookIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentInvokeCustomPreHook represents a InvokeCustomPreHook event raised by the BaseContent contract.
type BaseContentInvokeCustomPreHook struct {
	CustomContract common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterInvokeCustomPreHook is a free log retrieval operation binding the contract event 0x12b04791b5caab768e2757268992f0c62801e3921d9e310c893f0d5f9caa5f71.
//
// Solidity: event InvokeCustomPreHook(address custom_contract)
func (_BaseContent *BaseContentFilterer) FilterInvokeCustomPreHook(opts *bind.FilterOpts) (*BaseContentInvokeCustomPreHookIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "InvokeCustomPreHook")
	if err != nil {
		return nil, err
	}
	return &BaseContentInvokeCustomPreHookIterator{contract: _BaseContent.contract, event: "InvokeCustomPreHook", logs: logs, sub: sub}, nil
}

// WatchInvokeCustomPreHook is a free log subscription operation binding the contract event 0x12b04791b5caab768e2757268992f0c62801e3921d9e310c893f0d5f9caa5f71.
//
// Solidity: event InvokeCustomPreHook(address custom_contract)
func (_BaseContent *BaseContentFilterer) WatchInvokeCustomPreHook(opts *bind.WatchOpts, sink chan<- *BaseContentInvokeCustomPreHook) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "InvokeCustomPreHook")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentInvokeCustomPreHook)
				if err := _BaseContent.contract.UnpackLog(event, "InvokeCustomPreHook", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInvokeCustomPreHook is a log parse operation binding the contract event 0x12b04791b5caab768e2757268992f0c62801e3921d9e310c893f0d5f9caa5f71.
//
// Solidity: event InvokeCustomPreHook(address custom_contract)
func (_BaseContent *BaseContentFilterer) ParseInvokeCustomPreHook(log types.Log) (*BaseContentInvokeCustomPreHook, error) {
	event := new(BaseContentInvokeCustomPreHook)
	if err := _BaseContent.contract.UnpackLog(event, "InvokeCustomPreHook", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentLogPaymentIterator is returned from FilterLogPayment and is used to iterate over the raw logs and unpacked data for LogPayment events raised by the BaseContent contract.
type BaseContentLogPaymentIterator struct {
	Event *BaseContentLogPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentLogPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentLogPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentLogPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentLogPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentLogPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentLogPayment represents a LogPayment event raised by the BaseContent contract.
type BaseContentLogPayment struct {
	RequestID *big.Int
	Label     string
	Payee     common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLogPayment is a free log retrieval operation binding the contract event 0xad58d18ea7292f887da6f15bb4f0badddaa33d169713d09cf49710acc7c3a5b9.
//
// Solidity: event LogPayment(uint256 requestID, string label, address payee, uint256 amount)
func (_BaseContent *BaseContentFilterer) FilterLogPayment(opts *bind.FilterOpts) (*BaseContentLogPaymentIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return &BaseContentLogPaymentIterator{contract: _BaseContent.contract, event: "LogPayment", logs: logs, sub: sub}, nil
}

// WatchLogPayment is a free log subscription operation binding the contract event 0xad58d18ea7292f887da6f15bb4f0badddaa33d169713d09cf49710acc7c3a5b9.
//
// Solidity: event LogPayment(uint256 requestID, string label, address payee, uint256 amount)
func (_BaseContent *BaseContentFilterer) WatchLogPayment(opts *bind.WatchOpts, sink chan<- *BaseContentLogPayment) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentLogPayment)
				if err := _BaseContent.contract.UnpackLog(event, "LogPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogPayment is a log parse operation binding the contract event 0xad58d18ea7292f887da6f15bb4f0badddaa33d169713d09cf49710acc7c3a5b9.
//
// Solidity: event LogPayment(uint256 requestID, string label, address payee, uint256 amount)
func (_BaseContent *BaseContentFilterer) ParseLogPayment(log types.Log) (*BaseContentLogPayment, error) {
	event := new(BaseContentLogPayment)
	if err := _BaseContent.contract.UnpackLog(event, "LogPayment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentPublishIterator is returned from FilterPublish and is used to iterate over the raw logs and unpacked data for Publish events raised by the BaseContent contract.
type BaseContentPublishIterator struct {
	Event *BaseContentPublish // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentPublishIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentPublish)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentPublish)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentPublishIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentPublishIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentPublish represents a Publish event raised by the BaseContent contract.
type BaseContentPublish struct {
	RequestStatus bool
	StatusCode    *big.Int
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterPublish is a free log retrieval operation binding the contract event 0xad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4.
//
// Solidity: event Publish(bool requestStatus, int256 statusCode, string objectHash)
func (_BaseContent *BaseContentFilterer) FilterPublish(opts *bind.FilterOpts) (*BaseContentPublishIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "Publish")
	if err != nil {
		return nil, err
	}
	return &BaseContentPublishIterator{contract: _BaseContent.contract, event: "Publish", logs: logs, sub: sub}, nil
}

// WatchPublish is a free log subscription operation binding the contract event 0xad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4.
//
// Solidity: event Publish(bool requestStatus, int256 statusCode, string objectHash)
func (_BaseContent *BaseContentFilterer) WatchPublish(opts *bind.WatchOpts, sink chan<- *BaseContentPublish) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "Publish")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentPublish)
				if err := _BaseContent.contract.UnpackLog(event, "Publish", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePublish is a log parse operation binding the contract event 0xad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf4.
//
// Solidity: event Publish(bool requestStatus, int256 statusCode, string objectHash)
func (_BaseContent *BaseContentFilterer) ParsePublish(log types.Log) (*BaseContentPublish, error) {
	event := new(BaseContentPublish)
	if err := _BaseContent.contract.UnpackLog(event, "Publish", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentReturnCustomHookIterator is returned from FilterReturnCustomHook and is used to iterate over the raw logs and unpacked data for ReturnCustomHook events raised by the BaseContent contract.
type BaseContentReturnCustomHookIterator struct {
	Event *BaseContentReturnCustomHook // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentReturnCustomHookIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentReturnCustomHook)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentReturnCustomHook)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentReturnCustomHookIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentReturnCustomHookIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentReturnCustomHook represents a ReturnCustomHook event raised by the BaseContent contract.
type BaseContentReturnCustomHook struct {
	CustomContract common.Address
	Result         *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterReturnCustomHook is a free log retrieval operation binding the contract event 0x8c693e8b27db7caf9b9637b66dcc11444760023a4d53e95407a3acef1b249f50.
//
// Solidity: event ReturnCustomHook(address custom_contract, uint256 result)
func (_BaseContent *BaseContentFilterer) FilterReturnCustomHook(opts *bind.FilterOpts) (*BaseContentReturnCustomHookIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "ReturnCustomHook")
	if err != nil {
		return nil, err
	}
	return &BaseContentReturnCustomHookIterator{contract: _BaseContent.contract, event: "ReturnCustomHook", logs: logs, sub: sub}, nil
}

// WatchReturnCustomHook is a free log subscription operation binding the contract event 0x8c693e8b27db7caf9b9637b66dcc11444760023a4d53e95407a3acef1b249f50.
//
// Solidity: event ReturnCustomHook(address custom_contract, uint256 result)
func (_BaseContent *BaseContentFilterer) WatchReturnCustomHook(opts *bind.WatchOpts, sink chan<- *BaseContentReturnCustomHook) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "ReturnCustomHook")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentReturnCustomHook)
				if err := _BaseContent.contract.UnpackLog(event, "ReturnCustomHook", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReturnCustomHook is a log parse operation binding the contract event 0x8c693e8b27db7caf9b9637b66dcc11444760023a4d53e95407a3acef1b249f50.
//
// Solidity: event ReturnCustomHook(address custom_contract, uint256 result)
func (_BaseContent *BaseContentFilterer) ParseReturnCustomHook(log types.Log) (*BaseContentReturnCustomHook, error) {
	event := new(BaseContentReturnCustomHook)
	if err := _BaseContent.contract.UnpackLog(event, "ReturnCustomHook", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSetAccessChargeIterator is returned from FilterSetAccessCharge and is used to iterate over the raw logs and unpacked data for SetAccessCharge events raised by the BaseContent contract.
type BaseContentSetAccessChargeIterator struct {
	Event *BaseContentSetAccessCharge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetAccessChargeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetAccessCharge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetAccessCharge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetAccessChargeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetAccessChargeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetAccessCharge represents a SetAccessCharge event raised by the BaseContent contract.
type BaseContentSetAccessCharge struct {
	AccessCharge *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSetAccessCharge is a free log retrieval operation binding the contract event 0x4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a3.
//
// Solidity: event SetAccessCharge(uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) FilterSetAccessCharge(opts *bind.FilterOpts) (*BaseContentSetAccessChargeIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetAccessCharge")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetAccessChargeIterator{contract: _BaseContent.contract, event: "SetAccessCharge", logs: logs, sub: sub}, nil
}

// WatchSetAccessCharge is a free log subscription operation binding the contract event 0x4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a3.
//
// Solidity: event SetAccessCharge(uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) WatchSetAccessCharge(opts *bind.WatchOpts, sink chan<- *BaseContentSetAccessCharge) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetAccessCharge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetAccessCharge)
				if err := _BaseContent.contract.UnpackLog(event, "SetAccessCharge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetAccessCharge is a log parse operation binding the contract event 0x4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a3.
//
// Solidity: event SetAccessCharge(uint256 accessCharge)
func (_BaseContent *BaseContentFilterer) ParseSetAccessCharge(log types.Log) (*BaseContentSetAccessCharge, error) {
	event := new(BaseContentSetAccessCharge)
	if err := _BaseContent.contract.UnpackLog(event, "SetAccessCharge", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSetContentContractIterator is returned from FilterSetContentContract and is used to iterate over the raw logs and unpacked data for SetContentContract events raised by the BaseContent contract.
type BaseContentSetContentContractIterator struct {
	Event *BaseContentSetContentContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetContentContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetContentContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetContentContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetContentContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetContentContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetContentContract represents a SetContentContract event raised by the BaseContent contract.
type BaseContentSetContentContract struct {
	ContentContractAddress common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterSetContentContract is a free log retrieval operation binding the contract event 0xa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb7.
//
// Solidity: event SetContentContract(address contentContractAddress)
func (_BaseContent *BaseContentFilterer) FilterSetContentContract(opts *bind.FilterOpts) (*BaseContentSetContentContractIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetContentContract")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetContentContractIterator{contract: _BaseContent.contract, event: "SetContentContract", logs: logs, sub: sub}, nil
}

// WatchSetContentContract is a free log subscription operation binding the contract event 0xa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb7.
//
// Solidity: event SetContentContract(address contentContractAddress)
func (_BaseContent *BaseContentFilterer) WatchSetContentContract(opts *bind.WatchOpts, sink chan<- *BaseContentSetContentContract) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetContentContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetContentContract)
				if err := _BaseContent.contract.UnpackLog(event, "SetContentContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetContentContract is a log parse operation binding the contract event 0xa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb7.
//
// Solidity: event SetContentContract(address contentContractAddress)
func (_BaseContent *BaseContentFilterer) ParseSetContentContract(log types.Log) (*BaseContentSetContentContract, error) {
	event := new(BaseContentSetContentContract)
	if err := _BaseContent.contract.UnpackLog(event, "SetContentContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSetContentTypeIterator is returned from FilterSetContentType and is used to iterate over the raw logs and unpacked data for SetContentType events raised by the BaseContent contract.
type BaseContentSetContentTypeIterator struct {
	Event *BaseContentSetContentType // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetContentTypeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetContentType)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetContentType)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetContentTypeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetContentTypeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetContentType represents a SetContentType event raised by the BaseContent contract.
type BaseContentSetContentType struct {
	ContentType            common.Address
	ContentContractAddress common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterSetContentType is a free log retrieval operation binding the contract event 0x4f692e87baf302f7281e83eec109053efc2ca8e7bddfc6ce88c579cd9767f71f.
//
// Solidity: event SetContentType(address contentType, address contentContractAddress)
func (_BaseContent *BaseContentFilterer) FilterSetContentType(opts *bind.FilterOpts) (*BaseContentSetContentTypeIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetContentType")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetContentTypeIterator{contract: _BaseContent.contract, event: "SetContentType", logs: logs, sub: sub}, nil
}

// WatchSetContentType is a free log subscription operation binding the contract event 0x4f692e87baf302f7281e83eec109053efc2ca8e7bddfc6ce88c579cd9767f71f.
//
// Solidity: event SetContentType(address contentType, address contentContractAddress)
func (_BaseContent *BaseContentFilterer) WatchSetContentType(opts *bind.WatchOpts, sink chan<- *BaseContentSetContentType) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetContentType")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetContentType)
				if err := _BaseContent.contract.UnpackLog(event, "SetContentType", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetContentType is a log parse operation binding the contract event 0x4f692e87baf302f7281e83eec109053efc2ca8e7bddfc6ce88c579cd9767f71f.
//
// Solidity: event SetContentType(address contentType, address contentContractAddress)
func (_BaseContent *BaseContentFilterer) ParseSetContentType(log types.Log) (*BaseContentSetContentType, error) {
	event := new(BaseContentSetContentType)
	if err := _BaseContent.contract.UnpackLog(event, "SetContentType", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSetStatusCodeIterator is returned from FilterSetStatusCode and is used to iterate over the raw logs and unpacked data for SetStatusCode events raised by the BaseContent contract.
type BaseContentSetStatusCodeIterator struct {
	Event *BaseContentSetStatusCode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSetStatusCodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSetStatusCode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSetStatusCode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSetStatusCodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSetStatusCodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSetStatusCode represents a SetStatusCode event raised by the BaseContent contract.
type BaseContentSetStatusCode struct {
	StatusCode *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSetStatusCode is a free log retrieval operation binding the contract event 0xda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a2.
//
// Solidity: event SetStatusCode(int256 statusCode)
func (_BaseContent *BaseContentFilterer) FilterSetStatusCode(opts *bind.FilterOpts) (*BaseContentSetStatusCodeIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "SetStatusCode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSetStatusCodeIterator{contract: _BaseContent.contract, event: "SetStatusCode", logs: logs, sub: sub}, nil
}

// WatchSetStatusCode is a free log subscription operation binding the contract event 0xda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a2.
//
// Solidity: event SetStatusCode(int256 statusCode)
func (_BaseContent *BaseContentFilterer) WatchSetStatusCode(opts *bind.WatchOpts, sink chan<- *BaseContentSetStatusCode) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "SetStatusCode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSetStatusCode)
				if err := _BaseContent.contract.UnpackLog(event, "SetStatusCode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetStatusCode is a log parse operation binding the contract event 0xda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a2.
//
// Solidity: event SetStatusCode(int256 statusCode)
func (_BaseContent *BaseContentFilterer) ParseSetStatusCode(log types.Log) (*BaseContentSetStatusCode, error) {
	event := new(BaseContentSetStatusCode)
	if err := _BaseContent.contract.UnpackLog(event, "SetStatusCode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseContent contract.
type BaseContentUpdateRequestIterator struct {
	Event *BaseContentUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentUpdateRequest represents a UpdateRequest event raised by the BaseContent contract.
type BaseContentUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContent *BaseContentFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseContentUpdateRequestIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentUpdateRequestIterator{contract: _BaseContent.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContent *BaseContentFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseContentUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentUpdateRequest)
				if err := _BaseContent.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContent *BaseContentFilterer) ParseUpdateRequest(log types.Log) (*BaseContentUpdateRequest, error) {
	event := new(BaseContentUpdateRequest)
	if err := _BaseContent.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseContent contract.
type BaseContentVersionConfirmIterator struct {
	Event *BaseContentVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentVersionConfirm represents a VersionConfirm event raised by the BaseContent contract.
type BaseContentVersionConfirm struct {
	SpaceAddress common.Address
	ObjectHash   string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseContentVersionConfirmIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseContentVersionConfirmIterator{contract: _BaseContent.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseContentVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentVersionConfirm)
				if err := _BaseContent.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseContent *BaseContentFilterer) ParseVersionConfirm(log types.Log) (*BaseContentVersionConfirm, error) {
	event := new(BaseContentVersionConfirm)
	if err := _BaseContent.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseContent contract.
type BaseContentVersionDeleteIterator struct {
	Event *BaseContentVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentVersionDelete represents a VersionDelete event raised by the BaseContent contract.
type BaseContentVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContent *BaseContentFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseContentVersionDeleteIterator, error) {

	logs, sub, err := _BaseContent.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseContentVersionDeleteIterator{contract: _BaseContent.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContent *BaseContentFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseContentVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseContent.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentVersionDelete)
				if err := _BaseContent.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContent *BaseContentFilterer) ParseVersionDelete(log types.Log) (*BaseContentVersionDelete, error) {
	event := new(BaseContentVersionDelete)
	if err := _BaseContent.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentFactoryMetaData contains all meta data concerning the BaseContentFactory contract.
var BaseContentFactoryMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
	Sigs: map[string]string{
		"af570c04": "contentSpace()",
		"bf4e088f": "createContent(address,address)",
		"02d05d3f": "creator()",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
	},
	Bin: "0x60806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f426173654374466163746f727932303139313231393138323130304d4c00000060045560018054600160a060020a0319908116329081179092556002805490911690911790556154328061007e6000396000f3006080604052600436106100745763ffffffff60e060020a60003504166302d05d3f811461007657806341c0e1b5146100a757806354fd4d50146100bc5780636d2e4b1b146100e35780638da5cb5b14610104578063af570c0414610119578063bf4e088f1461012e578063f2fde38b14610155575b005b34801561008257600080fd5b5061008b610176565b60408051600160a060020a039092168252519081900360200190f35b3480156100b357600080fd5b50610074610185565b3480156100c857600080fd5b506100d16101c1565b60408051918252519081900360200190f35b3480156100ef57600080fd5b50610074600160a060020a03600435166101c7565b34801561011057600080fd5b5061008b610222565b34801561012557600080fd5b5061008b610231565b34801561013a57600080fd5b5061008b600160a060020a0360043581169060243516610240565b34801561016157600080fd5b50610074600160a060020a0360043516610788565b600154600160a060020a031681565b600254600160a060020a03163214806101a85750600254600160a060020a031633145b15156101b357600080fd5b600254600160a060020a0316ff5b60045481565b600154600160a060020a031632146101de57600080fd5b600160a060020a03811615156101f357600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b600354600160a060020a031681565b60008060008060008087945084600160a060020a0316630eaec2c5326040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156102a757600080fd5b505af11580156102bb573d6000803e3d6000fd5b505050506040513d60208110156102d157600080fd5b505115156102de57600080fd5b84600160a060020a03166329dedde5886040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561033957600080fd5b505af115801561034d573d6000803e3d6000fd5b505050506040513d602081101561036357600080fd5b5051151561037057600080fd5b33888861037b6107fa565b600160a060020a03938416815291831660208301529091166040808301919091525190819003606001906000f0801580156103ba573d6000803e3d6000fd5b50935083600160a060020a031663c9e8e72d86600160a060020a03166332eaf21b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561040a57600080fd5b505af115801561041e573d6000803e3d6000fd5b505050506040513d602081101561043457600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a03909216600483015251602480830192600092919082900301818387803b15801561047a57600080fd5b505af115801561048e573d6000803e3d6000fd5b5050505083600160a060020a031663e538530386600160a060020a0316631cdbee5a8a6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156104fc57600080fd5b505af1158015610510573d6000803e3d6000fd5b505050506040513d602081101561052657600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a03909216600483015251602480830192600092919082900301818387803b15801561056c57600080fd5b505af1158015610580573d6000803e3d6000fd5b5050505033925082600160a060020a031663a2d67fcf6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156105c557600080fd5b505af11580156105d9573d6000803e3d6000fd5b505050506040513d60208110156105ef57600080fd5b5051604080517f5d97b6c20000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a03831691633def51409187918491635d97b6c29160048083019260209291908290030181600087803b15801561065c57600080fd5b505af1158015610670573d6000803e3d6000fd5b505050506040513d602081101561068657600080fd5b5051604080517f186897330000000000000000000000000000000000000000000000000000000081529051600160a060020a0387169163186897339160048083019260209291908290030181600087803b1580156106e357600080fd5b505af11580156106f7573d6000803e3d6000fd5b505050506040513d602081101561070d57600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03909416600485015260ff92831660248501529116604483015251606480830192600092919082900301818387803b15801561076457600080fd5b505af1158015610778573d6000803e3d6000fd5b50959a9950505050505050505050565b600254600160a060020a03163214806107ab5750600254600160a060020a031633145b15156107b657600080fd5b600160a060020a03811615156107cb57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604051614bfc8061080b833901905600608060408190527f4f776e61626c6532303139303532383139333830304d4c00000000000000000060009081557f4564697461626c6532303139313231393133343630304d4c00000000000000006004557f42617365436f6e74656e7432303139313230323136313730304d4c0000000000600b556012556013805460ff19169055606080614bfc8339810160408181528251602080850151948301516001805432600160a060020a03199182168117909255600280548216909217909155600380548216600160a060020a0380871691909117909155600f80548316828a161790819055600019601155600c80549093168285161790925560138054600a60ff1990911617905516855292519194937fc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19929081900390910190a1505050614ab08061014c6000396000f30060806040526004361061028d5763ffffffff60e060020a60003504166217de98811461028f578062821de3146102b657806302d05d3f146102e7578063075d4782146102fc5780630c6d3f93146103185780630fe1b5a214610383578063100508a2146103b057806314cfabb3146103db5780631a735f18146103f057806322e564eb1461043d5780632310167f1461046a57806327c1c21d1461047f57806329adec141461049457806332eaf21b146104a9578063331b86c0146104be57806336ebffca146104d3578063375a6e7c146104e857806338864284146104fd57806338d0f504146105155780633ba58afb146105cf57806341c0e1b514610665578063446e88261461067a5780634dd70788146106825780635267db441461069757806354fd4d50146106af5780635cc4aa9b146106c45780635f6a1301146106d5578063628449fd146106ea57806364ade32b146107745780636d2e4b1b146107895780636e375427146107aa5780637886f747146107bf5780637ca8f618146107d757806381beeb64146107ef5780638280dd8f146108045780638c8c61e91461081c5780638da5cb5b146108e25780638f779201146108f757806397ac4fd21461090c5780639867db7414610921578063a1ff106e1461097a578063a8d4160e14610a7e578063aa024e8b14610bb5578063af570c0414610bd0578063b816f51314610be5578063c287e0ed14610bfa578063c9e8e72d14610c0f578063cbcd446114610c30578063d810f8c814610c45578063e02dd9c214610c5a578063e1a7071714610c6f578063e538530314610cc8578063ee56d76714610ce9578063ef1d7dc214610d89578063f2fde38b14610d9e578063f4d9bae814610dbf578063f81ab0ae14610dd7575b005b34801561029b57600080fd5b506102a4610dec565b60408051918252519081900360200190f35b3480156102c257600080fd5b506102cb610e10565b60408051600160a060020a039092168252519081900360200190f35b3480156102f357600080fd5b506102cb610e20565b610304610e2f565b604080519115158252519081900360200190f35b34801561032457600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526103049482359460248035600160a060020a0316953695946064949201919081908401838280828437509497505093359450610f959350505050565b34801561038f57600080fd5b5061028d600160a060020a036004351660ff60243581169060443516610fdc565b3480156103bc57600080fd5b506103c5611090565b6040805160ff9092168252519081900360200190f35b3480156103e757600080fd5b50610304611095565b3480156103fc57600080fd5b5061040860043561112f565b60408051600160a060020a0390951685526020850193909352600091820b90910b838301526060830152519081900360800190f35b34801561044957600080fd5b5061028d600160a060020a036004351660ff60243581169060443516611163565b34801561047657600080fd5b506102cb6111f5565b34801561048b57600080fd5b506102a4611204565b3480156104a057600080fd5b506103c561120a565b3480156104b557600080fd5b506102cb611213565b3480156104ca57600080fd5b506102a4611222565b3480156104df57600080fd5b506102cb611228565b3480156104f457600080fd5b50610304611237565b34801561050957600080fd5b506102a4600435611240565b34801561052157600080fd5b506040805160206004602480358281013584810280870186019097528086526105ab96843560ff1696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506113929650505050505050565b6040805160ff94851681529290931660208301528183015290519081900360600190f35b3480156105db57600080fd5b506040805160206004602480358281013584810280870186019097528086526105ab96843560ff1696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506116c79650505050505050565b34801561067157600080fd5b5061028d611a05565b610304611b3a565b34801561068e57600080fd5b506102a4611d2a565b3480156106a357600080fd5b506102a4600435611d4e565b3480156106bb57600080fd5b506102a4611de3565b610304600435602435604435611de9565b3480156106e157600080fd5b5061028d612096565b3480156106f657600080fd5b506106ff6120d4565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610739578181015183820152602001610721565b50505050905090810190601f1680156107665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561078057600080fd5b506102a4612162565b34801561079557600080fd5b5061028d600160a060020a0360043516612168565b3480156107b657600080fd5b506103046121b6565b3480156107cb57600080fd5b506102a46004356121c5565b3480156107e357600080fd5b506106ff6004356121e4565b3480156107fb57600080fd5b50610304612258565b34801561081057600080fd5b506102a46004356123f4565b34801561082857600080fd5b50604080516020600460e43581810135601f810184900484028501840190955284845261028d948235600160a060020a03908116956024803583169660443590931695606435956084359560a4359560c43560ff16953695610104949193910191819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975061256b9650505050505050565b3480156108ee57600080fd5b506102cb61267e565b34801561090357600080fd5b506102a461268d565b34801561091857600080fd5b506103c5612693565b34801561092d57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261028d9436949293602493928401919081908401838280828437509497506126989650505050505050565b60408051602060046024803582810135601f81018590048502860185019096528585526102a495833560ff1695369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506127c59650505050505050565b348015610a8a57600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610ad7943694929360249392840191908190840183828082843750949750612c9b9650505050505050565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610b18578181015183820152602001610b00565b50505050905090810190601f168015610b455780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610b78578181015183820152602001610b60565b50505050905090810190601f168015610ba55780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b348015610bc157600080fd5b5061028d60ff60043516613050565b348015610bdc57600080fd5b506102cb613079565b348015610bf157600080fd5b506102cb613088565b348015610c0657600080fd5b5061028d613097565b348015610c1b57600080fd5b5061028d600160a060020a036004351661320c565b348015610c3c57600080fd5b50610304613241565b348015610c5157600080fd5b506102a4613263565b348015610c6657600080fd5b506106ff613287565b348015610c7b57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102a49436949293602493928401919081908401838280828437509497506132e29650505050505050565b348015610cd457600080fd5b5061028d600160a060020a036004351661388a565b348015610cf557600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610304948235946024803515159536959460649492019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750613a249650505050505050565b348015610d9557600080fd5b506103c5613dbb565b348015610daa57600080fd5b5061028d600160a060020a0360043516613dc0565b348015610dcb57600080fd5b506102a4600435613e25565b348015610de357600080fd5b506102a4613e7a565b7f5075626c6973686564000000000000000000000000000000000000000000000081565b600f54600160a060020a03165b90565b600154600160a060020a031681565b600f54604080517f2cf9942200000000000000000000000000000000000000000000000000000000815230600482015290516000928392600160a060020a0390911691632cf994229160248082019260209290919082900301818787803b158015610e9957600080fd5b505af1158015610ead573d6000803e3d6000fd5b505050506040513d6020811015610ec357600080fd5b505160115460408051831515815260208101839052606091810182815260058054600260001961010060018416150201909116049383018490529495507fad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf49486949390929190608083019084908015610f7d5780601f10610f5257610100808354040283529160200191610f7d565b820191906000526020600020905b815481529060010190602001808311610f6057829003601f168201915b505094505050505060405180910390a18091505b5090565b600e54600090600160a060020a031615801590610fbc5750600e54600160a060020a031633145b1515610fc757600080fd5b610fd385858585613e87565b95945050505050565b6003546040805160e060020a6363e6ffdd028152600160a060020a038681166004830152915160009392909216916363e6ffdd9160248082019260209290919082900301818787803b15801561103157600080fd5b505af1158015611045573d6000803e3d6000fd5b505050506040513d602081101561105b57600080fd5b50519050600160a060020a038116151561107f5761107a848484611163565b61108a565b61108a818484611163565b50505050565b600181565b600354604080517f26683e140000000000000000000000000000000000000000000000000000000081523360048201529051600092600160a060020a03169182916326683e149160248082019260209290919082900301818887803b1580156110fd57600080fd5b505af1158015611111573d6000803e3d6000fd5b505050506040513d602081101561112757600080fd5b505191505090565b6014602052600090815260408120805460018201546002830154600390930154600160a060020a03909216939092900b9084565b604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff80851660248301528316604482015290518491600160a060020a03831691633def51409160648082019260009290919082900301818387803b1580156111d757600080fd5b505af11580156111eb573d6000803e3d6000fd5b5050505050505050565b600e54600160a060020a031681565b60115481565b60135460ff1681565b600d54600160a060020a031681565b60075490565b600c54600160a060020a031681565b600a5460ff1681565b600e5460009081908190600160a060020a0316156112f05750600e54604080517f45080442000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a0390921691829163450804429160248083019260209291908290030181600087803b1580156112c157600080fd5b505af11580156112d5573d6000803e3d6000fd5b505050506040513d60208110156112eb57600080fd5b505191505b81156112fe5781925061138b565b83151561132d577f5075626c69736865640000000000000000000000000000000000000000000000925061138b565b600084121561135e577f4472616674000000000000000000000000000000000000000000000000000000925061138b565b600084131561138b577f447261667420696e20726576696577000000000000000000000000000000000092505b5050919050565b600080600080600080600080600060115460001415156113bf576113b4613fb9565b9850985098506116b8565b6113ca8c8c8c6116c7565b9750909550935060ff80861614806113e557508360ff1660ff145b156116ae576003546040805160e060020a6363e6ffdd0281523260048201529051600160a060020a03909216945084916363e6ffdd916024808201926020929091908290030181600087803b15801561143d57600080fd5b505af1158015611451573d6000803e3d6000fd5b505050506040513d602081101561146757600080fd5b50519150600160a060020a038216156116ae57508060ff808616141561158b5780600160a060020a0316635faecb763083600160a060020a03166396eba03d6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156114d557600080fd5b505af11580156114e9573d6000803e3d6000fd5b505050506040513d60208110156114ff57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260ff90911660248301525160448083019260209291908290030181600087803b15801561155057600080fd5b505af1158015611564573d6000803e3d6000fd5b505050506040513d602081101561157a57600080fd5b505115156001141561158b57600094505b60ff851615156116ae578360ff1660ff14156116ae5780600160a060020a0316635faecb763083600160a060020a031663d1aeb6516040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156115ef57600080fd5b505af1158015611603573d6000803e3d6000fd5b505050506040513d602081101561161957600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260ff90911660248301525160448083019260209291908290030181600087803b15801561166a57600080fd5b505af115801561167e573d6000803e3d6000fd5b505050506040513d602081101561169457600080fd5b50511515600114156116a957600093506116ae565b606493505b8484879850985098505b50505050505093509350939050565b60008060008060008060008060008060006010549750600160ff16601360009054906101000a900460ff1660ff1610156117025760ff611705565b60005b601354909750600a60ff909116101561171f5760ff611722565b60005b600e54909650600160a060020a0316156119f057600e60009054906101000a9004600160a060020a0316905080600160a060020a0316630f82c16f8f8f8f6040518463ffffffff1660e060020a028152600401808460ff1660ff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156117c25781810151838201526020016117aa565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156118015781810151838201526020016117e9565b5050505090500195505050505050608060405180830381600087803b15801561182957600080fd5b505af115801561183d573d6000803e3d6000fd5b505050506040513d608081101561185357600080fd5b5080516020820151604083015160609093015160105492985090965091945090925082111561188557606496506119f0565b80600160a060020a031663b535b03e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156118c357600080fd5b505af11580156118d7573d6000803e3d6000fd5b505050506040513d60208110156118ed57600080fd5b5051851660ff1615156118fe578396505b80600160a060020a0316636af274176040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561193c57600080fd5b505af1158015611950573d6000803e3d6000fd5b505050506040513d602081101561196657600080fd5b5051851660ff161515611977578295505b80600160a060020a031663f185db0c6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156119b557600080fd5b505af11580156119c9573d6000803e3d6000fd5b505050506040513d60208110156119df57600080fd5b5051851660ff1615156119f0578197505b50949c939b5094995091975050505050505050565b600f546000908190600160a060020a03163314611a2157600080fd5b600e54600160a060020a031615611b2e57600e60009054906101000a9004600160a060020a0316915081600160a060020a0316639e99bbea6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611a8857600080fd5b505af1158015611a9c573d6000803e3d6000fd5b505050506040513d6020811015611ab257600080fd5b50519050801580611ac35750806064145b1515611ace57600080fd5b8060641415611b2e5781600160a060020a03166341c0e1b56040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015611b1557600080fd5b505af1158015611b29573d6000803e3d6000fd5b505050505b611b36614262565b5050565b6000611b44611095565b1515611b4f57600080fd5b600a5460ff161515611b6057600080fd5b600060058054600181600116156101000203166002900490501115611c0f5760078054600181810180845560009390935260058054611bd6937fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688019260026101009183161591909102600019019091160461482d565b5050600654600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301555b60098054611c32916005916002600019610100600184161502019091160461482d565b5042600655604080516020810191829052600090819052611c55916009916148ae565b50600a805460ff1916905560035460408051600160a060020a039092168083526020830182815260058054600260001960018316156101000201909116049385018490527f482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e94929390929190606083019084908015611d155780601f10611cea57610100808354040283529160200191611d15565b820191906000526020600020905b815481529060010190602001808311611cf857829003601f168201915b5050935050505060405180910390a150600190565b7f447261667400000000000000000000000000000000000000000000000000000081565b600254600090600160a060020a031632148015611d8257506000821280611d825750600082138015611d8257506000601154125b15611d8d5760118290555b600f54600160a060020a0316331415611da65760118290555b60115460408051918252517fda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a29181900360200190a1505060115490565b600b5481565b60008381526014602052604081208054829081908190600160a060020a031615801590611e3357508354600160a060020a0316331480611e335750600254600160a060020a031633145b1515611e3e57600080fd5b600e548715159350600160a060020a031615611ef857600e54604080517f17685953000000000000000000000000000000000000000000000000000000008152600481018b9052602481018a90529051600160a060020a03909216935083916317685953916044808201926020929091908290030181600087803b158015611ec557600080fd5b505af1158015611ed9573d6000803e3d6000fd5b505050506040513d6020811015611eef57600080fd5b50518015935090505b8354600160a060020a0316331415611f35578215611f25576002848101805460ff19169091179055611f35565b60028401805460ff191660fe1790555b836001015484600301541015612013576002840154600090810b810b13611fb657835460408051808201909152600681527f726566756e640000000000000000000000000000000000000000000000000000602082015260038601546001870154611fb0938c93600160a060020a0390911692909103613e87565b50612013565b60025460408051808201909152600e81527f72656c6561736520657363726f77000000000000000000000000000000000000602082015260038601546001870154612011938c93600160a060020a0390911692909103613e87565b505b60008881526014602090815260408083208054600160a060020a03191681556001810184905560028101805460ff191690556003019290925581518a81529081018990528415158183015290517f2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac069181900360600190a150909695505050505050565b61209e6121b6565b15156120a957600080fd5b6040805160208101918290526000908190526120c7916009916148ae565b50600a805460ff19169055565b6009805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561215a5780601f1061212f5761010080835404028352916020019161215a565b820191906000526020600020905b81548152906001019060200180831161213d57829003601f168201915b505050505081565b60105481565b600154600160a060020a0316321461217f57600080fd5b600160a060020a038116151561219457600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b60006121c0612258565b905090565b60088054829081106121d357fe5b600091825260209091200154905081565b60078054829081106121f257fe5b600091825260209182902001805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529350909183018282801561215a5780601f1061212f5761010080835404028352916020019161215a565b6003546040805160e060020a6363e6ffdd0281523260048201529051600092600160a060020a0316918391829184916363e6ffdd9160248082019260209290919082900301818787803b1580156122ae57600080fd5b505af11580156122c2573d6000803e3d6000fd5b505050506040513d60208110156122d857600080fd5b5051604080517f5d97b6c20000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a03831691635faecb769130918491635d97b6c29160048083019260209291908290030181600087803b15801561234557600080fd5b505af1158015612359573d6000803e3d6000fd5b505050506040513d602081101561236f57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260ff90911660248301525160448083019260209291908290030181600087803b1580156123c057600080fd5b505af11580156123d4573d6000803e3d6000fd5b505050506040513d60208110156123ea57600080fd5b5051935050505090565b6000806000612401613241565b151561240c57600080fd5b600e54600160a060020a0316151561249057600254600160a060020a03163214806124415750600254600160a060020a031633145b801561245857508360001914806124585750836001145b156124655783915061248b565b600f54600160a060020a0316331480156124825750600060115412155b1561248b578391505b612528565b50600e54604080517f3513a805000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a03909216918291633513a8059160248083019260209291908290030181600087803b1580156124f957600080fd5b505af115801561250d573d6000803e3d6000fd5b505050506040513d602081101561252357600080fd5b505191505b60118290556040805183815290517fda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a29181900360200190a1505060115492915050565b600354604080517f8da5cb5b0000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216918291638da5cb5b9160048083019260209291908290030181600087803b1580156125cc57600080fd5b505af11580156125e0573d6000803e3d6000fd5b505050506040513d60208110156125f657600080fd5b5051600160a060020a0316331461260c57600080fd5b600c8054600160a060020a0319908116600160a060020a038d811691909117909255600d805482168c8416179055600e8054909116918a169190911790556010879055601186905560128590556013805460ff191660ff8616179055612672838361429e565b50505050505050505050565b600254600160a060020a031681565b60125481565b600a81565b6126a06121b6565b15156126ab57600080fd5b600a5460ff16156126bb57600080fd5b80516080116126c957600080fd5b80516126dc9060099060208401906148ae565b50600a805460ff191660011790556003547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316612720610e10565b60408051600160a060020a0380851682528316602082015260609181018281526009805460026000196101006001841615020190911604938301849052926080830190849080156127b25780601f10612787576101008083540402835291602001916127b2565b820191906000526020600020905b81548152906001019060200180831161279557829003601f168201915b505094505050505060405180910390a150565b6000806000806127d361491c565b601280546001019055600080806127eb8d8b8b611392565b98509096509450606460ff86161415612818573487111561280b57600080fd5b6128136143fa565b600094505b60ff85161561282657600080fd5b604080516080810182523381523460208083019182526000838501818152606085018281526012548352601490935294812084518154600160a060020a03918216600160a060020a03199091161782559351600182015594516002860180549190920b60ff1660ff1990911617905551600390930192909255600e5490955016156129e157600e60009054906101000a9004600160a060020a0316925082600160a060020a031663123e0e806012548f8d8d6040518563ffffffff1660e060020a028152600401808581526020018460ff1660ff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015612940578181015183820152602001612928565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561297f578181015183820152602001612967565b505050509050019650505050505050602060405180830381600087803b1580156129a857600080fd5b505af11580156129bc573d6000803e3d6000fd5b505050506040513d60208110156129d257600080fd5b5051915081156129e157600080fd5b7f50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a066012548e60058f8f604051808681526020018560ff1660ff168152602001806020018060200180602001848103845287818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015612aad5780601f10612a8257610100808354040283529160200191612aad565b820191906000526020600020905b815481529060010190602001808311612a9057829003601f168201915b5050848103835286518152865160209182019188019080838360005b83811015612ae1578181015183820152602001612ac9565b50505050905090810190601f168015612b0e5780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b83811015612b41578181015183820152602001612b29565b50505050905090810190601f168015612b6e5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a15060005b8951811015612bff578981815181101515612b9c57fe5b6020908102909101015115612bf7577f515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c388a82815181101515612bda57fe5b602090810290910181015160408051918252519081900390910190a15b600101612b85565b5060005b8851811015612c87578981815181101515612c1a57fe5b6020908102909101015115612c7f577fb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b6848982815181101515612c5857fe5b602090810290910181015160408051600160a060020a039092168252519081900390910190a15b600101612c03565b50506012549b9a5050505050505050505050565b600354600d546060918291600160a060020a0391821691161580612d505750600d54604080517fd6be0f49000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015290519183169163d6be0f49916024808201926020929091908290030181600087803b158015612d2257600080fd5b505af1158015612d36573d6000803e3d6000fd5b505050506040513d6020811015612d4c57600080fd5b5051155b15612d79576040805160208181018352600080835283519182019093529182529350915061304a565b600d54604080517f589aafc1000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015290519183169163268bfac491839163589aafc19160248082019260009290919082900301818387803b158015612de857600080fd5b505af1158015612dfc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612e2557600080fd5b810190808051640100000000811115612e3d57600080fd5b82016020810184811115612e5057600080fd5b8151640100000000811182820187101715612e6a57600080fd5b5050929190505050866040518363ffffffff1660e060020a028152600401808060200180602001838103835285818151815260200191508051906020019080838360005b83811015612ec6578181015183820152602001612eae565b50505050905090810190601f168015612ef35780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015612f26578181015183820152602001612f0e565b50505050905090810190601f168015612f535780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015612f7457600080fd5b505af1158015612f88573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015612fb157600080fd5b810190808051640100000000811115612fc957600080fd5b82016020810184811115612fdc57600080fd5b8151640100000000811182820187101715612ff657600080fd5b5050929190602001805164010000000081111561301257600080fd5b8201602081018481111561302557600080fd5b815164010000000081118282018710171561303f57600080fd5b509497509550505050505b50915091565b613058612258565b151561306357600080fd5b6013805460ff191660ff92909216919091179055565b600354600160a060020a031681565b600f54600160a060020a031681565b600e546000908190600160a060020a031615156130bb576130b66144ef565b611b36565b600e60009054906101000a9004600160a060020a0316915081600160a060020a031663c9f3d94c6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561311157600080fd5b505af1158015613125573d6000803e3d6000fd5b505050506040513d602081101561313b57600080fd5b505190506064811415613150576130b66144ef565b801561315b57600080fd5b60408051602080825260058054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156131fa5780601f106131cf576101008083540402835291602001916131fa565b820191906000526020600020905b8154815290600101906020018083116131dd57829003601f168201915b50509250505060405180910390a15050565b613214612258565b151561321f57600080fd5b600d8054600160a060020a031916600160a060020a0392909216919091179055565b600061324b612258565b806121c0575050600f54600160a060020a0316331490565b7f447261667420696e20726576696577000000000000000000000000000000000081565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561215a5780601f1061212f5761010080835404028352916020019161215a565b6000806000806000806132f36121b6565b15156132fe57600080fd5b866040516020018082805190602001908083835b602083106133315780518252601f199092019160209182019101613312565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106133945780518252601f199092019160209182019101613375565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209450600560405160200180828054600181600116156101000203166002900480156134235780601f10613401576101008083540402835291820191613423565b820191906000526020600020905b81548152906001019060200180831161340f575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106134665780518252601f199092019160209182019101613447565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120965050505084841415613587576040805160208101918290526000908190526134ba916005916148ae565b506000600681905560035460408051600160a060020a03909216808352908201839052606060208084018281528c51928501929092528b517f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f519593948d9493909290916080840191860190808383885b8381101561354257818101518382015260200161352a565b50505050905090810190601f16801561356f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160009550613880565b6000199250600091505b60075482101561379d5760078054839081106135a957fe5b9060005260206000200160405160200180828054600181600116156101000203166002900480156136115780601f106135ef576101008083540402835291820191613611565b820191906000526020600020905b8154815290600101906020018083116135fd575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106136545780518252601f199092019160209182019101613635565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912093505050508481141561379257600780548390811061369857fe5b9060005260206000200160006136ae9190614943565b60088054839081106136bc57fe5b6000918252602082200155600754600019018214613762576007805460001981019081106136e657fe5b906000526020600020016007838154811015156136ff57fe5b90600052602060002001908054600181600116156101000203166002900461372892919061482d565b5060088054600019810190811061373b57fe5b906000526020600020015460088381548110151561375557fe5b6000918252602090912001555b600780549061377590600019830161498a565b5060088054906137899060001983016149b3565b5081925061379d565b600190910190613591565b6000198314156137ac57600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600360009054906101000a9004600160a060020a031688856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015613840578181015183820152602001613828565b50505050905090810190601f16801561386d5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18295505b5050505050919050565b6000806000613897612258565b15156138a257600080fd5b600e54600160a060020a03161561394257600e60009054906101000a9004600160a060020a0316925082600160a060020a0316639e99bbea6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561390957600080fd5b505af115801561391d573d6000803e3d6000fd5b505050506040513d602081101561393357600080fd5b50519150811561394257600080fd5b600e8054600160a060020a031916600160a060020a038616908117909155156139df5783925082600160a060020a0316637b1cdb3e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156139a657600080fd5b505af11580156139ba573d6000803e3d6000fd5b505050506040513d60208110156139d057600080fd5b5051905080156139df57600080fd5b600e5460408051600160a060020a039092168252517fa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb79181900360200190a150505050565b600254600090819081908190600160a060020a0316331480613a505750600d54600160a060020a031633145b1515613a5b57600080fd5b60008881526014602052604090208054909350600160a060020a03161515613a8257600080fd5b600e54879250600160a060020a031615613b3b5750600e54604080517fe870ed91000000000000000000000000000000000000000000000000000000008152600481018a905288151560248201529051600160a060020a0390921691829163e870ed919160448083019260209291908290030181600087803b158015613b0757600080fd5b505af1158015613b1b573d6000803e3d6000fd5b505050506040513d6020811015613b3157600080fd5b5051159150613c0f565b826001015483600301541015613c0f57861515613bb257825460408051808201909152600f81527f616363657373206465636c696e65640000000000000000000000000000000000602082015260038501546001860154613bac938c93600160a060020a0390911692909103613e87565b50613c0f565b60025460408051808201909152600d81527f6f776e6572207061796d656e7400000000000000000000000000000000000000602082015260038501546001860154613c0d938c93600160a060020a0390911692909103613e87565b505b60018215151415613d4a5760028301805460ff19166001908117909155604080518a8152602080820184905260809282018381528a519383019390935289517f475e9d68ca61f129cebee5af694af00ed0e3b3b0d4b74071fbb81d0e2b912718948d9490938c938c93919291606084019160a08501919087019080838360005b83811015613ca7578181015183820152602001613c8f565b50505050905090810190601f168015613cd45780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015613d07578181015183820152602001613cef565b50505050905090810190601f168015613d345780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a1613db0565b60028301805460ff191660ff179055604080518981526000602082018190526080828401819052820181905260c06060830181905282015290517f475e9d68ca61f129cebee5af694af00ed0e3b3b0d4b74071fbb81d0e2b912718918190036101000190a15b509695505050505050565b606481565b600254600160a060020a0316321480613de35750600254600160a060020a031633145b1515613dee57600080fd5b600160a060020a0381161515613e0357600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b6000613e2f612258565b1515613e3a57600080fd5b60108290556040805183815290517f4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a39181900360200190a1505060105490565b60006121c0601154611240565b600084815260146020526040812060018101546003820154840111613fb057604051600160a060020a0386169084156108fc029085906000818181858888f19350505050158015613edc573d6000803e3d6000fd5b508281600301540181600301819055507fad58d18ea7292f887da6f15bb4f0badddaa33d169713d09cf49710acc7c3a5b986858786604051808581526020018060200184600160a060020a0316600160a060020a03168152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015613f72578181015183820152602001613f5a565b50505050905090810190601f168015613f9f5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15b50949350505050565b60025460009081908190819081908190600160a060020a0316321480613fe75750601354606460ff90911610155b15613ffd5760105460009650869550935061425a565b6003546040805160e060020a6363e6ffdd0281523260048201529051600160a060020a03909216945084916363e6ffdd916024808201926020929091908290030181600087803b15801561405057600080fd5b505af1158015614064573d6000803e3d6000fd5b505050506040513d602081101561407a57600080fd5b50519150600160a060020a038216156141a05781905080600160a060020a0316635faecb763083600160a060020a0316635d97b6c26040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156140de57600080fd5b505af11580156140f2573d6000803e3d6000fd5b505050506040513d602081101561410857600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260ff90911660248301525160448083019260209291908290030181600087803b15801561415957600080fd5b505af115801561416d573d6000803e3d6000fd5b505050506040513d602081101561418357600080fd5b50511515600114156141a05760105460009650869550935061425a565b600f54604080517f29d002190000000000000000000000000000000000000000000000000000000081523260048201529051600160a060020a03909216916329d00219916024808201926020929091908290030181600087803b15801561420657600080fd5b505af115801561421a573d6000803e3d6000fd5b505050506040513d602081101561423057600080fd5b505115156001141561424d5760105460009650869550935061425a565b601054600a965086955093505b505050909192565b600254600160a060020a03163214806142855750600254600160a060020a031633145b151561429057600080fd5b600254600160a060020a0316ff5b6142a66149d7565b6142ae6149d7565b600254606090600090600160a060020a03163214806142d75750600254600160a060020a031633145b15156142e257600080fd5b85516142f59060059060208901906148ae565b5084511515614303576143f2565b61430c856145bf565b935061434c6040805190810160405280600181526020017f3a000000000000000000000000000000000000000000000000000000000000008152506145bf565b925061435e848463ffffffff6145e516565b60010160405190808252806020026020018201604052801561439457816020015b606081526020019060019003908161437f5790505b509150600090505b81518110156143dd576143bd6143b8858563ffffffff61465216565b614665565b82828151811015156143cb57fe5b6020908102909101015260010161439c565b81516143f09060079060208501906149ee565b505b505050505050565b6003546040805160e060020a6363e6ffdd02815233600482015290516000928392600160a060020a03909116916363e6ffdd9160248082019260209290919082900301818787803b15801561444e57600080fd5b505af1158015614462573d6000803e3d6000fd5b505050506040513d602081101561447857600080fd5b5051604080517fb8ff1dba0000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a0383169163b8ff1dba9160048082019260009290919082900301818387803b1580156144db57600080fd5b505af11580156143f2573d6000803e3d6000fd5b6144f7612258565b806145055750614505611095565b151561451057600080fd5b60408051602080825260058054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156145af5780601f10614584576101008083540402835291602001916145af565b820191906000526020600020905b81548152906001019060200180831161459257829003601f168201915b50509250505060405180910390a1565b6145c76149d7565b50604080518082019091528151815260209182019181019190915290565b600080826000015161460985600001518660200151866000015187602001516146b8565b0190505b8351602085015101811161464b5782516020808601518651918601516001909501946146439291850390910390849084906146b8565b01905061460d565b5092915050565b61465a6149d7565b61464b838383614778565b606080600083600001516040519080825280601f01601f19166020018201604052801561469c578160200160208202803883390190505b50915060208201905061464b81856020015186600001516147e9565b600083818080808080808c8b116147625760208b1161472b5760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b82851461472357838810614710578c8c019850614768565b87806001019850508588511692506146f8565b879850614768565b8a8a209150600096505b8a8d03871161476257508987208181141561475257879850614768565b6001978801979690960195614735565b8c8c0198505b5050505050505050949350505050565b6147806149d7565b600061479e85600001518660200151866000015187602001516146b8565b602080870180519186019190915280518203855286519051919250018114156147ca57600085526147e0565b8351835186519101900385528351810160208601525b50909392505050565b60005b6020821061480e578251845260209384019390920191601f19909101906147ec565b50905182516020929092036101000a6000190180199091169116179052565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061486657805485556148a2565b828001600101855582156148a257600052602060002091601f016020900482015b828111156148a2578254825591600101919060010190614887565b50610f91929150614a47565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106148ef57805160ff19168380011785556148a2565b828001600101855582156148a2579182015b828111156148a2578251825591602001919060010190614901565b60408051608081018252600080825260208201819052918101829052606081019190915290565b50805460018160011615610100020316600290046000825580601f106149695750614987565b601f0160209004906000526020600020908101906149879190614a47565b50565b8154818355818111156149ae576000838152602090206149ae918101908301614a61565b505050565b8154818355818111156149ae576000838152602090206149ae918101908301614a47565b604080518082019091526000808252602082015290565b828054828255906000526020600020908101928215614a3b579160200282015b82811115614a3b5782518051614a2b9184916020909101906148ae565b5091602001919060010190614a0e565b50610f91929150614a61565b610e1d91905b80821115610f915760008155600101614a4d565b610e1d91905b80821115610f91576000614a7b8282614943565b50600101614a675600a165627a7a72305820fa0c8705255717bf72642bffca753966cd0bc168f5eb9aa72227fc533b257f820029a165627a7a72305820f12b6ec8330a3ae725818dba3880a30232566362ee11150869d713bd389da07d0029",
}

// BaseContentFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseContentFactoryMetaData.ABI instead.
var BaseContentFactoryABI = BaseContentFactoryMetaData.ABI

// Deprecated: Use BaseContentFactoryMetaData.Sigs instead.
// BaseContentFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentFactoryFuncSigs = BaseContentFactoryMetaData.Sigs

// BaseContentFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseContentFactoryMetaData.Bin instead.
var BaseContentFactoryBin = BaseContentFactoryMetaData.Bin

// DeployBaseContentFactory deploys a new Ethereum contract, binding an instance of BaseContentFactory to it.
func DeployBaseContentFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseContentFactory, error) {
	parsed, err := ParsedABI(K_BaseContentFactory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseContentFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContentFactory{BaseContentFactoryCaller: BaseContentFactoryCaller{contract: contract}, BaseContentFactoryTransactor: BaseContentFactoryTransactor{contract: contract}, BaseContentFactoryFilterer: BaseContentFactoryFilterer{contract: contract}}, nil
}

// BaseContentFactory is an auto generated Go binding around an Ethereum contract.
type BaseContentFactory struct {
	BaseContentFactoryCaller     // Read-only binding to the contract
	BaseContentFactoryTransactor // Write-only binding to the contract
	BaseContentFactoryFilterer   // Log filterer for contract events
}

// BaseContentFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseContentFactory creates a new instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactory(address common.Address, backend bind.ContractBackend) (*BaseContentFactory, error) {
	contract, err := bindBaseContentFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactory{BaseContentFactoryCaller: BaseContentFactoryCaller{contract: contract}, BaseContentFactoryTransactor: BaseContentFactoryTransactor{contract: contract}, BaseContentFactoryFilterer: BaseContentFactoryFilterer{contract: contract}}, nil
}

// NewBaseContentFactoryCaller creates a new read-only instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseContentFactoryCaller, error) {
	contract, err := bindBaseContentFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryCaller{contract: contract}, nil
}

// NewBaseContentFactoryTransactor creates a new write-only instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentFactoryTransactor, error) {
	contract, err := bindBaseContentFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryTransactor{contract: contract}, nil
}

// NewBaseContentFactoryFilterer creates a new log filterer instance of BaseContentFactory, bound to a specific deployed contract.
func NewBaseContentFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentFactoryFilterer, error) {
	contract, err := bindBaseContentFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryFilterer{contract: contract}, nil
}

// bindBaseContentFactory binds a generic wrapper to an already deployed contract.
func bindBaseContentFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseContentFactory)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseContentFactory *BaseContentFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentFactory.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseContentFactory *BaseContentFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentFactory.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseContentFactory *BaseContentFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentFactory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseContentFactory *BaseContentFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseContentFactory.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentFactory *BaseContentFactoryTransactor) CreateContent(opts *bind.TransactOpts, lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "createContent", lib, content_type)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "kill")
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseContentFactory *BaseContentFactoryTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseContentFactory.contract.RawTransact(opts, calldata)
}

// BaseContentFactoryExtMetaData contains all meta data concerning the BaseContentFactoryExt contract.
var BaseContentFactoryExtMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OP_ACCESS_COMPLETE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OP_ACCESS_REQUEST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_opCodes\",\"type\":\"uint32[]\"},{\"name\":\"_contentAddrs\",\"type\":\"address[]\"},{\"name\":\"_userAddrs\",\"type\":\"address[]\"},{\"name\":\"_ctxHashes\",\"type\":\"bytes32[]\"},{\"name\":\"_ts\",\"type\":\"uint256[]\"},{\"name\":\"_amt\",\"type\":\"uint256[]\"}],\"name\":\"executeAccessBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"libraryAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"request_timestamp\",\"type\":\"uint64\"}],\"name\":\"AccessRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"libraryAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contextHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"request_timestamp\",\"type\":\"uint64\"}],\"name\":\"AccessComplete\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"4d887374": "OP_ACCESS_COMPLETE()",
		"52344328": "OP_ACCESS_REQUEST()",
		"af570c04": "contentSpace()",
		"bf4e088f": "createContent(address,address)",
		"02d05d3f": "creator()",
		"78cd9119": "executeAccessBatch(uint32[],address[],address[],bytes32[],uint256[],uint256[])",
		"16279055": "isContract(address)",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
	},
	Bin: "0x60806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f426173654374466163746f727932303139313231393138323130304d4c0000006004557f426173654374466163746f7279587432303139313033313230333130304d4c0060055560018054600160a060020a031990811632908117909255600280549091169091179055615e9f806100a26000396000f3006080604052600436106100a05763ffffffff60e060020a60003504166302d05d3f81146100a257806316279055146100d357806341c0e1b5146101085780634d8873741461011d578063523443281461014b57806354fd4d50146101605780636d2e4b1b1461018757806378cd9119146101a85780638da5cb5b1461031a578063af570c041461032f578063bf4e088f14610344578063f2fde38b1461036b575b005b3480156100ae57600080fd5b506100b761038c565b60408051600160a060020a039092168252519081900360200190f35b3480156100df57600080fd5b506100f4600160a060020a036004351661039b565b604080519115158252519081900360200190f35b34801561011457600080fd5b506100a06103a3565b34801561012957600080fd5b506101326103df565b6040805163ffffffff9092168252519081900360200190f35b34801561015757600080fd5b506101326103e4565b34801561016c57600080fd5b506101756103e9565b60408051918252519081900360200190f35b34801561019357600080fd5b506100a0600160a060020a03600435166103ef565b3480156101b457600080fd5b50604080516020600480358082013583810280860185019096528085526100a095369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061044a9650505050505050565b34801561032657600080fd5b506100b7610c8f565b34801561033b57600080fd5b506100b7610c9e565b34801561035057600080fd5b506100b7600160a060020a0360043581169060243516610cad565b34801561037757600080fd5b506100a0600160a060020a03600435166111f5565b600154600160a060020a031681565b6000903b1190565b600254600160a060020a03163214806103c65750600254600160a060020a031633145b15156103d157600080fd5b600254600160a060020a0316ff5b600281565b600181565b60055481565b600154600160a060020a0316321461040657600080fd5b600160a060020a038116151561041b57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000806000806060808b519550858b5114151561046657600080fd5b8951861461047357600080fd5b8851861461048057600080fd5b8751861461048d57600080fd5b600094505b85851015610c81578a858151811015156104a857fe5b9060200190602002015193506104d48b868151811015156104c557fe5b9060200190602002015161039b565b15156104df57610c76565b8b516001908d90879081106104f057fe5b9060200190602002015163ffffffff161415610932577f8354ff8c2c210fd53709db56438bb45d36a62de8bcc95c8459d80ce933d476804285600160a060020a031663b816f5136040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561056657600080fd5b505af115801561057a573d6000803e3d6000fd5b505050506040513d602081101561059057600080fd5b50518d518e90899081106105a057fe5b906020019060200201518d898151811015156105b857fe5b906020019060200201518d8a8151811015156105d057fe5b906020019060200201518d8b8151811015156105e857fe5b602090810290910181015160408051978852600160a060020a039687169288019290925293851686820152919093166060850152608084019290925267ffffffffffffffff1660a0830152519081900360c00190a183600160a060020a0316632310167f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561067b57600080fd5b505af115801561068f573d6000803e3d6000fd5b505050506040513d60208110156106a557600080fd5b5051600160a060020a03161580159061072b575061072b84600160a060020a0316632310167f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156106fa57600080fd5b505af115801561070e573d6000803e3d6000fd5b505050506040513d602081101561072457600080fd5b505161039b565b1561092d576040805160018082528183019092529060208083019080388339019050509050898581518110151561075e57fe5b9060200190602002015181600081518110151561077757fe5b90602001906020020190600160a060020a03169081600160a060020a03168152505083600160a060020a0316632310167f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156107d757600080fd5b505af11580156107eb573d6000803e3d6000fd5b505050506040513d602081101561080157600080fd5b50518851909350600160a060020a0384169063123e0e80908a908890811061082557fe5b90602001906020020151606485856040518563ffffffff1660e060020a028152600401808581526020018460ff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610898578181015183820152602001610880565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156108d75781810151838201526020016108bf565b505050509050019650505050505050602060405180830381600087803b15801561090057600080fd5b505af1158015610914573d6000803e3d6000fd5b505050506040513d602081101561092a57600080fd5b50505b610c76565b8b516002908d908790811061094357fe5b9060200190602002015163ffffffff161415610c71577f078326d18c0223483393342523f51da024ddcb0f1e929aa1f142100381c794f54285600160a060020a031663b816f5136040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156109b957600080fd5b505af11580156109cd573d6000803e3d6000fd5b505050506040513d60208110156109e357600080fd5b50518d518e90899081106109f357fe5b906020019060200201518d89815181101515610a0b57fe5b906020019060200201518d8a815181101515610a2357fe5b906020019060200201518d8b815181101515610a3b57fe5b602090810290910181015160408051978852600160a060020a039687169288019290925293851686820152919093166060850152608084019290925267ffffffffffffffff1660a0830152519081900360c00190a183600160a060020a0316632310167f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610ace57600080fd5b505af1158015610ae2573d6000803e3d6000fd5b505050506040513d6020811015610af857600080fd5b5051600160a060020a031615801590610b4d5750610b4d84600160a060020a0316632310167f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156106fa57600080fd5b1561092d5783600160a060020a0316632310167f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610b9057600080fd5b505af1158015610ba4573d6000803e3d6000fd5b505050506040513d6020811015610bba57600080fd5b50518851909350600160a060020a0384169063eb81eff0908a9088908110610bde57fe5b906020019060200201518988815181101515610bf657fe5b906020019060200201518d89815181101515610c0e57fe5b906020019060200201516040518463ffffffff1660e060020a0281526004018084815260200183815260200182600160a060020a0316600160a060020a031681526020019350505050602060405180830381600087803b15801561090057600080fd5b600080fd5b600190940193610492565b505050505050505050505050565b600254600160a060020a031681565b600354600160a060020a031681565b60008060008060008087945084600160a060020a0316630eaec2c5326040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015610d1457600080fd5b505af1158015610d28573d6000803e3d6000fd5b505050506040513d6020811015610d3e57600080fd5b50511515610d4b57600080fd5b84600160a060020a03166329dedde5886040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015610da657600080fd5b505af1158015610dba573d6000803e3d6000fd5b505050506040513d6020811015610dd057600080fd5b50511515610ddd57600080fd5b338888610de8611267565b600160a060020a03938416815291831660208301529091166040808301919091525190819003606001906000f080158015610e27573d6000803e3d6000fd5b50935083600160a060020a031663c9e8e72d86600160a060020a03166332eaf21b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610e7757600080fd5b505af1158015610e8b573d6000803e3d6000fd5b505050506040513d6020811015610ea157600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a03909216600483015251602480830192600092919082900301818387803b158015610ee757600080fd5b505af1158015610efb573d6000803e3d6000fd5b5050505083600160a060020a031663e538530386600160a060020a0316631cdbee5a8a6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015610f6957600080fd5b505af1158015610f7d573d6000803e3d6000fd5b505050506040513d6020811015610f9357600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a03909216600483015251602480830192600092919082900301818387803b158015610fd957600080fd5b505af1158015610fed573d6000803e3d6000fd5b5050505033925082600160a060020a031663a2d67fcf6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561103257600080fd5b505af1158015611046573d6000803e3d6000fd5b505050506040513d602081101561105c57600080fd5b5051604080517f5d97b6c20000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a03831691633def51409187918491635d97b6c29160048083019260209291908290030181600087803b1580156110c957600080fd5b505af11580156110dd573d6000803e3d6000fd5b505050506040513d60208110156110f357600080fd5b5051604080517f186897330000000000000000000000000000000000000000000000000000000081529051600160a060020a0387169163186897339160048083019260209291908290030181600087803b15801561115057600080fd5b505af1158015611164573d6000803e3d6000fd5b505050506040513d602081101561117a57600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03909416600485015260ff92831660248501529116604483015251606480830192600092919082900301818387803b1580156111d157600080fd5b505af11580156111e5573d6000803e3d6000fd5b50959a9950505050505050505050565b600254600160a060020a03163214806112185750600254600160a060020a031633145b151561122357600080fd5b600160a060020a038116151561123857600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604051614bfc80611278833901905600608060408190527f4f776e61626c6532303139303532383139333830304d4c00000000000000000060009081557f4564697461626c6532303139313231393133343630304d4c00000000000000006004557f42617365436f6e74656e7432303139313230323136313730304d4c0000000000600b556012556013805460ff19169055606080614bfc8339810160408181528251602080850151948301516001805432600160a060020a03199182168117909255600280548216909217909155600380548216600160a060020a0380871691909117909155600f80548316828a161790819055600019601155600c80549093168285161790925560138054600a60ff1990911617905516855292519194937fc3decc188980e855666b70498ca85e8fa284d97d30483d828fa126f7303d7d19929081900390910190a1505050614ab08061014c6000396000f30060806040526004361061028d5763ffffffff60e060020a60003504166217de98811461028f578062821de3146102b657806302d05d3f146102e7578063075d4782146102fc5780630c6d3f93146103185780630fe1b5a214610383578063100508a2146103b057806314cfabb3146103db5780631a735f18146103f057806322e564eb1461043d5780632310167f1461046a57806327c1c21d1461047f57806329adec141461049457806332eaf21b146104a9578063331b86c0146104be57806336ebffca146104d3578063375a6e7c146104e857806338864284146104fd57806338d0f504146105155780633ba58afb146105cf57806341c0e1b514610665578063446e88261461067a5780634dd70788146106825780635267db441461069757806354fd4d50146106af5780635cc4aa9b146106c45780635f6a1301146106d5578063628449fd146106ea57806364ade32b146107745780636d2e4b1b146107895780636e375427146107aa5780637886f747146107bf5780637ca8f618146107d757806381beeb64146107ef5780638280dd8f146108045780638c8c61e91461081c5780638da5cb5b146108e25780638f779201146108f757806397ac4fd21461090c5780639867db7414610921578063a1ff106e1461097a578063a8d4160e14610a7e578063aa024e8b14610bb5578063af570c0414610bd0578063b816f51314610be5578063c287e0ed14610bfa578063c9e8e72d14610c0f578063cbcd446114610c30578063d810f8c814610c45578063e02dd9c214610c5a578063e1a7071714610c6f578063e538530314610cc8578063ee56d76714610ce9578063ef1d7dc214610d89578063f2fde38b14610d9e578063f4d9bae814610dbf578063f81ab0ae14610dd7575b005b34801561029b57600080fd5b506102a4610dec565b60408051918252519081900360200190f35b3480156102c257600080fd5b506102cb610e10565b60408051600160a060020a039092168252519081900360200190f35b3480156102f357600080fd5b506102cb610e20565b610304610e2f565b604080519115158252519081900360200190f35b34801561032457600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526103049482359460248035600160a060020a0316953695946064949201919081908401838280828437509497505093359450610f959350505050565b34801561038f57600080fd5b5061028d600160a060020a036004351660ff60243581169060443516610fdc565b3480156103bc57600080fd5b506103c5611090565b6040805160ff9092168252519081900360200190f35b3480156103e757600080fd5b50610304611095565b3480156103fc57600080fd5b5061040860043561112f565b60408051600160a060020a0390951685526020850193909352600091820b90910b838301526060830152519081900360800190f35b34801561044957600080fd5b5061028d600160a060020a036004351660ff60243581169060443516611163565b34801561047657600080fd5b506102cb6111f5565b34801561048b57600080fd5b506102a4611204565b3480156104a057600080fd5b506103c561120a565b3480156104b557600080fd5b506102cb611213565b3480156104ca57600080fd5b506102a4611222565b3480156104df57600080fd5b506102cb611228565b3480156104f457600080fd5b50610304611237565b34801561050957600080fd5b506102a4600435611240565b34801561052157600080fd5b506040805160206004602480358281013584810280870186019097528086526105ab96843560ff1696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506113929650505050505050565b6040805160ff94851681529290931660208301528183015290519081900360600190f35b3480156105db57600080fd5b506040805160206004602480358281013584810280870186019097528086526105ab96843560ff1696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506116c79650505050505050565b34801561067157600080fd5b5061028d611a05565b610304611b3a565b34801561068e57600080fd5b506102a4611d2a565b3480156106a357600080fd5b506102a4600435611d4e565b3480156106bb57600080fd5b506102a4611de3565b610304600435602435604435611de9565b3480156106e157600080fd5b5061028d612096565b3480156106f657600080fd5b506106ff6120d4565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610739578181015183820152602001610721565b50505050905090810190601f1680156107665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561078057600080fd5b506102a4612162565b34801561079557600080fd5b5061028d600160a060020a0360043516612168565b3480156107b657600080fd5b506103046121b6565b3480156107cb57600080fd5b506102a46004356121c5565b3480156107e357600080fd5b506106ff6004356121e4565b3480156107fb57600080fd5b50610304612258565b34801561081057600080fd5b506102a46004356123f4565b34801561082857600080fd5b50604080516020600460e43581810135601f810184900484028501840190955284845261028d948235600160a060020a03908116956024803583169660443590931695606435956084359560a4359560c43560ff16953695610104949193910191819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975061256b9650505050505050565b3480156108ee57600080fd5b506102cb61267e565b34801561090357600080fd5b506102a461268d565b34801561091857600080fd5b506103c5612693565b34801561092d57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261028d9436949293602493928401919081908401838280828437509497506126989650505050505050565b60408051602060046024803582810135601f81018590048502860185019096528585526102a495833560ff1695369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506127c59650505050505050565b348015610a8a57600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610ad7943694929360249392840191908190840183828082843750949750612c9b9650505050505050565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610b18578181015183820152602001610b00565b50505050905090810190601f168015610b455780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610b78578181015183820152602001610b60565b50505050905090810190601f168015610ba55780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b348015610bc157600080fd5b5061028d60ff60043516613050565b348015610bdc57600080fd5b506102cb613079565b348015610bf157600080fd5b506102cb613088565b348015610c0657600080fd5b5061028d613097565b348015610c1b57600080fd5b5061028d600160a060020a036004351661320c565b348015610c3c57600080fd5b50610304613241565b348015610c5157600080fd5b506102a4613263565b348015610c6657600080fd5b506106ff613287565b348015610c7b57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102a49436949293602493928401919081908401838280828437509497506132e29650505050505050565b348015610cd457600080fd5b5061028d600160a060020a036004351661388a565b348015610cf557600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610304948235946024803515159536959460649492019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750613a249650505050505050565b348015610d9557600080fd5b506103c5613dbb565b348015610daa57600080fd5b5061028d600160a060020a0360043516613dc0565b348015610dcb57600080fd5b506102a4600435613e25565b348015610de357600080fd5b506102a4613e7a565b7f5075626c6973686564000000000000000000000000000000000000000000000081565b600f54600160a060020a03165b90565b600154600160a060020a031681565b600f54604080517f2cf9942200000000000000000000000000000000000000000000000000000000815230600482015290516000928392600160a060020a0390911691632cf994229160248082019260209290919082900301818787803b158015610e9957600080fd5b505af1158015610ead573d6000803e3d6000fd5b505050506040513d6020811015610ec357600080fd5b505160115460408051831515815260208101839052606091810182815260058054600260001961010060018416150201909116049383018490529495507fad9c5eacc073b2e1767affc883e050347e1dd379c9799cb5ac0a17bde80f5cf49486949390929190608083019084908015610f7d5780601f10610f5257610100808354040283529160200191610f7d565b820191906000526020600020905b815481529060010190602001808311610f6057829003601f168201915b505094505050505060405180910390a18091505b5090565b600e54600090600160a060020a031615801590610fbc5750600e54600160a060020a031633145b1515610fc757600080fd5b610fd385858585613e87565b95945050505050565b6003546040805160e060020a6363e6ffdd028152600160a060020a038681166004830152915160009392909216916363e6ffdd9160248082019260209290919082900301818787803b15801561103157600080fd5b505af1158015611045573d6000803e3d6000fd5b505050506040513d602081101561105b57600080fd5b50519050600160a060020a038116151561107f5761107a848484611163565b61108a565b61108a818484611163565b50505050565b600181565b600354604080517f26683e140000000000000000000000000000000000000000000000000000000081523360048201529051600092600160a060020a03169182916326683e149160248082019260209290919082900301818887803b1580156110fd57600080fd5b505af1158015611111573d6000803e3d6000fd5b505050506040513d602081101561112757600080fd5b505191505090565b6014602052600090815260408120805460018201546002830154600390930154600160a060020a03909216939092900b9084565b604080517f3def514000000000000000000000000000000000000000000000000000000000815230600482015260ff80851660248301528316604482015290518491600160a060020a03831691633def51409160648082019260009290919082900301818387803b1580156111d757600080fd5b505af11580156111eb573d6000803e3d6000fd5b5050505050505050565b600e54600160a060020a031681565b60115481565b60135460ff1681565b600d54600160a060020a031681565b60075490565b600c54600160a060020a031681565b600a5460ff1681565b600e5460009081908190600160a060020a0316156112f05750600e54604080517f45080442000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a0390921691829163450804429160248083019260209291908290030181600087803b1580156112c157600080fd5b505af11580156112d5573d6000803e3d6000fd5b505050506040513d60208110156112eb57600080fd5b505191505b81156112fe5781925061138b565b83151561132d577f5075626c69736865640000000000000000000000000000000000000000000000925061138b565b600084121561135e577f4472616674000000000000000000000000000000000000000000000000000000925061138b565b600084131561138b577f447261667420696e20726576696577000000000000000000000000000000000092505b5050919050565b600080600080600080600080600060115460001415156113bf576113b4613fb9565b9850985098506116b8565b6113ca8c8c8c6116c7565b9750909550935060ff80861614806113e557508360ff1660ff145b156116ae576003546040805160e060020a6363e6ffdd0281523260048201529051600160a060020a03909216945084916363e6ffdd916024808201926020929091908290030181600087803b15801561143d57600080fd5b505af1158015611451573d6000803e3d6000fd5b505050506040513d602081101561146757600080fd5b50519150600160a060020a038216156116ae57508060ff808616141561158b5780600160a060020a0316635faecb763083600160a060020a03166396eba03d6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156114d557600080fd5b505af11580156114e9573d6000803e3d6000fd5b505050506040513d60208110156114ff57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260ff90911660248301525160448083019260209291908290030181600087803b15801561155057600080fd5b505af1158015611564573d6000803e3d6000fd5b505050506040513d602081101561157a57600080fd5b505115156001141561158b57600094505b60ff851615156116ae578360ff1660ff14156116ae5780600160a060020a0316635faecb763083600160a060020a031663d1aeb6516040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156115ef57600080fd5b505af1158015611603573d6000803e3d6000fd5b505050506040513d602081101561161957600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260ff90911660248301525160448083019260209291908290030181600087803b15801561166a57600080fd5b505af115801561167e573d6000803e3d6000fd5b505050506040513d602081101561169457600080fd5b50511515600114156116a957600093506116ae565b606493505b8484879850985098505b50505050505093509350939050565b60008060008060008060008060008060006010549750600160ff16601360009054906101000a900460ff1660ff1610156117025760ff611705565b60005b601354909750600a60ff909116101561171f5760ff611722565b60005b600e54909650600160a060020a0316156119f057600e60009054906101000a9004600160a060020a0316905080600160a060020a0316630f82c16f8f8f8f6040518463ffffffff1660e060020a028152600401808460ff1660ff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156117c25781810151838201526020016117aa565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156118015781810151838201526020016117e9565b5050505090500195505050505050608060405180830381600087803b15801561182957600080fd5b505af115801561183d573d6000803e3d6000fd5b505050506040513d608081101561185357600080fd5b5080516020820151604083015160609093015160105492985090965091945090925082111561188557606496506119f0565b80600160a060020a031663b535b03e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156118c357600080fd5b505af11580156118d7573d6000803e3d6000fd5b505050506040513d60208110156118ed57600080fd5b5051851660ff1615156118fe578396505b80600160a060020a0316636af274176040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561193c57600080fd5b505af1158015611950573d6000803e3d6000fd5b505050506040513d602081101561196657600080fd5b5051851660ff161515611977578295505b80600160a060020a031663f185db0c6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156119b557600080fd5b505af11580156119c9573d6000803e3d6000fd5b505050506040513d60208110156119df57600080fd5b5051851660ff1615156119f0578197505b50949c939b5094995091975050505050505050565b600f546000908190600160a060020a03163314611a2157600080fd5b600e54600160a060020a031615611b2e57600e60009054906101000a9004600160a060020a0316915081600160a060020a0316639e99bbea6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611a8857600080fd5b505af1158015611a9c573d6000803e3d6000fd5b505050506040513d6020811015611ab257600080fd5b50519050801580611ac35750806064145b1515611ace57600080fd5b8060641415611b2e5781600160a060020a03166341c0e1b56040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015611b1557600080fd5b505af1158015611b29573d6000803e3d6000fd5b505050505b611b36614262565b5050565b6000611b44611095565b1515611b4f57600080fd5b600a5460ff161515611b6057600080fd5b600060058054600181600116156101000203166002900490501115611c0f5760078054600181810180845560009390935260058054611bd6937fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688019260026101009183161591909102600019019091160461482d565b5050600654600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301555b60098054611c32916005916002600019610100600184161502019091160461482d565b5042600655604080516020810191829052600090819052611c55916009916148ae565b50600a805460ff1916905560035460408051600160a060020a039092168083526020830182815260058054600260001960018316156101000201909116049385018490527f482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e94929390929190606083019084908015611d155780601f10611cea57610100808354040283529160200191611d15565b820191906000526020600020905b815481529060010190602001808311611cf857829003601f168201915b5050935050505060405180910390a150600190565b7f447261667400000000000000000000000000000000000000000000000000000081565b600254600090600160a060020a031632148015611d8257506000821280611d825750600082138015611d8257506000601154125b15611d8d5760118290555b600f54600160a060020a0316331415611da65760118290555b60115460408051918252517fda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a29181900360200190a1505060115490565b600b5481565b60008381526014602052604081208054829081908190600160a060020a031615801590611e3357508354600160a060020a0316331480611e335750600254600160a060020a031633145b1515611e3e57600080fd5b600e548715159350600160a060020a031615611ef857600e54604080517f17685953000000000000000000000000000000000000000000000000000000008152600481018b9052602481018a90529051600160a060020a03909216935083916317685953916044808201926020929091908290030181600087803b158015611ec557600080fd5b505af1158015611ed9573d6000803e3d6000fd5b505050506040513d6020811015611eef57600080fd5b50518015935090505b8354600160a060020a0316331415611f35578215611f25576002848101805460ff19169091179055611f35565b60028401805460ff191660fe1790555b836001015484600301541015612013576002840154600090810b810b13611fb657835460408051808201909152600681527f726566756e640000000000000000000000000000000000000000000000000000602082015260038601546001870154611fb0938c93600160a060020a0390911692909103613e87565b50612013565b60025460408051808201909152600e81527f72656c6561736520657363726f77000000000000000000000000000000000000602082015260038601546001870154612011938c93600160a060020a0390911692909103613e87565b505b60008881526014602090815260408083208054600160a060020a03191681556001810184905560028101805460ff191690556003019290925581518a81529081018990528415158183015290517f2c49ac638ee7bf3341004c40512c79847bb7fb8f17fb53151ff576a35630ac069181900360600190a150909695505050505050565b61209e6121b6565b15156120a957600080fd5b6040805160208101918290526000908190526120c7916009916148ae565b50600a805460ff19169055565b6009805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561215a5780601f1061212f5761010080835404028352916020019161215a565b820191906000526020600020905b81548152906001019060200180831161213d57829003601f168201915b505050505081565b60105481565b600154600160a060020a0316321461217f57600080fd5b600160a060020a038116151561219457600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b60006121c0612258565b905090565b60088054829081106121d357fe5b600091825260209091200154905081565b60078054829081106121f257fe5b600091825260209182902001805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529350909183018282801561215a5780601f1061212f5761010080835404028352916020019161215a565b6003546040805160e060020a6363e6ffdd0281523260048201529051600092600160a060020a0316918391829184916363e6ffdd9160248082019260209290919082900301818787803b1580156122ae57600080fd5b505af11580156122c2573d6000803e3d6000fd5b505050506040513d60208110156122d857600080fd5b5051604080517f5d97b6c20000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a03831691635faecb769130918491635d97b6c29160048083019260209291908290030181600087803b15801561234557600080fd5b505af1158015612359573d6000803e3d6000fd5b505050506040513d602081101561236f57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260ff90911660248301525160448083019260209291908290030181600087803b1580156123c057600080fd5b505af11580156123d4573d6000803e3d6000fd5b505050506040513d60208110156123ea57600080fd5b5051935050505090565b6000806000612401613241565b151561240c57600080fd5b600e54600160a060020a0316151561249057600254600160a060020a03163214806124415750600254600160a060020a031633145b801561245857508360001914806124585750836001145b156124655783915061248b565b600f54600160a060020a0316331480156124825750600060115412155b1561248b578391505b612528565b50600e54604080517f3513a805000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a03909216918291633513a8059160248083019260209291908290030181600087803b1580156124f957600080fd5b505af115801561250d573d6000803e3d6000fd5b505050506040513d602081101561252357600080fd5b505191505b60118290556040805183815290517fda4f34b30fa0ba8a73fedb922f4d28e2a10a5d68e53cf8e942abce3ac09158a29181900360200190a1505060115492915050565b600354604080517f8da5cb5b0000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216918291638da5cb5b9160048083019260209291908290030181600087803b1580156125cc57600080fd5b505af11580156125e0573d6000803e3d6000fd5b505050506040513d60208110156125f657600080fd5b5051600160a060020a0316331461260c57600080fd5b600c8054600160a060020a0319908116600160a060020a038d811691909117909255600d805482168c8416179055600e8054909116918a169190911790556010879055601186905560128590556013805460ff191660ff8616179055612672838361429e565b50505050505050505050565b600254600160a060020a031681565b60125481565b600a81565b6126a06121b6565b15156126ab57600080fd5b600a5460ff16156126bb57600080fd5b80516080116126c957600080fd5b80516126dc9060099060208401906148ae565b50600a805460ff191660011790556003547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316612720610e10565b60408051600160a060020a0380851682528316602082015260609181018281526009805460026000196101006001841615020190911604938301849052926080830190849080156127b25780601f10612787576101008083540402835291602001916127b2565b820191906000526020600020905b81548152906001019060200180831161279557829003601f168201915b505094505050505060405180910390a150565b6000806000806127d361491c565b601280546001019055600080806127eb8d8b8b611392565b98509096509450606460ff86161415612818573487111561280b57600080fd5b6128136143fa565b600094505b60ff85161561282657600080fd5b604080516080810182523381523460208083019182526000838501818152606085018281526012548352601490935294812084518154600160a060020a03918216600160a060020a03199091161782559351600182015594516002860180549190920b60ff1660ff1990911617905551600390930192909255600e5490955016156129e157600e60009054906101000a9004600160a060020a0316925082600160a060020a031663123e0e806012548f8d8d6040518563ffffffff1660e060020a028152600401808581526020018460ff1660ff1681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015612940578181015183820152602001612928565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561297f578181015183820152602001612967565b505050509050019650505050505050602060405180830381600087803b1580156129a857600080fd5b505af11580156129bc573d6000803e3d6000fd5b505050506040513d60208110156129d257600080fd5b5051915081156129e157600080fd5b7f50f423e39e8beb25bb2da38a63e3d33b5368f261522813712756733eaf569a066012548e60058f8f604051808681526020018560ff1660ff168152602001806020018060200180602001848103845287818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015612aad5780601f10612a8257610100808354040283529160200191612aad565b820191906000526020600020905b815481529060010190602001808311612a9057829003601f168201915b5050848103835286518152865160209182019188019080838360005b83811015612ae1578181015183820152602001612ac9565b50505050905090810190601f168015612b0e5780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b83811015612b41578181015183820152602001612b29565b50505050905090810190601f168015612b6e5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a15060005b8951811015612bff578981815181101515612b9c57fe5b6020908102909101015115612bf7577f515e0a48b385fce2a8e4d9f169a97c4f6ea669a752358f5e6ab37cc3c2e84c388a82815181101515612bda57fe5b602090810290910181015160408051918252519081900390910190a15b600101612b85565b5060005b8851811015612c87578981815181101515612c1a57fe5b6020908102909101015115612c7f577fb6e3239e521a6c66920ae634f8e921a37e6991d520ac44d52f8516397f41b6848982815181101515612c5857fe5b602090810290910181015160408051600160a060020a039092168252519081900390910190a15b600101612c03565b50506012549b9a5050505050505050505050565b600354600d546060918291600160a060020a0391821691161580612d505750600d54604080517fd6be0f49000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015290519183169163d6be0f49916024808201926020929091908290030181600087803b158015612d2257600080fd5b505af1158015612d36573d6000803e3d6000fd5b505050506040513d6020811015612d4c57600080fd5b5051155b15612d79576040805160208181018352600080835283519182019093529182529350915061304a565b600d54604080517f589aafc1000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015290519183169163268bfac491839163589aafc19160248082019260009290919082900301818387803b158015612de857600080fd5b505af1158015612dfc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612e2557600080fd5b810190808051640100000000811115612e3d57600080fd5b82016020810184811115612e5057600080fd5b8151640100000000811182820187101715612e6a57600080fd5b5050929190505050866040518363ffffffff1660e060020a028152600401808060200180602001838103835285818151815260200191508051906020019080838360005b83811015612ec6578181015183820152602001612eae565b50505050905090810190601f168015612ef35780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015612f26578181015183820152602001612f0e565b50505050905090810190601f168015612f535780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015612f7457600080fd5b505af1158015612f88573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015612fb157600080fd5b810190808051640100000000811115612fc957600080fd5b82016020810184811115612fdc57600080fd5b8151640100000000811182820187101715612ff657600080fd5b5050929190602001805164010000000081111561301257600080fd5b8201602081018481111561302557600080fd5b815164010000000081118282018710171561303f57600080fd5b509497509550505050505b50915091565b613058612258565b151561306357600080fd5b6013805460ff191660ff92909216919091179055565b600354600160a060020a031681565b600f54600160a060020a031681565b600e546000908190600160a060020a031615156130bb576130b66144ef565b611b36565b600e60009054906101000a9004600160a060020a0316915081600160a060020a031663c9f3d94c6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561311157600080fd5b505af1158015613125573d6000803e3d6000fd5b505050506040513d602081101561313b57600080fd5b505190506064811415613150576130b66144ef565b801561315b57600080fd5b60408051602080825260058054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156131fa5780601f106131cf576101008083540402835291602001916131fa565b820191906000526020600020905b8154815290600101906020018083116131dd57829003601f168201915b50509250505060405180910390a15050565b613214612258565b151561321f57600080fd5b600d8054600160a060020a031916600160a060020a0392909216919091179055565b600061324b612258565b806121c0575050600f54600160a060020a0316331490565b7f447261667420696e20726576696577000000000000000000000000000000000081565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561215a5780601f1061212f5761010080835404028352916020019161215a565b6000806000806000806132f36121b6565b15156132fe57600080fd5b866040516020018082805190602001908083835b602083106133315780518252601f199092019160209182019101613312565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106133945780518252601f199092019160209182019101613375565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209450600560405160200180828054600181600116156101000203166002900480156134235780601f10613401576101008083540402835291820191613423565b820191906000526020600020905b81548152906001019060200180831161340f575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106134665780518252601f199092019160209182019101613447565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120965050505084841415613587576040805160208101918290526000908190526134ba916005916148ae565b506000600681905560035460408051600160a060020a03909216808352908201839052606060208084018281528c51928501929092528b517f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f519593948d9493909290916080840191860190808383885b8381101561354257818101518382015260200161352a565b50505050905090810190601f16801561356f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160009550613880565b6000199250600091505b60075482101561379d5760078054839081106135a957fe5b9060005260206000200160405160200180828054600181600116156101000203166002900480156136115780601f106135ef576101008083540402835291820191613611565b820191906000526020600020905b8154815290600101906020018083116135fd575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106136545780518252601f199092019160209182019101613635565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912093505050508481141561379257600780548390811061369857fe5b9060005260206000200160006136ae9190614943565b60088054839081106136bc57fe5b6000918252602082200155600754600019018214613762576007805460001981019081106136e657fe5b906000526020600020016007838154811015156136ff57fe5b90600052602060002001908054600181600116156101000203166002900461372892919061482d565b5060088054600019810190811061373b57fe5b906000526020600020015460088381548110151561375557fe5b6000918252602090912001555b600780549061377590600019830161498a565b5060088054906137899060001983016149b3565b5081925061379d565b600190910190613591565b6000198314156137ac57600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600360009054906101000a9004600160a060020a031688856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015613840578181015183820152602001613828565b50505050905090810190601f16801561386d5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18295505b5050505050919050565b6000806000613897612258565b15156138a257600080fd5b600e54600160a060020a03161561394257600e60009054906101000a9004600160a060020a0316925082600160a060020a0316639e99bbea6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561390957600080fd5b505af115801561391d573d6000803e3d6000fd5b505050506040513d602081101561393357600080fd5b50519150811561394257600080fd5b600e8054600160a060020a031916600160a060020a038616908117909155156139df5783925082600160a060020a0316637b1cdb3e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156139a657600080fd5b505af11580156139ba573d6000803e3d6000fd5b505050506040513d60208110156139d057600080fd5b5051905080156139df57600080fd5b600e5460408051600160a060020a039092168252517fa6f2e38f0cfebf27212317fced3ac40bc62e00bd33f38d69603710740c69acb79181900360200190a150505050565b600254600090819081908190600160a060020a0316331480613a505750600d54600160a060020a031633145b1515613a5b57600080fd5b60008881526014602052604090208054909350600160a060020a03161515613a8257600080fd5b600e54879250600160a060020a031615613b3b5750600e54604080517fe870ed91000000000000000000000000000000000000000000000000000000008152600481018a905288151560248201529051600160a060020a0390921691829163e870ed919160448083019260209291908290030181600087803b158015613b0757600080fd5b505af1158015613b1b573d6000803e3d6000fd5b505050506040513d6020811015613b3157600080fd5b5051159150613c0f565b826001015483600301541015613c0f57861515613bb257825460408051808201909152600f81527f616363657373206465636c696e65640000000000000000000000000000000000602082015260038501546001860154613bac938c93600160a060020a0390911692909103613e87565b50613c0f565b60025460408051808201909152600d81527f6f776e6572207061796d656e7400000000000000000000000000000000000000602082015260038501546001860154613c0d938c93600160a060020a0390911692909103613e87565b505b60018215151415613d4a5760028301805460ff19166001908117909155604080518a8152602080820184905260809282018381528a519383019390935289517f475e9d68ca61f129cebee5af694af00ed0e3b3b0d4b74071fbb81d0e2b912718948d9490938c938c93919291606084019160a08501919087019080838360005b83811015613ca7578181015183820152602001613c8f565b50505050905090810190601f168015613cd45780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015613d07578181015183820152602001613cef565b50505050905090810190601f168015613d345780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a1613db0565b60028301805460ff191660ff179055604080518981526000602082018190526080828401819052820181905260c06060830181905282015290517f475e9d68ca61f129cebee5af694af00ed0e3b3b0d4b74071fbb81d0e2b912718918190036101000190a15b509695505050505050565b606481565b600254600160a060020a0316321480613de35750600254600160a060020a031633145b1515613dee57600080fd5b600160a060020a0381161515613e0357600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b6000613e2f612258565b1515613e3a57600080fd5b60108290556040805183815290517f4114f8ef80b6de2161db580cbefa14e1892d15d3ebe2062c9914e4a5773114a39181900360200190a1505060105490565b60006121c0601154611240565b600084815260146020526040812060018101546003820154840111613fb057604051600160a060020a0386169084156108fc029085906000818181858888f19350505050158015613edc573d6000803e3d6000fd5b508281600301540181600301819055507fad58d18ea7292f887da6f15bb4f0badddaa33d169713d09cf49710acc7c3a5b986858786604051808581526020018060200184600160a060020a0316600160a060020a03168152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015613f72578181015183820152602001613f5a565b50505050905090810190601f168015613f9f5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a15b50949350505050565b60025460009081908190819081908190600160a060020a0316321480613fe75750601354606460ff90911610155b15613ffd5760105460009650869550935061425a565b6003546040805160e060020a6363e6ffdd0281523260048201529051600160a060020a03909216945084916363e6ffdd916024808201926020929091908290030181600087803b15801561405057600080fd5b505af1158015614064573d6000803e3d6000fd5b505050506040513d602081101561407a57600080fd5b50519150600160a060020a038216156141a05781905080600160a060020a0316635faecb763083600160a060020a0316635d97b6c26040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156140de57600080fd5b505af11580156140f2573d6000803e3d6000fd5b505050506040513d602081101561410857600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260ff90911660248301525160448083019260209291908290030181600087803b15801561415957600080fd5b505af115801561416d573d6000803e3d6000fd5b505050506040513d602081101561418357600080fd5b50511515600114156141a05760105460009650869550935061425a565b600f54604080517f29d002190000000000000000000000000000000000000000000000000000000081523260048201529051600160a060020a03909216916329d00219916024808201926020929091908290030181600087803b15801561420657600080fd5b505af115801561421a573d6000803e3d6000fd5b505050506040513d602081101561423057600080fd5b505115156001141561424d5760105460009650869550935061425a565b601054600a965086955093505b505050909192565b600254600160a060020a03163214806142855750600254600160a060020a031633145b151561429057600080fd5b600254600160a060020a0316ff5b6142a66149d7565b6142ae6149d7565b600254606090600090600160a060020a03163214806142d75750600254600160a060020a031633145b15156142e257600080fd5b85516142f59060059060208901906148ae565b5084511515614303576143f2565b61430c856145bf565b935061434c6040805190810160405280600181526020017f3a000000000000000000000000000000000000000000000000000000000000008152506145bf565b925061435e848463ffffffff6145e516565b60010160405190808252806020026020018201604052801561439457816020015b606081526020019060019003908161437f5790505b509150600090505b81518110156143dd576143bd6143b8858563ffffffff61465216565b614665565b82828151811015156143cb57fe5b6020908102909101015260010161439c565b81516143f09060079060208501906149ee565b505b505050505050565b6003546040805160e060020a6363e6ffdd02815233600482015290516000928392600160a060020a03909116916363e6ffdd9160248082019260209290919082900301818787803b15801561444e57600080fd5b505af1158015614462573d6000803e3d6000fd5b505050506040513d602081101561447857600080fd5b5051604080517fb8ff1dba0000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a0383169163b8ff1dba9160048082019260009290919082900301818387803b1580156144db57600080fd5b505af11580156143f2573d6000803e3d6000fd5b6144f7612258565b806145055750614505611095565b151561451057600080fd5b60408051602080825260058054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156145af5780601f10614584576101008083540402835291602001916145af565b820191906000526020600020905b81548152906001019060200180831161459257829003601f168201915b50509250505060405180910390a1565b6145c76149d7565b50604080518082019091528151815260209182019181019190915290565b600080826000015161460985600001518660200151866000015187602001516146b8565b0190505b8351602085015101811161464b5782516020808601518651918601516001909501946146439291850390910390849084906146b8565b01905061460d565b5092915050565b61465a6149d7565b61464b838383614778565b606080600083600001516040519080825280601f01601f19166020018201604052801561469c578160200160208202803883390190505b50915060208201905061464b81856020015186600001516147e9565b600083818080808080808c8b116147625760208b1161472b5760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b82851461472357838810614710578c8c019850614768565b87806001019850508588511692506146f8565b879850614768565b8a8a209150600096505b8a8d03871161476257508987208181141561475257879850614768565b6001978801979690960195614735565b8c8c0198505b5050505050505050949350505050565b6147806149d7565b600061479e85600001518660200151866000015187602001516146b8565b602080870180519186019190915280518203855286519051919250018114156147ca57600085526147e0565b8351835186519101900385528351810160208601525b50909392505050565b60005b6020821061480e578251845260209384019390920191601f19909101906147ec565b50905182516020929092036101000a6000190180199091169116179052565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061486657805485556148a2565b828001600101855582156148a257600052602060002091601f016020900482015b828111156148a2578254825591600101919060010190614887565b50610f91929150614a47565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106148ef57805160ff19168380011785556148a2565b828001600101855582156148a2579182015b828111156148a2578251825591602001919060010190614901565b60408051608081018252600080825260208201819052918101829052606081019190915290565b50805460018160011615610100020316600290046000825580601f106149695750614987565b601f0160209004906000526020600020908101906149879190614a47565b50565b8154818355818111156149ae576000838152602090206149ae918101908301614a61565b505050565b8154818355818111156149ae576000838152602090206149ae918101908301614a47565b604080518082019091526000808252602082015290565b828054828255906000526020600020908101928215614a3b579160200282015b82811115614a3b5782518051614a2b9184916020909101906148ae565b5091602001919060010190614a0e565b50610f91929150614a61565b610e1d91905b80821115610f915760008155600101614a4d565b610e1d91905b80821115610f91576000614a7b8282614943565b50600101614a675600a165627a7a72305820fa0c8705255717bf72642bffca753966cd0bc168f5eb9aa72227fc533b257f820029a165627a7a72305820b8a543a2399d8edfe986d73910276a359b8ef7c2906c2fbbe51f745cd6dc9c2b0029",
}

// BaseContentFactoryExtABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseContentFactoryExtMetaData.ABI instead.
var BaseContentFactoryExtABI = BaseContentFactoryExtMetaData.ABI

// Deprecated: Use BaseContentFactoryExtMetaData.Sigs instead.
// BaseContentFactoryExtFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentFactoryExtFuncSigs = BaseContentFactoryExtMetaData.Sigs

// BaseContentFactoryExtBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseContentFactoryExtMetaData.Bin instead.
var BaseContentFactoryExtBin = BaseContentFactoryExtMetaData.Bin

// DeployBaseContentFactoryExt deploys a new Ethereum contract, binding an instance of BaseContentFactoryExt to it.
func DeployBaseContentFactoryExt(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseContentFactoryExt, error) {
	parsed, err := ParsedABI(K_BaseContentFactoryExt)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseContentFactoryExtBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContentFactoryExt{BaseContentFactoryExtCaller: BaseContentFactoryExtCaller{contract: contract}, BaseContentFactoryExtTransactor: BaseContentFactoryExtTransactor{contract: contract}, BaseContentFactoryExtFilterer: BaseContentFactoryExtFilterer{contract: contract}}, nil
}

// BaseContentFactoryExt is an auto generated Go binding around an Ethereum contract.
type BaseContentFactoryExt struct {
	BaseContentFactoryExtCaller     // Read-only binding to the contract
	BaseContentFactoryExtTransactor // Write-only binding to the contract
	BaseContentFactoryExtFilterer   // Log filterer for contract events
}

// BaseContentFactoryExtCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentFactoryExtCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFactoryExtTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentFactoryExtTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentFactoryExtFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentFactoryExtFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseContentFactoryExt creates a new instance of BaseContentFactoryExt, bound to a specific deployed contract.
func NewBaseContentFactoryExt(address common.Address, backend bind.ContractBackend) (*BaseContentFactoryExt, error) {
	contract, err := bindBaseContentFactoryExt(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryExt{BaseContentFactoryExtCaller: BaseContentFactoryExtCaller{contract: contract}, BaseContentFactoryExtTransactor: BaseContentFactoryExtTransactor{contract: contract}, BaseContentFactoryExtFilterer: BaseContentFactoryExtFilterer{contract: contract}}, nil
}

// NewBaseContentFactoryExtCaller creates a new read-only instance of BaseContentFactoryExt, bound to a specific deployed contract.
func NewBaseContentFactoryExtCaller(address common.Address, caller bind.ContractCaller) (*BaseContentFactoryExtCaller, error) {
	contract, err := bindBaseContentFactoryExt(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryExtCaller{contract: contract}, nil
}

// NewBaseContentFactoryExtTransactor creates a new write-only instance of BaseContentFactoryExt, bound to a specific deployed contract.
func NewBaseContentFactoryExtTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentFactoryExtTransactor, error) {
	contract, err := bindBaseContentFactoryExt(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryExtTransactor{contract: contract}, nil
}

// NewBaseContentFactoryExtFilterer creates a new log filterer instance of BaseContentFactoryExt, bound to a specific deployed contract.
func NewBaseContentFactoryExtFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentFactoryExtFilterer, error) {
	contract, err := bindBaseContentFactoryExt(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryExtFilterer{contract: contract}, nil
}

// bindBaseContentFactoryExt binds a generic wrapper to an already deployed contract.
func bindBaseContentFactoryExt(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseContentFactoryExt)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// OPACCESSCOMPLETE is a free data retrieval call binding the contract method 0x4d887374.
//
// Solidity: function OP_ACCESS_COMPLETE() view returns(uint32)
func (_BaseContentFactoryExt *BaseContentFactoryExtCaller) OPACCESSCOMPLETE(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _BaseContentFactoryExt.contract.Call(opts, &out, "OP_ACCESS_COMPLETE")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// OPACCESSREQUEST is a free data retrieval call binding the contract method 0x52344328.
//
// Solidity: function OP_ACCESS_REQUEST() view returns(uint32)
func (_BaseContentFactoryExt *BaseContentFactoryExtCaller) OPACCESSREQUEST(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _BaseContentFactoryExt.contract.Call(opts, &out, "OP_ACCESS_REQUEST")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseContentFactoryExt *BaseContentFactoryExtCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentFactoryExt.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseContentFactoryExt *BaseContentFactoryExtCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentFactoryExt.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseContentFactoryExt *BaseContentFactoryExtCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentFactoryExt.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseContentFactoryExt *BaseContentFactoryExtCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseContentFactoryExt.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactor) CreateContent(opts *bind.TransactOpts, lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentFactoryExt.contract.Transact(opts, "createContent", lib, content_type)
}

// ExecuteAccessBatch is a paid mutator transaction binding the contract method 0x78cd9119.
//
// Solidity: function executeAccessBatch(uint32[] _opCodes, address[] _contentAddrs, address[] _userAddrs, bytes32[] _ctxHashes, uint256[] _ts, uint256[] _amt) returns()
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactor) ExecuteAccessBatch(opts *bind.TransactOpts, _opCodes []uint32, _contentAddrs []common.Address, _userAddrs []common.Address, _ctxHashes [][32]byte, _ts []*big.Int, _amt []*big.Int) (*types.Transaction, error) {
	return _BaseContentFactoryExt.contract.Transact(opts, "executeAccessBatch", _opCodes, _contentAddrs, _userAddrs, _ctxHashes, _ts, _amt)
}

// IsContract is a paid mutator transaction binding the contract method 0x16279055.
//
// Solidity: function isContract(address addr) returns(bool)
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactor) IsContract(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BaseContentFactoryExt.contract.Transact(opts, "isContract", addr)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentFactoryExt.contract.Transact(opts, "kill")
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentFactoryExt.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentFactoryExt.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseContentFactoryExt *BaseContentFactoryExtTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseContentFactoryExt.contract.RawTransact(opts, calldata)
}

// BaseContentFactoryExtAccessCompleteIterator is returned from FilterAccessComplete and is used to iterate over the raw logs and unpacked data for AccessComplete events raised by the BaseContentFactoryExt contract.
type BaseContentFactoryExtAccessCompleteIterator struct {
	Event *BaseContentFactoryExtAccessComplete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentFactoryExtAccessCompleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentFactoryExtAccessComplete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentFactoryExtAccessComplete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentFactoryExtAccessCompleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentFactoryExtAccessCompleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentFactoryExtAccessComplete represents a AccessComplete event raised by the BaseContentFactoryExt contract.
type BaseContentFactoryExtAccessComplete struct {
	Timestamp        *big.Int
	LibraryAddress   common.Address
	ContentAddress   common.Address
	UserAddress      common.Address
	ContextHash      [32]byte
	RequestTimestamp uint64
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessComplete is a free log retrieval operation binding the contract event 0x078326d18c0223483393342523f51da024ddcb0f1e929aa1f142100381c794f5.
//
// Solidity: event AccessComplete(uint256 timestamp, address libraryAddress, address contentAddress, address userAddress, bytes32 contextHash, uint64 request_timestamp)
func (_BaseContentFactoryExt *BaseContentFactoryExtFilterer) FilterAccessComplete(opts *bind.FilterOpts) (*BaseContentFactoryExtAccessCompleteIterator, error) {

	logs, sub, err := _BaseContentFactoryExt.contract.FilterLogs(opts, "AccessComplete")
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryExtAccessCompleteIterator{contract: _BaseContentFactoryExt.contract, event: "AccessComplete", logs: logs, sub: sub}, nil
}

// WatchAccessComplete is a free log subscription operation binding the contract event 0x078326d18c0223483393342523f51da024ddcb0f1e929aa1f142100381c794f5.
//
// Solidity: event AccessComplete(uint256 timestamp, address libraryAddress, address contentAddress, address userAddress, bytes32 contextHash, uint64 request_timestamp)
func (_BaseContentFactoryExt *BaseContentFactoryExtFilterer) WatchAccessComplete(opts *bind.WatchOpts, sink chan<- *BaseContentFactoryExtAccessComplete) (event.Subscription, error) {

	logs, sub, err := _BaseContentFactoryExt.contract.WatchLogs(opts, "AccessComplete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentFactoryExtAccessComplete)
				if err := _BaseContentFactoryExt.contract.UnpackLog(event, "AccessComplete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessComplete is a log parse operation binding the contract event 0x078326d18c0223483393342523f51da024ddcb0f1e929aa1f142100381c794f5.
//
// Solidity: event AccessComplete(uint256 timestamp, address libraryAddress, address contentAddress, address userAddress, bytes32 contextHash, uint64 request_timestamp)
func (_BaseContentFactoryExt *BaseContentFactoryExtFilterer) ParseAccessComplete(log types.Log) (*BaseContentFactoryExtAccessComplete, error) {
	event := new(BaseContentFactoryExtAccessComplete)
	if err := _BaseContentFactoryExt.contract.UnpackLog(event, "AccessComplete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentFactoryExtAccessRequestIterator is returned from FilterAccessRequest and is used to iterate over the raw logs and unpacked data for AccessRequest events raised by the BaseContentFactoryExt contract.
type BaseContentFactoryExtAccessRequestIterator struct {
	Event *BaseContentFactoryExtAccessRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentFactoryExtAccessRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentFactoryExtAccessRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentFactoryExtAccessRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentFactoryExtAccessRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentFactoryExtAccessRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentFactoryExtAccessRequest represents a AccessRequest event raised by the BaseContentFactoryExt contract.
type BaseContentFactoryExtAccessRequest struct {
	Timestamp        *big.Int
	LibraryAddress   common.Address
	ContentAddress   common.Address
	UserAddress      common.Address
	ContextHash      [32]byte
	RequestTimestamp uint64
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAccessRequest is a free log retrieval operation binding the contract event 0x8354ff8c2c210fd53709db56438bb45d36a62de8bcc95c8459d80ce933d47680.
//
// Solidity: event AccessRequest(uint256 timestamp, address libraryAddress, address contentAddress, address userAddress, bytes32 contextHash, uint64 request_timestamp)
func (_BaseContentFactoryExt *BaseContentFactoryExtFilterer) FilterAccessRequest(opts *bind.FilterOpts) (*BaseContentFactoryExtAccessRequestIterator, error) {

	logs, sub, err := _BaseContentFactoryExt.contract.FilterLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentFactoryExtAccessRequestIterator{contract: _BaseContentFactoryExt.contract, event: "AccessRequest", logs: logs, sub: sub}, nil
}

// WatchAccessRequest is a free log subscription operation binding the contract event 0x8354ff8c2c210fd53709db56438bb45d36a62de8bcc95c8459d80ce933d47680.
//
// Solidity: event AccessRequest(uint256 timestamp, address libraryAddress, address contentAddress, address userAddress, bytes32 contextHash, uint64 request_timestamp)
func (_BaseContentFactoryExt *BaseContentFactoryExtFilterer) WatchAccessRequest(opts *bind.WatchOpts, sink chan<- *BaseContentFactoryExtAccessRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContentFactoryExt.contract.WatchLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentFactoryExtAccessRequest)
				if err := _BaseContentFactoryExt.contract.UnpackLog(event, "AccessRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequest is a log parse operation binding the contract event 0x8354ff8c2c210fd53709db56438bb45d36a62de8bcc95c8459d80ce933d47680.
//
// Solidity: event AccessRequest(uint256 timestamp, address libraryAddress, address contentAddress, address userAddress, bytes32 contextHash, uint64 request_timestamp)
func (_BaseContentFactoryExt *BaseContentFactoryExtFilterer) ParseAccessRequest(log types.Log) (*BaseContentFactoryExtAccessRequest, error) {
	event := new(BaseContentFactoryExtAccessRequest)
	if err := _BaseContentFactoryExt.contract.UnpackLog(event, "AccessRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceMetaData contains all meta data concerning the BaseContentSpace contract.
var BaseContentSpaceMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"submitNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"prefix\",\"type\":\"bytes\"}],\"name\":\"getKMSInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerSpaceNode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"createLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numActiveNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"libraryFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"getKMSID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"userWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"addNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"addKMSLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createAccessWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setWalletFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setGroupFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setContentFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsIdStr\",\"type\":\"string\"}],\"name\":\"checkKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_space_description\",\"type\":\"string\"}],\"name\":\"setDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_factory\",\"type\":\"address\"}],\"name\":\"setLibraryFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAccessWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"_pubKey\",\"type\":\"string\"}],\"name\":\"setKMSPublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unregisterSpaceNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"groupFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"removeNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"engageAccountLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"checkKMSAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"approveNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint8[]\"},{\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"name\":\"_s\",\"type\":\"bytes32[]\"},{\"name\":\"_from\",\"type\":\"address[]\"},{\"name\":\"_dest\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"},{\"name\":\"_ts\",\"type\":\"uint256[]\"}],\"name\":\"executeBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accessRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPendingNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodeMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"removeKMSLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentTypeAddress\",\"type\":\"address\"}],\"name\":\"CreateContentType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"libraryAddress\",\"type\":\"address\"}],\"name\":\"CreateLibrary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupAddress\",\"type\":\"address\"}],\"name\":\"CreateGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"}],\"name\":\"CreateContent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"CreateAccessWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"BindUserWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"EngageAccountLibrary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"SetFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nodeObjAddr\",\"type\":\"address\"}],\"name\":\"RegisterNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nodeObjAddr\",\"type\":\"address\"}],\"name\":\"UnregisterNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"AddKMSLocator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"RemoveKMSLocator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"version\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CreateSpace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"GetAccessWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"AddNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"RemoveNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AccessRequest\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"f1551887": "accessRequest()",
		"52f82dd8": "activeNodeAddresses(uint256)",
		"5272ae17": "activeNodeLocators(uint256)",
		"0f58a786": "addContentType(address,address)",
		"653a92f6": "addKMSLocator(string,bytes)",
		"64f0f050": "addNode(address,bytes)",
		"32eaf21b": "addressKMS()",
		"dd4c97a0": "approveNode(address)",
		"6e375427": "canCommit()",
		"14cfabb3": "canConfirm()",
		"0eaec2c5": "canContribute(address)",
		"81beeb64": "canEdit()",
		"26683e14": "canNodePublish(address)",
		"9b55f901": "canPublish(address)",
		"29d00219": "canReview(address)",
		"8d2a23db": "checkKMS(string)",
		"d6be0f49": "checkKMSAddr(address)",
		"5f6a1301": "clearPending()",
		"9867db74": "commit(string)",
		"375a6e7c": "commitPending()",
		"446e8826": "confirmCommit()",
		"904696a8": "contentFactory()",
		"af570c04": "contentSpace()",
		"1cdbee5a": "contentTypeContracts(address)",
		"991a3a7c": "contentTypes(uint256)",
		"c65bcbe2": "contentTypesLength()",
		"331b86c0": "countVersionHashes()",
		"7708bc41": "createAccessWallet()",
		"bf4e088f": "createContent(address,address)",
		"b8cfaf05": "createContentType()",
		"575185ed": "createGroup()",
		"40b89f06": "createLibrary(address)",
		"02d05d3f": "creator()",
		"e1a70717": "deleteVersion(string)",
		"7284e416": "description()",
		"c82710c1": "engageAccountLibrary()",
		"e9861ab1": "executeBatch(uint8[],bytes32[],bytes32[],address[],address[],uint256[],uint256[])",
		"c45a0155": "factory()",
		"1f2caaec": "findTypeByHash(bytes32)",
		"a2d67fcf": "getAccessWallet()",
		"589aafc1": "getKMSID(address)",
		"268bfac4": "getKMSInfo(string,bytes)",
		"ac55c906": "getMeta(bytes)",
		"b04b6caa": "groupFactory()",
		"95a078e8": "hasAccess(address)",
		"41c0e1b5": "kill()",
		"441c5aa3": "libraryFactory()",
		"06fdde03": "name()",
		"fbd1b4ce": "nodeMapping(address)",
		"43f59ec7": "numActiveNodes()",
		"f41a1587": "numPendingNodes()",
		"e02dd9c2": "objectHash()",
		"8da5cb5b": "owner()",
		"00821de3": "parentAddress()",
		"628449fd": "pendingHash()",
		"6be9514c": "pendingNodeAddresses(uint256)",
		"69e30ff8": "pendingNodeLocators(uint256)",
		"2cf99422": "publish(address)",
		"e542b7cb": "putMeta(bytes,bytes)",
		"2f7a781a": "registerSpaceNode()",
		"fd089196": "removeContentType(address)",
		"fe7ac19f": "removeKMSLocator(string,bytes)",
		"b2b99ec9": "removeNode(address)",
		"3dd71d99": "requiresReview()",
		"c9e8e72d": "setAddressKMS(address)",
		"85ce1df1": "setContentFactory(address)",
		"90c3f38f": "setDescription(string)",
		"5bb47808": "setFactory(address)",
		"837b3b93": "setGroupFactory(address)",
		"a69cb734": "setKMSPublicKey(string,string)",
		"9d05d18d": "setLibraryFactory(address)",
		"7ebf879c": "setWalletFactory(address)",
		"160eee74": "submitNode(bytes)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"abe596b1": "unregisterSpaceNode()",
		"c287e0ed": "updateRequest()",
		"63e6ffdd": "userWallets(address)",
		"29dedde5": "validType(address)",
		"54fd4d50": "version()",
		"7ca8f618": "versionHashes(uint256)",
		"7886f747": "versionTimestamp(uint256)",
		"c5c03699": "walletFactory()",
		"9cb121ba": "whitelistedType(address)",
	},
	Bin: "0x60806040527f4f776e61626c6532303139303532383139333830304d4c00000000000000000060009081557f41636365737369626c6532303139303232323133353930304d4c0000000000006006557f4564697461626c6532303139313231393133343630304d4c00000000000000006007557f436f6e7461696e657232303139303532393039313830304d4c00000000000000600e556011557f55736572537061636532303139303530363135353330304d4c000000000000006013557f4e6f6465537061636532303139303532383137303130304d4c000000000000006015557f42617365436f6e74656e7453706163653230313931323033313230303030504f601a553480156200011257600080fd5b506040516200598f3803806200598f8339810160405280516001805432600160a060020a031991821681179092556002805490911690911790550180516200016290601b906020840190620001c6565b5060038054600160a060020a03191630179055601a5460025460408051928352600160a060020a0391909116602083015280517f599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf549281900390910190a1506200026b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020957805160ff191683800117855562000239565b8280016001018555821562000239579182015b82811115620002395782518255916020019190600101906200021c565b50620002479291506200024b565b5090565b6200026891905b8082111562000247576000815560010162000252565b90565b615714806200027b6000396000f3006080604052600436106103b75763ffffffff60e060020a600035041662821de381146103b957806302d05d3f146103ea57806306fdde03146103ff5780630eaec2c5146104895780630f58a786146104be57806314cfabb3146104e5578063160eee74146104fa5780631cdbee5a146105535780631f2caaec1461057457806326683e141461058c578063268bfac4146105ad57806329d00219146106b757806329dedde5146106d85780632cf99422146106f95780632f7a781a1461071a57806332eaf21b1461072f578063331b86c014610744578063375a6e7c1461076b5780633dd71d991461078057806340b89f061461079557806341c0e1b5146107b657806343f59ec7146107cb578063441c5aa3146107e0578063446e8826146107f55780635272ae17146107fd57806352f82dd81461081557806354fd4d501461082d578063575185ed14610842578063589aafc1146108575780635bb47808146108785780635f6a130114610899578063628449fd146108ae57806363e6ffdd146108c357806364f0f050146108e4578063653a92f61461094b57806369e30ff8146109e25780636be9514c146109fa5780636d2e4b1b14610a125780636e37542714610a335780637284e41614610a485780637708bc4114610a5d5780637886f74714610a725780637ca8f61814610a8a5780637ebf879c14610aa257806381beeb6414610ac3578063837b3b9314610ad857806385ce1df114610af95780638d2a23db14610b1a5780638da5cb5b14610b73578063904696a814610b8857806390c3f38f14610b9d57806395a078e814610bf65780639867db7414610c17578063991a3a7c14610c705780639b55f901146104895780639cb121ba14610c885780639d05d18d14610ca9578063a2d67fcf14610cca578063a69cb73414610cdf578063abe596b114610d76578063ac55c90614610d8b578063af570c0414610de4578063b04b6caa14610df9578063b2b99ec914610e0e578063b8cfaf0514610e2f578063bf4e088f14610e44578063c287e0ed14610e6b578063c45a015514610e80578063c5c0369914610e95578063c65bcbe214610eaa578063c82710c114610ebf578063c9e8e72d14610ed4578063d6be0f4914610ef5578063dd4c97a014610f16578063e02dd9c214610f37578063e1a7071714610f4c578063e542b7cb14610fa5578063e9861ab11461103c578063f1551887146111e7578063f2fde38b146111fc578063f41a15871461121d578063fbd1b4ce14611232578063fd08919614611253578063fe7ac19f14611274575b005b3480156103c557600080fd5b506103ce61130b565b60408051600160a060020a039092168252519081900360200190f35b3480156103f657600080fd5b506103ce61131b565b34801561040b57600080fd5b5061041461132a565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561044e578181015183820152602001610436565b50505050905090810190601f16801561047b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561049557600080fd5b506104aa600160a060020a03600435166113b8565b604080519115158252519081900360200190f35b3480156104ca57600080fd5b506103b7600160a060020a03600435811690602435166113e9565b3480156104f157600080fd5b506104aa61155e565b34801561050657600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103b79436949293602493928401919081908401838280828437509497506115ed9650505050505050565b34801561055f57600080fd5b506103ce600160a060020a03600435166119a0565b34801561058057600080fd5b506103ce6004356119bb565b34801561059857600080fd5b506104aa600160a060020a0360043516611c3f565b3480156105b957600080fd5b506105d96024600480358281019290820135918135918201910135611c9d565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561061a578181015183820152602001610602565b50505050905090810190601f1680156106475780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561067a578181015183820152602001610662565b50505050905090810190601f1680156106a75780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156106c357600080fd5b506104aa600160a060020a03600435166120a0565b3480156106e457600080fd5b506104aa600160a060020a03600435166120a6565b34801561070557600080fd5b506104aa600160a060020a03600435166120c4565b34801561072657600080fd5b506103ce6121e4565b34801561073b57600080fd5b506103ce61235e565b34801561075057600080fd5b5061075961236d565b60408051918252519081900360200190f35b34801561077757600080fd5b506104aa612373565b34801561078c57600080fd5b506104aa61237c565b3480156107a157600080fd5b506103ce600160a060020a0360043516612381565b3480156107c257600080fd5b506103b761245c565b3480156107d757600080fd5b50610759612498565b3480156107ec57600080fd5b506103ce61249e565b6104aa6124ad565b34801561080957600080fd5b5061041460043561269d565b34801561082157600080fd5b506103ce600435612711565b34801561083957600080fd5b50610759612739565b34801561084e57600080fd5b506103ce61273f565b34801561086357600080fd5b50610414600160a060020a0360043516612806565b34801561088457600080fd5b506103b7600160a060020a0360043516612819565b3480156108a557600080fd5b506103b7612869565b3480156108ba57600080fd5b506104146128a7565b3480156108cf57600080fd5b506103ce600160a060020a0360043516612902565b3480156108f057600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526103b7958335600160a060020a03169536956044949193909101919081908401838280828437509497506129209650505050505050565b34801561095757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104aa94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750612b659650505050505050565b3480156109ee57600080fd5b50610414600435612ec8565b348015610a0657600080fd5b506103ce600435612ed6565b348015610a1e57600080fd5b506103b7600160a060020a0360043516612ee4565b348015610a3f57600080fd5b506104aa612f32565b348015610a5457600080fd5b50610414612f43565b348015610a6957600080fd5b506103ce612f9e565b348015610a7e57600080fd5b50610759600435612fae565b348015610a9657600080fd5b50610414600435612fcd565b348015610aae57600080fd5b506103b7600160a060020a0360043516612fdb565b348015610acf57600080fd5b506104aa61302b565b348015610ae457600080fd5b506103b7600160a060020a036004351661303c565b348015610b0557600080fd5b506103b7600160a060020a036004351661308c565b348015610b2657600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526107599436949293602493928401919081908401838280828437509497506130dc9650505050505050565b348015610b7f57600080fd5b506103ce613144565b348015610b9457600080fd5b506103ce613153565b348015610ba957600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103b79436949293602493928401919081908401838280828437509497506131629650505050505050565b348015610c0257600080fd5b506104aa600160a060020a03600435166131a7565b348015610c2357600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103b79436949293602493928401919081908401838280828437509497506131ad9650505050505050565b348015610c7c57600080fd5b506103ce6004356132da565b348015610c9457600080fd5b506104aa600160a060020a03600435166132e8565b348015610cb557600080fd5b506103b7600160a060020a036004351661333f565b348015610cd657600080fd5b506103ce61338f565b348015610ceb57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103b794369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975061341b9650505050505050565b348015610d8257600080fd5b506104aa6134c2565b348015610d9757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104149436949293602493928401919081908401838280828437509497506135b99650505050505050565b348015610df057600080fd5b506103ce613767565b348015610e0557600080fd5b506103ce613776565b348015610e1a57600080fd5b506103b7600160a060020a0360043516613785565b348015610e3b57600080fd5b506103ce613851565b348015610e5057600080fd5b506103ce600160a060020a0360043581169060243516613918565b348015610e7757600080fd5b506103b76139fc565b348015610e8c57600080fd5b506103ce613acc565b348015610ea157600080fd5b506103ce613adb565b348015610eb657600080fd5b50610759613aea565b348015610ecb57600080fd5b506103ce613af0565b348015610ee057600080fd5b506103b7600160a060020a0360043516613b2a565b348015610f0157600080fd5b50610759600160a060020a0360043516613b7a565b348015610f2257600080fd5b506103b7600160a060020a0360043516613bf0565b348015610f4357600080fd5b50610414613e31565b348015610f5857600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610759943694929360249392840191908190840183828082843750949750613e8c9650505050505050565b348015610fb157600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103b794369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506144349650505050505050565b34801561104857600080fd5b50604080516020600480358082013583810280860185019096528085526103b795369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061451c9650505050505050565b3480156111f357600080fd5b506104aa614722565b34801561120857600080fd5b506103b7600160a060020a0360043516614753565b34801561122957600080fd5b506107596147b8565b34801561123e57600080fd5b506103ce600160a060020a03600435166147be565b34801561125f57600080fd5b506104aa600160a060020a03600435166147d9565b34801561128057600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104aa94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975061497c9650505050505050565b600354600160a060020a03165b90565b600154600160a060020a031681565b601b805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156113b05780601f10611385576101008083540402835291602001916113b0565b820191906000526020600020905b81548152906001019060200180831161139357829003601f168201915b505050505081565b600254600090600160a060020a03838116911614806113e15750600254600160a060020a031633145b90505b919050565b600254600160a060020a031632148061140c5750600254600160a060020a031633145b151561141757600080fd5b600160a060020a03808316600090815260126020526040902054161580156114455750611443826132e8565b155b156114f157601054601154101561149b5781601060115481548110151561146857fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055506114e7565b601080546001810182556000919091527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672018054600160a060020a031916600160a060020a0384161790555b6011805460010190555b600160a060020a038281166000818152601260209081526040918290208054600160a060020a0319169486169485179055815192835282019290925281517f280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7929181900390910190a15050565b604080517f26683e140000000000000000000000000000000000000000000000000000000081523360048201529051600091309182916326683e1491602480830192602092919082900301818887803b1580156115ba57600080fd5b505af11580156115ce573d6000803e3d6000fd5b505050506040513d60208110156115e457600080fd5b505191505b5090565b611723601880548060200260200160405190810160405280929190818152602001828054801561164657602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611628575b50505050506019805480602002602001604051908101604052809291908181526020016000905b828210156117185760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156117045780601f106116d957610100808354040283529160200191611704565b820191906000526020600020905b8154815290600101906020018083116116e757829003601f168201915b50505050508152602001906001019061166d565b505050503384614e0a565b1561172d57600080fd5b611858601680548060200260200160405190810160405280929190818152602001828054801561178657602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611768575b50505050506017805480602002602001604051908101604052809291908181526020016000905b828210156117185760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156118445780601f1061181957610100808354040283529160200191611844565b820191906000526020600020905b81548152906001019060200180831161182757829003601f168201915b5050505050815260200190600101906117ad565b1561186257600080fd5b60185460641161187157600080fd5b601980546001810180835560009290925282516118b5917f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695019060208501906154e6565b50506018805460018101825560009182527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e018054600160a060020a0319163390811790915560408051828152602081810183815286519383019390935285517fae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d958794926060850192908601918190849084905b8381101561196257818101518382015260200161194a565b50505050905090810190601f16801561198f5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150565b601260205260009081526040902054600160a060020a031681565b600080805b601054821015611c335760108054839081106119d857fe5b6000918252602091829020015460408051808401889052815180820385018152908201918290528051600160a060020a03909316945092909182918401908083835b60208310611a395780518252601f199092019160209182019101611a1a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191681600160a060020a031663e02dd9c26040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015611aa857600080fd5b505af1158015611abc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611ae557600080fd5b810190808051640100000000811115611afd57600080fd5b82016020810184811115611b1057600080fd5b8151640100000000811182820187101715611b2a57600080fd5b50509291905050506040516020018082805190602001908083835b60208310611b645780518252601f199092019160209182019101611b45565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611bc75780518252601f199092019160209182019101611ba8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415611c28576010805483908110611c0c57fe5b600091825260209091200154600160a060020a03169250611c38565b6001909101906119c0565b600092505b5050919050565b6000805b601654811015611c925782600160a060020a0316601682815481101515611c6657fe5b600091825260209091200154600160a060020a03161415611c8a5760019150611c97565b600101611c43565b600091505b50919050565b606080606080606080600060238b8b604051808383808284379091019485525050604080519384900360209081018520805480830287018301909352828652935090915060009084015b82821015611d925760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015611d7e5780601f10611d5357610100808354040283529160200191611d7e565b820191906000526020600020905b815481529060010190602001808311611d6157829003601f168201915b505050505081526020019060010190611ce7565b50505050945060248b8b604051808383808284379190910194855250506040805160209481900385018120805460026001821615610100026000190190911604601f81018790048702830187019093528282529094909350909150830182828015611e3e5780601f10611e1357610100808354040283529160200191611e3e565b820191906000526020600020905b815481529060010190602001808311611e2157829003601f168201915b50505050509350845160001415611e6b578360206040519081016040528060008152509096509650612092565b611ea5858a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843750614f58945050505050565b9250600090505b825181101561208b576001835103811415611f9057818382815181101515611ed057fe5b906020019060200201516040516020018083805190602001908083835b60208310611f0c5780518252601f199092019160209182019101611eed565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310611f545780518252601f199092019160209182019101611f35565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529150612083565b818382815181101515611f9f57fe5b906020019060200201516040516020018083805190602001908083835b60208310611fdb5780518252601f199092019160209182019101611fbc565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106120235780518252601f199092019160209182019101612004565b6001836020036101000a038019825116818451168082178552505050505050905001807f2c000000000000000000000000000000000000000000000000000000000000008152506001019250505060405160208183030381529060405291505b600101611eac565b8184965096505b505050505094509492505050565b50600090565b6000601154600014156120bb575060016113e4565b6113e1826132e8565b60008033600160a060020a038416146120dc57600080fd5b82905080600160a060020a0316638280dd8f60006040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b15801561212957600080fd5b505af115801561213d573d6000803e3d6000fd5b505050506040513d602081101561215357600080fd5b5050604080517f27c1c21d0000000000000000000000000000000000000000000000000000000081529051600160a060020a038316916327c1c21d9160048083019260209291908290030181600087803b1580156121b057600080fd5b505af11580156121c4573d6000803e3d6000fd5b505050506040513d60208110156121da57600080fd5b5051159392505050565b3360009081526022602052604081205481908190600160a060020a03161561220b57600080fd5b600091505b60165482101561225657601680543391908490811061222b57fe5b600091825260209091200154600160a060020a0316141561224b57612256565b600190910190612210565b601654821061226457600080fd5b601d54604080517f5c6dc2190000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0390921691635c6dc219916024808201926020929091908290030181600087803b1580156122ca57600080fd5b505af11580156122de573d6000803e3d6000fd5b505050506040513d60208110156122f457600080fd5b5051336000908152602260209081526040918290208054600160a060020a031916600160a060020a038516908117909155825190815291519293507f4575facd117046c9c28b69a3eb9c08939f2462a5a22ea6c6dcd4f79b8dd124e992918290030190a192915050565b600f54600160a060020a031681565b600a5490565b600d5460ff1681565b600090565b60208054604080517f40b89f06000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151600094859493909316926340b89f06926024808201939182900301818787803b1580156123ea57600080fd5b505af11580156123fe573d6000803e3d6000fd5b505050506040513d602081101561241457600080fd5b505160408051600160a060020a038316815290519192507f473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571919081900360200190a192915050565b600254600160a060020a031632148061247f5750600254600160a060020a031633145b151561248a57600080fd5b600254600160a060020a0316ff5b60175490565b602054600160a060020a031681565b60006124b761155e565b15156124c257600080fd5b600d5460ff1615156124d357600080fd5b60006008805460018160011615610100020316600290049050111561258257600a8054600181810180845560009390935260088054612549937fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80192600261010091831615919091026000190190911604615560565b5050600954600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901555b600c80546125a59160089160026000196101006001841615020190911604615560565b50426009556040805160208101918290526000908190526125c891600c916154e6565b50600d805460ff1916905560035460408051600160a060020a039092168083526020830182815260088054600260001960018316156101000201909116049385018490527f482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e949293909291906060830190849080156126885780601f1061265d57610100808354040283529160200191612688565b820191906000526020600020905b81548152906001019060200180831161266b57829003601f168201915b5050935050505060405180910390a150600190565b60178054829081106126ab57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152935090918301828280156113b05780601f10611385576101008083540402835291602001916113b0565b601680548290811061271f57fe5b600091825260209091200154600160a060020a0316905081565b601a5481565b600080601e60009054906101000a9004600160a060020a0316600160a060020a031663575185ed6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561279557600080fd5b505af11580156127a9573d6000803e3d6000fd5b505050506040513d60208110156127bf57600080fd5b505160408051600160a060020a038316815290519192507fa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159919081900360200190a1919050565b60606113e161281361505d565b83615062565b600254600160a060020a031632148061283c5750600254600160a060020a031633145b151561284757600080fd5b601d8054600160a060020a031916600160a060020a0392909216919091179055565b612871612f32565b151561287c57600080fd5b60408051602081019182905260009081905261289a91600c916154e6565b50600d805460ff19169055565b600c805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156113b05780601f10611385576101008083540402835291602001916113b0565b600160a060020a039081166000908152601460205260409020541690565b600254600160a060020a03163214806129435750600254600160a060020a031633145b151561294e57600080fd5b612a8460168054806020026020016040519081016040528092919081815260200182805480156129a757602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612989575b50505050506017805480602002602001604051908101604052809291908181526020016000905b82821015612a795760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015612a655780601f10612a3a57610100808354040283529160200191612a65565b820191906000526020600020905b815481529060010190602001808311612a4857829003601f168201915b5050505050815260200190600101906129ce565b505050508484614e0a565b15612a8e57600080fd5b6016805460018082019092557fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b5124289018054600160a060020a031916600160a060020a0385161790556017805491820180825560009190915282519091612b1c917fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c159091019060208501906154e6565b505060408051338152600160a060020a038416602082015281517f2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4929181900390910190a15050565b6002546000906060908290600160a060020a0316321480612b905750600254600160a060020a031633145b1515612b9b57600080fd5b6023856040518082805190602001908083835b60208310612bcd5780518252601f199092019160209182019101612bae565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820185208054808402870184019092528186529350915060009084015b82821015612cbd5760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015612ca95780601f10612c7e57610100808354040283529160200191612ca9565b820191906000526020600020905b815481529060010190602001808311612c8c57829003601f168201915b505050505081526020019060010190612c12565b505050509150600090505b8151811015612df957836040518082805190602001908083835b60208310612d015780518252601f199092019160209182019101612ce2565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912085519093508592508491508110612d3d57fe5b906020019060200201516040518082805190602001908083835b60208310612d765780518252601f199092019160209182019101612d57565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415612df157604080513381526001602082015281517fdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319929181900390910190a160009250612ec0565b600101612cc8565b6023856040518082805190602001908083835b60208310612e2b5780518252601f199092019160209182019101612e0c565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810190932080546001810180835560009283529185902089519295612e7e9550910192508801906154e6565b5050604080513381526000602082015281517fdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319929181900390910190a1600192505b505092915050565b60198054829081106126ab57fe5b601880548290811061271f57fe5b600154600160a060020a03163214612efb57600080fd5b600160a060020a0381161515612f1057600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b600254600160a060020a0316321490565b601c805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156113b05780601f10611385576101008083540402835291602001916113b0565b6000612fa9326150da565b905090565b600b805482908110612fbc57fe5b600091825260209091200154905081565b600a8054829081106126ab57fe5b600254600160a060020a0316321480612ffe5750600254600160a060020a031633145b151561300957600080fd5b601f8054600160a060020a031916600160a060020a0392909216919091179055565b600254600160a060020a0316331490565b600254600160a060020a031632148061305f5750600254600160a060020a031633145b151561306a57600080fd5b601e8054600160a060020a031916600160a060020a0392909216919091179055565b600254600160a060020a03163214806130af5750600254600160a060020a031633145b15156130ba57600080fd5b60218054600160a060020a031916600160a060020a0392909216919091179055565b60006023826040518082805190602001908083835b602083106131105780518252601f1990920191602091820191016130f1565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054949350505050565b600254600160a060020a031681565b602154600160a060020a031681565b600254600160a060020a03163214806131855750600254600160a060020a031633145b151561319057600080fd5b80516131a390601c9060208401906154e6565b5050565b50600190565b6131b5612f32565b15156131c057600080fd5b600d5460ff16156131d057600080fd5b80516080116131de57600080fd5b80516131f190600c9060208401906154e6565b50600d805460ff191660011790556003547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a031661323561130b565b60408051600160a060020a038085168252831660208201526060918101828152600c805460026000196101006001841615020190911604938301849052926080830190849080156132c75780601f1061329c576101008083540402835291602001916132c7565b820191906000526020600020905b8154815290600101906020018083116132aa57829003601f168201915b505094505050505060405180910390a150565b601080548290811061271f57fe5b600080805b6011548110156133385783600160a060020a031660108281548110151561331057fe5b600091825260209091200154600160a060020a0316141561333057600191505b6001016132ed565b5092915050565b600254600160a060020a03163214806133625750600254600160a060020a031633145b151561336d57600080fd5b60208054600160a060020a031916600160a060020a0392909216919091179055565b326000908152601460205260408120548190600160a060020a031615156133bf576133b8612f9e565b90506133da565b5032600090815260146020526040902054600160a060020a03165b60408051600160a060020a038316815290517f1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e1579181900360200190a1919050565b600254600160a060020a031632148061343e5750600254600160a060020a031633145b151561344957600080fd5b806024836040518082805190602001908083835b6020831061347c5780518252601f19909201916020918201910161345d565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810190932084516134bd95919491909101925090506154e6565b505050565b336000908152602260205260408120548190600160a060020a031615156134e857600080fd5b50336000908152602260205260408082208054600160a060020a0319811690915581517f41c0e1b50000000000000000000000000000000000000000000000000000000081529151600160a060020a039091169283926341c0e1b5926004808301939282900301818387803b15801561356057600080fd5b505af1158015613574573d6000803e3d6000fd5b505060408051600160a060020a038516815290517fb98695ab4c6cedb3b4dfe62479a9d39a59aa2cb38b8bd92bbb6ce5856e42bdf49350908190036020019150a15090565b60606000806020845111151561367357505081518083015160008181526004602090815260409182902080548351601f6002610100600185161502600019019093169290920491820184900484028101840190945280845293949390918301828280156136675780601f1061363c57610100808354040283529160200191613667565b820191906000526020600020905b81548152906001019060200180831161364a57829003601f168201915b50505050509250611c38565b6005846040518082805190602001908083835b602083106136a55780518252601f199092019160209182019101613686565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156137595780601f1061372e57610100808354040283529160200191613759565b820191906000526020600020905b81548152906001019060200180831161373c57829003601f168201915b505050505092505050919050565b600354600160a060020a031681565b601e54600160a060020a031681565b600254600090600160a060020a03163214806137ab5750600254600160a060020a031633145b15156137b657600080fd5b5060005b6016548110156131a35781600160a060020a03166016828154811015156137dd57fe5b600091825260209091200154600160a060020a031614156138495761380581601660176152c9565b60408051338152600160a060020a038416602082015281517f41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d929181900390910190a15b6001016137ba565b600080601d60009054906101000a9004600160a060020a0316600160a060020a031663b8cfaf056040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156138a757600080fd5b505af11580156138bb573d6000803e3d6000fd5b505050506040513d60208110156138d157600080fd5b505160408051600160a060020a038316815290519192507f9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8919081900360200190a1919050565b602154604080517fbf4e088f000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152848116602483015291516000938493169163bf4e088f91604480830192602092919082900301818787803b15801561398957600080fd5b505af115801561399d573d6000803e3d6000fd5b505050506040513d60208110156139b357600080fd5b505160408051600160a060020a038316815290519192507fa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce919081900360200190a19392505050565b613a0461302b565b80613a125750613a1261155e565b1515613a1d57600080fd5b60408051602080825260088054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b6593909291829182019084908015613abc5780601f10613a9157610100808354040283529160200191613abc565b820191906000526020600020905b815481529060010190602001808311613a9f57829003601f168201915b50509250505060405180910390a1565b601d54600160a060020a031681565b601f54600160a060020a031681565b60115481565b6040805132815290516000917f53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca919081900360200190a190565b600254600160a060020a0316321480613b4d5750600254600160a060020a031633145b1515613b5857600080fd5b600f8054600160a060020a031916600160a060020a0392909216919091179055565b60006060613b8783612806565b90506023816040518082805190602001908083835b60208310613bbb5780518252601f199092019160209182019101613b9c565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205495945050505050565b6002546000908190600160a060020a0316321480613c185750600254600160a060020a031633145b1515613c2357600080fd5b5060009050805b601854811015613e255782600160a060020a0316601882815481101515613c4d57fe5b600091825260209091200154600160a060020a03161415613e1d576016601882815481101515613c7957fe5b6000918252602080832090910154835460018101855593835291209091018054600160a060020a031916600160a060020a03909216919091179055601980546017919083908110613cc657fe5b60009182526020808320845460018181018088559686529290942092018054613d0a9493909301929091600261010091831615919091026000190190911604615560565b50507fd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54601882815481101515613d3c57fe5b60009182526020909120015460198054600160a060020a039092169184908110613d6257fe5b600091825260209182902060408051600160a060020a0386168152938401818152919092018054600260001961010060018416150201909116049284018390529291606083019084908015613df85780601f10613dcd57610100808354040283529160200191613df8565b820191906000526020600020905b815481529060010190602001808311613ddb57829003601f168201915b5050935050505060405180910390a1613e1481601860196152c9565b60019150613e25565b600101613c2a565b8115156134bd57600080fd5b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156113b05780601f10611385576101008083540402835291602001916113b0565b600080600080600080613e9d612f32565b1515613ea857600080fd5b866040516020018082805190602001908083835b60208310613edb5780518252601f199092019160209182019101613ebc565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310613f3e5780518252601f199092019160209182019101613f1f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020945060086040516020018082805460018160011615610100020316600290048015613fcd5780601f10613fab576101008083540402835291820191613fcd565b820191906000526020600020905b815481529060010190602001808311613fb9575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106140105780518252601f199092019160209182019101613ff1565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912096505050508484141561413157604080516020810191829052600090819052614064916008916154e6565b506000600981905560035460408051600160a060020a03909216808352908201839052606060208084018281528c51928501929092528b517f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f519593948d9493909290916080840191860190808383885b838110156140ec5781810151838201526020016140d4565b50505050905090810190601f1680156141195780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a16000955061442a565b6000199250600091505b600a5482101561434757600a80548390811061415357fe5b9060005260206000200160405160200180828054600181600116156101000203166002900480156141bb5780601f106141995761010080835404028352918201916141bb565b820191906000526020600020905b8154815290600101906020018083116141a7575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106141fe5780518252601f1990920191602091820191016141df565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912093505050508481141561433c57600a80548390811061424257fe5b90600052602060002001600061425891906155d5565b600b80548390811061426657fe5b6000918252602082200155600a5460001901821461430c57600a8054600019810190811061429057fe5b90600052602060002001600a838154811015156142a957fe5b9060005260206000200190805460018160011615610100020316600290046142d2929190615560565b50600b805460001981019081106142e557fe5b9060005260206000200154600b838154811015156142ff57fe5b6000918252602090912001555b600a80549061431f90600019830161561c565b50600b805490614333906000198301615640565b50819250614347565b60019091019061413b565b60001983141561435657600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600360009054906101000a9004600160a060020a031688856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156143ea5781810151838201526020016143d2565b50505050905090810190601f1680156144175780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18295505b5050505050919050565b6002546000908190600160a060020a031632148061445c5750600254600160a060020a031633145b151561446757600080fd5b83516020106144a05750508151808301516000818152600460209081526040909120845192939261449a928601906154e6565b50614516565b826005856040518082805190602001908083835b602083106144d35780518252601f1990920191602091820191016144b4565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320845161451495919491909101925090506154e6565b505b50505050565b60025460009081908190600160a060020a03163314806145445750600061454233613b7a565b115b151561454f57600080fd5b88518a511461455d57600080fd5b875189511461456b57600080fd5b865188511461457957600080fd5b855187511461458757600080fd5b845186511461459557600080fd5b83518551146145a357600080fd5b600092505b89518310156147165786838151811015156145bf57fe5b90602001906020020151915081600160a060020a031663508ad278338c868151811015156145e957fe5b906020019060200201518c8781518110151561460157fe5b906020019060200201518c8881518110151561461957fe5b906020019060200201518b8981518110151561463157fe5b906020019060200201518b8a81518110151561464957fe5b906020019060200201518b8b81518110151561466157fe5b60209081029091018101516040805160e060020a63ffffffff8c16028152600160a060020a03998a16600482015260ff90981660248901526044880196909652606487019490945291909516608485015260a484019490945260c48301525160e480830193928290030181600087803b1580156146dd57600080fd5b505af11580156146f1573d6000803e3d6000fd5b505050506040513d602081101561470757600080fd5b505190506001909201916145a8565b50505050505050505050565b6040516000907fed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88908290a150600190565b600254600160a060020a03163214806147765750600254600160a060020a031633145b151561478157600080fd5b600160a060020a038116151561479657600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b60195490565b602260205260009081526040902054600160a060020a031681565b60025460009081908190600160a060020a03163214806148035750600254600160a060020a031633145b151561480e57600080fd5b50506011546000190160005b601154811015611c335783600160a060020a031660108281548110151561483d57fe5b600091825260209091200154600160a060020a0316141561497457601080548290811061486657fe5b60009182526020909120018054600160a060020a031916905580821461490b57601080548390811061489457fe5b60009182526020909120015460108054600160a060020a0390921691839081106148ba57fe5b60009182526020909120018054600160a060020a031916600160a060020a039290921691909117905560108054839081106148f157fe5b60009182526020909120018054600160a060020a03191690555b6011829055600160a060020a0384166000818152601260209081526040918290208054600160a060020a0319169055815192835290517fd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e29281900390910190a160019250611c38565b60010161481a565b6002546000906060908290600160a060020a03163214806149a75750600254600160a060020a031633145b15156149b257600080fd5b6023856040518082805190602001908083835b602083106149e45780518252601f1990920191602091820191016149c5565b51815160209384036101000a60001901801990921691161790529201948552506040805194859003820185208054808402870184019092528186529350915060009084015b82821015614ad45760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015614ac05780601f10614a9557610100808354040283529160200191614ac0565b820191906000526020600020905b815481529060010190602001808311614aa357829003601f168201915b505050505081526020019060010190614a29565b505050509150600090505b8151811015614dc457836040518082805190602001908083835b60208310614b185780518252601f199092019160209182019101614af9565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912085519093508592508491508110614b5457fe5b906020019060200201516040518082805190602001908083835b60208310614b8d5780518252601f199092019160209182019101614b6e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415614dbc578151600019018114614c7857815182906000198101908110614be257fe5b906020019060200201516023866040518082805190602001908083835b60208310614c1e5780518252601f199092019160209182019101614bff565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922080549092508491508110614c5957fe5b906000526020600020019080519060200190614c769291906154e6565b505b6023856040518082805190602001908083835b60208310614caa5780518252601f199092019160209182019101614c8b565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001835103815481101515614cee57fe5b906000526020600020016000614d0491906155d5565b60016023866040518082805190602001908083835b60208310614d385780518252601f199092019160209182019101614d19565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922080549390930392614d779250905082615664565b50604080513381526000602082015281517f5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c929181900390910190a160019250612ec0565b600101614adf565b604080513381526001602082015281517f5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c929181900390910190a1506000949350505050565b60008084518651141515614e1d57600080fd5b5060005b8551811015614f4a57826040518082805190602001908083835b60208310614e5a5780518252601f199092019160209182019101614e3b565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912088519093508892508491508110614e9657fe5b906020019060200201516040518082805190602001908083835b60208310614ecf5780518252601f199092019160209182019101614eb0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161480614f34575083600160a060020a03168682815181101515614f1f57fe5b90602001906020020151600160a060020a0316145b15614f425760019150614f4f565b600101614e21565b600091505b50949350505050565b6060600080825b8551821015614fa057614f898683815181101515614f7957fe5b906020019060200201518661541f565b15614f95576001909201915b600190910190614f5f565b82604051908082528060200260200182016040528015614fd457816020015b6060815260200190600190039081614fbf5790505b509050821515614fe657809350615054565b60009250600091505b8551821015615050576150098683815181101515614f7957fe5b1561504557858281518110151561501c57fe5b90602001906020020151818481518110151561503457fe5b602090810290910101526001909201915b600190910190614fef565b8093505b50505092915050565b600b90565b604080517f6d616b654944537472696e6728696e742c6164647265737329000000000000008152905190819003601901812080825260e060020a8402600483018190526008830184905260609260ff90848160288160008681f18015156150c857600080fd5b50606081016040529695505050505050565b600160a060020a03808216600090815260146020526040812054909182918291161561510557600080fd5b601f60009054906101000a9004600160a060020a0316600160a060020a0316637708bc416040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561515857600080fd5b505af115801561516c573d6000803e3d6000fd5b505050506040513d602081101561518257600080fd5b50519150600160a060020a03841632146152145750604080517ff2fde38b000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151839283169163f2fde38b91602480830192600092919082900301818387803b1580156151fb57600080fd5b505af115801561520f573d6000803e3d6000fd5b505050505b60408051600160a060020a038416815290517f56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca9181900360200190a160408051600160a060020a0380851682528616602082015281517f05e3f3adaf96d565bb326088a1d8e0d78497549df2c99a8ab681e5fbc7a9b3f2929181900390910190a150600160a060020a0392831660009081526014602052604090208054600160a060020a031916938216939093179092555090565b8154831080156152d95750805483105b15156152e457600080fd5b81546000190183146153ab5780548190600019810190811061530257fe5b90600052602060002001818481548110151561531a57fe5b906000526020600020019080546001816001161561010002031660029004615343929190615560565b5081548290600019810190811061535657fe5b6000918252602090912001548254600160a060020a039091169083908590811061537c57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b8054819060001981019081106153bd57fe5b9060005260206000200160006153d391906155d5565b80546153e3826000198301615664565b508154829060001981019081106153f657fe5b60009182526020909120018054600160a060020a03191690558154614516836000198301615640565b600080600083519150845182111561543657845191505b5060005b818110156154db57838181518110151561545057fe5b90602001015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916858281518110151561549357fe5b60209101015160f860020a90819004027fff0000000000000000000000000000000000000000000000000000000000000016146154d35760009250612ec0565b60010161543a565b506001949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061552757805160ff1916838001178555615554565b82800160010185558215615554579182015b82811115615554578251825591602001919060010190615539565b506115e9929150615688565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106155995780548555615554565b8280016001018555821561555457600052602060002091601f016020900482015b828111156155545782548255916001019190600101906155ba565b50805460018160011615610100020316600290046000825580601f106155fb5750615619565b601f0160209004906000526020600020908101906156199190615688565b50565b8154818355818111156134bd576000838152602090206134bd9181019083016156a2565b8154818355818111156134bd576000838152602090206134bd918101908301615688565b8154818355818111156134bd576000838152602090206134bd9181019083016156c5565b61131891905b808211156115e9576000815560010161568e565b61131891905b808211156115e95760006156bc82826155d5565b506001016156a8565b61131891905b808211156115e95760006156df82826155d5565b506001016156cb5600a165627a7a7230582068ce20c4767fc9db43785a4ee1d3e708ace8fc754deed364b1d57b8d374d6d810029",
}

// BaseContentSpaceABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseContentSpaceMetaData.ABI instead.
var BaseContentSpaceABI = BaseContentSpaceMetaData.ABI

// Deprecated: Use BaseContentSpaceMetaData.Sigs instead.
// BaseContentSpaceFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentSpaceFuncSigs = BaseContentSpaceMetaData.Sigs

// BaseContentSpaceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseContentSpaceMetaData.Bin instead.
var BaseContentSpaceBin = BaseContentSpaceMetaData.Bin

// DeployBaseContentSpace deploys a new Ethereum contract, binding an instance of BaseContentSpace to it.
func DeployBaseContentSpace(auth *bind.TransactOpts, backend bind.ContractBackend, content_space_name string) (common.Address, *types.Transaction, *BaseContentSpace, error) {
	parsed, err := ParsedABI(K_BaseContentSpace)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseContentSpaceBin), backend, content_space_name)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContentSpace{BaseContentSpaceCaller: BaseContentSpaceCaller{contract: contract}, BaseContentSpaceTransactor: BaseContentSpaceTransactor{contract: contract}, BaseContentSpaceFilterer: BaseContentSpaceFilterer{contract: contract}}, nil
}

// BaseContentSpace is an auto generated Go binding around an Ethereum contract.
type BaseContentSpace struct {
	BaseContentSpaceCaller     // Read-only binding to the contract
	BaseContentSpaceTransactor // Write-only binding to the contract
	BaseContentSpaceFilterer   // Log filterer for contract events
}

// BaseContentSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseContentSpace creates a new instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpace(address common.Address, backend bind.ContractBackend) (*BaseContentSpace, error) {
	contract, err := bindBaseContentSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpace{BaseContentSpaceCaller: BaseContentSpaceCaller{contract: contract}, BaseContentSpaceTransactor: BaseContentSpaceTransactor{contract: contract}, BaseContentSpaceFilterer: BaseContentSpaceFilterer{contract: contract}}, nil
}

// NewBaseContentSpaceCaller creates a new read-only instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpaceCaller(address common.Address, caller bind.ContractCaller) (*BaseContentSpaceCaller, error) {
	contract, err := bindBaseContentSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCaller{contract: contract}, nil
}

// NewBaseContentSpaceTransactor creates a new write-only instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentSpaceTransactor, error) {
	contract, err := bindBaseContentSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceTransactor{contract: contract}, nil
}

// NewBaseContentSpaceFilterer creates a new log filterer instance of BaseContentSpace, bound to a specific deployed contract.
func NewBaseContentSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentSpaceFilterer, error) {
	contract, err := bindBaseContentSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceFilterer{contract: contract}, nil
}

// bindBaseContentSpace binds a generic wrapper to an already deployed contract.
func bindBaseContentSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseContentSpace)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ActiveNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "activeNodeAddresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) view returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCaller) ActiveNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "activeNodeLocators", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "addressKMS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "canCommit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "canConfirm")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "canContribute", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "canEdit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanNodePublish(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "canNodePublish", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "canPublish", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CanReview(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "canReview", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckKMS is a free data retrieval call binding the contract method 0x8d2a23db.
//
// Solidity: function checkKMS(string _kmsIdStr) view returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) CheckKMS(opts *bind.CallOpts, _kmsIdStr string) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "checkKMS", _kmsIdStr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) view returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) CheckKMSAddr(opts *bind.CallOpts, _kmsAddr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "checkKMSAddr", _kmsAddr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "commitPending")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentFactory is a free data retrieval call binding the contract method 0x904696a8.
//
// Solidity: function contentFactory() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentFactory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "contentFactory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "contentTypeContracts", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "contentTypes", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() view returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "contentTypesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() view returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "countVersionHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Description is a free data retrieval call binding the contract method 0x7284e416.
//
// Solidity: function description() view returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) Description(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "description")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "factory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "findTypeByHash", typeHash)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) view returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) GetKMSID(opts *bind.CallOpts, _kmsAddr common.Address) (string, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "getKMSID", _kmsAddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) view returns(string, string)
func (_BaseContentSpace *BaseContentSpaceCaller) GetKMSInfo(opts *bind.CallOpts, _kmsID string, prefix []byte) (string, string, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "getKMSInfo", _kmsID, prefix)

	if err != nil {
		return *new(string), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) view returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "getMeta", key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GroupFactory is a free data retrieval call binding the contract method 0xb04b6caa.
//
// Solidity: function groupFactory() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) GroupFactory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "groupFactory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address ) view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) HasAccess(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "hasAccess", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// LibraryFactory is a free data retrieval call binding the contract method 0x441c5aa3.
//
// Solidity: function libraryFactory() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) LibraryFactory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "libraryFactory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// NodeMapping is a free data retrieval call binding the contract method 0xfbd1b4ce.
//
// Solidity: function nodeMapping(address ) view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) NodeMapping(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "nodeMapping", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() view returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) NumActiveNodes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "numActiveNodes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() view returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) NumPendingNodes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "numPendingNodes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() view returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "objectHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "parentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() view returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "pendingHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) PendingNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "pendingNodeAddresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) view returns(bytes)
func (_BaseContentSpace *BaseContentSpaceCaller) PendingNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "pendingNodeLocators", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "requiresReview")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) UserWallets(opts *bind.CallOpts, _userAddr common.Address) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "userWallets", _userAddr)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "validType", content_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseContentSpace *BaseContentSpaceCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) view returns(string)
func (_BaseContentSpace *BaseContentSpaceCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "versionHashes", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) view returns(uint256)
func (_BaseContentSpace *BaseContentSpaceCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "versionTimestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WalletFactory is a free data retrieval call binding the contract method 0xc5c03699.
//
// Solidity: function walletFactory() view returns(address)
func (_BaseContentSpace *BaseContentSpaceCaller) WalletFactory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "walletFactory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) view returns(bool)
func (_BaseContentSpace *BaseContentSpaceCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var out []interface{}
	err := _BaseContentSpace.contract.Call(opts, &out, "whitelistedType", content_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) AccessRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "accessRequest")
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// AddKMSLocator is a paid mutator transaction binding the contract method 0x653a92f6.
//
// Solidity: function addKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) AddKMSLocator(opts *bind.TransactOpts, _kmsID string, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "addKMSLocator", _kmsID, _locator)
}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) AddNode(opts *bind.TransactOpts, _nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "addNode", _nodeAddr, _locator)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) ApproveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "approveNode", _nodeAddr)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "clearPending")
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "commit", _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() payable returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "confirmCommit")
}

// CreateAccessWallet is a paid mutator transaction binding the contract method 0x7708bc41.
//
// Solidity: function createAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateAccessWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createAccessWallet")
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateContent(opts *bind.TransactOpts, lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createContent", lib, content_type)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateContentType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createContentType")
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateGroup(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createGroup")
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) CreateLibrary(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "createLibrary", address_KMS)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentSpace *BaseContentSpaceTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "deleteVersion", _versionHash)
}

// EngageAccountLibrary is a paid mutator transaction binding the contract method 0xc82710c1.
//
// Solidity: function engageAccountLibrary() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) EngageAccountLibrary(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "engageAccountLibrary")
}

// ExecuteBatch is a paid mutator transaction binding the contract method 0xe9861ab1.
//
// Solidity: function executeBatch(uint8[] _v, bytes32[] _r, bytes32[] _s, address[] _from, address[] _dest, uint256[] _value, uint256[] _ts) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) ExecuteBatch(opts *bind.TransactOpts, _v []uint8, _r [][32]byte, _s [][32]byte, _from []common.Address, _dest []common.Address, _value []*big.Int, _ts []*big.Int) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "executeBatch", _v, _r, _s, _from, _dest, _value, _ts)
}

// GetAccessWallet is a paid mutator transaction binding the contract method 0xa2d67fcf.
//
// Solidity: function getAccessWallet() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) GetAccessWallet(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "getAccessWallet")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "kill")
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "publish", contentObj)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "putMeta", key, value)
}

// RegisterSpaceNode is a paid mutator transaction binding the contract method 0x2f7a781a.
//
// Solidity: function registerSpaceNode() returns(address)
func (_BaseContentSpace *BaseContentSpaceTransactor) RegisterSpaceNode(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "registerSpaceNode")
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "removeContentType", content_type)
}

// RemoveKMSLocator is a paid mutator transaction binding the contract method 0xfe7ac19f.
//
// Solidity: function removeKMSLocator(string _kmsID, bytes _locator) returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) RemoveKMSLocator(opts *bind.TransactOpts, _kmsID string, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "removeKMSLocator", _kmsID, _locator)
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) RemoveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "removeNode", _nodeAddr)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetContentFactory is a paid mutator transaction binding the contract method 0x85ce1df1.
//
// Solidity: function setContentFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetContentFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setContentFactory", new_factory)
}

// SetDescription is a paid mutator transaction binding the contract method 0x90c3f38f.
//
// Solidity: function setDescription(string content_space_description) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetDescription(opts *bind.TransactOpts, content_space_description string) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setDescription", content_space_description)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setFactory", new_factory)
}

// SetGroupFactory is a paid mutator transaction binding the contract method 0x837b3b93.
//
// Solidity: function setGroupFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetGroupFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setGroupFactory", new_factory)
}

// SetKMSPublicKey is a paid mutator transaction binding the contract method 0xa69cb734.
//
// Solidity: function setKMSPublicKey(string _kmsID, string _pubKey) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetKMSPublicKey(opts *bind.TransactOpts, _kmsID string, _pubKey string) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setKMSPublicKey", _kmsID, _pubKey)
}

// SetLibraryFactory is a paid mutator transaction binding the contract method 0x9d05d18d.
//
// Solidity: function setLibraryFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetLibraryFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setLibraryFactory", new_factory)
}

// SetWalletFactory is a paid mutator transaction binding the contract method 0x7ebf879c.
//
// Solidity: function setWalletFactory(address new_factory) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SetWalletFactory(opts *bind.TransactOpts, new_factory common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "setWalletFactory", new_factory)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) SubmitNode(opts *bind.TransactOpts, _locator []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "submitNode", _locator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "transferOwnership", newOwner)
}

// UnregisterSpaceNode is a paid mutator transaction binding the contract method 0xabe596b1.
//
// Solidity: function unregisterSpaceNode() returns(bool)
func (_BaseContentSpace *BaseContentSpaceTransactor) UnregisterSpaceNode(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "unregisterSpaceNode")
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentSpace.contract.Transact(opts, "updateRequest")
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseContentSpace *BaseContentSpaceTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseContentSpace.contract.RawTransact(opts, calldata)
}

// BaseContentSpaceAccessRequestIterator is returned from FilterAccessRequest and is used to iterate over the raw logs and unpacked data for AccessRequest events raised by the BaseContentSpace contract.
type BaseContentSpaceAccessRequestIterator struct {
	Event *BaseContentSpaceAccessRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceAccessRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceAccessRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceAccessRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceAccessRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceAccessRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceAccessRequest represents a AccessRequest event raised by the BaseContentSpace contract.
type BaseContentSpaceAccessRequest struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAccessRequest is a free log retrieval operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterAccessRequest(opts *bind.FilterOpts) (*BaseContentSpaceAccessRequestIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceAccessRequestIterator{contract: _BaseContentSpace.contract, event: "AccessRequest", logs: logs, sub: sub}, nil
}

// WatchAccessRequest is a free log subscription operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchAccessRequest(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceAccessRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceAccessRequest)
				if err := _BaseContentSpace.contract.UnpackLog(event, "AccessRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequest is a log parse operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseAccessRequest(log types.Log) (*BaseContentSpaceAccessRequest, error) {
	event := new(BaseContentSpaceAccessRequest)
	if err := _BaseContentSpace.contract.UnpackLog(event, "AccessRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceAddKMSLocatorIterator is returned from FilterAddKMSLocator and is used to iterate over the raw logs and unpacked data for AddKMSLocator events raised by the BaseContentSpace contract.
type BaseContentSpaceAddKMSLocatorIterator struct {
	Event *BaseContentSpaceAddKMSLocator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceAddKMSLocatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceAddKMSLocator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceAddKMSLocator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceAddKMSLocatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceAddKMSLocatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceAddKMSLocator represents a AddKMSLocator event raised by the BaseContentSpace contract.
type BaseContentSpaceAddKMSLocator struct {
	Sender common.Address
	Status *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterAddKMSLocator is a free log retrieval operation binding the contract event 0xdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319.
//
// Solidity: event AddKMSLocator(address sender, uint256 status)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterAddKMSLocator(opts *bind.FilterOpts) (*BaseContentSpaceAddKMSLocatorIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "AddKMSLocator")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceAddKMSLocatorIterator{contract: _BaseContentSpace.contract, event: "AddKMSLocator", logs: logs, sub: sub}, nil
}

// WatchAddKMSLocator is a free log subscription operation binding the contract event 0xdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319.
//
// Solidity: event AddKMSLocator(address sender, uint256 status)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchAddKMSLocator(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceAddKMSLocator) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "AddKMSLocator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceAddKMSLocator)
				if err := _BaseContentSpace.contract.UnpackLog(event, "AddKMSLocator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddKMSLocator is a log parse operation binding the contract event 0xdf8127994c229011ce9c4764bdc0375bb71c06cf1544f034cd81a42f37233319.
//
// Solidity: event AddKMSLocator(address sender, uint256 status)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseAddKMSLocator(log types.Log) (*BaseContentSpaceAddKMSLocator, error) {
	event := new(BaseContentSpaceAddKMSLocator)
	if err := _BaseContentSpace.contract.UnpackLog(event, "AddKMSLocator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceAddNodeIterator is returned from FilterAddNode and is used to iterate over the raw logs and unpacked data for AddNode events raised by the BaseContentSpace contract.
type BaseContentSpaceAddNodeIterator struct {
	Event *BaseContentSpaceAddNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceAddNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceAddNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceAddNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceAddNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceAddNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceAddNode represents a AddNode event raised by the BaseContentSpace contract.
type BaseContentSpaceAddNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddNode is a free log retrieval operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterAddNode(opts *bind.FilterOpts) (*BaseContentSpaceAddNodeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceAddNodeIterator{contract: _BaseContentSpace.contract, event: "AddNode", logs: logs, sub: sub}, nil
}

// WatchAddNode is a free log subscription operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchAddNode(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceAddNode) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceAddNode)
				if err := _BaseContentSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddNode is a log parse operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseAddNode(log types.Log) (*BaseContentSpaceAddNode, error) {
	event := new(BaseContentSpaceAddNode)
	if err := _BaseContentSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceBindUserWalletIterator is returned from FilterBindUserWallet and is used to iterate over the raw logs and unpacked data for BindUserWallet events raised by the BaseContentSpace contract.
type BaseContentSpaceBindUserWalletIterator struct {
	Event *BaseContentSpaceBindUserWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceBindUserWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceBindUserWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceBindUserWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceBindUserWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceBindUserWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceBindUserWallet represents a BindUserWallet event raised by the BaseContentSpace contract.
type BaseContentSpaceBindUserWallet struct {
	Wallet   common.Address
	UserAddr common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBindUserWallet is a free log retrieval operation binding the contract event 0x05e3f3adaf96d565bb326088a1d8e0d78497549df2c99a8ab681e5fbc7a9b3f2.
//
// Solidity: event BindUserWallet(address wallet, address userAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterBindUserWallet(opts *bind.FilterOpts) (*BaseContentSpaceBindUserWalletIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "BindUserWallet")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceBindUserWalletIterator{contract: _BaseContentSpace.contract, event: "BindUserWallet", logs: logs, sub: sub}, nil
}

// WatchBindUserWallet is a free log subscription operation binding the contract event 0x05e3f3adaf96d565bb326088a1d8e0d78497549df2c99a8ab681e5fbc7a9b3f2.
//
// Solidity: event BindUserWallet(address wallet, address userAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchBindUserWallet(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceBindUserWallet) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "BindUserWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceBindUserWallet)
				if err := _BaseContentSpace.contract.UnpackLog(event, "BindUserWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBindUserWallet is a log parse operation binding the contract event 0x05e3f3adaf96d565bb326088a1d8e0d78497549df2c99a8ab681e5fbc7a9b3f2.
//
// Solidity: event BindUserWallet(address wallet, address userAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseBindUserWallet(log types.Log) (*BaseContentSpaceBindUserWallet, error) {
	event := new(BaseContentSpaceBindUserWallet)
	if err := _BaseContentSpace.contract.UnpackLog(event, "BindUserWallet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseContentSpace contract.
type BaseContentSpaceCommitPendingIterator struct {
	Event *BaseContentSpaceCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCommitPending represents a CommitPending event raised by the BaseContentSpace contract.
type BaseContentSpaceCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseContentSpaceCommitPendingIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCommitPendingIterator{contract: _BaseContentSpace.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCommitPending)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCommitPending(log types.Log) (*BaseContentSpaceCommitPending, error) {
	event := new(BaseContentSpaceCommitPending)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeAddedIterator struct {
	Event *BaseContentSpaceContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceContentTypeAdded represents a ContentTypeAdded event raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*BaseContentSpaceContentTypeAddedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceContentTypeAddedIterator{contract: _BaseContentSpace.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceContentTypeAdded)
				if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseContentTypeAdded(log types.Log) (*BaseContentSpaceContentTypeAdded, error) {
	event := new(BaseContentSpaceContentTypeAdded)
	if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeRemovedIterator struct {
	Event *BaseContentSpaceContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceContentTypeRemoved represents a ContentTypeRemoved event raised by the BaseContentSpace contract.
type BaseContentSpaceContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*BaseContentSpaceContentTypeRemovedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceContentTypeRemovedIterator{contract: _BaseContentSpace.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceContentTypeRemoved)
				if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseContentTypeRemoved(log types.Log) (*BaseContentSpaceContentTypeRemoved, error) {
	event := new(BaseContentSpaceContentTypeRemoved)
	if err := _BaseContentSpace.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceCreateAccessWalletIterator is returned from FilterCreateAccessWallet and is used to iterate over the raw logs and unpacked data for CreateAccessWallet events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateAccessWalletIterator struct {
	Event *BaseContentSpaceCreateAccessWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateAccessWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateAccessWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateAccessWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateAccessWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateAccessWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateAccessWallet represents a CreateAccessWallet event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateAccessWallet struct {
	Wallet common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCreateAccessWallet is a free log retrieval operation binding the contract event 0x56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca.
//
// Solidity: event CreateAccessWallet(address wallet)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateAccessWallet(opts *bind.FilterOpts) (*BaseContentSpaceCreateAccessWalletIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateAccessWallet")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateAccessWalletIterator{contract: _BaseContentSpace.contract, event: "CreateAccessWallet", logs: logs, sub: sub}, nil
}

// WatchCreateAccessWallet is a free log subscription operation binding the contract event 0x56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca.
//
// Solidity: event CreateAccessWallet(address wallet)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateAccessWallet(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateAccessWallet) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateAccessWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateAccessWallet)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateAccessWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateAccessWallet is a log parse operation binding the contract event 0x56c4bf13bebaa9f2be39ac3f2f4619a0dd1b694bb8c5f43c6b244a6dba0f0cca.
//
// Solidity: event CreateAccessWallet(address wallet)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateAccessWallet(log types.Log) (*BaseContentSpaceCreateAccessWallet, error) {
	event := new(BaseContentSpaceCreateAccessWallet)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateAccessWallet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceCreateContentIterator is returned from FilterCreateContent and is used to iterate over the raw logs and unpacked data for CreateContent events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContentIterator struct {
	Event *BaseContentSpaceCreateContent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateContentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateContent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateContent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateContentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateContentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateContent represents a CreateContent event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContent struct {
	ContentAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCreateContent is a free log retrieval operation binding the contract event 0xa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce.
//
// Solidity: event CreateContent(address contentAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateContent(opts *bind.FilterOpts) (*BaseContentSpaceCreateContentIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateContent")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateContentIterator{contract: _BaseContentSpace.contract, event: "CreateContent", logs: logs, sub: sub}, nil
}

// WatchCreateContent is a free log subscription operation binding the contract event 0xa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce.
//
// Solidity: event CreateContent(address contentAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateContent(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateContent) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateContent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateContent)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateContent is a log parse operation binding the contract event 0xa0633ea0b3cb5796607e5f551ae79c7eeee0dc7ee0c3ff8996506261651368ce.
//
// Solidity: event CreateContent(address contentAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateContent(log types.Log) (*BaseContentSpaceCreateContent, error) {
	event := new(BaseContentSpaceCreateContent)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceCreateContentTypeIterator is returned from FilterCreateContentType and is used to iterate over the raw logs and unpacked data for CreateContentType events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContentTypeIterator struct {
	Event *BaseContentSpaceCreateContentType // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateContentTypeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateContentType)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateContentType)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateContentTypeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateContentTypeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateContentType represents a CreateContentType event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateContentType struct {
	ContentTypeAddress common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterCreateContentType is a free log retrieval operation binding the contract event 0x9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8.
//
// Solidity: event CreateContentType(address contentTypeAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateContentType(opts *bind.FilterOpts) (*BaseContentSpaceCreateContentTypeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateContentType")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateContentTypeIterator{contract: _BaseContentSpace.contract, event: "CreateContentType", logs: logs, sub: sub}, nil
}

// WatchCreateContentType is a free log subscription operation binding the contract event 0x9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8.
//
// Solidity: event CreateContentType(address contentTypeAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateContentType(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateContentType) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateContentType")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateContentType)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContentType", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateContentType is a log parse operation binding the contract event 0x9e69777f30c55126be256664fa7beff4b796ac32ebceab94df5071b0148017f8.
//
// Solidity: event CreateContentType(address contentTypeAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateContentType(log types.Log) (*BaseContentSpaceCreateContentType, error) {
	event := new(BaseContentSpaceCreateContentType)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateContentType", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceCreateGroupIterator is returned from FilterCreateGroup and is used to iterate over the raw logs and unpacked data for CreateGroup events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateGroupIterator struct {
	Event *BaseContentSpaceCreateGroup // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateGroupIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateGroup)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateGroup)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateGroupIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateGroupIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateGroup represents a CreateGroup event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateGroup struct {
	GroupAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterCreateGroup is a free log retrieval operation binding the contract event 0xa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159.
//
// Solidity: event CreateGroup(address groupAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateGroup(opts *bind.FilterOpts) (*BaseContentSpaceCreateGroupIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateGroup")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateGroupIterator{contract: _BaseContentSpace.contract, event: "CreateGroup", logs: logs, sub: sub}, nil
}

// WatchCreateGroup is a free log subscription operation binding the contract event 0xa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159.
//
// Solidity: event CreateGroup(address groupAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateGroup(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateGroup) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateGroup")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateGroup)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateGroup", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateGroup is a log parse operation binding the contract event 0xa3b1fe71ae61bad8cffa485b230e24e518938f76182a30fa0d9979e7237ad159.
//
// Solidity: event CreateGroup(address groupAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateGroup(log types.Log) (*BaseContentSpaceCreateGroup, error) {
	event := new(BaseContentSpaceCreateGroup)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateGroup", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceCreateLibraryIterator is returned from FilterCreateLibrary and is used to iterate over the raw logs and unpacked data for CreateLibrary events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateLibraryIterator struct {
	Event *BaseContentSpaceCreateLibrary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateLibraryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateLibrary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateLibrary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateLibraryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateLibraryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateLibrary represents a CreateLibrary event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateLibrary struct {
	LibraryAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCreateLibrary is a free log retrieval operation binding the contract event 0x473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571.
//
// Solidity: event CreateLibrary(address libraryAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateLibrary(opts *bind.FilterOpts) (*BaseContentSpaceCreateLibraryIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateLibrary")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateLibraryIterator{contract: _BaseContentSpace.contract, event: "CreateLibrary", logs: logs, sub: sub}, nil
}

// WatchCreateLibrary is a free log subscription operation binding the contract event 0x473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571.
//
// Solidity: event CreateLibrary(address libraryAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateLibrary(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateLibrary) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateLibrary")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateLibrary)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateLibrary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateLibrary is a log parse operation binding the contract event 0x473c07a6d0228c4fb8fe2be3b4617c3b5fb7c0f8cd9ba4b67e8631844b9b6571.
//
// Solidity: event CreateLibrary(address libraryAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateLibrary(log types.Log) (*BaseContentSpaceCreateLibrary, error) {
	event := new(BaseContentSpaceCreateLibrary)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateLibrary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceCreateSpaceIterator is returned from FilterCreateSpace and is used to iterate over the raw logs and unpacked data for CreateSpace events raised by the BaseContentSpace contract.
type BaseContentSpaceCreateSpaceIterator struct {
	Event *BaseContentSpaceCreateSpace // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceCreateSpaceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceCreateSpace)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceCreateSpace)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceCreateSpaceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceCreateSpaceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceCreateSpace represents a CreateSpace event raised by the BaseContentSpace contract.
type BaseContentSpaceCreateSpace struct {
	Version [32]byte
	Owner   common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterCreateSpace is a free log retrieval operation binding the contract event 0x599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf54.
//
// Solidity: event CreateSpace(bytes32 version, address owner)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterCreateSpace(opts *bind.FilterOpts) (*BaseContentSpaceCreateSpaceIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "CreateSpace")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceCreateSpaceIterator{contract: _BaseContentSpace.contract, event: "CreateSpace", logs: logs, sub: sub}, nil
}

// WatchCreateSpace is a free log subscription operation binding the contract event 0x599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf54.
//
// Solidity: event CreateSpace(bytes32 version, address owner)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchCreateSpace(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceCreateSpace) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "CreateSpace")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceCreateSpace)
				if err := _BaseContentSpace.contract.UnpackLog(event, "CreateSpace", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateSpace is a log parse operation binding the contract event 0x599bb380c80b69455450a615c515544b8da3b09f2efa116a5f0567682203cf54.
//
// Solidity: event CreateSpace(bytes32 version, address owner)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseCreateSpace(log types.Log) (*BaseContentSpaceCreateSpace, error) {
	event := new(BaseContentSpaceCreateSpace)
	if err := _BaseContentSpace.contract.UnpackLog(event, "CreateSpace", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceEngageAccountLibraryIterator is returned from FilterEngageAccountLibrary and is used to iterate over the raw logs and unpacked data for EngageAccountLibrary events raised by the BaseContentSpace contract.
type BaseContentSpaceEngageAccountLibraryIterator struct {
	Event *BaseContentSpaceEngageAccountLibrary // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceEngageAccountLibraryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceEngageAccountLibrary)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceEngageAccountLibrary)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceEngageAccountLibraryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceEngageAccountLibraryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceEngageAccountLibrary represents a EngageAccountLibrary event raised by the BaseContentSpace contract.
type BaseContentSpaceEngageAccountLibrary struct {
	AccountAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterEngageAccountLibrary is a free log retrieval operation binding the contract event 0x53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca.
//
// Solidity: event EngageAccountLibrary(address accountAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterEngageAccountLibrary(opts *bind.FilterOpts) (*BaseContentSpaceEngageAccountLibraryIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "EngageAccountLibrary")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceEngageAccountLibraryIterator{contract: _BaseContentSpace.contract, event: "EngageAccountLibrary", logs: logs, sub: sub}, nil
}

// WatchEngageAccountLibrary is a free log subscription operation binding the contract event 0x53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca.
//
// Solidity: event EngageAccountLibrary(address accountAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchEngageAccountLibrary(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceEngageAccountLibrary) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "EngageAccountLibrary")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceEngageAccountLibrary)
				if err := _BaseContentSpace.contract.UnpackLog(event, "EngageAccountLibrary", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEngageAccountLibrary is a log parse operation binding the contract event 0x53ce35a7383a3ea3f695bdf0f87d7e5485ba816b382673e849bfdd24e7f5e3ca.
//
// Solidity: event EngageAccountLibrary(address accountAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseEngageAccountLibrary(log types.Log) (*BaseContentSpaceEngageAccountLibrary, error) {
	event := new(BaseContentSpaceEngageAccountLibrary)
	if err := _BaseContentSpace.contract.UnpackLog(event, "EngageAccountLibrary", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceGetAccessWalletIterator is returned from FilterGetAccessWallet and is used to iterate over the raw logs and unpacked data for GetAccessWallet events raised by the BaseContentSpace contract.
type BaseContentSpaceGetAccessWalletIterator struct {
	Event *BaseContentSpaceGetAccessWallet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceGetAccessWalletIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceGetAccessWallet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceGetAccessWallet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceGetAccessWalletIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceGetAccessWalletIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceGetAccessWallet represents a GetAccessWallet event raised by the BaseContentSpace contract.
type BaseContentSpaceGetAccessWallet struct {
	WalletAddress common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterGetAccessWallet is a free log retrieval operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterGetAccessWallet(opts *bind.FilterOpts) (*BaseContentSpaceGetAccessWalletIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "GetAccessWallet")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceGetAccessWalletIterator{contract: _BaseContentSpace.contract, event: "GetAccessWallet", logs: logs, sub: sub}, nil
}

// WatchGetAccessWallet is a free log subscription operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchGetAccessWallet(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceGetAccessWallet) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "GetAccessWallet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceGetAccessWallet)
				if err := _BaseContentSpace.contract.UnpackLog(event, "GetAccessWallet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGetAccessWallet is a log parse operation binding the contract event 0x1c917c3c2698bd5b98acb9772728da62f2ce3670e4578910a6465b955f63e157.
//
// Solidity: event GetAccessWallet(address walletAddress)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseGetAccessWallet(log types.Log) (*BaseContentSpaceGetAccessWallet, error) {
	event := new(BaseContentSpaceGetAccessWallet)
	if err := _BaseContentSpace.contract.UnpackLog(event, "GetAccessWallet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceNodeApprovedIterator is returned from FilterNodeApproved and is used to iterate over the raw logs and unpacked data for NodeApproved events raised by the BaseContentSpace contract.
type BaseContentSpaceNodeApprovedIterator struct {
	Event *BaseContentSpaceNodeApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceNodeApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceNodeApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceNodeApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceNodeApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceNodeApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceNodeApproved represents a NodeApproved event raised by the BaseContentSpace contract.
type BaseContentSpaceNodeApproved struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeApproved is a free log retrieval operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterNodeApproved(opts *bind.FilterOpts) (*BaseContentSpaceNodeApprovedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceNodeApprovedIterator{contract: _BaseContentSpace.contract, event: "NodeApproved", logs: logs, sub: sub}, nil
}

// WatchNodeApproved is a free log subscription operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchNodeApproved(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceNodeApproved) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceNodeApproved)
				if err := _BaseContentSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeApproved is a log parse operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseNodeApproved(log types.Log) (*BaseContentSpaceNodeApproved, error) {
	event := new(BaseContentSpaceNodeApproved)
	if err := _BaseContentSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceNodeSubmittedIterator is returned from FilterNodeSubmitted and is used to iterate over the raw logs and unpacked data for NodeSubmitted events raised by the BaseContentSpace contract.
type BaseContentSpaceNodeSubmittedIterator struct {
	Event *BaseContentSpaceNodeSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceNodeSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceNodeSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceNodeSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceNodeSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceNodeSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceNodeSubmitted represents a NodeSubmitted event raised by the BaseContentSpace contract.
type BaseContentSpaceNodeSubmitted struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeSubmitted is a free log retrieval operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterNodeSubmitted(opts *bind.FilterOpts) (*BaseContentSpaceNodeSubmittedIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceNodeSubmittedIterator{contract: _BaseContentSpace.contract, event: "NodeSubmitted", logs: logs, sub: sub}, nil
}

// WatchNodeSubmitted is a free log subscription operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchNodeSubmitted(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceNodeSubmitted) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceNodeSubmitted)
				if err := _BaseContentSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeSubmitted is a log parse operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseNodeSubmitted(log types.Log) (*BaseContentSpaceNodeSubmitted, error) {
	event := new(BaseContentSpaceNodeSubmitted)
	if err := _BaseContentSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceRegisterNodeIterator is returned from FilterRegisterNode and is used to iterate over the raw logs and unpacked data for RegisterNode events raised by the BaseContentSpace contract.
type BaseContentSpaceRegisterNodeIterator struct {
	Event *BaseContentSpaceRegisterNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceRegisterNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceRegisterNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceRegisterNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceRegisterNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceRegisterNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceRegisterNode represents a RegisterNode event raised by the BaseContentSpace contract.
type BaseContentSpaceRegisterNode struct {
	NodeObjAddr common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRegisterNode is a free log retrieval operation binding the contract event 0x4575facd117046c9c28b69a3eb9c08939f2462a5a22ea6c6dcd4f79b8dd124e9.
//
// Solidity: event RegisterNode(address nodeObjAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterRegisterNode(opts *bind.FilterOpts) (*BaseContentSpaceRegisterNodeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "RegisterNode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceRegisterNodeIterator{contract: _BaseContentSpace.contract, event: "RegisterNode", logs: logs, sub: sub}, nil
}

// WatchRegisterNode is a free log subscription operation binding the contract event 0x4575facd117046c9c28b69a3eb9c08939f2462a5a22ea6c6dcd4f79b8dd124e9.
//
// Solidity: event RegisterNode(address nodeObjAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchRegisterNode(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceRegisterNode) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "RegisterNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceRegisterNode)
				if err := _BaseContentSpace.contract.UnpackLog(event, "RegisterNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegisterNode is a log parse operation binding the contract event 0x4575facd117046c9c28b69a3eb9c08939f2462a5a22ea6c6dcd4f79b8dd124e9.
//
// Solidity: event RegisterNode(address nodeObjAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseRegisterNode(log types.Log) (*BaseContentSpaceRegisterNode, error) {
	event := new(BaseContentSpaceRegisterNode)
	if err := _BaseContentSpace.contract.UnpackLog(event, "RegisterNode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceRemoveKMSLocatorIterator is returned from FilterRemoveKMSLocator and is used to iterate over the raw logs and unpacked data for RemoveKMSLocator events raised by the BaseContentSpace contract.
type BaseContentSpaceRemoveKMSLocatorIterator struct {
	Event *BaseContentSpaceRemoveKMSLocator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceRemoveKMSLocatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceRemoveKMSLocator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceRemoveKMSLocator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceRemoveKMSLocatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceRemoveKMSLocatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceRemoveKMSLocator represents a RemoveKMSLocator event raised by the BaseContentSpace contract.
type BaseContentSpaceRemoveKMSLocator struct {
	Sender common.Address
	Status *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRemoveKMSLocator is a free log retrieval operation binding the contract event 0x5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c.
//
// Solidity: event RemoveKMSLocator(address sender, uint256 status)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterRemoveKMSLocator(opts *bind.FilterOpts) (*BaseContentSpaceRemoveKMSLocatorIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "RemoveKMSLocator")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceRemoveKMSLocatorIterator{contract: _BaseContentSpace.contract, event: "RemoveKMSLocator", logs: logs, sub: sub}, nil
}

// WatchRemoveKMSLocator is a free log subscription operation binding the contract event 0x5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c.
//
// Solidity: event RemoveKMSLocator(address sender, uint256 status)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchRemoveKMSLocator(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceRemoveKMSLocator) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "RemoveKMSLocator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceRemoveKMSLocator)
				if err := _BaseContentSpace.contract.UnpackLog(event, "RemoveKMSLocator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveKMSLocator is a log parse operation binding the contract event 0x5f463eb53cddf646852b82c0d9bdb1d1ec215c3802b780e8b7beea8b6e99f94c.
//
// Solidity: event RemoveKMSLocator(address sender, uint256 status)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseRemoveKMSLocator(log types.Log) (*BaseContentSpaceRemoveKMSLocator, error) {
	event := new(BaseContentSpaceRemoveKMSLocator)
	if err := _BaseContentSpace.contract.UnpackLog(event, "RemoveKMSLocator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceRemoveNodeIterator is returned from FilterRemoveNode and is used to iterate over the raw logs and unpacked data for RemoveNode events raised by the BaseContentSpace contract.
type BaseContentSpaceRemoveNodeIterator struct {
	Event *BaseContentSpaceRemoveNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceRemoveNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceRemoveNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceRemoveNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceRemoveNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceRemoveNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceRemoveNode represents a RemoveNode event raised by the BaseContentSpace contract.
type BaseContentSpaceRemoveNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRemoveNode is a free log retrieval operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterRemoveNode(opts *bind.FilterOpts) (*BaseContentSpaceRemoveNodeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceRemoveNodeIterator{contract: _BaseContentSpace.contract, event: "RemoveNode", logs: logs, sub: sub}, nil
}

// WatchRemoveNode is a free log subscription operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchRemoveNode(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceRemoveNode) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceRemoveNode)
				if err := _BaseContentSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveNode is a log parse operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseRemoveNode(log types.Log) (*BaseContentSpaceRemoveNode, error) {
	event := new(BaseContentSpaceRemoveNode)
	if err := _BaseContentSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceSetFactoryIterator is returned from FilterSetFactory and is used to iterate over the raw logs and unpacked data for SetFactory events raised by the BaseContentSpace contract.
type BaseContentSpaceSetFactoryIterator struct {
	Event *BaseContentSpaceSetFactory // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceSetFactoryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceSetFactory)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceSetFactory)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceSetFactoryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceSetFactoryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceSetFactory represents a SetFactory event raised by the BaseContentSpace contract.
type BaseContentSpaceSetFactory struct {
	Factory common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSetFactory is a free log retrieval operation binding the contract event 0x1c893ef9379093af30f458b9e74d2aba13c499660b68dec5e29af7b199c188b9.
//
// Solidity: event SetFactory(address factory)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterSetFactory(opts *bind.FilterOpts) (*BaseContentSpaceSetFactoryIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "SetFactory")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceSetFactoryIterator{contract: _BaseContentSpace.contract, event: "SetFactory", logs: logs, sub: sub}, nil
}

// WatchSetFactory is a free log subscription operation binding the contract event 0x1c893ef9379093af30f458b9e74d2aba13c499660b68dec5e29af7b199c188b9.
//
// Solidity: event SetFactory(address factory)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchSetFactory(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceSetFactory) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "SetFactory")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceSetFactory)
				if err := _BaseContentSpace.contract.UnpackLog(event, "SetFactory", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFactory is a log parse operation binding the contract event 0x1c893ef9379093af30f458b9e74d2aba13c499660b68dec5e29af7b199c188b9.
//
// Solidity: event SetFactory(address factory)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseSetFactory(log types.Log) (*BaseContentSpaceSetFactory, error) {
	event := new(BaseContentSpaceSetFactory)
	if err := _BaseContentSpace.contract.UnpackLog(event, "SetFactory", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceUnregisterNodeIterator is returned from FilterUnregisterNode and is used to iterate over the raw logs and unpacked data for UnregisterNode events raised by the BaseContentSpace contract.
type BaseContentSpaceUnregisterNodeIterator struct {
	Event *BaseContentSpaceUnregisterNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceUnregisterNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceUnregisterNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceUnregisterNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceUnregisterNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceUnregisterNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceUnregisterNode represents a UnregisterNode event raised by the BaseContentSpace contract.
type BaseContentSpaceUnregisterNode struct {
	NodeObjAddr common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUnregisterNode is a free log retrieval operation binding the contract event 0xb98695ab4c6cedb3b4dfe62479a9d39a59aa2cb38b8bd92bbb6ce5856e42bdf4.
//
// Solidity: event UnregisterNode(address nodeObjAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterUnregisterNode(opts *bind.FilterOpts) (*BaseContentSpaceUnregisterNodeIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "UnregisterNode")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceUnregisterNodeIterator{contract: _BaseContentSpace.contract, event: "UnregisterNode", logs: logs, sub: sub}, nil
}

// WatchUnregisterNode is a free log subscription operation binding the contract event 0xb98695ab4c6cedb3b4dfe62479a9d39a59aa2cb38b8bd92bbb6ce5856e42bdf4.
//
// Solidity: event UnregisterNode(address nodeObjAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchUnregisterNode(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceUnregisterNode) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "UnregisterNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceUnregisterNode)
				if err := _BaseContentSpace.contract.UnpackLog(event, "UnregisterNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnregisterNode is a log parse operation binding the contract event 0xb98695ab4c6cedb3b4dfe62479a9d39a59aa2cb38b8bd92bbb6ce5856e42bdf4.
//
// Solidity: event UnregisterNode(address nodeObjAddr)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseUnregisterNode(log types.Log) (*BaseContentSpaceUnregisterNode, error) {
	event := new(BaseContentSpaceUnregisterNode)
	if err := _BaseContentSpace.contract.UnpackLog(event, "UnregisterNode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseContentSpace contract.
type BaseContentSpaceUpdateRequestIterator struct {
	Event *BaseContentSpaceUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceUpdateRequest represents a UpdateRequest event raised by the BaseContentSpace contract.
type BaseContentSpaceUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseContentSpaceUpdateRequestIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceUpdateRequestIterator{contract: _BaseContentSpace.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceUpdateRequest)
				if err := _BaseContentSpace.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseUpdateRequest(log types.Log) (*BaseContentSpaceUpdateRequest, error) {
	event := new(BaseContentSpaceUpdateRequest)
	if err := _BaseContentSpace.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseContentSpace contract.
type BaseContentSpaceVersionConfirmIterator struct {
	Event *BaseContentSpaceVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceVersionConfirm represents a VersionConfirm event raised by the BaseContentSpace contract.
type BaseContentSpaceVersionConfirm struct {
	SpaceAddress common.Address
	ObjectHash   string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseContentSpaceVersionConfirmIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceVersionConfirmIterator{contract: _BaseContentSpace.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceVersionConfirm)
				if err := _BaseContentSpace.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseVersionConfirm(log types.Log) (*BaseContentSpaceVersionConfirm, error) {
	event := new(BaseContentSpaceVersionConfirm)
	if err := _BaseContentSpace.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentSpaceVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseContentSpace contract.
type BaseContentSpaceVersionDeleteIterator struct {
	Event *BaseContentSpaceVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentSpaceVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentSpaceVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentSpaceVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentSpaceVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentSpaceVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentSpaceVersionDelete represents a VersionDelete event raised by the BaseContentSpace contract.
type BaseContentSpaceVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentSpace *BaseContentSpaceFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseContentSpaceVersionDeleteIterator, error) {

	logs, sub, err := _BaseContentSpace.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseContentSpaceVersionDeleteIterator{contract: _BaseContentSpace.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentSpace *BaseContentSpaceFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseContentSpaceVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseContentSpace.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentSpaceVersionDelete)
				if err := _BaseContentSpace.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentSpace *BaseContentSpaceFilterer) ParseVersionDelete(log types.Log) (*BaseContentSpaceVersionDelete, error) {
	event := new(BaseContentSpaceVersionDelete)
	if err := _BaseContentSpace.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentTypeMetaData contains all meta data concerning the BaseContentType contract.
var BaseContentTypeMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accessRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"content_space\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AccessRequest\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"f1551887": "accessRequest()",
		"6e375427": "canCommit()",
		"14cfabb3": "canConfirm()",
		"81beeb64": "canEdit()",
		"5f6a1301": "clearPending()",
		"9867db74": "commit(string)",
		"375a6e7c": "commitPending()",
		"446e8826": "confirmCommit()",
		"af570c04": "contentSpace()",
		"331b86c0": "countVersionHashes()",
		"02d05d3f": "creator()",
		"e1a70717": "deleteVersion(string)",
		"41c0e1b5": "kill()",
		"e02dd9c2": "objectHash()",
		"8da5cb5b": "owner()",
		"00821de3": "parentAddress()",
		"628449fd": "pendingHash()",
		"22e564eb": "setGroupRights(address,uint8,uint8)",
		"0fe1b5a2": "setRights(address,uint8,uint8)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"c287e0ed": "updateRequest()",
		"54fd4d50": "version()",
		"7ca8f618": "versionHashes(uint256)",
		"7886f747": "versionTimestamp(uint256)",
	},
	Bin: "0x608060408190527f41636365737369626c6532303139303232323133353930304d4c0000000000006000557f4f776e61626c6532303139303532383139333830304d4c0000000000000000006001557f4564697461626c6532303139313231393133343630304d4c00000000000000006005557f42617365436f6e74656e745479706532303139303831333130353030304d4c00600c5560208061183683398101604052516002805432600160a060020a0319918216811790925560038054821690921790915560048054909116600160a060020a03909216919091179055611749806100ed6000396000f30060806040526004361061012e5763ffffffff60e060020a600035041662821de3811461013057806302d05d3f146101615780630fe1b5a21461017657806314cfabb3146101a357806322e564eb146101cc578063331b86c0146101f9578063375a6e7c1461022057806341c0e1b514610235578063446e88261461024a57806354fd4d50146102525780635f6a130114610267578063628449fd1461027c5780636d2e4b1b146103065780636e375427146103275780637886f7471461033c5780637ca8f6181461035457806381beeb641461036c5780638da5cb5b146103815780639867db7414610396578063af570c04146103ef578063c287e0ed14610404578063e02dd9c214610419578063e1a707171461042e578063f155188714610487578063f2fde38b1461049c575b005b34801561013c57600080fd5b506101456104bd565b60408051600160a060020a039092168252519081900360200190f35b34801561016d57600080fd5b506101456104cd565b34801561018257600080fd5b5061012e600160a060020a036004351660ff602435811690604435166104dc565b3480156101af57600080fd5b506101b86105ac565b604080519115158252519081900360200190f35b3480156101d857600080fd5b5061012e600160a060020a036004351660ff6024358116906044351661064b565b34801561020557600080fd5b5061020e6106dd565b60408051918252519081900360200190f35b34801561022c57600080fd5b506101b86106e3565b34801561024157600080fd5b5061012e6106ec565b6101b8610728565b34801561025e57600080fd5b5061020e610918565b34801561027357600080fd5b5061012e61091e565b34801561028857600080fd5b5061029161095c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102cb5781810151838201526020016102b3565b50505050905090810190601f1680156102f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561031257600080fd5b5061012e600160a060020a03600435166109ea565b34801561033357600080fd5b506101b8610a45565b34801561034857600080fd5b5061020e600435610bfc565b34801561036057600080fd5b50610291600435610c1b565b34801561037857600080fd5b506101b8610c8f565b34801561038d57600080fd5b50610145610ca0565b3480156103a257600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261012e943694929360249392840191908190840183828082843750949750610caf9650505050505050565b3480156103fb57600080fd5b50610145610ddc565b34801561041057600080fd5b5061012e610deb565b34801561042557600080fd5b50610291610ebb565b34801561043a57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261020e943694929360249392840191908190840183828082843750949750610f169650505050505050565b34801561049357600080fd5b506101b86114be565b3480156104a857600080fd5b5061012e600160a060020a03600435166114ef565b600454600160a060020a03165b90565b600254600160a060020a031681565b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd9160248082019260209290919082900301818787803b15801561054c57600080fd5b505af1158015610560573d6000803e3d6000fd5b505050506040513d602081101561057657600080fd5b50519050600160a060020a038116151561059a5761059585858561064b565b6105a5565b6105a581858561064b565b5050505050565b60048054604080517f26683e14000000000000000000000000000000000000000000000000000000008152339381019390935251600092600160a060020a039092169182916326683e149160248082019260209290919082900301818887803b15801561061857600080fd5b505af115801561062c573d6000803e3d6000fd5b505050506040513d602081101561064257600080fd5b505191505b5090565b604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff80851660248301528316604482015290518491600160a060020a03831691638635adb59160648082019260009290919082900301818387803b1580156106bf57600080fd5b505af11580156106d3573d6000803e3d6000fd5b5050505050505050565b60085490565b600b5460ff1681565b600354600160a060020a031632148061070f5750600354600160a060020a031633145b151561071a57600080fd5b600354600160a060020a0316ff5b60006107326105ac565b151561073d57600080fd5b600b5460ff16151561074e57600080fd5b6000600680546001816001161561010002031660029004905011156107fd57600880546001818101808455600093909352600680546107c4937ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30192600261010091831615919091026000190190911604611561565b5050600754600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01555b600a80546108209160069160026000196101006001841615020190911604611561565b504260075560408051602081019182905260009081905261084391600a916115e2565b50600b805460ff1916905560045460408051600160a060020a039092168083526020830182815260068054600260001960018316156101000201909116049385018490527f482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e949293909291906060830190849080156109035780601f106108d857610100808354040283529160200191610903565b820191906000526020600020905b8154815290600101906020018083116108e657829003601f168201915b5050935050505060405180910390a150600190565b600c5481565b610926610a45565b151561093157600080fd5b60408051602081019182905260009081905261094f91600a916115e2565b50600b805460ff19169055565b600a805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109e25780601f106109b7576101008083540402835291602001916109e2565b820191906000526020600020905b8154815290600101906020018083116109c557829003601f168201915b505050505081565b600254600160a060020a03163214610a0157600080fd5b600160a060020a0381161515610a1657600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152329381019390935251600092600160a060020a03909216918391829184916363e6ffdd9160248082019260209290919082900301818787803b158015610ab557600080fd5b505af1158015610ac9573d6000803e3d6000fd5b505050506040513d6020811015610adf57600080fd5b50519150600160a060020a03821615610bf15781905080600160a060020a031663fe538c5a3083600160a060020a0316635d97b6c26040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610b4357600080fd5b505af1158015610b57573d6000803e3d6000fd5b505050506040513d6020811015610b6d57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260ff90911660248301525160448083019260209291908290030181600087803b158015610bbe57600080fd5b505af1158015610bd2573d6000803e3d6000fd5b505050506040513d6020811015610be857600080fd5b50519350610bf6565b600093505b50505090565b6009805482908110610c0a57fe5b600091825260209091200154905081565b6008805482908110610c2957fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152935090918301828280156109e25780601f106109b7576101008083540402835291602001916109e2565b600354600160a060020a0316331490565b600354600160a060020a031681565b610cb7610a45565b1515610cc257600080fd5b600b5460ff1615610cd257600080fd5b8051608011610ce057600080fd5b8051610cf390600a9060208401906115e2565b50600b805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316610d376104bd565b60408051600160a060020a038085168252831660208201526060918101828152600a80546002600019610100600184161502019091160493830184905292608083019084908015610dc95780601f10610d9e57610100808354040283529160200191610dc9565b820191906000526020600020905b815481529060010190602001808311610dac57829003601f168201915b505094505050505060405180910390a150565b600454600160a060020a031681565b610df3610c8f565b80610e015750610e016105ac565b1515610e0c57600080fd5b60408051602080825260068054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b6593909291829182019084908015610eab5780601f10610e8057610100808354040283529160200191610eab565b820191906000526020600020905b815481529060010190602001808311610e8e57829003601f168201915b50509250505060405180910390a1565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109e25780601f106109b7576101008083540402835291602001916109e2565b600080600080600080610f27610a45565b1515610f3257600080fd5b866040516020018082805190602001908083835b60208310610f655780518252601f199092019160209182019101610f46565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310610fc85780518252601f199092019160209182019101610fa9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209450600660405160200180828054600181600116156101000203166002900480156110575780601f10611035576101008083540402835291820191611057565b820191906000526020600020905b815481529060010190602001808311611043575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831061109a5780518252601f19909201916020918201910161107b565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209650505050848414156111bb576040805160208101918290526000908190526110ee916006916115e2565b506000600781905560045460408051600160a060020a03909216808352908201839052606060208084018281528c51928501929092528b517f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f519593948d9493909290916080840191860190808383885b8381101561117657818101518382015260200161115e565b50505050905090810190601f1680156111a35780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600095506114b4565b6000199250600091505b6008548210156113d15760088054839081106111dd57fe5b9060005260206000200160405160200180828054600181600116156101000203166002900480156112455780601f10611223576101008083540402835291820191611245565b820191906000526020600020905b815481529060010190602001808311611231575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106112885780518252601f199092019160209182019101611269565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209350505050848114156113c65760088054839081106112cc57fe5b9060005260206000200160006112e29190611650565b60098054839081106112f057fe5b60009182526020822001556008546000190182146113965760088054600019810190811061131a57fe5b9060005260206000200160088381548110151561133357fe5b90600052602060002001908054600181600116156101000203166002900461135c929190611561565b5060098054600019810190811061136f57fe5b906000526020600020015460098381548110151561138957fe5b6000918252602090912001555b60088054906113a9906000198301611697565b5060098054906113bd9060001983016116c0565b508192506113d1565b6001909101906111c5565b6000198314156113e057600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a031688856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561147457818101518382015260200161145c565b50505050905090810190601f1680156114a15780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18295505b5050505050919050565b6040516000907fed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88908290a150600190565b600354600160a060020a03163214806115125750600354600160a060020a031633145b151561151d57600080fd5b600160a060020a038116151561153257600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061159a57805485556115d6565b828001600101855582156115d657600052602060002091601f016020900482015b828111156115d65782548255916001019190600101906115bb565b506106479291506116e0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061162357805160ff19168380011785556115d6565b828001600101855582156115d6579182015b828111156115d6578251825591602001919060010190611635565b50805460018160011615610100020316600290046000825580601f106116765750611694565b601f01602090049060005260206000209081019061169491906116e0565b50565b8154818355818111156116bb576000838152602090206116bb9181019083016116fa565b505050565b8154818355818111156116bb576000838152602090206116bb9181019083015b6104ca91905b8082111561064757600081556001016116e6565b6104ca91905b808211156106475760006117148282611650565b506001016117005600a165627a7a72305820200dc3529a473311184e512a7447f3aab63fbdd6da184bfd5be4bec4900b06ca0029",
}

// BaseContentTypeABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseContentTypeMetaData.ABI instead.
var BaseContentTypeABI = BaseContentTypeMetaData.ABI

// Deprecated: Use BaseContentTypeMetaData.Sigs instead.
// BaseContentTypeFuncSigs maps the 4-byte function signature to its string representation.
var BaseContentTypeFuncSigs = BaseContentTypeMetaData.Sigs

// BaseContentTypeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseContentTypeMetaData.Bin instead.
var BaseContentTypeBin = BaseContentTypeMetaData.Bin

// DeployBaseContentType deploys a new Ethereum contract, binding an instance of BaseContentType to it.
func DeployBaseContentType(auth *bind.TransactOpts, backend bind.ContractBackend, content_space common.Address) (common.Address, *types.Transaction, *BaseContentType, error) {
	parsed, err := ParsedABI(K_BaseContentType)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseContentTypeBin), backend, content_space)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseContentType{BaseContentTypeCaller: BaseContentTypeCaller{contract: contract}, BaseContentTypeTransactor: BaseContentTypeTransactor{contract: contract}, BaseContentTypeFilterer: BaseContentTypeFilterer{contract: contract}}, nil
}

// BaseContentType is an auto generated Go binding around an Ethereum contract.
type BaseContentType struct {
	BaseContentTypeCaller     // Read-only binding to the contract
	BaseContentTypeTransactor // Write-only binding to the contract
	BaseContentTypeFilterer   // Log filterer for contract events
}

// BaseContentTypeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseContentTypeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentTypeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseContentTypeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseContentTypeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseContentTypeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseContentType creates a new instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentType(address common.Address, backend bind.ContractBackend) (*BaseContentType, error) {
	contract, err := bindBaseContentType(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseContentType{BaseContentTypeCaller: BaseContentTypeCaller{contract: contract}, BaseContentTypeTransactor: BaseContentTypeTransactor{contract: contract}, BaseContentTypeFilterer: BaseContentTypeFilterer{contract: contract}}, nil
}

// NewBaseContentTypeCaller creates a new read-only instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentTypeCaller(address common.Address, caller bind.ContractCaller) (*BaseContentTypeCaller, error) {
	contract, err := bindBaseContentType(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeCaller{contract: contract}, nil
}

// NewBaseContentTypeTransactor creates a new write-only instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentTypeTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseContentTypeTransactor, error) {
	contract, err := bindBaseContentType(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeTransactor{contract: contract}, nil
}

// NewBaseContentTypeFilterer creates a new log filterer instance of BaseContentType, bound to a specific deployed contract.
func NewBaseContentTypeFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseContentTypeFilterer, error) {
	contract, err := bindBaseContentType(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeFilterer{contract: contract}, nil
}

// bindBaseContentType binds a generic wrapper to an already deployed contract.
func bindBaseContentType(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseContentType)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() view returns(bool)
func (_BaseContentType *BaseContentTypeCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "canCommit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() view returns(bool)
func (_BaseContentType *BaseContentTypeCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "canConfirm")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() view returns(bool)
func (_BaseContentType *BaseContentTypeCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "canEdit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() view returns(bool)
func (_BaseContentType *BaseContentTypeCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "commitPending")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseContentType *BaseContentTypeCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() view returns(uint256)
func (_BaseContentType *BaseContentTypeCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "countVersionHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseContentType *BaseContentTypeCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() view returns(string)
func (_BaseContentType *BaseContentTypeCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "objectHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseContentType *BaseContentTypeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_BaseContentType *BaseContentTypeCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "parentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() view returns(string)
func (_BaseContentType *BaseContentTypeCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "pendingHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseContentType *BaseContentTypeCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) view returns(string)
func (_BaseContentType *BaseContentTypeCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "versionHashes", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) view returns(uint256)
func (_BaseContentType *BaseContentTypeCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BaseContentType.contract.Call(opts, &out, "versionTimestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_BaseContentType *BaseContentTypeTransactor) AccessRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "accessRequest")
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseContentType *BaseContentTypeTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "clearPending")
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseContentType *BaseContentTypeTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "commit", _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() payable returns(bool)
func (_BaseContentType *BaseContentTypeTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "confirmCommit")
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseContentType *BaseContentTypeTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "deleteVersion", _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseContentType *BaseContentTypeTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "kill")
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseContentType *BaseContentTypeTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseContentType *BaseContentTypeTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseContentType *BaseContentTypeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "transferOwnership", newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseContentType *BaseContentTypeTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseContentType.contract.Transact(opts, "updateRequest")
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseContentType *BaseContentTypeTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseContentType.contract.RawTransact(opts, calldata)
}

// BaseContentTypeAccessRequestIterator is returned from FilterAccessRequest and is used to iterate over the raw logs and unpacked data for AccessRequest events raised by the BaseContentType contract.
type BaseContentTypeAccessRequestIterator struct {
	Event *BaseContentTypeAccessRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeAccessRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeAccessRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeAccessRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeAccessRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeAccessRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeAccessRequest represents a AccessRequest event raised by the BaseContentType contract.
type BaseContentTypeAccessRequest struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAccessRequest is a free log retrieval operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseContentType *BaseContentTypeFilterer) FilterAccessRequest(opts *bind.FilterOpts) (*BaseContentTypeAccessRequestIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeAccessRequestIterator{contract: _BaseContentType.contract, event: "AccessRequest", logs: logs, sub: sub}, nil
}

// WatchAccessRequest is a free log subscription operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseContentType *BaseContentTypeFilterer) WatchAccessRequest(opts *bind.WatchOpts, sink chan<- *BaseContentTypeAccessRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeAccessRequest)
				if err := _BaseContentType.contract.UnpackLog(event, "AccessRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequest is a log parse operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseContentType *BaseContentTypeFilterer) ParseAccessRequest(log types.Log) (*BaseContentTypeAccessRequest, error) {
	event := new(BaseContentTypeAccessRequest)
	if err := _BaseContentType.contract.UnpackLog(event, "AccessRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentTypeCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseContentType contract.
type BaseContentTypeCommitPendingIterator struct {
	Event *BaseContentTypeCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeCommitPending represents a CommitPending event raised by the BaseContentType contract.
type BaseContentTypeCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseContentTypeCommitPendingIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeCommitPendingIterator{contract: _BaseContentType.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseContentTypeCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeCommitPending)
				if err := _BaseContentType.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) ParseCommitPending(log types.Log) (*BaseContentTypeCommitPending, error) {
	event := new(BaseContentTypeCommitPending)
	if err := _BaseContentType.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentTypeUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseContentType contract.
type BaseContentTypeUpdateRequestIterator struct {
	Event *BaseContentTypeUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeUpdateRequest represents a UpdateRequest event raised by the BaseContentType contract.
type BaseContentTypeUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseContentTypeUpdateRequestIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeUpdateRequestIterator{contract: _BaseContentType.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseContentTypeUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeUpdateRequest)
				if err := _BaseContentType.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) ParseUpdateRequest(log types.Log) (*BaseContentTypeUpdateRequest, error) {
	event := new(BaseContentTypeUpdateRequest)
	if err := _BaseContentType.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentTypeVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseContentType contract.
type BaseContentTypeVersionConfirmIterator struct {
	Event *BaseContentTypeVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeVersionConfirm represents a VersionConfirm event raised by the BaseContentType contract.
type BaseContentTypeVersionConfirm struct {
	SpaceAddress common.Address
	ObjectHash   string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseContentTypeVersionConfirmIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeVersionConfirmIterator{contract: _BaseContentType.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseContentTypeVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeVersionConfirm)
				if err := _BaseContentType.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseContentType *BaseContentTypeFilterer) ParseVersionConfirm(log types.Log) (*BaseContentTypeVersionConfirm, error) {
	event := new(BaseContentTypeVersionConfirm)
	if err := _BaseContentType.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseContentTypeVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseContentType contract.
type BaseContentTypeVersionDeleteIterator struct {
	Event *BaseContentTypeVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseContentTypeVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseContentTypeVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseContentTypeVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseContentTypeVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseContentTypeVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseContentTypeVersionDelete represents a VersionDelete event raised by the BaseContentType contract.
type BaseContentTypeVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentType *BaseContentTypeFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseContentTypeVersionDeleteIterator, error) {

	logs, sub, err := _BaseContentType.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseContentTypeVersionDeleteIterator{contract: _BaseContentType.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentType *BaseContentTypeFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseContentTypeVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseContentType.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseContentTypeVersionDelete)
				if err := _BaseContentType.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseContentType *BaseContentTypeFilterer) ParseVersionDelete(log types.Log) (*BaseContentTypeVersionDelete, error) {
	event := new(BaseContentTypeVersionDelete)
	if err := _BaseContentType.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseFactoryMetaData contains all meta data concerning the BaseFactory contract.
var BaseFactoryMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createNode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
	Sigs: map[string]string{
		"af570c04": "contentSpace()",
		"b8cfaf05": "createContentType()",
		"5c6dc219": "createNode(address)",
		"02d05d3f": "creator()",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
	},
	Bin: "0x60806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f42617365466163746f727932303139303830313134303730304d4c000000000060045560018054600160a060020a0319908116329081179092556002805490911690911790556122b88061007e6000396000f30060806040526004361061007f5763ffffffff60e060020a60003504166302d05d3f811461008157806341c0e1b5146100b257806354fd4d50146100c75780635c6dc219146100ee5780636d2e4b1b1461010f5780638da5cb5b14610130578063af570c0414610145578063b8cfaf051461015a578063f2fde38b1461016f575b005b34801561008d57600080fd5b50610096610190565b60408051600160a060020a039092168252519081900360200190f35b3480156100be57600080fd5b5061007f61019f565b3480156100d357600080fd5b506100dc6101db565b60408051918252519081900360200190f35b3480156100fa57600080fd5b50610096600160a060020a03600435166101e1565b34801561011b57600080fd5b5061007f600160a060020a0360043516610298565b34801561013c57600080fd5b506100966102f3565b34801561015157600080fd5b50610096610302565b34801561016657600080fd5b50610096610311565b34801561017b57600080fd5b5061007f600160a060020a0360043516610553565b600154600160a060020a031681565b600254600160a060020a03163214806101c25750600254600160a060020a031633145b15156101cd57600080fd5b600254600160a060020a0316ff5b60045481565b6000806101ec6105c5565b604051809103906000f080158015610208573d6000803e3d6000fd5b50905082600160a060020a031681600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561025357600080fd5b505af1158015610267573d6000803e3d6000fd5b505050506040513d602081101561027d57600080fd5b5051600160a060020a03161461029257600080fd5b92915050565b600154600160a060020a031632146102af57600080fd5b600160a060020a03811615156102c457600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b600354600160a060020a031681565b6000806000806000336103226105d5565b600160a060020a03909116815260405190819003602001906000f08015801561034f573d6000803e3d6000fd5b50935033925082600160a060020a031663a2d67fcf6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561039357600080fd5b505af11580156103a7573d6000803e3d6000fd5b505050506040513d60208110156103bd57600080fd5b5051604080517f5d97b6c20000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a03831691638635adb59187918491635d97b6c29160048083019260209291908290030181600087803b15801561042a57600080fd5b505af115801561043e573d6000803e3d6000fd5b505050506040513d602081101561045457600080fd5b5051604080517f186897330000000000000000000000000000000000000000000000000000000081529051600160a060020a0387169163186897339160048083019260209291908290030181600087803b1580156104b157600080fd5b505af11580156104c5573d6000803e3d6000fd5b505050506040513d60208110156104db57600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03909416600485015260ff92831660248501529116604483015251606480830192600092919082900301818387803b15801561053257600080fd5b505af1158015610546573d6000803e3d6000fd5b5095979650505050505050565b600254600160a060020a03163214806105765750600254600160a060020a031633145b151561058157600080fd5b600160a060020a038116151561059657600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604051610471806105e683390190565b60405161183680610a5783390190560060806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f4e6f646532303139303331353130353130304d4c00000000000000000000000060045560018054600160a060020a0319908116329081179092556002805490911690911790556103f38061007e6000396000f30060806040526004361061008d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461008f57806341304fac146100c057806341c0e1b51461011957806354fd4d501461012e5780636d2e4b1b146101555780638da5cb5b14610176578063af570c041461018b578063f2fde38b146101a0575b005b34801561009b57600080fd5b506100a46101c1565b60408051600160a060020a039092168252519081900360200190f35b3480156100cc57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261008d9436949293602493928401919081908401838280828437509497506101d09650505050505050565b34801561012557600080fd5b5061008d61029a565b34801561013a57600080fd5b506101436102d6565b60408051918252519081900360200190f35b34801561016157600080fd5b5061008d600160a060020a03600435166102dc565b34801561018257600080fd5b506100a4610337565b34801561019757600080fd5b506100a4610346565b3480156101ac57600080fd5b5061008d600160a060020a0360043516610355565b600154600160a060020a031681565b600254600160a060020a03163214806101f35750600254600160a060020a031633145b15156101fe57600080fd5b7fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab816040518080602001828103825283818151815260200191508051906020019080838360005b8381101561025d578181015183820152602001610245565b50505050905090810190601f16801561028a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b600254600160a060020a03163214806102bd5750600254600160a060020a031633145b15156102c857600080fd5b600254600160a060020a0316ff5b60045481565b600154600160a060020a031632146102f357600080fd5b600160a060020a038116151561030857600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b600354600160a060020a031681565b600254600160a060020a03163214806103785750600254600160a060020a031633145b151561038357600080fd5b600160a060020a038116151561039857600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058208a4aa8e4e08612c61fc5310cf0c518b171d02ca645f980b1bd61ad9e7746c4860029608060408190527f41636365737369626c6532303139303232323133353930304d4c0000000000006000557f4f776e61626c6532303139303532383139333830304d4c0000000000000000006001557f4564697461626c6532303139313231393133343630304d4c00000000000000006005557f42617365436f6e74656e745479706532303139303831333130353030304d4c00600c5560208061183683398101604052516002805432600160a060020a0319918216811790925560038054821690921790915560048054909116600160a060020a03909216919091179055611749806100ed6000396000f30060806040526004361061012e5763ffffffff60e060020a600035041662821de3811461013057806302d05d3f146101615780630fe1b5a21461017657806314cfabb3146101a357806322e564eb146101cc578063331b86c0146101f9578063375a6e7c1461022057806341c0e1b514610235578063446e88261461024a57806354fd4d50146102525780635f6a130114610267578063628449fd1461027c5780636d2e4b1b146103065780636e375427146103275780637886f7471461033c5780637ca8f6181461035457806381beeb641461036c5780638da5cb5b146103815780639867db7414610396578063af570c04146103ef578063c287e0ed14610404578063e02dd9c214610419578063e1a707171461042e578063f155188714610487578063f2fde38b1461049c575b005b34801561013c57600080fd5b506101456104bd565b60408051600160a060020a039092168252519081900360200190f35b34801561016d57600080fd5b506101456104cd565b34801561018257600080fd5b5061012e600160a060020a036004351660ff602435811690604435166104dc565b3480156101af57600080fd5b506101b86105ac565b604080519115158252519081900360200190f35b3480156101d857600080fd5b5061012e600160a060020a036004351660ff6024358116906044351661064b565b34801561020557600080fd5b5061020e6106dd565b60408051918252519081900360200190f35b34801561022c57600080fd5b506101b86106e3565b34801561024157600080fd5b5061012e6106ec565b6101b8610728565b34801561025e57600080fd5b5061020e610918565b34801561027357600080fd5b5061012e61091e565b34801561028857600080fd5b5061029161095c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102cb5781810151838201526020016102b3565b50505050905090810190601f1680156102f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561031257600080fd5b5061012e600160a060020a03600435166109ea565b34801561033357600080fd5b506101b8610a45565b34801561034857600080fd5b5061020e600435610bfc565b34801561036057600080fd5b50610291600435610c1b565b34801561037857600080fd5b506101b8610c8f565b34801561038d57600080fd5b50610145610ca0565b3480156103a257600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261012e943694929360249392840191908190840183828082843750949750610caf9650505050505050565b3480156103fb57600080fd5b50610145610ddc565b34801561041057600080fd5b5061012e610deb565b34801561042557600080fd5b50610291610ebb565b34801561043a57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261020e943694929360249392840191908190840183828082843750949750610f169650505050505050565b34801561049357600080fd5b506101b86114be565b3480156104a857600080fd5b5061012e600160a060020a03600435166114ef565b600454600160a060020a03165b90565b600254600160a060020a031681565b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152600160a060020a03878116948201949094529051929091169160009183916363e6ffdd9160248082019260209290919082900301818787803b15801561054c57600080fd5b505af1158015610560573d6000803e3d6000fd5b505050506040513d602081101561057657600080fd5b50519050600160a060020a038116151561059a5761059585858561064b565b6105a5565b6105a581858561064b565b5050505050565b60048054604080517f26683e14000000000000000000000000000000000000000000000000000000008152339381019390935251600092600160a060020a039092169182916326683e149160248082019260209290919082900301818887803b15801561061857600080fd5b505af115801561062c573d6000803e3d6000fd5b505050506040513d602081101561064257600080fd5b505191505b5090565b604080517f8635adb500000000000000000000000000000000000000000000000000000000815230600482015260ff80851660248301528316604482015290518491600160a060020a03831691638635adb59160648082019260009290919082900301818387803b1580156106bf57600080fd5b505af11580156106d3573d6000803e3d6000fd5b5050505050505050565b60085490565b600b5460ff1681565b600354600160a060020a031632148061070f5750600354600160a060020a031633145b151561071a57600080fd5b600354600160a060020a0316ff5b60006107326105ac565b151561073d57600080fd5b600b5460ff16151561074e57600080fd5b6000600680546001816001161561010002031660029004905011156107fd57600880546001818101808455600093909352600680546107c4937ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30192600261010091831615919091026000190190911604611561565b5050600754600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01555b600a80546108209160069160026000196101006001841615020190911604611561565b504260075560408051602081019182905260009081905261084391600a916115e2565b50600b805460ff1916905560045460408051600160a060020a039092168083526020830182815260068054600260001960018316156101000201909116049385018490527f482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e949293909291906060830190849080156109035780601f106108d857610100808354040283529160200191610903565b820191906000526020600020905b8154815290600101906020018083116108e657829003601f168201915b5050935050505060405180910390a150600190565b600c5481565b610926610a45565b151561093157600080fd5b60408051602081019182905260009081905261094f91600a916115e2565b50600b805460ff19169055565b600a805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109e25780601f106109b7576101008083540402835291602001916109e2565b820191906000526020600020905b8154815290600101906020018083116109c557829003601f168201915b505050505081565b600254600160a060020a03163214610a0157600080fd5b600160a060020a0381161515610a1657600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60048054604080517f63e6ffdd000000000000000000000000000000000000000000000000000000008152329381019390935251600092600160a060020a03909216918391829184916363e6ffdd9160248082019260209290919082900301818787803b158015610ab557600080fd5b505af1158015610ac9573d6000803e3d6000fd5b505050506040513d6020811015610adf57600080fd5b50519150600160a060020a03821615610bf15781905080600160a060020a031663fe538c5a3083600160a060020a0316635d97b6c26040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610b4357600080fd5b505af1158015610b57573d6000803e3d6000fd5b505050506040513d6020811015610b6d57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260ff90911660248301525160448083019260209291908290030181600087803b158015610bbe57600080fd5b505af1158015610bd2573d6000803e3d6000fd5b505050506040513d6020811015610be857600080fd5b50519350610bf6565b600093505b50505090565b6009805482908110610c0a57fe5b600091825260209091200154905081565b6008805482908110610c2957fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152935090918301828280156109e25780601f106109b7576101008083540402835291602001916109e2565b600354600160a060020a0316331490565b600354600160a060020a031681565b610cb7610a45565b1515610cc257600080fd5b600b5460ff1615610cd257600080fd5b8051608011610ce057600080fd5b8051610cf390600a9060208401906115e2565b50600b805460ff191660011790556004547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316610d376104bd565b60408051600160a060020a038085168252831660208201526060918101828152600a80546002600019610100600184161502019091160493830184905292608083019084908015610dc95780601f10610d9e57610100808354040283529160200191610dc9565b820191906000526020600020905b815481529060010190602001808311610dac57829003601f168201915b505094505050505060405180910390a150565b600454600160a060020a031681565b610df3610c8f565b80610e015750610e016105ac565b1515610e0c57600080fd5b60408051602080825260068054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b6593909291829182019084908015610eab5780601f10610e8057610100808354040283529160200191610eab565b820191906000526020600020905b815481529060010190602001808311610e8e57829003601f168201915b50509250505060405180910390a1565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109e25780601f106109b7576101008083540402835291602001916109e2565b600080600080600080610f27610a45565b1515610f3257600080fd5b866040516020018082805190602001908083835b60208310610f655780518252601f199092019160209182019101610f46565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310610fc85780518252601f199092019160209182019101610fa9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209450600660405160200180828054600181600116156101000203166002900480156110575780601f10611035576101008083540402835291820191611057565b820191906000526020600020905b815481529060010190602001808311611043575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831061109a5780518252601f19909201916020918201910161107b565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209650505050848414156111bb576040805160208101918290526000908190526110ee916006916115e2565b506000600781905560045460408051600160a060020a03909216808352908201839052606060208084018281528c51928501929092528b517f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f519593948d9493909290916080840191860190808383885b8381101561117657818101518382015260200161115e565b50505050905090810190601f1680156111a35780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a1600095506114b4565b6000199250600091505b6008548210156113d15760088054839081106111dd57fe5b9060005260206000200160405160200180828054600181600116156101000203166002900480156112455780601f10611223576101008083540402835291820191611245565b820191906000526020600020905b815481529060010190602001808311611231575b50509150506040516020818303038152906040526040518082805190602001908083835b602083106112885780518252601f199092019160209182019101611269565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209350505050848114156113c65760088054839081106112cc57fe5b9060005260206000200160006112e29190611650565b60098054839081106112f057fe5b60009182526020822001556008546000190182146113965760088054600019810190811061131a57fe5b9060005260206000200160088381548110151561133357fe5b90600052602060002001908054600181600116156101000203166002900461135c929190611561565b5060098054600019810190811061136f57fe5b906000526020600020015460098381548110151561138957fe5b6000918252602090912001555b60088054906113a9906000198301611697565b5060098054906113bd9060001983016116c0565b508192506113d1565b6001909101906111c5565b6000198314156113e057600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600460009054906101000a9004600160a060020a031688856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561147457818101518382015260200161145c565b50505050905090810190601f1680156114a15780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18295505b5050505050919050565b6040516000907fed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88908290a150600190565b600354600160a060020a03163214806115125750600354600160a060020a031633145b151561151d57600080fd5b600160a060020a038116151561153257600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061159a57805485556115d6565b828001600101855582156115d657600052602060002091601f016020900482015b828111156115d65782548255916001019190600101906115bb565b506106479291506116e0565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061162357805160ff19168380011785556115d6565b828001600101855582156115d6579182015b828111156115d6578251825591602001919060010190611635565b50805460018160011615610100020316600290046000825580601f106116765750611694565b601f01602090049060005260206000209081019061169491906116e0565b50565b8154818355818111156116bb576000838152602090206116bb9181019083016116fa565b505050565b8154818355818111156116bb576000838152602090206116bb9181019083015b6104ca91905b8082111561064757600081556001016116e6565b6104ca91905b808211156106475760006117148282611650565b506001016117005600a165627a7a72305820200dc3529a473311184e512a7447f3aab63fbdd6da184bfd5be4bec4900b06ca0029a165627a7a723058200f425ebc80f5297fdabaa62797f6247b0810ef710584b0ae6a1c3ab76813ab1b0029",
}

// BaseFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseFactoryMetaData.ABI instead.
var BaseFactoryABI = BaseFactoryMetaData.ABI

// Deprecated: Use BaseFactoryMetaData.Sigs instead.
// BaseFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseFactoryFuncSigs = BaseFactoryMetaData.Sigs

// BaseFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseFactoryMetaData.Bin instead.
var BaseFactoryBin = BaseFactoryMetaData.Bin

// DeployBaseFactory deploys a new Ethereum contract, binding an instance of BaseFactory to it.
func DeployBaseFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseFactory, error) {
	parsed, err := ParsedABI(K_BaseFactory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseFactory{BaseFactoryCaller: BaseFactoryCaller{contract: contract}, BaseFactoryTransactor: BaseFactoryTransactor{contract: contract}, BaseFactoryFilterer: BaseFactoryFilterer{contract: contract}}, nil
}

// BaseFactory is an auto generated Go binding around an Ethereum contract.
type BaseFactory struct {
	BaseFactoryCaller     // Read-only binding to the contract
	BaseFactoryTransactor // Write-only binding to the contract
	BaseFactoryFilterer   // Log filterer for contract events
}

// BaseFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseFactory creates a new instance of BaseFactory, bound to a specific deployed contract.
func NewBaseFactory(address common.Address, backend bind.ContractBackend) (*BaseFactory, error) {
	contract, err := bindBaseFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseFactory{BaseFactoryCaller: BaseFactoryCaller{contract: contract}, BaseFactoryTransactor: BaseFactoryTransactor{contract: contract}, BaseFactoryFilterer: BaseFactoryFilterer{contract: contract}}, nil
}

// NewBaseFactoryCaller creates a new read-only instance of BaseFactory, bound to a specific deployed contract.
func NewBaseFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseFactoryCaller, error) {
	contract, err := bindBaseFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseFactoryCaller{contract: contract}, nil
}

// NewBaseFactoryTransactor creates a new write-only instance of BaseFactory, bound to a specific deployed contract.
func NewBaseFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseFactoryTransactor, error) {
	contract, err := bindBaseFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseFactoryTransactor{contract: contract}, nil
}

// NewBaseFactoryFilterer creates a new log filterer instance of BaseFactory, bound to a specific deployed contract.
func NewBaseFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseFactoryFilterer, error) {
	contract, err := bindBaseFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseFactoryFilterer{contract: contract}, nil
}

// bindBaseFactory binds a generic wrapper to an already deployed contract.
func bindBaseFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseFactory)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseFactory *BaseFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseFactory.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseFactory *BaseFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseFactory.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseFactory *BaseFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseFactory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseFactory *BaseFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseFactory.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_BaseFactory *BaseFactoryTransactor) CreateContentType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseFactory.contract.Transact(opts, "createContentType")
}

// CreateNode is a paid mutator transaction binding the contract method 0x5c6dc219.
//
// Solidity: function createNode(address _owner) returns(address)
func (_BaseFactory *BaseFactoryTransactor) CreateNode(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _BaseFactory.contract.Transact(opts, "createNode", _owner)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseFactory *BaseFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseFactory.contract.Transact(opts, "kill")
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseFactory *BaseFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseFactory *BaseFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseFactory *BaseFactoryTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseFactory.contract.RawTransact(opts, calldata)
}

// BaseGroupFactoryMetaData contains all meta data concerning the BaseGroupFactory contract.
var BaseGroupFactoryMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
	Sigs: map[string]string{
		"af570c04": "contentSpace()",
		"575185ed": "createGroup()",
		"02d05d3f": "creator()",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
	},
	Bin: "0x60806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f4261736547726f7570466163746f727932303139303732393131353230304d4c60045560018054600160a060020a0319908116329081179092556002805490911690911790556142ea8061007e6000396000f3006080604052600436106100745763ffffffff60e060020a60003504166302d05d3f811461007657806341c0e1b5146100a757806354fd4d50146100bc578063575185ed146100e35780636d2e4b1b146100f85780638da5cb5b14610119578063af570c041461012e578063f2fde38b14610143575b005b34801561008257600080fd5b5061008b610164565b60408051600160a060020a039092168252519081900360200190f35b3480156100b357600080fd5b50610074610173565b3480156100c857600080fd5b506100d16101af565b60408051918252519081900360200190f35b3480156100ef57600080fd5b5061008b6101b5565b34801561010457600080fd5b50610074600160a060020a03600435166103f7565b34801561012557600080fd5b5061008b610452565b34801561013a57600080fd5b5061008b610461565b34801561014f57600080fd5b50610074600160a060020a0360043516610470565b600154600160a060020a031681565b600254600160a060020a03163214806101965750600254600160a060020a031633145b15156101a157600080fd5b600254600160a060020a0316ff5b60045481565b6000806000806000336101c66104e2565b600160a060020a03909116815260405190819003602001906000f0801580156101f3573d6000803e3d6000fd5b50935033925082600160a060020a031663a2d67fcf6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561023757600080fd5b505af115801561024b573d6000803e3d6000fd5b505050506040513d602081101561026157600080fd5b5051604080517f5d97b6c20000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a0383169163f17bda919187918491635d97b6c29160048083019260209291908290030181600087803b1580156102ce57600080fd5b505af11580156102e2573d6000803e3d6000fd5b505050506040513d60208110156102f857600080fd5b5051604080517f186897330000000000000000000000000000000000000000000000000000000081529051600160a060020a0387169163186897339160048083019260209291908290030181600087803b15801561035557600080fd5b505af1158015610369573d6000803e3d6000fd5b505050506040513d602081101561037f57600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03909416600485015260ff92831660248501529116604483015251606480830192600092919082900301818387803b1580156103d657600080fd5b505af11580156103ea573d6000803e3d6000fd5b5095979650505050505050565b600154600160a060020a0316321461040e57600080fd5b600160a060020a038116151561042357600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b600354600160a060020a031681565b600254600160a060020a03163214806104935750600254600160a060020a031633145b151561049e57600080fd5b600160a060020a03811615156104b357600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604051613dcc806104f38339019056007f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f416363657373496e6465786f7232303139313131333230323430304d4c00000060045560058054600160ff19909116811761ff0019166102001762ff00001916620300001763ff000000191663040000001764ff0000000019166405000000001790915560e06040526080908152600a60a052606460c052620000ac906006906003620001fd565b507f4564697461626c6532303139313231393133343630304d4c0000000000000000601b557f42734163636573734374726c47727032303139303732333136353930304d4c006022553480156200010257600080fd5b5060405160208062003dcc833981016040525160018054600160a060020a0319908116329081178084556002805484169092179091556005546007805460ff1990811660ff620100008504811691909117909255600f8054821661010085048416179055600b805482168385161790556013805482166301000000850484161790556017805490911664010000000090930490911691909117905560038054600160a060020a039586169084161790556000602481905560258054808601825591527f401968ff42a154441da5f6c4c935ac46b8671f0e062baaa62a7545ba53bb6e4c018054909216931692909217909155602655620002bb565b600183019183908215620002855791602002820160005b838211156200025457835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000214565b8015620002835782816101000a81549060ff021916905560010160208160000104928301926001030262000254565b505b506200029392915062000297565b5090565b620002b891905b808211156200029357805460ff191681556001016200029e565b90565b613b0180620002cb6000396000f3006080604052600436106103b75763ffffffff60e060020a600035041662821de381146103b957806302d05d3f146103ea578063048bd529146103ff578063055af48f1461042657806308d865d714610447578063091600e61461047e5780630ae5e739146104935780630dc10d3f146104b457806312915a30146104c957806313b8ad31146104de57806314cfabb3146104f657806315c0bac11461051f57806316aed23214610546578063186897331461055b5780631fcd779414610570578063224dcba0146105885780632d474cbd146105b55780632fa5c842146105cd578063304f4a7b1461060d57806330e669491461062e578063331b86c014610660578063375a6e7c146106755780633def51401461068a57806341c0e1b5146106b757806342e7ba7b146106cc578063446e8826146106ed578063479a0c51146106f557806354fd4d501461070a57806355277a5b1461071f5780635c1d3059146107345780635d97b6c21461055b5780635f6a1301146107495780635faecb761461075e578063628449fd146107855780636373a4111461080f578063638d0290146108245780636813b6d11461083957806368a0469a1461086057806369881c0c146108755780636c0f79b6146108965780636d2e4b1b146108ab5780636e375427146108cc5780636ebc8c86146108e157806375861a95146108f95780637709bc781461091a5780637886f7471461093b5780637ca8f618146109535780637cbb7bf21461096b5780637fb52f1a1461099857806381beeb64146109c65780638232f3f1146109db57806385e0a200146109f057806385e6853114610a055780638635adb514610a265780638da5cb5b14610a5357806392297d7b14610a6857806395a078e814610a7d57806396eba03d146109db5780639867db7414610a9e5780639f46133e14610af7578063a00b38c414610b0c578063a4081d6214610b3a578063a864dfa514610b5b578063a980892d14610b82578063aa3f695214610b97578063af570c0414610baf578063b8ff1dba14610bc4578063c287e0ed14610bd9578063c4b1978d14610bee578063cb86806d14610c03578063cdb849b714610c18578063cf8a750314610c39578063d15d62a714610c51578063d1aeb651146106f5578063d30f8cd014610c69578063d8961c8d14610c7e578063e02dd9c214610ca4578063e1a7071714610cb9578063ebe9314e14610d12578063f17bda9114610d27578063f2fde38b14610d54578063fb52222c14610d75578063fccc134f14610d96578063fe538c5a14610dab575b005b3480156103c557600080fd5b506103ce610dd2565b60408051600160a060020a039092168252519081900360200190f35b3480156103f657600080fd5b506103ce610de2565b34801561040b57600080fd5b50610414610df1565b60408051918252519081900360200190f35b34801561043257600080fd5b506103b7600160a060020a0360043516610e02565b34801561045357600080fd5b50610468600160a060020a0360043516610e52565b6040805160ff9092168252519081900360200190f35b34801561048a57600080fd5b50610468610e70565b34801561049f57600080fd5b506103b7600160a060020a0360043516610e79565b3480156104c057600080fd5b506104146111eb565b3480156104d557600080fd5b506104686111f1565b3480156104ea57600080fd5b506103ce6004356111ff565b34801561050257600080fd5b5061050b611227565b604080519115158252519081900360200190f35b34801561052b57600080fd5b5061050b600160a060020a036004351660ff602435166112c2565b34801561055257600080fd5b506104686112e2565b34801561056757600080fd5b506104686112f1565b34801561057c57600080fd5b506103ce6004356112f6565b34801561059457600080fd5b506103b7600160a060020a036004351660ff60243581169060443516611304565b3480156105c157600080fd5b506103ce600435611316565b3480156105d957600080fd5b506105e2611343565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561061957600080fd5b50610468600160a060020a036004351661138e565b34801561063a57600080fd5b506106436113ac565b6040805160ff909316835260208301919091528051918290030190f35b34801561066c57600080fd5b506104146113bb565b34801561068157600080fd5b5061050b6113c1565b34801561069657600080fd5b506103b7600160a060020a036004351660ff602435811690604435166113ca565b3480156106c357600080fd5b506103b76113d7565b3480156106d857600080fd5b5061050b600160a060020a0360043516611413565b61050b611426565b34801561070157600080fd5b50610468611616565b34801561071657600080fd5b5061041461161b565b34801561072b57600080fd5b50610414611621565b34801561074057600080fd5b50610414611627565b34801561075557600080fd5b506103b761162d565b34801561076a57600080fd5b5061050b600160a060020a036004351660ff6024351661166b565b34801561079157600080fd5b5061079a61167f565b6040805160208082528351818301528351919283929083019185019080838360005b838110156107d45781810151838201526020016107bc565b50505050905090810190601f1680156108015780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561081b57600080fd5b5061046861170d565b34801561083057600080fd5b5061041461171e565b34801561084557600080fd5b5061050b600160a060020a036004351660ff60243516611724565b34801561086c57600080fd5b5061046861173e565b34801561088157600080fd5b50610468600160a060020a036004351661174e565b3480156108a257600080fd5b5061064361176c565b3480156108b757600080fd5b506103b7600160a060020a036004351661177b565b3480156108d857600080fd5b5061050b6117c9565b3480156108ed57600080fd5b506103ce6004356117da565b34801561090557600080fd5b506103b7600160a060020a03600435166117ec565b34801561092657600080fd5b5061050b600160a060020a0360043516611a51565b34801561094757600080fd5b50610414600435611a59565b34801561095f57600080fd5b5061079a600435611a78565b34801561097757600080fd5b506103b7600160a060020a036004351660ff60243581169060443516611aec565b3480156109a457600080fd5b5061050b60ff600435811690600160a060020a03602435169060443516611af9565b3480156109d257600080fd5b5061050b611d00565b3480156109e757600080fd5b50610468611d11565b3480156109fc57600080fd5b50610414611d16565b348015610a1157600080fd5b506103b7600160a060020a0360043516611d22565b348015610a3257600080fd5b506103b7600160a060020a036004351660ff602435811690604435166120c5565b348015610a5f57600080fd5b506103ce6120d2565b348015610a7457600080fd5b506104146120e1565b348015610a8957600080fd5b5061050b600160a060020a03600435166120ed565b348015610aaa57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103b79436949293602493928401919081908401838280828437509497506120fa9650505050505050565b348015610b0357600080fd5b50610643612229565b348015610b1857600080fd5b5061050b60ff600435811690600160a060020a03602435169060443516612238565b348015610b4657600080fd5b50610468600160a060020a03600435166122f2565b348015610b6757600080fd5b5061050b600160a060020a036004351660ff60243516612310565b348015610b8e57600080fd5b5061064361232c565b348015610ba357600080fd5b506103ce60043561233b565b348015610bbb57600080fd5b506103ce61234d565b348015610bd057600080fd5b506103b761235c565b348015610be557600080fd5b506103b7612446565b348015610bfa57600080fd5b50610643612516565b348015610c0f57600080fd5b50610414612525565b348015610c2457600080fd5b506103b7600160a060020a036004351661252b565b348015610c4557600080fd5b506103ce6004356127aa565b348015610c5d57600080fd5b506103ce6004356127bc565b348015610c7557600080fd5b506104146127ce565b348015610c8a57600080fd5b5061050b600160a060020a036004351660243515156127da565b348015610cb057600080fd5b5061079a6129bf565b348015610cc557600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610414943694929360249392840191908190840183828082843750949750612a1a9650505050505050565b348015610d1e57600080fd5b50610414612fc2565b348015610d3357600080fd5b506103b7600160a060020a036004351660ff60243581169060443516612fc8565b348015610d6057600080fd5b506103b7600160a060020a0360043516612fd5565b348015610d8157600080fd5b50610468600160a060020a036004351661303a565b348015610da257600080fd5b50610414613058565b348015610db757600080fd5b5061050b600160a060020a036004351660ff6024351661305e565b600354600160a060020a03165b90565b600154600160a060020a031681565b6000610dfd600b613079565b905090565b600254600160a060020a0316321480610e255750600254600160a060020a031633145b1515610e3057600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a031660009081526018602052604090205460ff1690565b60055460ff1681565b600080600080610e8833611413565b1515600114610e9657600080fd5b60009350600092505b602454831015610ef15784600160a060020a0316602384815481101515610ec257fe5b600091825260209091200154600160a060020a03161415610ee65760019350610ef1565b600190920191610e9f565b831515610f9f576024546023541415610f5457602380546001810182556000919091527fd57b2b5166478fd4318d2acc6cc2c704584312bdd8781b32d5d06abda57f4230018054600160a060020a031916600160a060020a038716179055610f95565b846023602454815481101515610f6657fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b6024805460010190555b60408051600160a060020a038716815290517fb251eb052afc73ffd02ffe85ad79990a8b3fed60d76dbc2fa2fdd7123dffd9149181900360200190a16003546040805160e060020a6363e6ffdd028152600160a060020a038881166004830152915191909216916363e6ffdd9160248083019260209291908290030181600087803b15801561102d57600080fd5b505af1158015611041573d6000803e3d6000fd5b505050506040513d602081101561105757600080fd5b5051604080517fd1aeb6510000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a0383169163f17bda91913091849163d1aeb6519160048083019260209291908290030181600087803b1580156110c457600080fd5b505af11580156110d8573d6000803e3d6000fd5b505050506040513d60208110156110ee57600080fd5b5051604080517f479a0c510000000000000000000000000000000000000000000000000000000081529051600160a060020a0387169163479a0c519160048083019260209291908290030181600087803b15801561114b57600080fd5b505af115801561115f573d6000803e3d6000fd5b505050506040513d602081101561117557600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03909416600485015260ff92831660248501529116604483015251606480830192600092919082900301818387803b1580156111cc57600080fd5b505af11580156111e0573d6000803e3d6000fd5b505050505050505050565b60125490565b600554610100900460ff1681565b602380548290811061120d57fe5b600091825260209091200154600160a060020a0316905081565b600354604080517f26683e140000000000000000000000000000000000000000000000000000000081523360048201529051600092600160a060020a03169182916326683e149160248082019260209290919082900301818887803b15801561128f57600080fd5b505af11580156112a3573d6000803e3d6000fd5b505050506040513d60208110156112b957600080fd5b505191505b5090565b6005546000906112db90610100900460ff168484611af9565b9392505050565b60055462010000900460ff1681565b600281565b602580548290811061120d57fe5b61131160178484846132e6565b505050565b60118054600091908390811061132857fe5b600091825260209091200154600160a060020a031692915050565b60008060008060006113556007613079565b61135f600f613079565b611369600b613079565b6113736013613079565b61137d6017613079565b945094509450945094509091929394565b600160a060020a031660009081526010602052604090205460ff1690565b600f5460125460ff9091169082565b601e5490565b60215460ff1681565b611311600b8484846132e6565b600254600160a060020a03163214806113fa5750600254600160a060020a031633145b151561140557600080fd5b600254600160a060020a0316ff5b60006114208260016127da565b92915050565b6000611430611227565b151561143b57600080fd5b60215460ff16151561144c57600080fd5b6000601c80546001816001161561010002031660029004905011156114fb57601e80546001818101808455600093909352601c80546114c2937f50bb669a95c7b50b7e8a6f09454034b2b14cf2b85c730dca9a539ca82cb6e35001926002610100918316159190910260001901909116046138ff565b5050601d54601f80546001810182556000919091527fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d80701555b6020805461151e91601c91600260001961010060018416150201909116046138ff565b5042601d5560408051602081810192839052600091829052611541929091613980565b506021805460ff1916905560035460408051600160a060020a0390921680835260208301828152601c8054600260001960018316156101000201909116049385018490527f482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e949293909291906060830190849080156116015780601f106115d657610100808354040283529160200191611601565b820191906000526020600020905b8154815290600101906020018083116115e457829003601f168201915b5050935050505060405180910390a150600190565b600181565b60225481565b60245481565b60165490565b6116356117c9565b151561164057600080fd5b6040805160208181019283905260009182905261165e929091613980565b506021805460ff19169055565b6005546000906112db9060ff168484611af9565b6020805460408051601f600260001961010060018716150201909416939093049283018490048402810184019091528181529190828201828280156117055780601f106116da57610100808354040283529160200191611705565b820191906000526020600020905b8154815290600101906020018083116116e857829003601f168201915b505050505081565b600554640100000000900460ff1681565b60265481565b6005546000906112db9062010000900460ff168484611af9565b6005546301000000900460ff1681565b600160a060020a03166000908152600c602052604090205460ff1690565b601754601a5460ff9091169082565b600154600160a060020a0316321461179257600080fd5b600160a060020a03811615156117a757600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b600254600160a060020a0316321490565b60198054600091908390811061132857fe5b600254600090819081908190600160a060020a03163214806118185750600254600160a060020a031633145b151561182357600080fd5b60009350600092505b60265483101561187e5784600160a060020a031660258481548110151561184f57fe5b600091825260209091200154600160a060020a03161415611873576001935061187e565b60019092019161182c565b83151561192c5760265460255414156118e157602580546001810182556000919091527f401968ff42a154441da5f6c4c935ac46b8671f0e062baaa62a7545ba53bb6e4c018054600160a060020a031916600160a060020a038716179055611922565b8460256026548154811015156118f357fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b6026805460010190555b60408051600160a060020a038716815290517f93bcaab179551bde429187645251f8e1fb8ac85801fcb1cf91eb2c9043d611179181900360200190a16003546040805160e060020a6363e6ffdd028152600160a060020a038881166004830152915191909216916363e6ffdd9160248083019260209291908290030181600087803b1580156119ba57600080fd5b505af11580156119ce573d6000803e3d6000fd5b505050506040513d60208110156119e457600080fd5b5051604080517f5d97b6c20000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a0383169163f17bda919130918491635d97b6c29160048083019260209291908290030181600087803b1580156110c457600080fd5b6000903b1190565b601f805482908110611a6757fe5b600091825260209091200154905081565b601e805482908110611a8657fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152935090918301828280156117055780601f106116da57610100808354040283529160200191611705565b61131160078484846132e6565b600080600080600080879450600260009054906101000a9004600160a060020a0316600160a060020a031685600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611b6257600080fd5b505af1158015611b76573d6000803e3d6000fd5b505050506040513d6020811015611b8c57600080fd5b5051600160a060020a03161415611ba65760019550611cf4565b611bb1898989612238565b935060018415151415611bc75760019550611cf4565b5060005b601254811015611cef576011805482908110611be357fe5b600091825260209091200154600160a060020a031691508115801590611c275750600160a060020a038216600090815260106020526040902054600a60ff90911610155b15611ce757604080517fa00b38c400000000000000000000000000000000000000000000000000000000815260ff808c166004830152600160a060020a038b81166024840152908a166044830152915193945084939184169163a00b38c4916064808201926020929091908290030181600087803b158015611ca857600080fd5b505af1158015611cbc573d6000803e3d6000fd5b505050506040513d6020811015611cd257600080fd5b5051151560011415611ce75760019550611cf4565b600101611bcb565b600095505b50505050509392505050565b600254600160a060020a0316331490565b600081565b6000610dfd6013613079565b6000806000611d3033611413565b151560011480611d48575033600160a060020a038516145b1515611d5357600080fd5b600092505b602454831015611e7a5783600160a060020a0316602384815481101515611d7b57fe5b600091825260209091200154600160a060020a03161415611e6f576023805484908110611da457fe5b60009182526020909120018054600160a060020a0319169055602454600019018314611e60576023600160245403815481101515611dde57fe5b60009182526020909120015460238054600160a060020a039092169185908110611e0457fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055506023600160245403815481101515611e4657fe5b60009182526020909120018054600160a060020a03191690555b60248054600019019055611e7a565b600190920191611d58565b60408051600160a060020a038616815290517f745cd29407db644ed93e3ceb61cbcab96d1dfb496989ac5d5bf514fc5a9fab9c9181900360200190a16003546040805160e060020a6363e6ffdd028152600160a060020a038781166004830152915191909216916363e6ffdd9160248083019260209291908290030181600087803b158015611f0857600080fd5b505af1158015611f1c573d6000803e3d6000fd5b505050506040513d6020811015611f3257600080fd5b5051604080517fd1aeb6510000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a0383169163f17bda91913091849163d1aeb6519160048083019260209291908290030181600087803b158015611f9f57600080fd5b505af1158015611fb3573d6000803e3d6000fd5b505050506040513d6020811015611fc957600080fd5b5051604080517f8232f3f10000000000000000000000000000000000000000000000000000000081529051600160a060020a03871691638232f3f19160048083019260209291908290030181600087803b15801561202657600080fd5b505af115801561203a573d6000803e3d6000fd5b505050506040513d602081101561205057600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03909416600485015260ff92831660248501529116604483015251606480830192600092919082900301818387803b1580156120a757600080fd5b505af11580156120bb573d6000803e3d6000fd5b5050505050505050565b61131160138484846132e6565b600254600160a060020a031681565b6000610dfd6007613079565b60006114208260006127da565b6121026117c9565b151561210d57600080fd5b60215460ff161561211d57600080fd5b805160801161212b57600080fd5b805161213d9060209081840190613980565b506021805460ff191660011790556003547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a0316612181610dd2565b60408051600160a060020a0380851682528316602082810191909152606092820183815281546002600019610100600184161502019091160493830184905290926080830190849080156122165780601f106121eb57610100808354040283529160200191612216565b820191906000526020600020905b8154815290600101906020018083116121f957829003601f168201915b505094505050505060405180910390a150565b60135460165460ff9091169082565b60055460009060ff8581169116141561225e57612257600b84846136d9565b90506112db565b60055460ff85811661010090920416141561227f57612257600f84846136d9565b60055460ff858116620100009092041614156122a157612257600784846136d9565b60055460ff8581166401000000009092041614156122c557612257601784846136d9565b60055460ff85811663010000009092041614156122e857612257601384846136d9565b5060009392505050565b600160a060020a031660009081526014602052604090205460ff1690565b6005546000906112db90640100000000900460ff168484611af9565b600b54600e5460ff9091169082565b60158054600091908390811061132857fe5b600354600160a060020a031681565b6000806123676139ee565b336000818152600c602081815260408084208054600a60ff8083169182068116808b5260648306819003821683038190038216958b018690526006546101009004821660020282168b8801819052988a9052969095529590940190910191821660ff1990931683179055929550909350158015906123e6575060ff8316155b156123f6576123f6600b8561372d565b60408051308152600160a060020a038616602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a150505050565b61244e611d00565b8061245c575061245c611227565b151561246757600080fd5b604080516020808252601c8054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65939092918291820190849080156125065780601f106124db57610100808354040283529160200191612506565b820191906000526020600020905b8154815290600101906020018083116124e957829003601f168201915b50509250505060405180910390a1565b600754600a5460ff9091169082565b600a5490565b60025460009081908190600160a060020a0316331480612553575033600160a060020a038516145b151561255e57600080fd5b600092505b6026548310156126855783600160a060020a031660258481548110151561258657fe5b600091825260209091200154600160a060020a0316141561267a5760258054849081106125af57fe5b60009182526020909120018054600160a060020a031916905560265460001901831461266b5760256001602654038154811015156125e957fe5b60009182526020909120015460258054600160a060020a03909216918590811061260f57fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550602560016026540381548110151561265157fe5b60009182526020909120018054600160a060020a03191690555b60268054600019019055612685565b600190920191612563565b60408051600160a060020a038616815290517f2d6aa1a9629d125e23a0cf692cda7cd6795dff1652eedd4673b38ec31e387b959181900360200190a16003546040805160e060020a6363e6ffdd028152600160a060020a038781166004830152915191909216916363e6ffdd9160248083019260209291908290030181600087803b15801561271357600080fd5b505af1158015612727573d6000803e3d6000fd5b505050506040513d602081101561273d57600080fd5b5051604080517f5d97b6c20000000000000000000000000000000000000000000000000000000081529051919350839250600160a060020a0383169163f17bda919130918491635d97b6c29160048083019260209291908290030181600087803b158015611f9f57600080fd5b600d8054600091908390811061132857fe5b60098054600091908390811061132857fe5b6000610dfd600f613079565b6003546040805160e060020a6363e6ffdd028152600160a060020a0385811660048301529151600093849384939116916363e6ffdd9160248082019260209290919082900301818787803b15801561283157600080fd5b505af1158015612845573d6000803e3d6000fd5b505050506040513d602081101561285b57600080fd5b50519150819050600184151514156129695780600160a060020a03166315c0bac13083600160a060020a0316635d97b6c26040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156128bb57600080fd5b505af11580156128cf573d6000803e3d6000fd5b505050506040513d60208110156128e557600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260ff90911660248301525160448083019260209291908290030181600087803b15801561293657600080fd5b505af115801561294a573d6000803e3d6000fd5b505050506040513d602081101561296057600080fd5b505192506129b7565b80600160a060020a03166315c0bac13083600160a060020a031663d1aeb6516040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156128bb57600080fd5b505092915050565b601c805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156117055780601f106116da57610100808354040283529160200191611705565b600080600080600080612a2b6117c9565b1515612a3657600080fd5b866040516020018082805190602001908083835b60208310612a695780518252601f199092019160209182019101612a4a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310612acc5780518252601f199092019160209182019101612aad565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209450601c6040516020018082805460018160011615610100020316600290048015612b5b5780601f10612b39576101008083540402835291820191612b5b565b820191906000526020600020905b815481529060010190602001808311612b47575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310612b9e5780518252601f199092019160209182019101612b7f565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120965050505084841415612cbf57604080516020810191829052600090819052612bf291601c91613980565b506000601d81905560035460408051600160a060020a03909216808352908201839052606060208084018281528c51928501929092528b517f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f519593948d9493909290916080840191860190808383885b83811015612c7a578181015183820152602001612c62565b50505050905090810190601f168015612ca75780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160009550612fb8565b6000199250600091505b601e54821015612ed557601e805483908110612ce157fe5b906000526020600020016040516020018082805460018160011615610100020316600290048015612d495780601f10612d27576101008083540402835291820191612d49565b820191906000526020600020905b815481529060010190602001808311612d35575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310612d8c5780518252601f199092019160209182019101612d6d565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120935050505084811415612eca57601e805483908110612dd057fe5b906000526020600020016000612de69190613a0d565b601f805483908110612df457fe5b6000918252602082200155601e54600019018214612e9a57601e80546000198101908110612e1e57fe5b90600052602060002001601e83815481101515612e3757fe5b906000526020600020019080546001816001161561010002031660029004612e609291906138ff565b50601f80546000198101908110612e7357fe5b9060005260206000200154601f83815481101515612e8d57fe5b6000918252602090912001555b601e805490612ead906000198301613a54565b50601f805490612ec1906000198301613a78565b50819250612ed5565b600190910190612cc9565b600019831415612ee457600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600360009054906101000a9004600160a060020a031688856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015612f78578181015183820152602001612f60565b50505050905090810190601f168015612fa55780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18295505b5050505050919050565b600e5490565b611311600f8484846132e6565b600254600160a060020a0316321480612ff85750600254600160a060020a031633145b151561300357600080fd5b600160a060020a038116151561301857600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a031660009081526008602052604090205460ff1690565b601a5490565b6005546000906112db906301000000900460ff168484611af9565b600080805b83600301548110156132df576130b8846002018281548110151561309e57fe5b600091825260209091200154600160a060020a0316611a51565b1515613242577fa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b2608185600201838154811015156130f157fe5b600091825260209182902001546040805192830193909352600160a060020a03168183015260608082526004908201527f6465616400000000000000000000000000000000000000000000000000000000608082015290519081900360a00190a16002840180548290811061316257fe5b60009182526020909120018054600160a060020a0319169055600384015460019290920191600019018114613231578360020160018560030154038154811015156131a957fe5b600091825260209091200154600285018054600160a060020a0390921691839081106131d157fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555083600201600185600301540381548110151561321757fe5b60009182526020909120018054600160a060020a03191690555b6003840180546000190190556132da565b7fa33a9370a938260eee2537d9480ca0caa9789521da8e57afb3a0699d3ff9b26081856002018381548110151561327557fe5b600091825260209182902001546040805192830193909352600160a060020a03168183015260608082526005908201527f616c697665000000000000000000000000000000000000000000000000000000608082015290519081900360a00190a16001015b61307e565b5092915050565b6000806000806000806132f76139ee565b600080600061330532611413565b6003546040805160e060020a6363e6ffdd0281523260048201529051929c5060009b50600160a060020a03909116995089916363e6ffdd9160248082019260209290919082900301818f87803b15801561335e57600080fd5b505af1158015613372573d6000803e3d6000fd5b505050506040513d602081101561338857600080fd5b8101908080519060200190929190505050965086955085600160a060020a0316637fb52f1a8f60000160009054906101000a900460ff168f60026040518463ffffffff1660e060020a028152600401808460ff1660ff16815260200183600160a060020a0316600160a060020a031681526020018260ff1660ff1681526020019350505050602060405180830381600087803b15801561342757600080fd5b505af115801561343b573d6000803e3d6000fd5b505050506040513d602081101561345157600080fd5b810190808051906020019092919050505098508d60010160008e600160a060020a0316600160a060020a0316815260200190815260200160002060009054906101000a900460ff169450600a8560ff168115156134aa57fe5b0660ff90811680865260648783160681900382166020870181905287030381166040860152600093508b925082161580156134e9575089806134e95750885b156134f357600192505b60ff8b16158015906135025750895b8015613524575060018460ff8e166003811061351a57fe5b602002015160ff16145b156135325760019250600291505b60ff8b16158015906135415750885b8015613564575060028460ff8e166003811061355957fe5b602002015160ff1614155b156135725760019250600191505b60ff8b16158015906135815750895b801561358a5750885b156135985760019250600291505b8215156135a457600080fd5b600660ff8d16600381106135b457fe5b602081049091015460ff601f9092166101000a9004811683029085908e16600381106135dc57fe5b60ff909216602092909202015283600260200201518460016020020151856000602002015101019050808e60010160008f600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508060ff1660001415801561365a575060ff8516155b15613669576136698e8e61372d565b60ff8116151561367f5761367d8e8e6137c4565b505b60408051308152600160a060020a038f16602082015260ff83168183015290517f23dcae6acc296731e3679d01e7cd963988e5a372850a0a1db2b9b01539e19ff49181900360600190a15050505050505050505050505050565b600160a060020a038216600090815260018401602052604081205460ff9081169060069084166003811061370957fe5b60208104919091015460ff601f9092166101000a9004811691161015949350505050565b600282015460038301541015613786578082600201836003015481548110151561375357fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055506137b7565b60028201805460018101825560009182526020909120018054600160a060020a031916600160a060020a0383161790555b5060030180546001019055565b6000805b83600301548110156122e85782600160a060020a031684600201828154811015156137ef57fe5b600091825260209091200154600160a060020a031614156138f7576002840180548290811061381a57fe5b60009182526020909120018054600160a060020a031916905560038401546000190181146138e25783600201600185600301540381548110151561385a57fe5b600091825260209091200154600285018054600160a060020a03909216918390811061388257fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055508360020160018560030154038154811015156138c857fe5b60009182526020909120018054600160a060020a03191690555b600384018054600019019055600191506132df565b6001016137c8565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106139385780548555613974565b8280016001018555821561397457600052602060002091601f016020900482015b82811115613974578254825591600101919060010190613959565b506112be929150613a98565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106139c157805160ff1916838001178555613974565b82800160010185558215613974579182015b828111156139745782518255916020019190600101906139d3565b6060604051908101604052806003906020820280388339509192915050565b50805460018160011615610100020316600290046000825580601f10613a335750613a51565b601f016020900490600052602060002090810190613a519190613a98565b50565b81548183558181111561131157600083815260209020611311918101908301613ab2565b815481835581811115611311576000838152602090206113119181019083015b610ddf91905b808211156112be5760008155600101613a9e565b610ddf91905b808211156112be576000613acc8282613a0d565b50600101613ab85600a165627a7a7230582006134fc74acd62b9ab5178c9fed19e8dc630e497dd2c6b825e7e6b10bd0f5e130029a165627a7a7230582043b4cd94138aa5ab0cd93a4bc43fa84953fbb7b971c892d496ec6817266423cb0029",
}

// BaseGroupFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseGroupFactoryMetaData.ABI instead.
var BaseGroupFactoryABI = BaseGroupFactoryMetaData.ABI

// Deprecated: Use BaseGroupFactoryMetaData.Sigs instead.
// BaseGroupFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseGroupFactoryFuncSigs = BaseGroupFactoryMetaData.Sigs

// BaseGroupFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseGroupFactoryMetaData.Bin instead.
var BaseGroupFactoryBin = BaseGroupFactoryMetaData.Bin

// DeployBaseGroupFactory deploys a new Ethereum contract, binding an instance of BaseGroupFactory to it.
func DeployBaseGroupFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseGroupFactory, error) {
	parsed, err := ParsedABI(K_BaseGroupFactory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseGroupFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseGroupFactory{BaseGroupFactoryCaller: BaseGroupFactoryCaller{contract: contract}, BaseGroupFactoryTransactor: BaseGroupFactoryTransactor{contract: contract}, BaseGroupFactoryFilterer: BaseGroupFactoryFilterer{contract: contract}}, nil
}

// BaseGroupFactory is an auto generated Go binding around an Ethereum contract.
type BaseGroupFactory struct {
	BaseGroupFactoryCaller     // Read-only binding to the contract
	BaseGroupFactoryTransactor // Write-only binding to the contract
	BaseGroupFactoryFilterer   // Log filterer for contract events
}

// BaseGroupFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseGroupFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseGroupFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseGroupFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseGroupFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseGroupFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseGroupFactory creates a new instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactory(address common.Address, backend bind.ContractBackend) (*BaseGroupFactory, error) {
	contract, err := bindBaseGroupFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactory{BaseGroupFactoryCaller: BaseGroupFactoryCaller{contract: contract}, BaseGroupFactoryTransactor: BaseGroupFactoryTransactor{contract: contract}, BaseGroupFactoryFilterer: BaseGroupFactoryFilterer{contract: contract}}, nil
}

// NewBaseGroupFactoryCaller creates a new read-only instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseGroupFactoryCaller, error) {
	contract, err := bindBaseGroupFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactoryCaller{contract: contract}, nil
}

// NewBaseGroupFactoryTransactor creates a new write-only instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseGroupFactoryTransactor, error) {
	contract, err := bindBaseGroupFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactoryTransactor{contract: contract}, nil
}

// NewBaseGroupFactoryFilterer creates a new log filterer instance of BaseGroupFactory, bound to a specific deployed contract.
func NewBaseGroupFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseGroupFactoryFilterer, error) {
	contract, err := bindBaseGroupFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseGroupFactoryFilterer{contract: contract}, nil
}

// bindBaseGroupFactory binds a generic wrapper to an already deployed contract.
func bindBaseGroupFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseGroupFactory)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseGroupFactory.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseGroupFactory.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseGroupFactory *BaseGroupFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseGroupFactory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseGroupFactory *BaseGroupFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseGroupFactory.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_BaseGroupFactory *BaseGroupFactoryTransactor) CreateGroup(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "createGroup")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "kill")
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseGroupFactory *BaseGroupFactoryTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseGroupFactory.contract.RawTransact(opts, calldata)
}

// BaseLibraryMetaData contains all meta data concerning the BaseLibrary contract.
var BaseLibraryMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"updateAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stakeholder\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approvalRequestsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"removeReviewerGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"addAccessorGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reviewerGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"access_type\",\"type\":\"uint8\"},{\"name\":\"access\",\"type\":\"uint8\"}],\"name\":\"setGroupRights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributorGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accessorGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"removeContributorGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"submitApprovalRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPendingApprovalRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"addContributorGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_contract\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"approveContent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contentAddr\",\"type\":\"address\"}],\"name\":\"deleteContent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvalRequests\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reviewerGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"addReviewerGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessorGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"removeAccessorGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accessRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"},{\"name\":\"content_space\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"content_type\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"}],\"name\":\"ContentObjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"}],\"name\":\"ContentObjectDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ContributorGroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ContributorGroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ReviewerGroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ReviewerGroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"AccessorGroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"AccessorGroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operationCode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"UnauthorizedOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"submitter\",\"type\":\"address\"}],\"name\":\"ApproveContentRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"ApproveContent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addressKms\",\"type\":\"address\"}],\"name\":\"UpdateKmsAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AccessRequest\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"f1551887": "accessRequest()",
		"2c11f392": "accessorGroups(uint256)",
		"e5538fd2": "accessorGroupsLength()",
		"1d0f4351": "addAccessorGroup(address)",
		"0f58a786": "addContentType(address,address)",
		"679a9a3c": "addContributorGroup(address)",
		"dc3c29c0": "addReviewerGroup(address)",
		"32eaf21b": "addressKMS()",
		"8cb13c2e": "approvalRequests(uint256)",
		"16308394": "approvalRequestsLength()",
		"87e86b2c": "approveContent(address,bool,string)",
		"6e375427": "canCommit()",
		"14cfabb3": "canConfirm()",
		"0eaec2c5": "canContribute(address)",
		"81beeb64": "canEdit()",
		"cbcd4461": "canPublish()",
		"9b55f901": "canPublish(address)",
		"29d00219": "canReview(address)",
		"5f6a1301": "clearPending()",
		"9867db74": "commit(string)",
		"375a6e7c": "commitPending()",
		"446e8826": "confirmCommit()",
		"af570c04": "contentSpace()",
		"1cdbee5a": "contentTypeContracts(address)",
		"991a3a7c": "contentTypes(uint256)",
		"c65bcbe2": "contentTypesLength()",
		"2393553b": "contributorGroups(uint256)",
		"470750bb": "contributorGroupsLength()",
		"331b86c0": "countVersionHashes()",
		"1e35d8fa": "createContent(address)",
		"02d05d3f": "creator()",
		"87fcd0b8": "deleteContent(address)",
		"e1a70717": "deleteVersion(string)",
		"1f2caaec": "findTypeByHash(bytes32)",
		"ac55c906": "getMeta(bytes)",
		"63dab9d4": "getPendingApprovalRequest(uint256)",
		"95a078e8": "hasAccess(address)",
		"41c0e1b5": "kill()",
		"e02dd9c2": "objectHash()",
		"8da5cb5b": "owner()",
		"00821de3": "parentAddress()",
		"628449fd": "pendingHash()",
		"2cf99422": "publish(address)",
		"e542b7cb": "putMeta(bytes,bytes)",
		"e8de515f": "removeAccessorGroup(address)",
		"fd089196": "removeContentType(address)",
		"386493e0": "removeContributorGroup(address)",
		"1b969895": "removeReviewerGroup(address)",
		"3dd71d99": "requiresReview()",
		"952e464b": "reviewerGroups(uint256)",
		"21770a84": "reviewerGroupsLength()",
		"c9e8e72d": "setAddressKMS(address)",
		"22e564eb": "setGroupRights(address,uint8,uint8)",
		"0fe1b5a2": "setRights(address,uint8,uint8)",
		"49102e61": "submitApprovalRequest()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"011e01a5": "updateAddressKMS(address)",
		"c287e0ed": "updateRequest()",
		"29dedde5": "validType(address)",
		"54fd4d50": "version()",
		"7ca8f618": "versionHashes(uint256)",
		"7886f747": "versionTimestamp(uint256)",
		"9cb121ba": "whitelistedType(address)",
	},
	Bin: "",
}

// BaseLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseLibraryMetaData.ABI instead.
var BaseLibraryABI = BaseLibraryMetaData.ABI

// Deprecated: Use BaseLibraryMetaData.Sigs instead.
// BaseLibraryFuncSigs maps the 4-byte function signature to its string representation.
var BaseLibraryFuncSigs = BaseLibraryMetaData.Sigs

// BaseLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseLibraryMetaData.Bin instead.
var BaseLibraryBin = BaseLibraryMetaData.Bin

// DeployBaseLibrary deploys a new Ethereum contract, binding an instance of BaseLibrary to it.
func DeployBaseLibrary(auth *bind.TransactOpts, backend bind.ContractBackend, address_KMS common.Address, content_space common.Address) (common.Address, *types.Transaction, *BaseLibrary, error) {
	parsed, err := ParsedABI(K_BaseLibrary)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseLibraryBin), backend, address_KMS, content_space)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseLibrary{BaseLibraryCaller: BaseLibraryCaller{contract: contract}, BaseLibraryTransactor: BaseLibraryTransactor{contract: contract}, BaseLibraryFilterer: BaseLibraryFilterer{contract: contract}}, nil
}

// BaseLibrary is an auto generated Go binding around an Ethereum contract.
type BaseLibrary struct {
	BaseLibraryCaller     // Read-only binding to the contract
	BaseLibraryTransactor // Write-only binding to the contract
	BaseLibraryFilterer   // Log filterer for contract events
}

// BaseLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseLibrary creates a new instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibrary(address common.Address, backend bind.ContractBackend) (*BaseLibrary, error) {
	contract, err := bindBaseLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseLibrary{BaseLibraryCaller: BaseLibraryCaller{contract: contract}, BaseLibraryTransactor: BaseLibraryTransactor{contract: contract}, BaseLibraryFilterer: BaseLibraryFilterer{contract: contract}}, nil
}

// NewBaseLibraryCaller creates a new read-only instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibraryCaller(address common.Address, caller bind.ContractCaller) (*BaseLibraryCaller, error) {
	contract, err := bindBaseLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryCaller{contract: contract}, nil
}

// NewBaseLibraryTransactor creates a new write-only instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseLibraryTransactor, error) {
	contract, err := bindBaseLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryTransactor{contract: contract}, nil
}

// NewBaseLibraryFilterer creates a new log filterer instance of BaseLibrary, bound to a specific deployed contract.
func NewBaseLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseLibraryFilterer, error) {
	contract, err := bindBaseLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFilterer{contract: contract}, nil
}

// bindBaseLibrary binds a generic wrapper to an already deployed contract.
func bindBaseLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseLibrary)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// AccessorGroups is a free data retrieval call binding the contract method 0x2c11f392.
//
// Solidity: function accessorGroups(uint256 ) view returns(address)
func (_BaseLibrary *BaseLibraryCaller) AccessorGroups(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "accessorGroups", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccessorGroupsLength is a free data retrieval call binding the contract method 0xe5538fd2.
//
// Solidity: function accessorGroupsLength() view returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) AccessorGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "accessorGroupsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() view returns(address)
func (_BaseLibrary *BaseLibraryCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "addressKMS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ApprovalRequests is a free data retrieval call binding the contract method 0x8cb13c2e.
//
// Solidity: function approvalRequests(uint256 ) view returns(address)
func (_BaseLibrary *BaseLibraryCaller) ApprovalRequests(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "approvalRequests", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ApprovalRequestsLength is a free data retrieval call binding the contract method 0x16308394.
//
// Solidity: function approvalRequestsLength() view returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ApprovalRequestsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "approvalRequestsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "canCommit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "canConfirm")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "canContribute", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "canEdit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "canPublish", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanPublish0 is a free data retrieval call binding the contract method 0xcbcd4461.
//
// Solidity: function canPublish() view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanPublish0(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "canPublish0")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address _candidate) view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CanReview(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "canReview", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "commitPending")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) view returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "contentTypeContracts", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) view returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "contentTypes", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() view returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "contentTypesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ContributorGroups is a free data retrieval call binding the contract method 0x2393553b.
//
// Solidity: function contributorGroups(uint256 ) view returns(address)
func (_BaseLibrary *BaseLibraryCaller) ContributorGroups(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "contributorGroups", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContributorGroupsLength is a free data retrieval call binding the contract method 0x470750bb.
//
// Solidity: function contributorGroupsLength() view returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ContributorGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "contributorGroupsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() view returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "countVersionHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseLibrary *BaseLibraryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) view returns(address)
func (_BaseLibrary *BaseLibraryCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "findTypeByHash", typeHash)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) view returns(bytes)
func (_BaseLibrary *BaseLibraryCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "getMeta", key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetPendingApprovalRequest is a free data retrieval call binding the contract method 0x63dab9d4.
//
// Solidity: function getPendingApprovalRequest(uint256 index) view returns(address)
func (_BaseLibrary *BaseLibraryCaller) GetPendingApprovalRequest(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "getPendingApprovalRequest", index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address _candidate) view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) HasAccess(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "hasAccess", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() view returns(string)
func (_BaseLibrary *BaseLibraryCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "objectHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseLibrary *BaseLibraryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_BaseLibrary *BaseLibraryCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "parentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() view returns(string)
func (_BaseLibrary *BaseLibraryCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "pendingHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "requiresReview")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ReviewerGroups is a free data retrieval call binding the contract method 0x952e464b.
//
// Solidity: function reviewerGroups(uint256 ) view returns(address)
func (_BaseLibrary *BaseLibraryCaller) ReviewerGroups(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "reviewerGroups", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ReviewerGroupsLength is a free data retrieval call binding the contract method 0x21770a84.
//
// Solidity: function reviewerGroupsLength() view returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) ReviewerGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "reviewerGroupsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "validType", content_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseLibrary *BaseLibraryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) view returns(string)
func (_BaseLibrary *BaseLibraryCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "versionHashes", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) view returns(uint256)
func (_BaseLibrary *BaseLibraryCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "versionTimestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) view returns(bool)
func (_BaseLibrary *BaseLibraryCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var out []interface{}
	err := _BaseLibrary.contract.Call(opts, &out, "whitelistedType", content_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AccessRequest is a paid mutator transaction binding the contract method 0xf1551887.
//
// Solidity: function accessRequest() returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) AccessRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "accessRequest")
}

// AddAccessorGroup is a paid mutator transaction binding the contract method 0x1d0f4351.
//
// Solidity: function addAccessorGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddAccessorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addAccessorGroup", group)
}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// AddContributorGroup is a paid mutator transaction binding the contract method 0x679a9a3c.
//
// Solidity: function addContributorGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddContributorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addContributorGroup", group)
}

// AddReviewerGroup is a paid mutator transaction binding the contract method 0xdc3c29c0.
//
// Solidity: function addReviewerGroup(address group) returns()
func (_BaseLibrary *BaseLibraryTransactor) AddReviewerGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "addReviewerGroup", group)
}

// ApproveContent is a paid mutator transaction binding the contract method 0x87e86b2c.
//
// Solidity: function approveContent(address content_contract, bool approved, string note) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) ApproveContent(opts *bind.TransactOpts, content_contract common.Address, approved bool, note string) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "approveContent", content_contract, approved, note)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_BaseLibrary *BaseLibraryTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "clearPending")
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_BaseLibrary *BaseLibraryTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "commit", _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() payable returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "confirmCommit")
}

// CreateContent is a paid mutator transaction binding the contract method 0x1e35d8fa.
//
// Solidity: function createContent(address content_type) returns(address)
func (_BaseLibrary *BaseLibraryTransactor) CreateContent(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "createContent", content_type)
}

// DeleteContent is a paid mutator transaction binding the contract method 0x87fcd0b8.
//
// Solidity: function deleteContent(address _contentAddr) returns()
func (_BaseLibrary *BaseLibraryTransactor) DeleteContent(opts *bind.TransactOpts, _contentAddr common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "deleteContent", _contentAddr)
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_BaseLibrary *BaseLibraryTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "deleteVersion", _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibrary *BaseLibraryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "kill")
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "publish", contentObj)
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_BaseLibrary *BaseLibraryTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "putMeta", key, value)
}

// RemoveAccessorGroup is a paid mutator transaction binding the contract method 0xe8de515f.
//
// Solidity: function removeAccessorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveAccessorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeAccessorGroup", group)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeContentType", content_type)
}

// RemoveContributorGroup is a paid mutator transaction binding the contract method 0x386493e0.
//
// Solidity: function removeContributorGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveContributorGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeContributorGroup", group)
}

// RemoveReviewerGroup is a paid mutator transaction binding the contract method 0x1b969895.
//
// Solidity: function removeReviewerGroup(address group) returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) RemoveReviewerGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "removeReviewerGroup", group)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibraryTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// SetGroupRights is a paid mutator transaction binding the contract method 0x22e564eb.
//
// Solidity: function setGroupRights(address group, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibraryTransactor) SetGroupRights(opts *bind.TransactOpts, group common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "setGroupRights", group, access_type, access)
}

// SetRights is a paid mutator transaction binding the contract method 0x0fe1b5a2.
//
// Solidity: function setRights(address stakeholder, uint8 access_type, uint8 access) returns()
func (_BaseLibrary *BaseLibraryTransactor) SetRights(opts *bind.TransactOpts, stakeholder common.Address, access_type uint8, access uint8) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "setRights", stakeholder, access_type, access)
}

// SubmitApprovalRequest is a paid mutator transaction binding the contract method 0x49102e61.
//
// Solidity: function submitApprovalRequest() returns(bool)
func (_BaseLibrary *BaseLibraryTransactor) SubmitApprovalRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "submitApprovalRequest")
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibrary *BaseLibraryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibrary *BaseLibraryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "transferOwnership", newOwner)
}

// UpdateAddressKMS is a paid mutator transaction binding the contract method 0x011e01a5.
//
// Solidity: function updateAddressKMS(address address_KMS) returns()
func (_BaseLibrary *BaseLibraryTransactor) UpdateAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "updateAddressKMS", address_KMS)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_BaseLibrary *BaseLibraryTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibrary.contract.Transact(opts, "updateRequest")
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseLibrary *BaseLibraryTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseLibrary.contract.RawTransact(opts, calldata)
}

// BaseLibraryAccessRequestIterator is returned from FilterAccessRequest and is used to iterate over the raw logs and unpacked data for AccessRequest events raised by the BaseLibrary contract.
type BaseLibraryAccessRequestIterator struct {
	Event *BaseLibraryAccessRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryAccessRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryAccessRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryAccessRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryAccessRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryAccessRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryAccessRequest represents a AccessRequest event raised by the BaseLibrary contract.
type BaseLibraryAccessRequest struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAccessRequest is a free log retrieval operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseLibrary *BaseLibraryFilterer) FilterAccessRequest(opts *bind.FilterOpts) (*BaseLibraryAccessRequestIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryAccessRequestIterator{contract: _BaseLibrary.contract, event: "AccessRequest", logs: logs, sub: sub}, nil
}

// WatchAccessRequest is a free log subscription operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseLibrary *BaseLibraryFilterer) WatchAccessRequest(opts *bind.WatchOpts, sink chan<- *BaseLibraryAccessRequest) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "AccessRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryAccessRequest)
				if err := _BaseLibrary.contract.UnpackLog(event, "AccessRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessRequest is a log parse operation binding the contract event 0xed78a9defa7412748c9513ba9cf680f57703a46dd7e0fb0b1e94063423c73e88.
//
// Solidity: event AccessRequest()
func (_BaseLibrary *BaseLibraryFilterer) ParseAccessRequest(log types.Log) (*BaseLibraryAccessRequest, error) {
	event := new(BaseLibraryAccessRequest)
	if err := _BaseLibrary.contract.UnpackLog(event, "AccessRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryAccessorGroupAddedIterator is returned from FilterAccessorGroupAdded and is used to iterate over the raw logs and unpacked data for AccessorGroupAdded events raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupAddedIterator struct {
	Event *BaseLibraryAccessorGroupAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryAccessorGroupAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryAccessorGroupAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryAccessorGroupAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryAccessorGroupAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryAccessorGroupAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryAccessorGroupAdded represents a AccessorGroupAdded event raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAccessorGroupAdded is a free log retrieval operation binding the contract event 0x3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d411.
//
// Solidity: event AccessorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterAccessorGroupAdded(opts *bind.FilterOpts) (*BaseLibraryAccessorGroupAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "AccessorGroupAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryAccessorGroupAddedIterator{contract: _BaseLibrary.contract, event: "AccessorGroupAdded", logs: logs, sub: sub}, nil
}

// WatchAccessorGroupAdded is a free log subscription operation binding the contract event 0x3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d411.
//
// Solidity: event AccessorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchAccessorGroupAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryAccessorGroupAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "AccessorGroupAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryAccessorGroupAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessorGroupAdded is a log parse operation binding the contract event 0x3a94857e4393737f73edb175a7d0c195c7f635d9ae995e12740616ec55c9d411.
//
// Solidity: event AccessorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseAccessorGroupAdded(log types.Log) (*BaseLibraryAccessorGroupAdded, error) {
	event := new(BaseLibraryAccessorGroupAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryAccessorGroupRemovedIterator is returned from FilterAccessorGroupRemoved and is used to iterate over the raw logs and unpacked data for AccessorGroupRemoved events raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupRemovedIterator struct {
	Event *BaseLibraryAccessorGroupRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryAccessorGroupRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryAccessorGroupRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryAccessorGroupRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryAccessorGroupRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryAccessorGroupRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryAccessorGroupRemoved represents a AccessorGroupRemoved event raised by the BaseLibrary contract.
type BaseLibraryAccessorGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAccessorGroupRemoved is a free log retrieval operation binding the contract event 0xc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f081.
//
// Solidity: event AccessorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterAccessorGroupRemoved(opts *bind.FilterOpts) (*BaseLibraryAccessorGroupRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "AccessorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryAccessorGroupRemovedIterator{contract: _BaseLibrary.contract, event: "AccessorGroupRemoved", logs: logs, sub: sub}, nil
}

// WatchAccessorGroupRemoved is a free log subscription operation binding the contract event 0xc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f081.
//
// Solidity: event AccessorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchAccessorGroupRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryAccessorGroupRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "AccessorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryAccessorGroupRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessorGroupRemoved is a log parse operation binding the contract event 0xc5224c4118417a068eeac7d714e6d8af6f99ec3fb611bc965185460b0e38f081.
//
// Solidity: event AccessorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseAccessorGroupRemoved(log types.Log) (*BaseLibraryAccessorGroupRemoved, error) {
	event := new(BaseLibraryAccessorGroupRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "AccessorGroupRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryApproveContentIterator is returned from FilterApproveContent and is used to iterate over the raw logs and unpacked data for ApproveContent events raised by the BaseLibrary contract.
type BaseLibraryApproveContentIterator struct {
	Event *BaseLibraryApproveContent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryApproveContentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryApproveContent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryApproveContent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryApproveContentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryApproveContentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryApproveContent represents a ApproveContent event raised by the BaseLibrary contract.
type BaseLibraryApproveContent struct {
	ContentAddress common.Address
	Approved       bool
	Note           string
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterApproveContent is a free log retrieval operation binding the contract event 0x70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442.
//
// Solidity: event ApproveContent(address contentAddress, bool approved, string note)
func (_BaseLibrary *BaseLibraryFilterer) FilterApproveContent(opts *bind.FilterOpts) (*BaseLibraryApproveContentIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ApproveContent")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryApproveContentIterator{contract: _BaseLibrary.contract, event: "ApproveContent", logs: logs, sub: sub}, nil
}

// WatchApproveContent is a free log subscription operation binding the contract event 0x70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442.
//
// Solidity: event ApproveContent(address contentAddress, bool approved, string note)
func (_BaseLibrary *BaseLibraryFilterer) WatchApproveContent(opts *bind.WatchOpts, sink chan<- *BaseLibraryApproveContent) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ApproveContent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryApproveContent)
				if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproveContent is a log parse operation binding the contract event 0x70234ce475fee4ab40e5e55cf533f67f12b47ef4c860e62dd7affa84ead4b442.
//
// Solidity: event ApproveContent(address contentAddress, bool approved, string note)
func (_BaseLibrary *BaseLibraryFilterer) ParseApproveContent(log types.Log) (*BaseLibraryApproveContent, error) {
	event := new(BaseLibraryApproveContent)
	if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryApproveContentRequestIterator is returned from FilterApproveContentRequest and is used to iterate over the raw logs and unpacked data for ApproveContentRequest events raised by the BaseLibrary contract.
type BaseLibraryApproveContentRequestIterator struct {
	Event *BaseLibraryApproveContentRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryApproveContentRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryApproveContentRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryApproveContentRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryApproveContentRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryApproveContentRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryApproveContentRequest represents a ApproveContentRequest event raised by the BaseLibrary contract.
type BaseLibraryApproveContentRequest struct {
	ContentAddress common.Address
	Submitter      common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterApproveContentRequest is a free log retrieval operation binding the contract event 0x0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a.
//
// Solidity: event ApproveContentRequest(address contentAddress, address submitter)
func (_BaseLibrary *BaseLibraryFilterer) FilterApproveContentRequest(opts *bind.FilterOpts) (*BaseLibraryApproveContentRequestIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ApproveContentRequest")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryApproveContentRequestIterator{contract: _BaseLibrary.contract, event: "ApproveContentRequest", logs: logs, sub: sub}, nil
}

// WatchApproveContentRequest is a free log subscription operation binding the contract event 0x0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a.
//
// Solidity: event ApproveContentRequest(address contentAddress, address submitter)
func (_BaseLibrary *BaseLibraryFilterer) WatchApproveContentRequest(opts *bind.WatchOpts, sink chan<- *BaseLibraryApproveContentRequest) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ApproveContentRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryApproveContentRequest)
				if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContentRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproveContentRequest is a log parse operation binding the contract event 0x0588a34cf0de4e025d359c89ca4bacbcbf175440909952d91c814412d9da996a.
//
// Solidity: event ApproveContentRequest(address contentAddress, address submitter)
func (_BaseLibrary *BaseLibraryFilterer) ParseApproveContentRequest(log types.Log) (*BaseLibraryApproveContentRequest, error) {
	event := new(BaseLibraryApproveContentRequest)
	if err := _BaseLibrary.contract.UnpackLog(event, "ApproveContentRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the BaseLibrary contract.
type BaseLibraryCommitPendingIterator struct {
	Event *BaseLibraryCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryCommitPending represents a CommitPending event raised by the BaseLibrary contract.
type BaseLibraryCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) FilterCommitPending(opts *bind.FilterOpts) (*BaseLibraryCommitPendingIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryCommitPendingIterator{contract: _BaseLibrary.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *BaseLibraryCommitPending) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryCommitPending)
				if err := _BaseLibrary.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) ParseCommitPending(log types.Log) (*BaseLibraryCommitPending, error) {
	event := new(BaseLibraryCommitPending)
	if err := _BaseLibrary.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryContentObjectCreatedIterator is returned from FilterContentObjectCreated and is used to iterate over the raw logs and unpacked data for ContentObjectCreated events raised by the BaseLibrary contract.
type BaseLibraryContentObjectCreatedIterator struct {
	Event *BaseLibraryContentObjectCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentObjectCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentObjectCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentObjectCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentObjectCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentObjectCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentObjectCreated represents a ContentObjectCreated event raised by the BaseLibrary contract.
type BaseLibraryContentObjectCreated struct {
	ContentAddress common.Address
	ContentType    common.Address
	SpaceAddress   common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterContentObjectCreated is a free log retrieval operation binding the contract event 0xadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878.
//
// Solidity: event ContentObjectCreated(address contentAddress, address content_type, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentObjectCreated(opts *bind.FilterOpts) (*BaseLibraryContentObjectCreatedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentObjectCreated")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentObjectCreatedIterator{contract: _BaseLibrary.contract, event: "ContentObjectCreated", logs: logs, sub: sub}, nil
}

// WatchContentObjectCreated is a free log subscription operation binding the contract event 0xadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878.
//
// Solidity: event ContentObjectCreated(address contentAddress, address content_type, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentObjectCreated(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentObjectCreated) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentObjectCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentObjectCreated)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentObjectCreated is a log parse operation binding the contract event 0xadc3945407fc9e1f5763b74624698197e96e741e6e7c683373498712ba3eb878.
//
// Solidity: event ContentObjectCreated(address contentAddress, address content_type, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentObjectCreated(log types.Log) (*BaseLibraryContentObjectCreated, error) {
	event := new(BaseLibraryContentObjectCreated)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryContentObjectDeletedIterator is returned from FilterContentObjectDeleted and is used to iterate over the raw logs and unpacked data for ContentObjectDeleted events raised by the BaseLibrary contract.
type BaseLibraryContentObjectDeletedIterator struct {
	Event *BaseLibraryContentObjectDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentObjectDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentObjectDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentObjectDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentObjectDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentObjectDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentObjectDeleted represents a ContentObjectDeleted event raised by the BaseLibrary contract.
type BaseLibraryContentObjectDeleted struct {
	ContentAddress common.Address
	SpaceAddress   common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterContentObjectDeleted is a free log retrieval operation binding the contract event 0x36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e.
//
// Solidity: event ContentObjectDeleted(address contentAddress, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentObjectDeleted(opts *bind.FilterOpts) (*BaseLibraryContentObjectDeletedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentObjectDeleted")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentObjectDeletedIterator{contract: _BaseLibrary.contract, event: "ContentObjectDeleted", logs: logs, sub: sub}, nil
}

// WatchContentObjectDeleted is a free log subscription operation binding the contract event 0x36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e.
//
// Solidity: event ContentObjectDeleted(address contentAddress, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentObjectDeleted(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentObjectDeleted) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentObjectDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentObjectDeleted)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentObjectDeleted is a log parse operation binding the contract event 0x36500cee87b0da1746889a3483dccb525acfc40b8c0f2218e164c6cdf1482a3e.
//
// Solidity: event ContentObjectDeleted(address contentAddress, address spaceAddress)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentObjectDeleted(log types.Log) (*BaseLibraryContentObjectDeleted, error) {
	event := new(BaseLibraryContentObjectDeleted)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentObjectDeleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the BaseLibrary contract.
type BaseLibraryContentTypeAddedIterator struct {
	Event *BaseLibraryContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentTypeAdded represents a ContentTypeAdded event raised by the BaseLibrary contract.
type BaseLibraryContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*BaseLibraryContentTypeAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentTypeAddedIterator{contract: _BaseLibrary.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentTypeAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentTypeAdded(log types.Log) (*BaseLibraryContentTypeAdded, error) {
	event := new(BaseLibraryContentTypeAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the BaseLibrary contract.
type BaseLibraryContentTypeRemovedIterator struct {
	Event *BaseLibraryContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContentTypeRemoved represents a ContentTypeRemoved event raised by the BaseLibrary contract.
type BaseLibraryContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseLibrary *BaseLibraryFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*BaseLibraryContentTypeRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContentTypeRemovedIterator{contract: _BaseLibrary.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseLibrary *BaseLibraryFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContentTypeRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_BaseLibrary *BaseLibraryFilterer) ParseContentTypeRemoved(log types.Log) (*BaseLibraryContentTypeRemoved, error) {
	event := new(BaseLibraryContentTypeRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryContributorGroupAddedIterator is returned from FilterContributorGroupAdded and is used to iterate over the raw logs and unpacked data for ContributorGroupAdded events raised by the BaseLibrary contract.
type BaseLibraryContributorGroupAddedIterator struct {
	Event *BaseLibraryContributorGroupAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContributorGroupAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContributorGroupAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContributorGroupAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContributorGroupAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContributorGroupAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContributorGroupAdded represents a ContributorGroupAdded event raised by the BaseLibrary contract.
type BaseLibraryContributorGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterContributorGroupAdded is a free log retrieval operation binding the contract event 0x218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d61.
//
// Solidity: event ContributorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterContributorGroupAdded(opts *bind.FilterOpts) (*BaseLibraryContributorGroupAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContributorGroupAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContributorGroupAddedIterator{contract: _BaseLibrary.contract, event: "ContributorGroupAdded", logs: logs, sub: sub}, nil
}

// WatchContributorGroupAdded is a free log subscription operation binding the contract event 0x218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d61.
//
// Solidity: event ContributorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchContributorGroupAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryContributorGroupAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContributorGroupAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContributorGroupAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContributorGroupAdded is a log parse operation binding the contract event 0x218673669018c25b89bfbf1b58d0075e37c8847ef16e707b92355b7833e97d61.
//
// Solidity: event ContributorGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseContributorGroupAdded(log types.Log) (*BaseLibraryContributorGroupAdded, error) {
	event := new(BaseLibraryContributorGroupAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryContributorGroupRemovedIterator is returned from FilterContributorGroupRemoved and is used to iterate over the raw logs and unpacked data for ContributorGroupRemoved events raised by the BaseLibrary contract.
type BaseLibraryContributorGroupRemovedIterator struct {
	Event *BaseLibraryContributorGroupRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryContributorGroupRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryContributorGroupRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryContributorGroupRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryContributorGroupRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryContributorGroupRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryContributorGroupRemoved represents a ContributorGroupRemoved event raised by the BaseLibrary contract.
type BaseLibraryContributorGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterContributorGroupRemoved is a free log retrieval operation binding the contract event 0xbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c.
//
// Solidity: event ContributorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterContributorGroupRemoved(opts *bind.FilterOpts) (*BaseLibraryContributorGroupRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ContributorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryContributorGroupRemovedIterator{contract: _BaseLibrary.contract, event: "ContributorGroupRemoved", logs: logs, sub: sub}, nil
}

// WatchContributorGroupRemoved is a free log subscription operation binding the contract event 0xbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c.
//
// Solidity: event ContributorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchContributorGroupRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryContributorGroupRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ContributorGroupRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryContributorGroupRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContributorGroupRemoved is a log parse operation binding the contract event 0xbbd97daa1862eb12f77ed128a557406737cee07b131b1e2d7140dff2005e197c.
//
// Solidity: event ContributorGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseContributorGroupRemoved(log types.Log) (*BaseLibraryContributorGroupRemoved, error) {
	event := new(BaseLibraryContributorGroupRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "ContributorGroupRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryReviewerGroupAddedIterator is returned from FilterReviewerGroupAdded and is used to iterate over the raw logs and unpacked data for ReviewerGroupAdded events raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupAddedIterator struct {
	Event *BaseLibraryReviewerGroupAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryReviewerGroupAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryReviewerGroupAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryReviewerGroupAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryReviewerGroupAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryReviewerGroupAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryReviewerGroupAdded represents a ReviewerGroupAdded event raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupAdded struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterReviewerGroupAdded is a free log retrieval operation binding the contract event 0x1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb.
//
// Solidity: event ReviewerGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterReviewerGroupAdded(opts *bind.FilterOpts) (*BaseLibraryReviewerGroupAddedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ReviewerGroupAdded")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryReviewerGroupAddedIterator{contract: _BaseLibrary.contract, event: "ReviewerGroupAdded", logs: logs, sub: sub}, nil
}

// WatchReviewerGroupAdded is a free log subscription operation binding the contract event 0x1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb.
//
// Solidity: event ReviewerGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchReviewerGroupAdded(opts *bind.WatchOpts, sink chan<- *BaseLibraryReviewerGroupAdded) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ReviewerGroupAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryReviewerGroupAdded)
				if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReviewerGroupAdded is a log parse operation binding the contract event 0x1b88a571cc8ac2e87512f05648e79d184f5cc0cbb2889bc487c41f8b9a3202eb.
//
// Solidity: event ReviewerGroupAdded(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseReviewerGroupAdded(log types.Log) (*BaseLibraryReviewerGroupAdded, error) {
	event := new(BaseLibraryReviewerGroupAdded)
	if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryReviewerGroupRemovedIterator is returned from FilterReviewerGroupRemoved and is used to iterate over the raw logs and unpacked data for ReviewerGroupRemoved events raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupRemovedIterator struct {
	Event *BaseLibraryReviewerGroupRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryReviewerGroupRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryReviewerGroupRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryReviewerGroupRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryReviewerGroupRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryReviewerGroupRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryReviewerGroupRemoved represents a ReviewerGroupRemoved event raised by the BaseLibrary contract.
type BaseLibraryReviewerGroupRemoved struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterReviewerGroupRemoved is a free log retrieval operation binding the contract event 0xdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb.
//
// Solidity: event ReviewerGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) FilterReviewerGroupRemoved(opts *bind.FilterOpts) (*BaseLibraryReviewerGroupRemovedIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "ReviewerGroupRemoved")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryReviewerGroupRemovedIterator{contract: _BaseLibrary.contract, event: "ReviewerGroupRemoved", logs: logs, sub: sub}, nil
}

// WatchReviewerGroupRemoved is a free log subscription operation binding the contract event 0xdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb.
//
// Solidity: event ReviewerGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) WatchReviewerGroupRemoved(opts *bind.WatchOpts, sink chan<- *BaseLibraryReviewerGroupRemoved) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "ReviewerGroupRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryReviewerGroupRemoved)
				if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReviewerGroupRemoved is a log parse operation binding the contract event 0xdf9d78c5635b72b709c85300a786eb7238acbe5bffe01c60c16464e45c6eb6eb.
//
// Solidity: event ReviewerGroupRemoved(address group)
func (_BaseLibrary *BaseLibraryFilterer) ParseReviewerGroupRemoved(log types.Log) (*BaseLibraryReviewerGroupRemoved, error) {
	event := new(BaseLibraryReviewerGroupRemoved)
	if err := _BaseLibrary.contract.UnpackLog(event, "ReviewerGroupRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryUnauthorizedOperationIterator is returned from FilterUnauthorizedOperation and is used to iterate over the raw logs and unpacked data for UnauthorizedOperation events raised by the BaseLibrary contract.
type BaseLibraryUnauthorizedOperationIterator struct {
	Event *BaseLibraryUnauthorizedOperation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryUnauthorizedOperationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryUnauthorizedOperation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryUnauthorizedOperation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryUnauthorizedOperationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryUnauthorizedOperationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryUnauthorizedOperation represents a UnauthorizedOperation event raised by the BaseLibrary contract.
type BaseLibraryUnauthorizedOperation struct {
	OperationCode *big.Int
	Candidate     common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterUnauthorizedOperation is a free log retrieval operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseLibrary *BaseLibraryFilterer) FilterUnauthorizedOperation(opts *bind.FilterOpts) (*BaseLibraryUnauthorizedOperationIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryUnauthorizedOperationIterator{contract: _BaseLibrary.contract, event: "UnauthorizedOperation", logs: logs, sub: sub}, nil
}

// WatchUnauthorizedOperation is a free log subscription operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseLibrary *BaseLibraryFilterer) WatchUnauthorizedOperation(opts *bind.WatchOpts, sink chan<- *BaseLibraryUnauthorizedOperation) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "UnauthorizedOperation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryUnauthorizedOperation)
				if err := _BaseLibrary.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnauthorizedOperation is a log parse operation binding the contract event 0x23de2adc3e22f171f66b3e5a333e17feb9dc30ba9570933bd259cb6c13ef7ab7.
//
// Solidity: event UnauthorizedOperation(uint256 operationCode, address candidate)
func (_BaseLibrary *BaseLibraryFilterer) ParseUnauthorizedOperation(log types.Log) (*BaseLibraryUnauthorizedOperation, error) {
	event := new(BaseLibraryUnauthorizedOperation)
	if err := _BaseLibrary.contract.UnpackLog(event, "UnauthorizedOperation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryUpdateKmsAddressIterator is returned from FilterUpdateKmsAddress and is used to iterate over the raw logs and unpacked data for UpdateKmsAddress events raised by the BaseLibrary contract.
type BaseLibraryUpdateKmsAddressIterator struct {
	Event *BaseLibraryUpdateKmsAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryUpdateKmsAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryUpdateKmsAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryUpdateKmsAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryUpdateKmsAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryUpdateKmsAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryUpdateKmsAddress represents a UpdateKmsAddress event raised by the BaseLibrary contract.
type BaseLibraryUpdateKmsAddress struct {
	AddressKms common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateKmsAddress is a free log retrieval operation binding the contract event 0x74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608.
//
// Solidity: event UpdateKmsAddress(address addressKms)
func (_BaseLibrary *BaseLibraryFilterer) FilterUpdateKmsAddress(opts *bind.FilterOpts) (*BaseLibraryUpdateKmsAddressIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "UpdateKmsAddress")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryUpdateKmsAddressIterator{contract: _BaseLibrary.contract, event: "UpdateKmsAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateKmsAddress is a free log subscription operation binding the contract event 0x74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608.
//
// Solidity: event UpdateKmsAddress(address addressKms)
func (_BaseLibrary *BaseLibraryFilterer) WatchUpdateKmsAddress(opts *bind.WatchOpts, sink chan<- *BaseLibraryUpdateKmsAddress) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "UpdateKmsAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryUpdateKmsAddress)
				if err := _BaseLibrary.contract.UnpackLog(event, "UpdateKmsAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateKmsAddress is a log parse operation binding the contract event 0x74538e2fbd034afddf32b42c5939d211ce86c7683f9768f1a4969746f81f8608.
//
// Solidity: event UpdateKmsAddress(address addressKms)
func (_BaseLibrary *BaseLibraryFilterer) ParseUpdateKmsAddress(log types.Log) (*BaseLibraryUpdateKmsAddress, error) {
	event := new(BaseLibraryUpdateKmsAddress)
	if err := _BaseLibrary.contract.UnpackLog(event, "UpdateKmsAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the BaseLibrary contract.
type BaseLibraryUpdateRequestIterator struct {
	Event *BaseLibraryUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryUpdateRequest represents a UpdateRequest event raised by the BaseLibrary contract.
type BaseLibraryUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*BaseLibraryUpdateRequestIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryUpdateRequestIterator{contract: _BaseLibrary.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *BaseLibraryUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryUpdateRequest)
				if err := _BaseLibrary.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) ParseUpdateRequest(log types.Log) (*BaseLibraryUpdateRequest, error) {
	event := new(BaseLibraryUpdateRequest)
	if err := _BaseLibrary.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the BaseLibrary contract.
type BaseLibraryVersionConfirmIterator struct {
	Event *BaseLibraryVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryVersionConfirm represents a VersionConfirm event raised by the BaseLibrary contract.
type BaseLibraryVersionConfirm struct {
	SpaceAddress common.Address
	ObjectHash   string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*BaseLibraryVersionConfirmIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryVersionConfirmIterator{contract: _BaseLibrary.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *BaseLibraryVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryVersionConfirm)
				if err := _BaseLibrary.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_BaseLibrary *BaseLibraryFilterer) ParseVersionConfirm(log types.Log) (*BaseLibraryVersionConfirm, error) {
	event := new(BaseLibraryVersionConfirm)
	if err := _BaseLibrary.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the BaseLibrary contract.
type BaseLibraryVersionDeleteIterator struct {
	Event *BaseLibraryVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseLibraryVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseLibraryVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseLibraryVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseLibraryVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseLibraryVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseLibraryVersionDelete represents a VersionDelete event raised by the BaseLibrary contract.
type BaseLibraryVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseLibrary *BaseLibraryFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*BaseLibraryVersionDeleteIterator, error) {

	logs, sub, err := _BaseLibrary.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &BaseLibraryVersionDeleteIterator{contract: _BaseLibrary.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseLibrary *BaseLibraryFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *BaseLibraryVersionDelete) (event.Subscription, error) {

	logs, sub, err := _BaseLibrary.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseLibraryVersionDelete)
				if err := _BaseLibrary.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_BaseLibrary *BaseLibraryFilterer) ParseVersionDelete(log types.Log) (*BaseLibraryVersionDelete, error) {
	event := new(BaseLibraryVersionDelete)
	if err := _BaseLibrary.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BaseLibraryFactoryMetaData contains all meta data concerning the BaseLibraryFactory contract.
var BaseLibraryFactoryMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"createLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
	Sigs: map[string]string{
		"af570c04": "contentSpace()",
		"40b89f06": "createLibrary(address)",
		"02d05d3f": "creator()",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
	},
	Bin: "",
}

// BaseLibraryFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseLibraryFactoryMetaData.ABI instead.
var BaseLibraryFactoryABI = BaseLibraryFactoryMetaData.ABI

// Deprecated: Use BaseLibraryFactoryMetaData.Sigs instead.
// BaseLibraryFactoryFuncSigs maps the 4-byte function signature to its string representation.
var BaseLibraryFactoryFuncSigs = BaseLibraryFactoryMetaData.Sigs

// BaseLibraryFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BaseLibraryFactoryMetaData.Bin instead.
var BaseLibraryFactoryBin = BaseLibraryFactoryMetaData.Bin

// DeployBaseLibraryFactory deploys a new Ethereum contract, binding an instance of BaseLibraryFactory to it.
func DeployBaseLibraryFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BaseLibraryFactory, error) {
	parsed, err := ParsedABI(K_BaseLibraryFactory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BaseLibraryFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BaseLibraryFactory{BaseLibraryFactoryCaller: BaseLibraryFactoryCaller{contract: contract}, BaseLibraryFactoryTransactor: BaseLibraryFactoryTransactor{contract: contract}, BaseLibraryFactoryFilterer: BaseLibraryFactoryFilterer{contract: contract}}, nil
}

// BaseLibraryFactory is an auto generated Go binding around an Ethereum contract.
type BaseLibraryFactory struct {
	BaseLibraryFactoryCaller     // Read-only binding to the contract
	BaseLibraryFactoryTransactor // Write-only binding to the contract
	BaseLibraryFactoryFilterer   // Log filterer for contract events
}

// BaseLibraryFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseLibraryFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseLibraryFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseLibraryFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseLibraryFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewBaseLibraryFactory creates a new instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactory(address common.Address, backend bind.ContractBackend) (*BaseLibraryFactory, error) {
	contract, err := bindBaseLibraryFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactory{BaseLibraryFactoryCaller: BaseLibraryFactoryCaller{contract: contract}, BaseLibraryFactoryTransactor: BaseLibraryFactoryTransactor{contract: contract}, BaseLibraryFactoryFilterer: BaseLibraryFactoryFilterer{contract: contract}}, nil
}

// NewBaseLibraryFactoryCaller creates a new read-only instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseLibraryFactoryCaller, error) {
	contract, err := bindBaseLibraryFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactoryCaller{contract: contract}, nil
}

// NewBaseLibraryFactoryTransactor creates a new write-only instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseLibraryFactoryTransactor, error) {
	contract, err := bindBaseLibraryFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactoryTransactor{contract: contract}, nil
}

// NewBaseLibraryFactoryFilterer creates a new log filterer instance of BaseLibraryFactory, bound to a specific deployed contract.
func NewBaseLibraryFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseLibraryFactoryFilterer, error) {
	contract, err := bindBaseLibraryFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseLibraryFactoryFilterer{contract: contract}, nil
}

// bindBaseLibraryFactory binds a generic wrapper to an already deployed contract.
func bindBaseLibraryFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_BaseLibraryFactory)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseLibraryFactory.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseLibraryFactory.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseLibraryFactory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_BaseLibraryFactory *BaseLibraryFactoryCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BaseLibraryFactory.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) CreateLibrary(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "createLibrary", address_KMS)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "kill")
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_BaseLibraryFactory *BaseLibraryFactoryTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _BaseLibraryFactory.contract.RawTransact(opts, calldata)
}

// ContainerMetaData contains all meta data concerning the Container contract.
var ContainerMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canContribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"},{\"name\":\"content_contract\",\"type\":\"address\"}],\"name\":\"addContentType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contentTypeContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"typeHash\",\"type\":\"bytes32\"}],\"name\":\"findTypeByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"validType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contentObj\",\"type\":\"address\"}],\"name\":\"publish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressKMS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiresReview\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"canPublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"whitelistedType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"setAddressKMS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"removeContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contentContract\",\"type\":\"address\"}],\"name\":\"ContentTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contentType\",\"type\":\"address\"}],\"name\":\"ContentTypeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"0f58a786": "addContentType(address,address)",
		"32eaf21b": "addressKMS()",
		"6e375427": "canCommit()",
		"14cfabb3": "canConfirm()",
		"0eaec2c5": "canContribute(address)",
		"81beeb64": "canEdit()",
		"9b55f901": "canPublish(address)",
		"29d00219": "canReview(address)",
		"5f6a1301": "clearPending()",
		"9867db74": "commit(string)",
		"375a6e7c": "commitPending()",
		"446e8826": "confirmCommit()",
		"af570c04": "contentSpace()",
		"1cdbee5a": "contentTypeContracts(address)",
		"991a3a7c": "contentTypes(uint256)",
		"c65bcbe2": "contentTypesLength()",
		"331b86c0": "countVersionHashes()",
		"02d05d3f": "creator()",
		"e1a70717": "deleteVersion(string)",
		"1f2caaec": "findTypeByHash(bytes32)",
		"95a078e8": "hasAccess(address)",
		"41c0e1b5": "kill()",
		"e02dd9c2": "objectHash()",
		"8da5cb5b": "owner()",
		"00821de3": "parentAddress()",
		"628449fd": "pendingHash()",
		"2cf99422": "publish(address)",
		"fd089196": "removeContentType(address)",
		"3dd71d99": "requiresReview()",
		"c9e8e72d": "setAddressKMS(address)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"c287e0ed": "updateRequest()",
		"29dedde5": "validType(address)",
		"54fd4d50": "version()",
		"7ca8f618": "versionHashes(uint256)",
		"7886f747": "versionTimestamp(uint256)",
		"9cb121ba": "whitelistedType(address)",
	},
	Bin: "",
}

// ContainerABI is the input ABI used to generate the binding from.
// Deprecated: Use ContainerMetaData.ABI instead.
var ContainerABI = ContainerMetaData.ABI

// Deprecated: Use ContainerMetaData.Sigs instead.
// ContainerFuncSigs maps the 4-byte function signature to its string representation.
var ContainerFuncSigs = ContainerMetaData.Sigs

// ContainerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContainerMetaData.Bin instead.
var ContainerBin = ContainerMetaData.Bin

// DeployContainer deploys a new Ethereum contract, binding an instance of Container to it.
func DeployContainer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Container, error) {
	parsed, err := ParsedABI(K_Container)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContainerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Container{ContainerCaller: ContainerCaller{contract: contract}, ContainerTransactor: ContainerTransactor{contract: contract}, ContainerFilterer: ContainerFilterer{contract: contract}}, nil
}

// Container is an auto generated Go binding around an Ethereum contract.
type Container struct {
	ContainerCaller     // Read-only binding to the contract
	ContainerTransactor // Write-only binding to the contract
	ContainerFilterer   // Log filterer for contract events
}

// ContainerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContainerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContainerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContainerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContainerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContainerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewContainer creates a new instance of Container, bound to a specific deployed contract.
func NewContainer(address common.Address, backend bind.ContractBackend) (*Container, error) {
	contract, err := bindContainer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Container{ContainerCaller: ContainerCaller{contract: contract}, ContainerTransactor: ContainerTransactor{contract: contract}, ContainerFilterer: ContainerFilterer{contract: contract}}, nil
}

// NewContainerCaller creates a new read-only instance of Container, bound to a specific deployed contract.
func NewContainerCaller(address common.Address, caller bind.ContractCaller) (*ContainerCaller, error) {
	contract, err := bindContainer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContainerCaller{contract: contract}, nil
}

// NewContainerTransactor creates a new write-only instance of Container, bound to a specific deployed contract.
func NewContainerTransactor(address common.Address, transactor bind.ContractTransactor) (*ContainerTransactor, error) {
	contract, err := bindContainer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContainerTransactor{contract: contract}, nil
}

// NewContainerFilterer creates a new log filterer instance of Container, bound to a specific deployed contract.
func NewContainerFilterer(address common.Address, filterer bind.ContractFilterer) (*ContainerFilterer, error) {
	contract, err := bindContainer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContainerFilterer{contract: contract}, nil
}

// bindContainer binds a generic wrapper to an already deployed contract.
func bindContainer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Container)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// AddressKMS is a free data retrieval call binding the contract method 0x32eaf21b.
//
// Solidity: function addressKMS() view returns(address)
func (_Container *ContainerCaller) AddressKMS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "addressKMS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() view returns(bool)
func (_Container *ContainerCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "canCommit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() view returns(bool)
func (_Container *ContainerCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "canConfirm")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanContribute is a free data retrieval call binding the contract method 0x0eaec2c5.
//
// Solidity: function canContribute(address _candidate) view returns(bool)
func (_Container *ContainerCaller) CanContribute(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "canContribute", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() view returns(bool)
func (_Container *ContainerCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "canEdit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanPublish is a free data retrieval call binding the contract method 0x9b55f901.
//
// Solidity: function canPublish(address _candidate) view returns(bool)
func (_Container *ContainerCaller) CanPublish(opts *bind.CallOpts, _candidate common.Address) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "canPublish", _candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanReview is a free data retrieval call binding the contract method 0x29d00219.
//
// Solidity: function canReview(address ) view returns(bool)
func (_Container *ContainerCaller) CanReview(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "canReview", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() view returns(bool)
func (_Container *ContainerCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "commitPending")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_Container *ContainerCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypeContracts is a free data retrieval call binding the contract method 0x1cdbee5a.
//
// Solidity: function contentTypeContracts(address ) view returns(address)
func (_Container *ContainerCaller) ContentTypeContracts(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "contentTypeContracts", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypes is a free data retrieval call binding the contract method 0x991a3a7c.
//
// Solidity: function contentTypes(uint256 ) view returns(address)
func (_Container *ContainerCaller) ContentTypes(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "contentTypes", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentTypesLength is a free data retrieval call binding the contract method 0xc65bcbe2.
//
// Solidity: function contentTypesLength() view returns(uint256)
func (_Container *ContainerCaller) ContentTypesLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "contentTypesLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() view returns(uint256)
func (_Container *ContainerCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "countVersionHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_Container *ContainerCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FindTypeByHash is a free data retrieval call binding the contract method 0x1f2caaec.
//
// Solidity: function findTypeByHash(bytes32 typeHash) view returns(address)
func (_Container *ContainerCaller) FindTypeByHash(opts *bind.CallOpts, typeHash [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "findTypeByHash", typeHash)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// HasAccess is a free data retrieval call binding the contract method 0x95a078e8.
//
// Solidity: function hasAccess(address ) view returns(bool)
func (_Container *ContainerCaller) HasAccess(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "hasAccess", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() view returns(string)
func (_Container *ContainerCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "objectHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Container *ContainerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_Container *ContainerCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "parentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() view returns(string)
func (_Container *ContainerCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "pendingHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// RequiresReview is a free data retrieval call binding the contract method 0x3dd71d99.
//
// Solidity: function requiresReview() view returns(bool)
func (_Container *ContainerCaller) RequiresReview(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "requiresReview")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ValidType is a free data retrieval call binding the contract method 0x29dedde5.
//
// Solidity: function validType(address content_type) view returns(bool)
func (_Container *ContainerCaller) ValidType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "validType", content_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_Container *ContainerCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) view returns(string)
func (_Container *ContainerCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "versionHashes", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) view returns(uint256)
func (_Container *ContainerCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "versionTimestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WhitelistedType is a free data retrieval call binding the contract method 0x9cb121ba.
//
// Solidity: function whitelistedType(address content_type) view returns(bool)
func (_Container *ContainerCaller) WhitelistedType(opts *bind.CallOpts, content_type common.Address) (bool, error) {
	var out []interface{}
	err := _Container.contract.Call(opts, &out, "whitelistedType", content_type)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AddContentType is a paid mutator transaction binding the contract method 0x0f58a786.
//
// Solidity: function addContentType(address content_type, address content_contract) returns()
func (_Container *ContainerTransactor) AddContentType(opts *bind.TransactOpts, content_type common.Address, content_contract common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "addContentType", content_type, content_contract)
}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Container *ContainerTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "clearPending")
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Container *ContainerTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "commit", _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() payable returns(bool)
func (_Container *ContainerTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "confirmCommit")
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Container *ContainerTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "deleteVersion", _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Container *ContainerTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "kill")
}

// Publish is a paid mutator transaction binding the contract method 0x2cf99422.
//
// Solidity: function publish(address contentObj) returns(bool)
func (_Container *ContainerTransactor) Publish(opts *bind.TransactOpts, contentObj common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "publish", contentObj)
}

// RemoveContentType is a paid mutator transaction binding the contract method 0xfd089196.
//
// Solidity: function removeContentType(address content_type) returns(bool)
func (_Container *ContainerTransactor) RemoveContentType(opts *bind.TransactOpts, content_type common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "removeContentType", content_type)
}

// SetAddressKMS is a paid mutator transaction binding the contract method 0xc9e8e72d.
//
// Solidity: function setAddressKMS(address address_KMS) returns()
func (_Container *ContainerTransactor) SetAddressKMS(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "setAddressKMS", address_KMS)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Container *ContainerTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Container *ContainerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "transferOwnership", newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Container *ContainerTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Container.contract.Transact(opts, "updateRequest")
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Container *ContainerTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Container.contract.RawTransact(opts, calldata)
}

// ContainerCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the Container contract.
type ContainerCommitPendingIterator struct {
	Event *ContainerCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerCommitPending represents a CommitPending event raised by the Container contract.
type ContainerCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) FilterCommitPending(opts *bind.FilterOpts) (*ContainerCommitPendingIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &ContainerCommitPendingIterator{contract: _Container.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *ContainerCommitPending) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerCommitPending)
				if err := _Container.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Container *ContainerFilterer) ParseCommitPending(log types.Log) (*ContainerCommitPending, error) {
	event := new(ContainerCommitPending)
	if err := _Container.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContainerContentTypeAddedIterator is returned from FilterContentTypeAdded and is used to iterate over the raw logs and unpacked data for ContentTypeAdded events raised by the Container contract.
type ContainerContentTypeAddedIterator struct {
	Event *ContainerContentTypeAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerContentTypeAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerContentTypeAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerContentTypeAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerContentTypeAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerContentTypeAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerContentTypeAdded represents a ContentTypeAdded event raised by the Container contract.
type ContainerContentTypeAdded struct {
	ContentType     common.Address
	ContentContract common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterContentTypeAdded is a free log retrieval operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_Container *ContainerFilterer) FilterContentTypeAdded(opts *bind.FilterOpts) (*ContainerContentTypeAddedIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return &ContainerContentTypeAddedIterator{contract: _Container.contract, event: "ContentTypeAdded", logs: logs, sub: sub}, nil
}

// WatchContentTypeAdded is a free log subscription operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_Container *ContainerFilterer) WatchContentTypeAdded(opts *bind.WatchOpts, sink chan<- *ContainerContentTypeAdded) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "ContentTypeAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerContentTypeAdded)
				if err := _Container.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeAdded is a log parse operation binding the contract event 0x280016f7418306a55542432120fd1a239ef9fcc1a92694d8d44ca76be0249ea7.
//
// Solidity: event ContentTypeAdded(address contentType, address contentContract)
func (_Container *ContainerFilterer) ParseContentTypeAdded(log types.Log) (*ContainerContentTypeAdded, error) {
	event := new(ContainerContentTypeAdded)
	if err := _Container.contract.UnpackLog(event, "ContentTypeAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContainerContentTypeRemovedIterator is returned from FilterContentTypeRemoved and is used to iterate over the raw logs and unpacked data for ContentTypeRemoved events raised by the Container contract.
type ContainerContentTypeRemovedIterator struct {
	Event *ContainerContentTypeRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerContentTypeRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerContentTypeRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerContentTypeRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerContentTypeRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerContentTypeRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerContentTypeRemoved represents a ContentTypeRemoved event raised by the Container contract.
type ContainerContentTypeRemoved struct {
	ContentType common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterContentTypeRemoved is a free log retrieval operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_Container *ContainerFilterer) FilterContentTypeRemoved(opts *bind.FilterOpts) (*ContainerContentTypeRemovedIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return &ContainerContentTypeRemovedIterator{contract: _Container.contract, event: "ContentTypeRemoved", logs: logs, sub: sub}, nil
}

// WatchContentTypeRemoved is a free log subscription operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_Container *ContainerFilterer) WatchContentTypeRemoved(opts *bind.WatchOpts, sink chan<- *ContainerContentTypeRemoved) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "ContentTypeRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerContentTypeRemoved)
				if err := _Container.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContentTypeRemoved is a log parse operation binding the contract event 0xd41375b9d347dfe722f90a780731abd23b7855f9cf14ea7063c4cab5f9ae58e2.
//
// Solidity: event ContentTypeRemoved(address contentType)
func (_Container *ContainerFilterer) ParseContentTypeRemoved(log types.Log) (*ContainerContentTypeRemoved, error) {
	event := new(ContainerContentTypeRemoved)
	if err := _Container.contract.UnpackLog(event, "ContentTypeRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContainerUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the Container contract.
type ContainerUpdateRequestIterator struct {
	Event *ContainerUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerUpdateRequest represents a UpdateRequest event raised by the Container contract.
type ContainerUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Container *ContainerFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*ContainerUpdateRequestIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &ContainerUpdateRequestIterator{contract: _Container.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Container *ContainerFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *ContainerUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerUpdateRequest)
				if err := _Container.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Container *ContainerFilterer) ParseUpdateRequest(log types.Log) (*ContainerUpdateRequest, error) {
	event := new(ContainerUpdateRequest)
	if err := _Container.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContainerVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the Container contract.
type ContainerVersionConfirmIterator struct {
	Event *ContainerVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerVersionConfirm represents a VersionConfirm event raised by the Container contract.
type ContainerVersionConfirm struct {
	SpaceAddress common.Address
	ObjectHash   string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_Container *ContainerFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*ContainerVersionConfirmIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &ContainerVersionConfirmIterator{contract: _Container.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_Container *ContainerFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *ContainerVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerVersionConfirm)
				if err := _Container.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_Container *ContainerFilterer) ParseVersionConfirm(log types.Log) (*ContainerVersionConfirm, error) {
	event := new(ContainerVersionConfirm)
	if err := _Container.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContainerVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the Container contract.
type ContainerVersionDeleteIterator struct {
	Event *ContainerVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContainerVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContainerVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContainerVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContainerVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContainerVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContainerVersionDelete represents a VersionDelete event raised by the Container contract.
type ContainerVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Container *ContainerFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*ContainerVersionDeleteIterator, error) {

	logs, sub, err := _Container.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &ContainerVersionDeleteIterator{contract: _Container.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Container *ContainerFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *ContainerVersionDelete) (event.Subscription, error) {

	logs, sub, err := _Container.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContainerVersionDelete)
				if err := _Container.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Container *ContainerFilterer) ParseVersionDelete(log types.Log) (*ContainerVersionDelete, error) {
	event := new(ContainerVersionDelete)
	if err := _Container.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentMetaData contains all meta data concerning the Content contract.
var ContentMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"runAccessInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"runAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"runFinalize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposed_status_code\",\"type\":\"int256\"}],\"name\":\"runStatusChange\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"name\":\"runDescribeStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runCreate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runKill\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"name\":\"runGrant\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestID\",\"type\":\"uint256\"},{\"name\":\"score_pct\",\"type\":\"uint256\"},{\"name\":\"originator\",\"type\":\"address\"}],\"name\":\"runFinalizeExt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_CHARGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"LogBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"uint256\"}],\"name\":\"LogUint256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"int256\"}],\"name\":\"LogInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunKill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposedStatusCode\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"returnStatusCode\",\"type\":\"int256\"}],\"name\":\"RunStatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"calculateAccessCharge\",\"type\":\"int256\"}],\"name\":\"RunAccessCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunFinalize\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"6af27417": "DEFAULT_ACCESS()",
		"f185db0c": "DEFAULT_CHARGE()",
		"b535b03e": "DEFAULT_SEE()",
		"af570c04": "contentSpace()",
		"02d05d3f": "creator()",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"123e0e80": "runAccess(uint256,uint8,bytes32[],address[])",
		"0f82c16f": "runAccessInfo(uint8,bytes32[],address[])",
		"7b1cdb3e": "runCreate()",
		"45080442": "runDescribeStatus(int256)",
		"c9f3d94c": "runEdit()",
		"17685953": "runFinalize(uint256,uint256)",
		"eb81eff0": "runFinalizeExt(uint256,uint256,address)",
		"e870ed91": "runGrant(uint256,bool)",
		"9e99bbea": "runKill()",
		"3513a805": "runStatusChange(int256)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
	},
	Bin: "0x60806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f436f6e74656e7432303139313231393133343330304d4c00000000000000000060045560018054600160a060020a0319908116329081179092556002805490911690911790556105bf8061007e6000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f81146101135780630f82c16f14610144578063123e0e801461020957806317685953146102a85780633513a805146102b657806341c0e1b5146102c157806345080442146102d657806354fd4d50146102ee5780636af27417146103035780636d2e4b1b1461032e5780637b1cdb3e1461034f5780638da5cb5b146103575780639e99bbea1461034f578063af570c041461036c578063b535b03e14610381578063c9f3d94c14610396578063e870ed91146103ab578063eb81eff0146103bb578063f185db0c146103d5578063f2fde38b146103ea575b005b34801561011f57600080fd5b5061012861040b565b60408051600160a060020a039092168252519081900360200190f35b34801561015057600080fd5b506040805160206004602480358281013584810280870186019097528086526101da96843560ff1696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061041a9650505050505050565b6040805160ff958616815293851660208501529190931682820152606082019290925290519081900360800190f35b6040805160206004604435818101358381028086018501909652808552610296958335956024803560ff1696369695606495939492019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506104299650505050505050565b60408051918252519081900360200190f35b610296600435602435610433565b61029660043561043b565b3480156102cd57600080fd5b5061011161043e565b3480156102e257600080fd5b5061029660043561047a565b3480156102fa57600080fd5b50610296610480565b34801561030f57600080fd5b50610318610486565b6040805160ff9092168252519081900360200190f35b34801561033a57600080fd5b50610111600160a060020a036004351661048b565b6102966104e6565b34801561036357600080fd5b506101286104eb565b34801561037857600080fd5b506101286104fa565b34801561038d57600080fd5b50610318610509565b3480156103a257600080fd5b5061029661050e565b6102966004356024351515610433565b610296600435602435600160a060020a0360443516610513565b3480156103e157600080fd5b5061031861051c565b3480156103f657600080fd5b50610111600160a060020a0360043516610521565b600154600160a060020a031681565b60076000808093509350935093565b6000949350505050565b600092915050565b90565b600254600160a060020a03163214806104615750600254600160a060020a031633145b151561046c57600080fd5b600254600160a060020a0316ff5b50600090565b60045481565b600281565b600154600160a060020a031632146104a257600080fd5b600160a060020a03811615156104b757600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600090565b600254600160a060020a031681565b600354600160a060020a031681565b600181565b606490565b60009392505050565b600481565b600254600160a060020a03163214806105445750600254600160a060020a031633145b151561054f57600080fd5b600160a060020a038116151561056457600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a7230582000d5247629a72a32fce7d5f24f95e29af03a80265f584954c4bb56e3a03661b40029",
}

// ContentABI is the input ABI used to generate the binding from.
// Deprecated: Use ContentMetaData.ABI instead.
var ContentABI = ContentMetaData.ABI

// Deprecated: Use ContentMetaData.Sigs instead.
// ContentFuncSigs maps the 4-byte function signature to its string representation.
var ContentFuncSigs = ContentMetaData.Sigs

// ContentBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContentMetaData.Bin instead.
var ContentBin = ContentMetaData.Bin

// DeployContent deploys a new Ethereum contract, binding an instance of Content to it.
func DeployContent(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Content, error) {
	parsed, err := ParsedABI(K_Content)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContentBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Content{ContentCaller: ContentCaller{contract: contract}, ContentTransactor: ContentTransactor{contract: contract}, ContentFilterer: ContentFilterer{contract: contract}}, nil
}

// Content is an auto generated Go binding around an Ethereum contract.
type Content struct {
	ContentCaller     // Read-only binding to the contract
	ContentTransactor // Write-only binding to the contract
	ContentFilterer   // Log filterer for contract events
}

// ContentCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContentCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContentTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContentTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContentFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContentFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewContent creates a new instance of Content, bound to a specific deployed contract.
func NewContent(address common.Address, backend bind.ContractBackend) (*Content, error) {
	contract, err := bindContent(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Content{ContentCaller: ContentCaller{contract: contract}, ContentTransactor: ContentTransactor{contract: contract}, ContentFilterer: ContentFilterer{contract: contract}}, nil
}

// NewContentCaller creates a new read-only instance of Content, bound to a specific deployed contract.
func NewContentCaller(address common.Address, caller bind.ContractCaller) (*ContentCaller, error) {
	contract, err := bindContent(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContentCaller{contract: contract}, nil
}

// NewContentTransactor creates a new write-only instance of Content, bound to a specific deployed contract.
func NewContentTransactor(address common.Address, transactor bind.ContractTransactor) (*ContentTransactor, error) {
	contract, err := bindContent(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContentTransactor{contract: contract}, nil
}

// NewContentFilterer creates a new log filterer instance of Content, bound to a specific deployed contract.
func NewContentFilterer(address common.Address, filterer bind.ContractFilterer) (*ContentFilterer, error) {
	contract, err := bindContent(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContentFilterer{contract: contract}, nil
}

// bindContent binds a generic wrapper to an already deployed contract.
func bindContent(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Content)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() view returns(uint8)
func (_Content *ContentCaller) DEFAULTACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Content.contract.Call(opts, &out, "DEFAULT_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() view returns(uint8)
func (_Content *ContentCaller) DEFAULTCHARGE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Content.contract.Call(opts, &out, "DEFAULT_CHARGE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() view returns(uint8)
func (_Content *ContentCaller) DEFAULTSEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Content.contract.Call(opts, &out, "DEFAULT_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_Content *ContentCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Content.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_Content *ContentCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Content.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Content *ContentCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Content.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RunAccessInfo is a free data retrieval call binding the contract method 0x0f82c16f.
//
// Solidity: function runAccessInfo(uint8 , bytes32[] , address[] ) view returns(uint8, uint8, uint8, uint256)
func (_Content *ContentCaller) RunAccessInfo(opts *bind.CallOpts, arg0 uint8, arg1 [][32]byte, arg2 []common.Address) (uint8, uint8, uint8, *big.Int, error) {
	var out []interface{}
	err := _Content.contract.Call(opts, &out, "runAccessInfo", arg0, arg1, arg2)

	if err != nil {
		return *new(uint8), *new(uint8), *new(uint8), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)
	out2 := *abi.ConvertType(out[2], new(uint8)).(*uint8)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, err

}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) pure returns(bytes32)
func (_Content *ContentCaller) RunDescribeStatus(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Content.contract.Call(opts, &out, "runDescribeStatus", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_Content *ContentCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Content.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Content *ContentTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "kill")
}

// RunAccess is a paid mutator transaction binding the contract method 0x123e0e80.
//
// Solidity: function runAccess(uint256 , uint8 , bytes32[] , address[] ) payable returns(uint256)
func (_Content *ContentTransactor) RunAccess(opts *bind.TransactOpts, arg0 *big.Int, arg1 uint8, arg2 [][32]byte, arg3 []common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runAccess", arg0, arg1, arg2, arg3)
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() payable returns(uint256)
func (_Content *ContentTransactor) RunCreate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runCreate")
}

// RunEdit is a paid mutator transaction binding the contract method 0xc9f3d94c.
//
// Solidity: function runEdit() returns(uint256)
func (_Content *ContentTransactor) RunEdit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runEdit")
}

// RunFinalize is a paid mutator transaction binding the contract method 0x17685953.
//
// Solidity: function runFinalize(uint256 , uint256 ) payable returns(uint256)
func (_Content *ContentTransactor) RunFinalize(opts *bind.TransactOpts, arg0 *big.Int, arg1 *big.Int) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runFinalize", arg0, arg1)
}

// RunFinalizeExt is a paid mutator transaction binding the contract method 0xeb81eff0.
//
// Solidity: function runFinalizeExt(uint256 requestID, uint256 score_pct, address originator) payable returns(uint256)
func (_Content *ContentTransactor) RunFinalizeExt(opts *bind.TransactOpts, requestID *big.Int, score_pct *big.Int, originator common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runFinalizeExt", requestID, score_pct, originator)
}

// RunGrant is a paid mutator transaction binding the contract method 0xe870ed91.
//
// Solidity: function runGrant(uint256 , bool ) payable returns(uint256)
func (_Content *ContentTransactor) RunGrant(opts *bind.TransactOpts, arg0 *big.Int, arg1 bool) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runGrant", arg0, arg1)
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() payable returns(uint256)
func (_Content *ContentTransactor) RunKill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runKill")
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) payable returns(int256)
func (_Content *ContentTransactor) RunStatusChange(opts *bind.TransactOpts, proposed_status_code *big.Int) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "runStatusChange", proposed_status_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Content *ContentTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Content *ContentTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Content.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Content *ContentTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Content.contract.RawTransact(opts, calldata)
}

// ContentLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the Content contract.
type ContentLogIterator struct {
	Event *ContentLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLog represents a Log event raised by the Content contract.
type ContentLog struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Content *ContentFilterer) FilterLog(opts *bind.FilterOpts) (*ContentLogIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return &ContentLogIterator{contract: _Content.contract, event: "Log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Content *ContentFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *ContentLog) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLog)
				if err := _Content.contract.UnpackLog(event, "Log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Content *ContentFilterer) ParseLog(log types.Log) (*ContentLog, error) {
	event := new(ContentLog)
	if err := _Content.contract.UnpackLog(event, "Log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the Content contract.
type ContentLogAddressIterator struct {
	Event *ContentLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogAddress represents a LogAddress event raised by the Content contract.
type ContentLogAddress struct {
	Label string
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Content *ContentFilterer) FilterLogAddress(opts *bind.FilterOpts) (*ContentLogAddressIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return &ContentLogAddressIterator{contract: _Content.contract, event: "LogAddress", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Content *ContentFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *ContentLogAddress) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogAddress)
				if err := _Content.contract.UnpackLog(event, "LogAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Content *ContentFilterer) ParseLogAddress(log types.Log) (*ContentLogAddress, error) {
	event := new(ContentLogAddress)
	if err := _Content.contract.UnpackLog(event, "LogAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentLogBoolIterator is returned from FilterLogBool and is used to iterate over the raw logs and unpacked data for LogBool events raised by the Content contract.
type ContentLogBoolIterator struct {
	Event *ContentLogBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogBool represents a LogBool event raised by the Content contract.
type ContentLogBool struct {
	Label string
	B     bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBool is a free log retrieval operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Content *ContentFilterer) FilterLogBool(opts *bind.FilterOpts) (*ContentLogBoolIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return &ContentLogBoolIterator{contract: _Content.contract, event: "LogBool", logs: logs, sub: sub}, nil
}

// WatchLogBool is a free log subscription operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Content *ContentFilterer) WatchLogBool(opts *bind.WatchOpts, sink chan<- *ContentLogBool) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogBool)
				if err := _Content.contract.UnpackLog(event, "LogBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBool is a log parse operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Content *ContentFilterer) ParseLogBool(log types.Log) (*ContentLogBool, error) {
	event := new(ContentLogBool)
	if err := _Content.contract.UnpackLog(event, "LogBool", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the Content contract.
type ContentLogBytes32Iterator struct {
	Event *ContentLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogBytes32 represents a LogBytes32 event raised by the Content contract.
type ContentLogBytes32 struct {
	Label string
	B     [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Content *ContentFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*ContentLogBytes32Iterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return &ContentLogBytes32Iterator{contract: _Content.contract, event: "LogBytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Content *ContentFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *ContentLogBytes32) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogBytes32)
				if err := _Content.contract.UnpackLog(event, "LogBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Content *ContentFilterer) ParseLogBytes32(log types.Log) (*ContentLogBytes32, error) {
	event := new(ContentLogBytes32)
	if err := _Content.contract.UnpackLog(event, "LogBytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentLogInt256Iterator is returned from FilterLogInt256 and is used to iterate over the raw logs and unpacked data for LogInt256 events raised by the Content contract.
type ContentLogInt256Iterator struct {
	Event *ContentLogInt256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogInt256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogInt256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogInt256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogInt256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogInt256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogInt256 represents a LogInt256 event raised by the Content contract.
type ContentLogInt256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogInt256 is a free log retrieval operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Content *ContentFilterer) FilterLogInt256(opts *bind.FilterOpts) (*ContentLogInt256Iterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return &ContentLogInt256Iterator{contract: _Content.contract, event: "LogInt256", logs: logs, sub: sub}, nil
}

// WatchLogInt256 is a free log subscription operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Content *ContentFilterer) WatchLogInt256(opts *bind.WatchOpts, sink chan<- *ContentLogInt256) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogInt256)
				if err := _Content.contract.UnpackLog(event, "LogInt256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt256 is a log parse operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Content *ContentFilterer) ParseLogInt256(log types.Log) (*ContentLogInt256, error) {
	event := new(ContentLogInt256)
	if err := _Content.contract.UnpackLog(event, "LogInt256", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentLogPaymentIterator is returned from FilterLogPayment and is used to iterate over the raw logs and unpacked data for LogPayment events raised by the Content contract.
type ContentLogPaymentIterator struct {
	Event *ContentLogPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogPayment represents a LogPayment event raised by the Content contract.
type ContentLogPayment struct {
	Label  string
	Payee  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogPayment is a free log retrieval operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_Content *ContentFilterer) FilterLogPayment(opts *bind.FilterOpts) (*ContentLogPaymentIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return &ContentLogPaymentIterator{contract: _Content.contract, event: "LogPayment", logs: logs, sub: sub}, nil
}

// WatchLogPayment is a free log subscription operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_Content *ContentFilterer) WatchLogPayment(opts *bind.WatchOpts, sink chan<- *ContentLogPayment) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogPayment)
				if err := _Content.contract.UnpackLog(event, "LogPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogPayment is a log parse operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_Content *ContentFilterer) ParseLogPayment(log types.Log) (*ContentLogPayment, error) {
	event := new(ContentLogPayment)
	if err := _Content.contract.UnpackLog(event, "LogPayment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentLogUint256Iterator is returned from FilterLogUint256 and is used to iterate over the raw logs and unpacked data for LogUint256 events raised by the Content contract.
type ContentLogUint256Iterator struct {
	Event *ContentLogUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentLogUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentLogUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentLogUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentLogUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentLogUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentLogUint256 represents a LogUint256 event raised by the Content contract.
type ContentLogUint256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogUint256 is a free log retrieval operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Content *ContentFilterer) FilterLogUint256(opts *bind.FilterOpts) (*ContentLogUint256Iterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return &ContentLogUint256Iterator{contract: _Content.contract, event: "LogUint256", logs: logs, sub: sub}, nil
}

// WatchLogUint256 is a free log subscription operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Content *ContentFilterer) WatchLogUint256(opts *bind.WatchOpts, sink chan<- *ContentLogUint256) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentLogUint256)
				if err := _Content.contract.UnpackLog(event, "LogUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint256 is a log parse operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Content *ContentFilterer) ParseLogUint256(log types.Log) (*ContentLogUint256, error) {
	event := new(ContentLogUint256)
	if err := _Content.contract.UnpackLog(event, "LogUint256", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentRunAccessIterator is returned from FilterRunAccess and is used to iterate over the raw logs and unpacked data for RunAccess events raised by the Content contract.
type ContentRunAccessIterator struct {
	Event *ContentRunAccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunAccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunAccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunAccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunAccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunAccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunAccess represents a RunAccess event raised by the Content contract.
type ContentRunAccess struct {
	RequestID *big.Int
	Result    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRunAccess is a free log retrieval operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_Content *ContentFilterer) FilterRunAccess(opts *bind.FilterOpts) (*ContentRunAccessIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return &ContentRunAccessIterator{contract: _Content.contract, event: "RunAccess", logs: logs, sub: sub}, nil
}

// WatchRunAccess is a free log subscription operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_Content *ContentFilterer) WatchRunAccess(opts *bind.WatchOpts, sink chan<- *ContentRunAccess) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunAccess)
				if err := _Content.contract.UnpackLog(event, "RunAccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccess is a log parse operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_Content *ContentFilterer) ParseRunAccess(log types.Log) (*ContentRunAccess, error) {
	event := new(ContentRunAccess)
	if err := _Content.contract.UnpackLog(event, "RunAccess", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentRunAccessChargeIterator is returned from FilterRunAccessCharge and is used to iterate over the raw logs and unpacked data for RunAccessCharge events raised by the Content contract.
type ContentRunAccessChargeIterator struct {
	Event *ContentRunAccessCharge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunAccessChargeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunAccessCharge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunAccessCharge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunAccessChargeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunAccessChargeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunAccessCharge represents a RunAccessCharge event raised by the Content contract.
type ContentRunAccessCharge struct {
	Level                 uint8
	CalculateAccessCharge *big.Int
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterRunAccessCharge is a free log retrieval operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_Content *ContentFilterer) FilterRunAccessCharge(opts *bind.FilterOpts) (*ContentRunAccessChargeIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return &ContentRunAccessChargeIterator{contract: _Content.contract, event: "RunAccessCharge", logs: logs, sub: sub}, nil
}

// WatchRunAccessCharge is a free log subscription operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_Content *ContentFilterer) WatchRunAccessCharge(opts *bind.WatchOpts, sink chan<- *ContentRunAccessCharge) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunAccessCharge)
				if err := _Content.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccessCharge is a log parse operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_Content *ContentFilterer) ParseRunAccessCharge(log types.Log) (*ContentRunAccessCharge, error) {
	event := new(ContentRunAccessCharge)
	if err := _Content.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentRunCreateIterator is returned from FilterRunCreate and is used to iterate over the raw logs and unpacked data for RunCreate events raised by the Content contract.
type ContentRunCreateIterator struct {
	Event *ContentRunCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunCreate represents a RunCreate event raised by the Content contract.
type ContentRunCreate struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunCreate is a free log retrieval operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_Content *ContentFilterer) FilterRunCreate(opts *bind.FilterOpts) (*ContentRunCreateIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return &ContentRunCreateIterator{contract: _Content.contract, event: "RunCreate", logs: logs, sub: sub}, nil
}

// WatchRunCreate is a free log subscription operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_Content *ContentFilterer) WatchRunCreate(opts *bind.WatchOpts, sink chan<- *ContentRunCreate) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunCreate)
				if err := _Content.contract.UnpackLog(event, "RunCreate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunCreate is a log parse operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_Content *ContentFilterer) ParseRunCreate(log types.Log) (*ContentRunCreate, error) {
	event := new(ContentRunCreate)
	if err := _Content.contract.UnpackLog(event, "RunCreate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentRunFinalizeIterator is returned from FilterRunFinalize and is used to iterate over the raw logs and unpacked data for RunFinalize events raised by the Content contract.
type ContentRunFinalizeIterator struct {
	Event *ContentRunFinalize // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunFinalizeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunFinalize)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunFinalize)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunFinalizeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunFinalizeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunFinalize represents a RunFinalize event raised by the Content contract.
type ContentRunFinalize struct {
	RequestID *big.Int
	Result    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRunFinalize is a free log retrieval operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_Content *ContentFilterer) FilterRunFinalize(opts *bind.FilterOpts) (*ContentRunFinalizeIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return &ContentRunFinalizeIterator{contract: _Content.contract, event: "RunFinalize", logs: logs, sub: sub}, nil
}

// WatchRunFinalize is a free log subscription operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_Content *ContentFilterer) WatchRunFinalize(opts *bind.WatchOpts, sink chan<- *ContentRunFinalize) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunFinalize)
				if err := _Content.contract.UnpackLog(event, "RunFinalize", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunFinalize is a log parse operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_Content *ContentFilterer) ParseRunFinalize(log types.Log) (*ContentRunFinalize, error) {
	event := new(ContentRunFinalize)
	if err := _Content.contract.UnpackLog(event, "RunFinalize", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentRunKillIterator is returned from FilterRunKill and is used to iterate over the raw logs and unpacked data for RunKill events raised by the Content contract.
type ContentRunKillIterator struct {
	Event *ContentRunKill // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunKillIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunKill)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunKill)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunKillIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunKillIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunKill represents a RunKill event raised by the Content contract.
type ContentRunKill struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunKill is a free log retrieval operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_Content *ContentFilterer) FilterRunKill(opts *bind.FilterOpts) (*ContentRunKillIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return &ContentRunKillIterator{contract: _Content.contract, event: "RunKill", logs: logs, sub: sub}, nil
}

// WatchRunKill is a free log subscription operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_Content *ContentFilterer) WatchRunKill(opts *bind.WatchOpts, sink chan<- *ContentRunKill) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunKill)
				if err := _Content.contract.UnpackLog(event, "RunKill", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunKill is a log parse operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_Content *ContentFilterer) ParseRunKill(log types.Log) (*ContentRunKill, error) {
	event := new(ContentRunKill)
	if err := _Content.contract.UnpackLog(event, "RunKill", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContentRunStatusChangeIterator is returned from FilterRunStatusChange and is used to iterate over the raw logs and unpacked data for RunStatusChange events raised by the Content contract.
type ContentRunStatusChangeIterator struct {
	Event *ContentRunStatusChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContentRunStatusChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContentRunStatusChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContentRunStatusChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContentRunStatusChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContentRunStatusChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContentRunStatusChange represents a RunStatusChange event raised by the Content contract.
type ContentRunStatusChange struct {
	ProposedStatusCode *big.Int
	ReturnStatusCode   *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRunStatusChange is a free log retrieval operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_Content *ContentFilterer) FilterRunStatusChange(opts *bind.FilterOpts) (*ContentRunStatusChangeIterator, error) {

	logs, sub, err := _Content.contract.FilterLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return &ContentRunStatusChangeIterator{contract: _Content.contract, event: "RunStatusChange", logs: logs, sub: sub}, nil
}

// WatchRunStatusChange is a free log subscription operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_Content *ContentFilterer) WatchRunStatusChange(opts *bind.WatchOpts, sink chan<- *ContentRunStatusChange) (event.Subscription, error) {

	logs, sub, err := _Content.contract.WatchLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContentRunStatusChange)
				if err := _Content.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunStatusChange is a log parse operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_Content *ContentFilterer) ParseRunStatusChange(log types.Log) (*ContentRunStatusChange, error) {
	event := new(ContentRunStatusChange)
	if err := _Content.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EditableMetaData contains all meta data concerning the Editable contract.
var EditableMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"parentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canConfirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countVersionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearPending\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canCommit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versionHashes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objectHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"objectHash\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_versionHash\",\"type\":\"string\"}],\"name\":\"deleteVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"CommitPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"UpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"objectHash\",\"type\":\"string\"}],\"name\":\"VersionConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"spaceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"versionHash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"int256\"}],\"name\":\"VersionDelete\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"6e375427": "canCommit()",
		"14cfabb3": "canConfirm()",
		"81beeb64": "canEdit()",
		"5f6a1301": "clearPending()",
		"9867db74": "commit(string)",
		"375a6e7c": "commitPending()",
		"446e8826": "confirmCommit()",
		"af570c04": "contentSpace()",
		"331b86c0": "countVersionHashes()",
		"02d05d3f": "creator()",
		"e1a70717": "deleteVersion(string)",
		"41c0e1b5": "kill()",
		"e02dd9c2": "objectHash()",
		"8da5cb5b": "owner()",
		"00821de3": "parentAddress()",
		"628449fd": "pendingHash()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"c287e0ed": "updateRequest()",
		"54fd4d50": "version()",
		"7ca8f618": "versionHashes(uint256)",
		"7886f747": "versionTimestamp(uint256)",
	},
	Bin: "0x60806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f4564697461626c6532303139313231393133343630304d4c000000000000000060045560018054600160a060020a0319908116329081179092556002805490911690911790556113038061007e6000396000f3006080604052600436106101265763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662821de3811461012857806302d05d3f1461015957806314cfabb31461016e578063331b86c014610197578063375a6e7c146101be57806341c0e1b5146101d3578063446e8826146101e857806354fd4d50146101f05780635f6a130114610205578063628449fd1461021a5780636d2e4b1b146102a45780636e375427146102c55780637886f747146102da5780637ca8f618146102f257806381beeb641461030a5780638da5cb5b1461031f5780639867db7414610334578063af570c041461038d578063c287e0ed146103a2578063e02dd9c2146103b7578063e1a70717146103cc578063f2fde38b14610425575b005b34801561013457600080fd5b5061013d610446565b60408051600160a060020a039092168252519081900360200190f35b34801561016557600080fd5b5061013d610456565b34801561017a57600080fd5b50610183610465565b604080519115158252519081900360200190f35b3480156101a357600080fd5b506101ac61046a565b60408051918252519081900360200190f35b3480156101ca57600080fd5b50610183610470565b3480156101df57600080fd5b50610126610479565b6101836104b5565b3480156101fc57600080fd5b506101ac6106a5565b34801561021157600080fd5b506101266106ab565b34801561022657600080fd5b5061022f6106e9565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610269578181015183820152602001610251565b50505050905090810190601f1680156102965780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102b057600080fd5b50610126600160a060020a0360043516610777565b3480156102d157600080fd5b506101836107d2565b3480156102e657600080fd5b506101ac6004356107e3565b3480156102fe57600080fd5b5061022f600435610802565b34801561031657600080fd5b50610183610876565b34801561032b57600080fd5b5061013d610887565b34801561034057600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101269436949293602493928401919081908401838280828437509497506108969650505050505050565b34801561039957600080fd5b5061013d6109c3565b3480156103ae57600080fd5b506101266109d2565b3480156103c357600080fd5b5061022f610aa2565b3480156103d857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101ac943694929360249392840191908190840183828082843750949750610afd9650505050505050565b34801561043157600080fd5b50610126600160a060020a03600435166110a5565b600354600160a060020a03165b90565b600154600160a060020a031681565b600090565b60075490565b600a5460ff1681565b600254600160a060020a031632148061049c5750600254600160a060020a031633145b15156104a757600080fd5b600254600160a060020a0316ff5b60006104bf610465565b15156104ca57600080fd5b600a5460ff1615156104db57600080fd5b60006005805460018160011615610100020316600290049050111561058a5760078054600181810180845560009390935260058054610551937fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880192600261010091831615919091026000190190911604611117565b5050600654600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301555b600980546105ad9160059160026000196101006001841615020190911604611117565b50426006556040805160208101918290526000908190526105d09160099161119c565b50600a805460ff1916905560035460408051600160a060020a039092168083526020830182815260058054600260001960018316156101000201909116049385018490527f482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e949293909291906060830190849080156106905780601f1061066557610100808354040283529160200191610690565b820191906000526020600020905b81548152906001019060200180831161067357829003601f168201915b5050935050505060405180910390a150600190565b60045481565b6106b36107d2565b15156106be57600080fd5b6040805160208101918290526000908190526106dc9160099161119c565b50600a805460ff19169055565b6009805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561076f5780601f106107445761010080835404028352916020019161076f565b820191906000526020600020905b81548152906001019060200180831161075257829003601f168201915b505050505081565b600154600160a060020a0316321461078e57600080fd5b600160a060020a03811615156107a357600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a0316321490565b60088054829081106107f157fe5b600091825260209091200154905081565b600780548290811061081057fe5b600091825260209182902001805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529350909183018282801561076f5780601f106107445761010080835404028352916020019161076f565b600254600160a060020a0316331490565b600254600160a060020a031681565b61089e6107d2565b15156108a957600080fd5b600a5460ff16156108b957600080fd5b80516080116108c757600080fd5b80516108da90600990602084019061119c565b50600a805460ff191660011790556003547fb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa7590600160a060020a031661091e610446565b60408051600160a060020a0380851682528316602082015260609181018281526009805460026000196101006001841615020190911604938301849052926080830190849080156109b05780601f10610985576101008083540402835291602001916109b0565b820191906000526020600020905b81548152906001019060200180831161099357829003601f168201915b505094505050505060405180910390a150565b600354600160a060020a031681565b6109da610876565b806109e857506109e8610465565b15156109f357600080fd5b60408051602080825260058054600260001961010060018416150201909116049183018290527f403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b6593909291829182019084908015610a925780601f10610a6757610100808354040283529160200191610a92565b820191906000526020600020905b815481529060010190602001808311610a7557829003601f168201915b50509250505060405180910390a1565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561076f5780601f106107445761010080835404028352916020019161076f565b600080600080600080610b0e6107d2565b1515610b1957600080fd5b866040516020018082805190602001908083835b60208310610b4c5780518252601f199092019160209182019101610b2d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310610baf5780518252601f199092019160209182019101610b90565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020945060056040516020018082805460018160011615610100020316600290048015610c3e5780601f10610c1c576101008083540402835291820191610c3e565b820191906000526020600020905b815481529060010190602001808311610c2a575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310610c815780518252601f199092019160209182019101610c62565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120965050505084841415610da257604080516020810191829052600090819052610cd59160059161119c565b506000600681905560035460408051600160a060020a03909216808352908201839052606060208084018281528c51928501929092528b517f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f519593948d9493909290916080840191860190808383885b83811015610d5d578181015183820152602001610d45565b50505050905090810190601f168015610d8a5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a16000955061109b565b6000199250600091505b600754821015610fb8576007805483908110610dc457fe5b906000526020600020016040516020018082805460018160011615610100020316600290048015610e2c5780601f10610e0a576101008083540402835291820191610e2c565b820191906000526020600020905b815481529060010190602001808311610e18575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310610e6f5780518252601f199092019160209182019101610e50565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120935050505084811415610fad576007805483908110610eb357fe5b906000526020600020016000610ec9919061120a565b6008805483908110610ed757fe5b6000918252602082200155600754600019018214610f7d57600780546000198101908110610f0157fe5b90600052602060002001600783815481101515610f1a57fe5b906000526020600020019080546001816001161561010002031660029004610f43929190611117565b50600880546000198101908110610f5657fe5b9060005260206000200154600883815481101515610f7057fe5b6000918252602090912001555b6007805490610f90906000198301611251565b506008805490610fa490600019830161127a565b50819250610fb8565b600190910190610dac565b600019831415610fc757600080fd5b7f238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51600360009054906101000a9004600160a060020a031688856040518084600160a060020a0316600160a060020a0316815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561105b578181015183820152602001611043565b50505050905090810190601f1680156110885780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a18295505b5050505050919050565b600254600160a060020a03163214806110c85750600254600160a060020a031633145b15156110d357600080fd5b600160a060020a03811615156110e857600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611150578054855561118c565b8280016001018555821561118c57600052602060002091601f016020900482015b8281111561118c578254825591600101919060010190611171565b5061119892915061129a565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106111dd57805160ff191683800117855561118c565b8280016001018555821561118c579182015b8281111561118c5782518255916020019190600101906111ef565b50805460018160011615610100020316600290046000825580601f10611230575061124e565b601f01602090049060005260206000209081019061124e919061129a565b50565b815481835581811115611275576000838152602090206112759181019083016112b4565b505050565b815481835581811115611275576000838152602090206112759181019083015b61045391905b8082111561119857600081556001016112a0565b61045391905b808211156111985760006112ce828261120a565b506001016112ba5600a165627a7a7230582088589d36fd5ae6ff5658b1e4ceb30c18d6e1b42714dc0e9e2a8a65df5e380a7e0029",
}

// EditableABI is the input ABI used to generate the binding from.
// Deprecated: Use EditableMetaData.ABI instead.
var EditableABI = EditableMetaData.ABI

// Deprecated: Use EditableMetaData.Sigs instead.
// EditableFuncSigs maps the 4-byte function signature to its string representation.
var EditableFuncSigs = EditableMetaData.Sigs

// EditableBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EditableMetaData.Bin instead.
var EditableBin = EditableMetaData.Bin

// DeployEditable deploys a new Ethereum contract, binding an instance of Editable to it.
func DeployEditable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Editable, error) {
	parsed, err := ParsedABI(K_Editable)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EditableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Editable{EditableCaller: EditableCaller{contract: contract}, EditableTransactor: EditableTransactor{contract: contract}, EditableFilterer: EditableFilterer{contract: contract}}, nil
}

// Editable is an auto generated Go binding around an Ethereum contract.
type Editable struct {
	EditableCaller     // Read-only binding to the contract
	EditableTransactor // Write-only binding to the contract
	EditableFilterer   // Log filterer for contract events
}

// EditableCaller is an auto generated read-only Go binding around an Ethereum contract.
type EditableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EditableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EditableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EditableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EditableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewEditable creates a new instance of Editable, bound to a specific deployed contract.
func NewEditable(address common.Address, backend bind.ContractBackend) (*Editable, error) {
	contract, err := bindEditable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Editable{EditableCaller: EditableCaller{contract: contract}, EditableTransactor: EditableTransactor{contract: contract}, EditableFilterer: EditableFilterer{contract: contract}}, nil
}

// NewEditableCaller creates a new read-only instance of Editable, bound to a specific deployed contract.
func NewEditableCaller(address common.Address, caller bind.ContractCaller) (*EditableCaller, error) {
	contract, err := bindEditable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EditableCaller{contract: contract}, nil
}

// NewEditableTransactor creates a new write-only instance of Editable, bound to a specific deployed contract.
func NewEditableTransactor(address common.Address, transactor bind.ContractTransactor) (*EditableTransactor, error) {
	contract, err := bindEditable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EditableTransactor{contract: contract}, nil
}

// NewEditableFilterer creates a new log filterer instance of Editable, bound to a specific deployed contract.
func NewEditableFilterer(address common.Address, filterer bind.ContractFilterer) (*EditableFilterer, error) {
	contract, err := bindEditable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EditableFilterer{contract: contract}, nil
}

// bindEditable binds a generic wrapper to an already deployed contract.
func bindEditable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Editable)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// CanCommit is a free data retrieval call binding the contract method 0x6e375427.
//
// Solidity: function canCommit() view returns(bool)
func (_Editable *EditableCaller) CanCommit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "canCommit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanConfirm is a free data retrieval call binding the contract method 0x14cfabb3.
//
// Solidity: function canConfirm() view returns(bool)
func (_Editable *EditableCaller) CanConfirm(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "canConfirm")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanEdit is a free data retrieval call binding the contract method 0x81beeb64.
//
// Solidity: function canEdit() view returns(bool)
func (_Editable *EditableCaller) CanEdit(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "canEdit")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CommitPending is a free data retrieval call binding the contract method 0x375a6e7c.
//
// Solidity: function commitPending() view returns(bool)
func (_Editable *EditableCaller) CommitPending(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "commitPending")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_Editable *EditableCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CountVersionHashes is a free data retrieval call binding the contract method 0x331b86c0.
//
// Solidity: function countVersionHashes() view returns(uint256)
func (_Editable *EditableCaller) CountVersionHashes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "countVersionHashes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_Editable *EditableCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ObjectHash is a free data retrieval call binding the contract method 0xe02dd9c2.
//
// Solidity: function objectHash() view returns(string)
func (_Editable *EditableCaller) ObjectHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "objectHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Editable *EditableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ParentAddress is a free data retrieval call binding the contract method 0x00821de3.
//
// Solidity: function parentAddress() view returns(address)
func (_Editable *EditableCaller) ParentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "parentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingHash is a free data retrieval call binding the contract method 0x628449fd.
//
// Solidity: function pendingHash() view returns(string)
func (_Editable *EditableCaller) PendingHash(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "pendingHash")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_Editable *EditableCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// VersionHashes is a free data retrieval call binding the contract method 0x7ca8f618.
//
// Solidity: function versionHashes(uint256 ) view returns(string)
func (_Editable *EditableCaller) VersionHashes(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "versionHashes", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionTimestamp is a free data retrieval call binding the contract method 0x7886f747.
//
// Solidity: function versionTimestamp(uint256 ) view returns(uint256)
func (_Editable *EditableCaller) VersionTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Editable.contract.Call(opts, &out, "versionTimestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ClearPending is a paid mutator transaction binding the contract method 0x5f6a1301.
//
// Solidity: function clearPending() returns()
func (_Editable *EditableTransactor) ClearPending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "clearPending")
}

// Commit is a paid mutator transaction binding the contract method 0x9867db74.
//
// Solidity: function commit(string _objectHash) returns()
func (_Editable *EditableTransactor) Commit(opts *bind.TransactOpts, _objectHash string) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "commit", _objectHash)
}

// ConfirmCommit is a paid mutator transaction binding the contract method 0x446e8826.
//
// Solidity: function confirmCommit() payable returns(bool)
func (_Editable *EditableTransactor) ConfirmCommit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "confirmCommit")
}

// DeleteVersion is a paid mutator transaction binding the contract method 0xe1a70717.
//
// Solidity: function deleteVersion(string _versionHash) returns(int256)
func (_Editable *EditableTransactor) DeleteVersion(opts *bind.TransactOpts, _versionHash string) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "deleteVersion", _versionHash)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Editable *EditableTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "kill")
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Editable *EditableTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Editable *EditableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "transferOwnership", newOwner)
}

// UpdateRequest is a paid mutator transaction binding the contract method 0xc287e0ed.
//
// Solidity: function updateRequest() returns()
func (_Editable *EditableTransactor) UpdateRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Editable.contract.Transact(opts, "updateRequest")
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Editable *EditableTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Editable.contract.RawTransact(opts, calldata)
}

// EditableCommitPendingIterator is returned from FilterCommitPending and is used to iterate over the raw logs and unpacked data for CommitPending events raised by the Editable contract.
type EditableCommitPendingIterator struct {
	Event *EditableCommitPending // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableCommitPendingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableCommitPending)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableCommitPending)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableCommitPendingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableCommitPendingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableCommitPending represents a CommitPending event raised by the Editable contract.
type EditableCommitPending struct {
	SpaceAddress  common.Address
	ParentAddress common.Address
	ObjectHash    string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCommitPending is a free log retrieval operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) FilterCommitPending(opts *bind.FilterOpts) (*EditableCommitPendingIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return &EditableCommitPendingIterator{contract: _Editable.contract, event: "CommitPending", logs: logs, sub: sub}, nil
}

// WatchCommitPending is a free log subscription operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) WatchCommitPending(opts *bind.WatchOpts, sink chan<- *EditableCommitPending) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "CommitPending")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableCommitPending)
				if err := _Editable.contract.UnpackLog(event, "CommitPending", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitPending is a log parse operation binding the contract event 0xb3ac059d88af6016aca1aebb7b3e796f2e7420435c59c563687814e9b85daa75.
//
// Solidity: event CommitPending(address spaceAddress, address parentAddress, string objectHash)
func (_Editable *EditableFilterer) ParseCommitPending(log types.Log) (*EditableCommitPending, error) {
	event := new(EditableCommitPending)
	if err := _Editable.contract.UnpackLog(event, "CommitPending", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EditableUpdateRequestIterator is returned from FilterUpdateRequest and is used to iterate over the raw logs and unpacked data for UpdateRequest events raised by the Editable contract.
type EditableUpdateRequestIterator struct {
	Event *EditableUpdateRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableUpdateRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableUpdateRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableUpdateRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableUpdateRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableUpdateRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableUpdateRequest represents a UpdateRequest event raised by the Editable contract.
type EditableUpdateRequest struct {
	ObjectHash string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateRequest is a free log retrieval operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Editable *EditableFilterer) FilterUpdateRequest(opts *bind.FilterOpts) (*EditableUpdateRequestIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return &EditableUpdateRequestIterator{contract: _Editable.contract, event: "UpdateRequest", logs: logs, sub: sub}, nil
}

// WatchUpdateRequest is a free log subscription operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Editable *EditableFilterer) WatchUpdateRequest(opts *bind.WatchOpts, sink chan<- *EditableUpdateRequest) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "UpdateRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableUpdateRequest)
				if err := _Editable.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRequest is a log parse operation binding the contract event 0x403f30aa5f4f2f89331a7b50054f64a00ce206f4d0a37f566ff344bbe46f8b65.
//
// Solidity: event UpdateRequest(string objectHash)
func (_Editable *EditableFilterer) ParseUpdateRequest(log types.Log) (*EditableUpdateRequest, error) {
	event := new(EditableUpdateRequest)
	if err := _Editable.contract.UnpackLog(event, "UpdateRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EditableVersionConfirmIterator is returned from FilterVersionConfirm and is used to iterate over the raw logs and unpacked data for VersionConfirm events raised by the Editable contract.
type EditableVersionConfirmIterator struct {
	Event *EditableVersionConfirm // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableVersionConfirmIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableVersionConfirm)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableVersionConfirm)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableVersionConfirmIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableVersionConfirmIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableVersionConfirm represents a VersionConfirm event raised by the Editable contract.
type EditableVersionConfirm struct {
	SpaceAddress common.Address
	ObjectHash   string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionConfirm is a free log retrieval operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_Editable *EditableFilterer) FilterVersionConfirm(opts *bind.FilterOpts) (*EditableVersionConfirmIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return &EditableVersionConfirmIterator{contract: _Editable.contract, event: "VersionConfirm", logs: logs, sub: sub}, nil
}

// WatchVersionConfirm is a free log subscription operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_Editable *EditableFilterer) WatchVersionConfirm(opts *bind.WatchOpts, sink chan<- *EditableVersionConfirm) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "VersionConfirm")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableVersionConfirm)
				if err := _Editable.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionConfirm is a log parse operation binding the contract event 0x482875da75e6d9f93f74a5c1a61f14cf08822057c01232f44cb92ae998e30d8e.
//
// Solidity: event VersionConfirm(address spaceAddress, string objectHash)
func (_Editable *EditableFilterer) ParseVersionConfirm(log types.Log) (*EditableVersionConfirm, error) {
	event := new(EditableVersionConfirm)
	if err := _Editable.contract.UnpackLog(event, "VersionConfirm", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EditableVersionDeleteIterator is returned from FilterVersionDelete and is used to iterate over the raw logs and unpacked data for VersionDelete events raised by the Editable contract.
type EditableVersionDeleteIterator struct {
	Event *EditableVersionDelete // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EditableVersionDeleteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EditableVersionDelete)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EditableVersionDelete)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EditableVersionDeleteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EditableVersionDeleteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EditableVersionDelete represents a VersionDelete event raised by the Editable contract.
type EditableVersionDelete struct {
	SpaceAddress common.Address
	VersionHash  string
	Index        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionDelete is a free log retrieval operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Editable *EditableFilterer) FilterVersionDelete(opts *bind.FilterOpts) (*EditableVersionDeleteIterator, error) {

	logs, sub, err := _Editable.contract.FilterLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return &EditableVersionDeleteIterator{contract: _Editable.contract, event: "VersionDelete", logs: logs, sub: sub}, nil
}

// WatchVersionDelete is a free log subscription operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Editable *EditableFilterer) WatchVersionDelete(opts *bind.WatchOpts, sink chan<- *EditableVersionDelete) (event.Subscription, error) {

	logs, sub, err := _Editable.contract.WatchLogs(opts, "VersionDelete")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EditableVersionDelete)
				if err := _Editable.contract.UnpackLog(event, "VersionDelete", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVersionDelete is a log parse operation binding the contract event 0x238d74c13cda9ba51e904772d41a616a1b9b30d09802484df6279fe1c3c07f51.
//
// Solidity: event VersionDelete(address spaceAddress, string versionHash, int256 index)
func (_Editable *EditableFilterer) ParseVersionDelete(log types.Log) (*EditableVersionDelete, error) {
	event := new(EditableVersionDelete)
	if err := _Editable.contract.UnpackLog(event, "VersionDelete", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IFactorySpaceMetaData contains all meta data concerning the IFactorySpace contract.
var IFactorySpaceMetaData = &bind.MetaData{
	ABI: "[{\"constant\":false,\"inputs\":[{\"name\":\"address_KMS\",\"type\":\"address\"}],\"name\":\"createLibrary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createContentType\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lib\",\"type\":\"address\"},{\"name\":\"content_type\",\"type\":\"address\"}],\"name\":\"createContent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"bf4e088f": "createContent(address,address)",
		"b8cfaf05": "createContentType()",
		"575185ed": "createGroup()",
		"40b89f06": "createLibrary(address)",
	},
}

// IFactorySpaceABI is the input ABI used to generate the binding from.
// Deprecated: Use IFactorySpaceMetaData.ABI instead.
var IFactorySpaceABI = IFactorySpaceMetaData.ABI

// Deprecated: Use IFactorySpaceMetaData.Sigs instead.
// IFactorySpaceFuncSigs maps the 4-byte function signature to its string representation.
var IFactorySpaceFuncSigs = IFactorySpaceMetaData.Sigs

// IFactorySpace is an auto generated Go binding around an Ethereum contract.
type IFactorySpace struct {
	IFactorySpaceCaller     // Read-only binding to the contract
	IFactorySpaceTransactor // Write-only binding to the contract
	IFactorySpaceFilterer   // Log filterer for contract events
}

// IFactorySpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type IFactorySpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFactorySpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IFactorySpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFactorySpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IFactorySpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewIFactorySpace creates a new instance of IFactorySpace, bound to a specific deployed contract.
func NewIFactorySpace(address common.Address, backend bind.ContractBackend) (*IFactorySpace, error) {
	contract, err := bindIFactorySpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IFactorySpace{IFactorySpaceCaller: IFactorySpaceCaller{contract: contract}, IFactorySpaceTransactor: IFactorySpaceTransactor{contract: contract}, IFactorySpaceFilterer: IFactorySpaceFilterer{contract: contract}}, nil
}

// NewIFactorySpaceCaller creates a new read-only instance of IFactorySpace, bound to a specific deployed contract.
func NewIFactorySpaceCaller(address common.Address, caller bind.ContractCaller) (*IFactorySpaceCaller, error) {
	contract, err := bindIFactorySpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IFactorySpaceCaller{contract: contract}, nil
}

// NewIFactorySpaceTransactor creates a new write-only instance of IFactorySpace, bound to a specific deployed contract.
func NewIFactorySpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*IFactorySpaceTransactor, error) {
	contract, err := bindIFactorySpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IFactorySpaceTransactor{contract: contract}, nil
}

// NewIFactorySpaceFilterer creates a new log filterer instance of IFactorySpace, bound to a specific deployed contract.
func NewIFactorySpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*IFactorySpaceFilterer, error) {
	contract, err := bindIFactorySpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IFactorySpaceFilterer{contract: contract}, nil
}

// bindIFactorySpace binds a generic wrapper to an already deployed contract.
func bindIFactorySpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_IFactorySpace)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// CreateContent is a paid mutator transaction binding the contract method 0xbf4e088f.
//
// Solidity: function createContent(address lib, address content_type) returns(address)
func (_IFactorySpace *IFactorySpaceTransactor) CreateContent(opts *bind.TransactOpts, lib common.Address, content_type common.Address) (*types.Transaction, error) {
	return _IFactorySpace.contract.Transact(opts, "createContent", lib, content_type)
}

// CreateContentType is a paid mutator transaction binding the contract method 0xb8cfaf05.
//
// Solidity: function createContentType() returns(address)
func (_IFactorySpace *IFactorySpaceTransactor) CreateContentType(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFactorySpace.contract.Transact(opts, "createContentType")
}

// CreateGroup is a paid mutator transaction binding the contract method 0x575185ed.
//
// Solidity: function createGroup() returns(address)
func (_IFactorySpace *IFactorySpaceTransactor) CreateGroup(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFactorySpace.contract.Transact(opts, "createGroup")
}

// CreateLibrary is a paid mutator transaction binding the contract method 0x40b89f06.
//
// Solidity: function createLibrary(address address_KMS) returns(address)
func (_IFactorySpace *IFactorySpaceTransactor) CreateLibrary(opts *bind.TransactOpts, address_KMS common.Address) (*types.Transaction, error) {
	return _IFactorySpace.contract.Transact(opts, "createLibrary", address_KMS)
}

// IKmsSpaceMetaData contains all meta data concerning the IKmsSpace contract.
var IKmsSpaceMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[{\"name\":\"_kmsID\",\"type\":\"string\"},{\"name\":\"prefix\",\"type\":\"bytes\"}],\"name\":\"getKMSInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"getKMSID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kmsAddr\",\"type\":\"address\"}],\"name\":\"checkKMSAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"d6be0f49": "checkKMSAddr(address)",
		"589aafc1": "getKMSID(address)",
		"268bfac4": "getKMSInfo(string,bytes)",
	},
}

// IKmsSpaceABI is the input ABI used to generate the binding from.
// Deprecated: Use IKmsSpaceMetaData.ABI instead.
var IKmsSpaceABI = IKmsSpaceMetaData.ABI

// Deprecated: Use IKmsSpaceMetaData.Sigs instead.
// IKmsSpaceFuncSigs maps the 4-byte function signature to its string representation.
var IKmsSpaceFuncSigs = IKmsSpaceMetaData.Sigs

// IKmsSpace is an auto generated Go binding around an Ethereum contract.
type IKmsSpace struct {
	IKmsSpaceCaller     // Read-only binding to the contract
	IKmsSpaceTransactor // Write-only binding to the contract
	IKmsSpaceFilterer   // Log filterer for contract events
}

// IKmsSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type IKmsSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IKmsSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IKmsSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IKmsSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IKmsSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewIKmsSpace creates a new instance of IKmsSpace, bound to a specific deployed contract.
func NewIKmsSpace(address common.Address, backend bind.ContractBackend) (*IKmsSpace, error) {
	contract, err := bindIKmsSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IKmsSpace{IKmsSpaceCaller: IKmsSpaceCaller{contract: contract}, IKmsSpaceTransactor: IKmsSpaceTransactor{contract: contract}, IKmsSpaceFilterer: IKmsSpaceFilterer{contract: contract}}, nil
}

// NewIKmsSpaceCaller creates a new read-only instance of IKmsSpace, bound to a specific deployed contract.
func NewIKmsSpaceCaller(address common.Address, caller bind.ContractCaller) (*IKmsSpaceCaller, error) {
	contract, err := bindIKmsSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IKmsSpaceCaller{contract: contract}, nil
}

// NewIKmsSpaceTransactor creates a new write-only instance of IKmsSpace, bound to a specific deployed contract.
func NewIKmsSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*IKmsSpaceTransactor, error) {
	contract, err := bindIKmsSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IKmsSpaceTransactor{contract: contract}, nil
}

// NewIKmsSpaceFilterer creates a new log filterer instance of IKmsSpace, bound to a specific deployed contract.
func NewIKmsSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*IKmsSpaceFilterer, error) {
	contract, err := bindIKmsSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IKmsSpaceFilterer{contract: contract}, nil
}

// bindIKmsSpace binds a generic wrapper to an already deployed contract.
func bindIKmsSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_IKmsSpace)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// CheckKMSAddr is a free data retrieval call binding the contract method 0xd6be0f49.
//
// Solidity: function checkKMSAddr(address _kmsAddr) view returns(uint256)
func (_IKmsSpace *IKmsSpaceCaller) CheckKMSAddr(opts *bind.CallOpts, _kmsAddr common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IKmsSpace.contract.Call(opts, &out, "checkKMSAddr", _kmsAddr)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetKMSID is a free data retrieval call binding the contract method 0x589aafc1.
//
// Solidity: function getKMSID(address _kmsAddr) view returns(string)
func (_IKmsSpace *IKmsSpaceCaller) GetKMSID(opts *bind.CallOpts, _kmsAddr common.Address) (string, error) {
	var out []interface{}
	err := _IKmsSpace.contract.Call(opts, &out, "getKMSID", _kmsAddr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetKMSInfo is a free data retrieval call binding the contract method 0x268bfac4.
//
// Solidity: function getKMSInfo(string _kmsID, bytes prefix) view returns(string, string)
func (_IKmsSpace *IKmsSpaceCaller) GetKMSInfo(opts *bind.CallOpts, _kmsID string, prefix []byte) (string, string, error) {
	var out []interface{}
	err := _IKmsSpace.contract.Call(opts, &out, "getKMSInfo", _kmsID, prefix)

	if err != nil {
		return *new(string), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)

	return out0, out1, err

}

// INodeSpaceMetaData contains all meta data concerning the INodeSpace contract.
var INodeSpaceMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"26683e14": "canNodePublish(address)",
	},
}

// INodeSpaceABI is the input ABI used to generate the binding from.
// Deprecated: Use INodeSpaceMetaData.ABI instead.
var INodeSpaceABI = INodeSpaceMetaData.ABI

// Deprecated: Use INodeSpaceMetaData.Sigs instead.
// INodeSpaceFuncSigs maps the 4-byte function signature to its string representation.
var INodeSpaceFuncSigs = INodeSpaceMetaData.Sigs

// INodeSpace is an auto generated Go binding around an Ethereum contract.
type INodeSpace struct {
	INodeSpaceCaller     // Read-only binding to the contract
	INodeSpaceTransactor // Write-only binding to the contract
	INodeSpaceFilterer   // Log filterer for contract events
}

// INodeSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type INodeSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INodeSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type INodeSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// INodeSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type INodeSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewINodeSpace creates a new instance of INodeSpace, bound to a specific deployed contract.
func NewINodeSpace(address common.Address, backend bind.ContractBackend) (*INodeSpace, error) {
	contract, err := bindINodeSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &INodeSpace{INodeSpaceCaller: INodeSpaceCaller{contract: contract}, INodeSpaceTransactor: INodeSpaceTransactor{contract: contract}, INodeSpaceFilterer: INodeSpaceFilterer{contract: contract}}, nil
}

// NewINodeSpaceCaller creates a new read-only instance of INodeSpace, bound to a specific deployed contract.
func NewINodeSpaceCaller(address common.Address, caller bind.ContractCaller) (*INodeSpaceCaller, error) {
	contract, err := bindINodeSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &INodeSpaceCaller{contract: contract}, nil
}

// NewINodeSpaceTransactor creates a new write-only instance of INodeSpace, bound to a specific deployed contract.
func NewINodeSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*INodeSpaceTransactor, error) {
	contract, err := bindINodeSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &INodeSpaceTransactor{contract: contract}, nil
}

// NewINodeSpaceFilterer creates a new log filterer instance of INodeSpace, bound to a specific deployed contract.
func NewINodeSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*INodeSpaceFilterer, error) {
	contract, err := bindINodeSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &INodeSpaceFilterer{contract: contract}, nil
}

// bindINodeSpace binds a generic wrapper to an already deployed contract.
func bindINodeSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_INodeSpace)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) view returns(bool)
func (_INodeSpace *INodeSpaceCaller) CanNodePublish(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _INodeSpace.contract.Call(opts, &out, "canNodePublish", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IUserSpaceMetaData contains all meta data concerning the IUserSpace contract.
var IUserSpaceMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[{\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"userWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"63e6ffdd": "userWallets(address)",
	},
}

// IUserSpaceABI is the input ABI used to generate the binding from.
// Deprecated: Use IUserSpaceMetaData.ABI instead.
var IUserSpaceABI = IUserSpaceMetaData.ABI

// Deprecated: Use IUserSpaceMetaData.Sigs instead.
// IUserSpaceFuncSigs maps the 4-byte function signature to its string representation.
var IUserSpaceFuncSigs = IUserSpaceMetaData.Sigs

// IUserSpace is an auto generated Go binding around an Ethereum contract.
type IUserSpace struct {
	IUserSpaceCaller     // Read-only binding to the contract
	IUserSpaceTransactor // Write-only binding to the contract
	IUserSpaceFilterer   // Log filterer for contract events
}

// IUserSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type IUserSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IUserSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IUserSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IUserSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IUserSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewIUserSpace creates a new instance of IUserSpace, bound to a specific deployed contract.
func NewIUserSpace(address common.Address, backend bind.ContractBackend) (*IUserSpace, error) {
	contract, err := bindIUserSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IUserSpace{IUserSpaceCaller: IUserSpaceCaller{contract: contract}, IUserSpaceTransactor: IUserSpaceTransactor{contract: contract}, IUserSpaceFilterer: IUserSpaceFilterer{contract: contract}}, nil
}

// NewIUserSpaceCaller creates a new read-only instance of IUserSpace, bound to a specific deployed contract.
func NewIUserSpaceCaller(address common.Address, caller bind.ContractCaller) (*IUserSpaceCaller, error) {
	contract, err := bindIUserSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IUserSpaceCaller{contract: contract}, nil
}

// NewIUserSpaceTransactor creates a new write-only instance of IUserSpace, bound to a specific deployed contract.
func NewIUserSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*IUserSpaceTransactor, error) {
	contract, err := bindIUserSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IUserSpaceTransactor{contract: contract}, nil
}

// NewIUserSpaceFilterer creates a new log filterer instance of IUserSpace, bound to a specific deployed contract.
func NewIUserSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*IUserSpaceFilterer, error) {
	contract, err := bindIUserSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IUserSpaceFilterer{contract: contract}, nil
}

// bindIUserSpace binds a generic wrapper to an already deployed contract.
func bindIUserSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_IUserSpace)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) view returns(address)
func (_IUserSpace *IUserSpaceCaller) UserWallets(opts *bind.CallOpts, _userAddr common.Address) (common.Address, error) {
	var out []interface{}
	err := _IUserSpace.contract.Call(opts, &out, "userWallets", _userAddr)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LvRecordableStreamMetaData contains all meta data concerning the LvRecordableStream contract.
var LvRecordableStreamMetaData = &bind.MetaData{
	ABI: "[{\"constant\":false,\"inputs\":[{\"name\":\"requestID\",\"type\":\"uint256\"},{\"name\":\"percentPlayed\",\"type\":\"uint8\"},{\"name\":\"originator\",\"type\":\"address\"},{\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"logRecordingPlaybackCompleted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestID\",\"type\":\"uint256\"},{\"name\":\"originator\",\"type\":\"address\"},{\"name\":\"requestTimestamp\",\"type\":\"uint256\"}],\"name\":\"logRecordingPlaybackStarted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"runAccessInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"runAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"runFinalize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recordingStream\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"logRecordingStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposed_status_code\",\"type\":\"int256\"}],\"name\":\"runStatusChange\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"name\":\"runDescribeStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_handle\",\"type\":\"string\"}],\"name\":\"startStream\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"membershipGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recordingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stream\",\"type\":\"address\"}],\"name\":\"setRecordingStream\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"programId\",\"type\":\"string\"},{\"name\":\"programStart\",\"type\":\"uint256\"},{\"name\":\"programEnd\",\"type\":\"uint256\"},{\"name\":\"programTitle\",\"type\":\"string\"}],\"name\":\"logRecordedProgramId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableRecording\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runCreate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rightsHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"addMembershipGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accessor\",\"type\":\"address\"},{\"name\":\"rightsHolderDecision\",\"type\":\"bool\"}],\"name\":\"logRecordingAuthorization\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runKill\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rightsHolder\",\"type\":\"address\"}],\"name\":\"setRightsHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accessor\",\"type\":\"address\"}],\"name\":\"hasMembership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasRightsHolderPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopStream\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"logRecordingTimes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableRecording\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"logRecordingDeletion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accessor\",\"type\":\"address\"}],\"name\":\"authorizeRecording\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"removeMembershipGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"name\":\"runGrant\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestID\",\"type\":\"uint256\"},{\"name\":\"score_pct\",\"type\":\"uint256\"},{\"name\":\"originator\",\"type\":\"address\"}],\"name\":\"runFinalizeExt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"membershipGroupsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_CHARGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"handle\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rightsHolder\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"provider\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"membership\",\"type\":\"bool\"}],\"name\":\"AuthorizeRecording\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recObj\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recContract\",\"type\":\"address\"}],\"name\":\"CreateRecording\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recObj\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recContract\",\"type\":\"address\"}],\"name\":\"DeleteRecording\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recObj\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recEndTime\",\"type\":\"uint256\"}],\"name\":\"SetRecordingTimes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recObj\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recStatus\",\"type\":\"string\"}],\"name\":\"SetRecordingStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recObj\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accessTimestamp\",\"type\":\"uint256\"}],\"name\":\"RecordingPlaybackStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recObj\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"percentPlayed\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"finalizeTimestamp\",\"type\":\"uint256\"}],\"name\":\"RecordingPlaybackCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recObj\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"programId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"programStart\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"programEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"programTitle\",\"type\":\"string\"}],\"name\":\"RecordedProgramId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"MembershipGroupRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"MembershipGroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StartStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StopStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EnableRecording\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DisableRecording\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"LogBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"uint256\"}],\"name\":\"LogUint256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"int256\"}],\"name\":\"LogInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunKill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposedStatusCode\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"returnStatusCode\",\"type\":\"int256\"}],\"name\":\"RunStatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"calculateAccessCharge\",\"type\":\"int256\"}],\"name\":\"RunAccessCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunFinalize\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"6af27417": "DEFAULT_ACCESS()",
		"f185db0c": "DEFAULT_CHARGE()",
		"b535b03e": "DEFAULT_SEE()",
		"90657ca0": "addMembershipGroup(address)",
		"c992f43a": "authorizeRecording(address)",
		"d52e6679": "canRecord()",
		"af570c04": "contentSpace()",
		"02d05d3f": "creator()",
		"c949eb64": "disableRecording()",
		"793a648c": "enableRecording()",
		"3197cbb6": "endTime()",
		"fd0da099": "handle()",
		"a88db6ad": "hasMembership(address)",
		"af7e5678": "hasRightsHolderPermission()",
		"41c0e1b5": "kill()",
		"782f1a6f": "logRecordedProgramId(string,uint256,uint256,string)",
		"9156d1fd": "logRecordingAuthorization(address,bool)",
		"c96444f0": "logRecordingDeletion()",
		"01a392bf": "logRecordingPlaybackCompleted(uint256,uint8,address,uint256)",
		"04fbef35": "logRecordingPlaybackStarted(uint256,address,uint256)",
		"2b45298e": "logRecordingStatus()",
		"c2ccedad": "logRecordingTimes()",
		"5f7231ab": "membershipGroups(uint256)",
		"ecedf6d7": "membershipGroupsLength()",
		"8da5cb5b": "owner()",
		"684e9657": "recordingEnabled()",
		"21130b6d": "recordingStream()",
		"e1db5840": "removeMembershipGroup(address)",
		"81e20e6e": "rightsHolder()",
		"123e0e80": "runAccess(uint256,uint8,bytes32[],address[])",
		"0f82c16f": "runAccessInfo(uint8,bytes32[],address[])",
		"7b1cdb3e": "runCreate()",
		"45080442": "runDescribeStatus(int256)",
		"c9f3d94c": "runEdit()",
		"17685953": "runFinalize(uint256,uint256)",
		"eb81eff0": "runFinalizeExt(uint256,uint256,address)",
		"e870ed91": "runGrant(uint256,bool)",
		"9e99bbea": "runKill()",
		"3513a805": "runStatusChange(int256)",
		"6856ff59": "setRecordingStream(address)",
		"a1cd0b53": "setRightsHolder(address)",
		"5d39c071": "startStream(string)",
		"78e97925": "startTime()",
		"c01d76d5": "stopStream()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
	},
	Bin: "0x60806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f436f6e74656e7432303139313231393133343330304d4c0000000000000000006004557f4c7652656353747265616d32303139313033313137343530304d4c00000000006005556001805432600160a060020a0319918216811790925560028054909116821790553314620000ab57600a8054600160a060020a031916331790555b600060068190556007819055604080516020810191829052829052620000d59160099190620000dc565b5062000181565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200011f57805160ff19168380011785556200014f565b828001600101855582156200014f579182015b828111156200014f57825182559160200191906001019062000132565b506200015d92915062000161565b5090565b6200017e91905b808211156200015d576000815560010162000168565b90565b61389380620001916000396000f3006080604052600436106102215763ffffffff60e060020a60003504166301a392bf811461022357806302d05d3f1461025057806304fbef35146102815780630f82c16f146102a8578063123e0e801461036d578063176859531461040c57806321130b6d1461041a5780632b45298e1461042f5780633197cbb61461045a5780633513a8051461046f57806341c0e1b51461047a578063450804421461048f57806354fd4d50146104a75780635d39c071146104bc5780635f7231ab14610515578063684e96571461052d5780636856ff59146105565780636af27417146105775780636d2e4b1b1461058c578063782f1a6f146105ad57806378e9792514610651578063793a648c146106665780637b1cdb3e1461067b57806381e20e6e146106835780638da5cb5b1461069857806390657ca0146106ad5780639156d1fd146106ce5780639e99bbea1461070f578063a1cd0b5314610717578063a88db6ad14610738578063af570c0414610759578063af7e56781461076e578063b535b03e14610783578063c01d76d514610798578063c2ccedad146107ad578063c949eb64146107c2578063c96444f0146107d7578063c992f43a146107ec578063c9f3d94c1461080d578063d52e667914610822578063e1db584014610837578063e870ed9114610858578063eb81eff014610868578063ecedf6d714610882578063f185db0c14610897578063f2fde38b146108ac578063fd0da099146108cd575b005b34801561022f57600080fd5b5061022160043560ff60243516600160a060020a0360443516606435610957565b34801561025c57600080fd5b50610265610a2e565b60408051600160a060020a039092168252519081900360200190f35b34801561028d57600080fd5b50610221600435600160a060020a0360243516604435610a3d565b3480156102b457600080fd5b5060408051602060046024803582810135848102808701860190975280865261033e96843560ff1696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610b0a9650505050505050565b6040805160ff958616815293851660208501529190931682820152606082019290925290519081900360800190f35b60408051602060046044358181013583810280860185019096528085526103fa958335956024803560ff1696369695606495939492019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610b199650505050505050565b60408051918252519081900360200190f35b6103fa600435602435610b23565b34801561042657600080fd5b50610265610b2b565b34801561043b57600080fd5b50610444610b3a565b6040805160ff9092168252519081900360200190f35b34801561046657600080fd5b506103fa610daa565b6103fa600435610db0565b34801561048657600080fd5b50610221610db3565b34801561049b57600080fd5b506103fa600435610def565b3480156104b357600080fd5b506103fa610df5565b3480156104c857600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610221943694929360249392840191908190840183828082843750949750610dfb9650505050505050565b34801561052157600080fd5b50610265600435610e7d565b34801561053957600080fd5b50610542610ea5565b604080519115158252519081900360200190f35b34801561056257600080fd5b50610221600160a060020a0360043516610eae565b34801561058357600080fd5b50610444610efe565b34801561059857600080fd5b50610221600160a060020a0360043516610f03565b3480156105b957600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261022194369492936024939284019190819084018382808284375050604080516020888301358a018035601f8101839004830284018301909452838352979a89359a8a8301359a91999098506060909101965091945090810192508190840183828082843750949750610f519650505050505050565b34801561065d57600080fd5b506103fa611121565b34801561067257600080fd5b50610221611127565b6103fa611197565b34801561068f57600080fd5b5061026561141f565b3480156106a457600080fd5b5061026561142e565b3480156106b957600080fd5b50610221600160a060020a036004351661143d565b3480156106da57600080fd5b506106f4600160a060020a0360043516602435151561165c565b60408051921515835290151560208301528051918290030190f35b6103fa611714565b34801561072357600080fd5b50610221600160a060020a0360043516611719565b34801561074457600080fd5b50610542600160a060020a03600435166117e8565b34801561076557600080fd5b5061026561190c565b34801561077a57600080fd5b5061054261191b565b34801561078f57600080fd5b506104446119dc565b3480156107a457600080fd5b506102216119e1565b3480156107b957600080fd5b50610221611a68565b3480156107ce57600080fd5b50610221611c41565b3480156107e357600080fd5b50610221611cae565b3480156107f857600080fd5b50610542600160a060020a0360043516611d70565b34801561081957600080fd5b506103fa611e54565b34801561082e57600080fd5b50610542611e59565b34801561084357600080fd5b50610542600160a060020a0360043516611e86565b6103fa6004356024351515610b23565b6103fa600435602435600160a060020a03604435166120aa565b34801561088e57600080fd5b506103fa6120b3565b3480156108a357600080fd5b506104446120b9565b3480156108b857600080fd5b50610221600160a060020a03600435166120be565b3480156108d957600080fd5b506108e2612123565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561091c578181015183820152602001610904565b50505050905090810190601f1680156109495780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60003390507f208745b583bd0c257eced13411dc4b50e9a3a9c1ef0cc2f95b30a7457ec50cc1428483600160a060020a031663129b97756040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156109bd57600080fd5b505af11580156109d1573d6000803e3d6000fd5b505050506040513d60208110156109e757600080fd5b505160408051938452600160a060020a0392831660208501529116828201526060820188905260ff8716608083015260a08201859052519081900360c00190a15050505050565b600154600160a060020a031681565b60003390507f182a726f966f22c96d651085c2a7143482b8d96fb0964ff2664ab8bdf2b703aa428483600160a060020a031663129b97756040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610aa357600080fd5b505af1158015610ab7573d6000803e3d6000fd5b505050506040513d6020811015610acd57600080fd5b505160408051938452600160a060020a0392831660208501529116828201526060820187905260808201859052519081900360a00190a150505050565b60076000808093509350935093565b6000949350505050565b600092915050565b600a54600160a060020a031681565b600080600033915081600160a060020a031663922386c56040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610b8057600080fd5b505af1158015610b94573d6000803e3d6000fd5b505050506040513d6020811015610baa57600080fd5b50519050600a60ff82161415610cab577f93ee8bc66b5d08a5dc39e788b1f78aa5f9ff2deda9e1387aa1fe22f9c329ed85423284600160a060020a031663129b97756040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610c1b57600080fd5b505af1158015610c2f573d6000803e3d6000fd5b505050506040513d6020811015610c4557600080fd5b505160408051938452600160a060020a0392831660208501529116828201526080606083018190526009908301527f7265636f7264696e67000000000000000000000000000000000000000000000060a0830152519081900360c00190a1809250610da5565b8060ff1660641415610da1577f93ee8bc66b5d08a5dc39e788b1f78aa5f9ff2deda9e1387aa1fe22f9c329ed85423284600160a060020a031663129b97756040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610d1857600080fd5b505af1158015610d2c573d6000803e3d6000fd5b505050506040513d6020811015610d4257600080fd5b505160408051938452600160a060020a0392831660208501529116828201526080606083018190526008908301527f636f6d706c65746500000000000000000000000000000000000000000000000060a0830152519081900360c00190a15b8092505b505090565b60075481565b90565b600254600160a060020a0316321480610dd65750600254600160a060020a031633145b1515610de157600080fd5b600254600160a060020a0316ff5b50600090565b60055481565b600254600160a060020a0316321480610e1e5750600254600160a060020a031633145b1515610e2957600080fd5b8051610e3c906009906020840190612397565b50426006819055600060075560408051918252517f8d7e6a8f23ccc8845c41fd09bebe570a0885272343268bbdfd71090b878b4b219181900360200190a150565b600c805482908110610e8b57fe5b600091825260209091200154600160a060020a0316905081565b60085460ff1681565b600254600160a060020a0316321480610ed15750600254600160a060020a031633145b1515610edc57600080fd5b600a8054600160a060020a031916600160a060020a0392909216919091179055565b600281565b600154600160a060020a03163214610f1a57600080fd5b600160a060020a0381161515610f2f57600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b60003390507fe3b30c4da7320d1a542eb57f205a34d2fc36ecd114595f3d50be2a73b3426e6b423283600160a060020a031663129b97756040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610fb757600080fd5b505af1158015610fcb573d6000803e3d6000fd5b505050506040513d6020811015610fe157600080fd5b8101908080519060200190929190505050888888886040518088815260200187600160a060020a0316600160a060020a0316815260200186600160a060020a0316600160a060020a031681526020018060200185815260200184815260200180602001838103835287818151815260200191508051906020019080838360005b83811015611079578181015183820152602001611061565b50505050905090810190601f1680156110a65780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156110d95781810151838201526020016110c1565b50505050905090810190601f1680156111065780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390a15050505050565b60065481565b600254600160a060020a031632148061114a5750600254600160a060020a031633145b151561115557600080fd5b6008805460ff191660011790556040805142815290517fe1182e14924c528bfb564fb8d4feefe9766244f88b00051f28182e635e9a1ae89181900360200190a1565b600a5460009081908190819081908190600160a060020a031615156111d0576111bf33610eae565b6111c7611127565b60009550611417565b600b54600160a060020a03161561129157600b54600a54604080517f6135c504000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015232602482015290519190921696508691636135c5049160448083019260209291908290030181600087803b15801561125557600080fd5b505af1158015611269573d6000803e3d6000fd5b505050506040513d602081101561127f57600080fd5b5051151561128c57600080fd5b6112a5565b61129a32611d70565b15156112a557600080fd5b6112ad612411565b604051809103906000f0801580156112c9573d6000803e3d6000fd5b50604080517fa4a22c590000000000000000000000000000000000000000000000000000000081523360048201529051919450849350600160a060020a0384169163a4a22c599160248082019260009290919082900301818387803b15801561133157600080fd5b505af1158015611345573d6000803e3d6000fd5b5050604080517fe5385303000000000000000000000000000000000000000000000000000000008152600160a060020a0387166004820152905133945084935063e53853039250602480830192600092919082900301818387803b1580156113ac57600080fd5b505af11580156113c0573d6000803e3d6000fd5b5050604080514281523260208201523381830152600160a060020a038716606082015290517f41b90676ca6c9f288172c8f4f1f0253bfc527115acd3f7a972a5219ea4b0d0c59350908190036080019150a1600095505b505050505090565b600b54600160a060020a031681565b600254600160a060020a031681565b6002546000908190600160a060020a03163214806114655750600254600160a060020a031633145b151561147057600080fd5b600d54915061148183600c846121b1565b600d8190558210156116575760408051428152600160a060020a038516602082015281517f467a7c1305f91e354a8a1e9046906d4d1a4852f958a073a392555d809be313a7929181900390910190a182905080600160a060020a0316633def5140600a60009054906101000a9004600160a060020a031683600160a060020a031663d1aeb6516040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561153657600080fd5b505af115801561154a573d6000803e3d6000fd5b505050506040513d602081101561156057600080fd5b5051604080517f479a0c510000000000000000000000000000000000000000000000000000000081529051600160a060020a0387169163479a0c519160048083019260209291908290030181600087803b1580156115bd57600080fd5b505af11580156115d1573d6000803e3d6000fd5b505050506040513d60208110156115e757600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03909416600485015260ff92831660248501529116604483015251606480830192600092919082900301818387803b15801561163e57600080fd5b505af1158015611652573d6000803e3d6000fd5b505050505b505050565b600b5460009081908190600160a060020a031633148061168d5750600b54600160a060020a031615801561168d5750835b151561169857600080fd5b6116a1856117e8565b60085460408051428152600160a060020a03891660208201528715158183015260ff909216151560608301528215156080830152519192507fe36c3ab835cea1a8af00f744c77bb77bbbd33d20062bee3f9aceb6518d08e45e919081900360a00190a160085460ff169590945092505050565b600090565b600254600090600160a060020a031632148061173f5750600254600160a060020a031633145b151561174a57600080fd5b50600b8054600160a060020a031916600160a060020a038381169190911791829055600a54604080517fad284b120000000000000000000000000000000000000000000000000000000081529183166004830152519290911691829163ad284b1291602480830192600092919082900301818387803b1580156117cc57600080fd5b505af11580156117e0573d6000803e3d6000fd5b505050505050565b6000806000600d54600014156118015760019250611905565b600091505b600d5482101561190057600c80548390811061181e57fe5b600091825260209091200154600160a060020a0316156118f557600c80548390811061184657fe5b6000918252602080832090910154604080517f95a078e8000000000000000000000000000000000000000000000000000000008152600160a060020a038981166004830152915191909216945084936395a078e893602480850194919392918390030190829087803b1580156118bb57600080fd5b505af11580156118cf573d6000803e3d6000fd5b505050506040513d60208110156118e557600080fd5b5051156118f55760019250611905565b600190910190611806565b600092505b5050919050565b600354600160a060020a031681565b600b546000908190600160a060020a0316156119d35750600b54600a54604080517f250fc29a000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015290519190921691829163250fc29a916024808201926020929091908290030181600087803b1580156119a057600080fd5b505af11580156119b4573d6000803e3d6000fd5b505050506040513d60208110156119ca57600080fd5b505191506119d8565b600191505b5090565b600181565b600254600160a060020a0316321480611a045750600254600160a060020a031633145b1515611a0f57600080fd5b604080516020810191829052600090819052611a2d91600991612397565b5042600781905560408051918252517f1b01b687e3428bc184341f729ec8a57bdd569536206cfb59e5d0cecb30dfcb7e9181900360200190a1565b60003390507f8e6b298cf577550234f0d0de33a4910d4bf1c4e08fe31b1173b2c6232297b3f4423283600160a060020a031663129b97756040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611ace57600080fd5b505af1158015611ae2573d6000803e3d6000fd5b505050506040513d6020811015611af857600080fd5b5051604080517f78e979250000000000000000000000000000000000000000000000000000000081529051600160a060020a038716916378e979259160048083019260209291908290030181600087803b158015611b5557600080fd5b505af1158015611b69573d6000803e3d6000fd5b505050506040513d6020811015611b7f57600080fd5b5051604080517f3197cbb60000000000000000000000000000000000000000000000000000000081529051600160a060020a03881691633197cbb69160048083019260209291908290030181600087803b158015611bdc57600080fd5b505af1158015611bf0573d6000803e3d6000fd5b505050506040513d6020811015611c0657600080fd5b505160408051958652600160a060020a039485166020870152929093168483015260608401526080830191909152519081900360a00190a150565b600254600160a060020a0316321480611c645750600254600160a060020a031633145b1515611c6f57600080fd5b6008805460ff191690556040805142815290517f3a5d2272abc5c09c8e771719f0eeca97e31d2fc425f6c34cf1d7a712b5fb6bfd9181900360200190a1565b60003390507f9d3bb073bb2ef4d4a880f32fbbc665abfad2b29f532a231d93ab2207396f0b25423283600160a060020a031663129b97756040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611d1457600080fd5b505af1158015611d28573d6000803e3d6000fd5b505050506040513d6020811015611d3e57600080fd5b505160408051938452600160a060020a039283166020850152911682820152336060830152519081900360800190a150565b600b5460009081908190600160a060020a031615611e2f57600b54600a54604080517f6135c504000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015232602482015290519190921693508391636135c5049160448083019260209291908290030181600087803b158015611dfc57600080fd5b505af1158015611e10573d6000803e3d6000fd5b505050506040513d6020811015611e2657600080fd5b50519250611905565b611e3a32600161165c565b91508190508015611e4d575060085460ff165b9250611905565b606490565b60085460009060ff168015611e725750611e72326117e8565b15610def57611e7f61191b565b9050610db0565b60025460009081908190600160a060020a0316321480611eb05750600254600160a060020a031633145b1515611ebb57600080fd5b600d549150611ecc84600c84612280565b600d8190558211156119005760408051428152600160a060020a038616602082015281517f7b4822b1021af568bad37d56a35fbc255dc67153c544aa4116a289632a4e5955929181900390910190a183905080600160a060020a0316633def5140600a60009054906101000a9004600160a060020a031683600160a060020a031663d1aeb6516040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611f8157600080fd5b505af1158015611f95573d6000803e3d6000fd5b505050506040513d6020811015611fab57600080fd5b5051604080517f8232f3f10000000000000000000000000000000000000000000000000000000081529051600160a060020a03871691638232f3f19160048083019260209291908290030181600087803b15801561200857600080fd5b505af115801561201c573d6000803e3d6000fd5b505050506040513d602081101561203257600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03909416600485015260ff92831660248501529116604483015251606480830192600092919082900301818387803b15801561208957600080fd5b505af115801561209d573d6000803e3d6000fd5b5050505060019250611905565b60009392505050565b600d5481565b600481565b600254600160a060020a03163214806120e15750600254600160a060020a031633145b15156120ec57600080fd5b600160a060020a038116151561210157600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b6009805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156121a95780601f1061217e576101008083540402835291602001916121a9565b820191906000526020600020905b81548152906001019060200180831161218c57829003601f168201915b505050505081565b6000805b828110156121fa5783818154811015156121cb57fe5b600091825260209091200154600160a060020a03868116911614156121f257829150612278565b6001016121b5565b83548310156122455784848481548110151561221257fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550612271565b8354600181018555600085815260209020018054600160a060020a031916600160a060020a0387161790555b8260010191505b509392505050565b6000805b8281101561238e57838181548110151561229a57fe5b600091825260209091200154600160a060020a03868116911614156123865783818154811015156122c757fe5b60009182526020909120018054600160a060020a03191690556000198301811461237b5783600184038154811015156122fc57fe5b6000918252602090912001548454600160a060020a039091169085908390811061232257fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550836001840381548110151561236157fe5b60009182526020909120018054600160a060020a03191690555b600183039150612278565b600101612284565b50909392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106123d857805160ff1916838001178555612405565b82800160010185558215612405579182015b828111156124055782518255916020019190600101906123ea565b506119d8929150612421565b60405161142c8061243c83390190565b610db091905b808211156119d85760008155600101612427560060806040527f4f776e61626c6532303139303532383139333830304d4c00000000000000000060009081557f436f6e74656e7432303139313231393133343330304d4c0000000000000000006004557f4c765265636f7264696e6732303139313033313230343130304d4c00000000006005556001805432600160a060020a03199182168117909255600280549091169091179055600681905560078190556008805461010060a860020a03191661010033021760ff19169055600a819055600c8190556113599081906100d390396000f3006080604052600436106101715763ffffffff60e060020a60003504166302d05d3f81146101735780630f82c16f146101a4578063123e0e8014610269578063129b977514610308578063172cc9211461031d57806317685953146103fa57806322434836146104085780633197cbb6146104235780633513a805146104385780633e0a322d1461044357806341c0e1b51461045b578063450804421461047057806354fd4d50146104885780635ebfe0711461049d5780636af27417146104b25780636d2e4b1b146104dd57806378e97925146104fe5780637b1cdb3e146105135780638da5cb5b1461051b578063922386c5146105305780639e99bbea14610545578063a3b2d3d51461054d578063a4a22c5914610568578063af570c0414610589578063b535b03e1461059e578063c9f3d94c146105b3578063ccb98ffc146105c8578063e870ed91146105e0578063eb81eff0146105f0578063f185db0c1461060a578063f2fde38b1461061f575b005b34801561017f57600080fd5b50610188610640565b60408051600160a060020a039092168252519081900360200190f35b3480156101b057600080fd5b5060408051602060046024803582810135848102808701860190975280865261023a96843560ff1696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061064f9650505050505050565b6040805160ff958616815293851660208501529190931682820152606082019290925290519081900360800190f35b60408051602060046044358181013583810280860185019096528085526102f6958335956024803560ff1696369695606495939492019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061065e9650505050505050565b60408051918252519081900360200190f35b34801561031457600080fd5b50610188610860565b34801561032957600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261017194369492936024939284019190819084018382808284375050604080516020888301358a018035601f8101839004830284018301909452838352979a89359a8a8301359a91999098506060909101965091945090810192508190840183828082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061086f9650505050505050565b6102f6600435602435610a9b565b34801561041457600080fd5b50610171600435602435610b3f565b34801561042f57600080fd5b506102f6610c00565b6102f6600435610c06565b34801561044f57600080fd5b50610171600435610c09565b34801561046757600080fd5b50610171610d09565b34801561047c57600080fd5b506102f6600435610d45565b34801561049457600080fd5b506102f6610d4b565b3480156104a957600080fd5b50610188610d51565b3480156104be57600080fd5b506104c7610d65565b6040805160ff9092168252519081900360200190f35b3480156104e957600080fd5b50610171600160a060020a0360043516610d6a565b34801561050a57600080fd5b506102f6610dc5565b6102f6610dcb565b34801561052757600080fd5b50610188610dd0565b34801561053c57600080fd5b506104c7610ddf565b6102f6610de8565b34801561055957600080fd5b5061017160ff60043516610e62565b34801561057457600080fd5b50610171600160a060020a0360043516610f6a565b34801561059557600080fd5b50610188610fc7565b3480156105aa57600080fd5b506104c7610fd6565b3480156105bf57600080fd5b506102f6610fdb565b3480156105d457600080fd5b50610171600435611077565b6102f66004356024351515611127565b6102f6600435602435600160a060020a036044351661112f565b34801561061657600080fd5b506104c76112b6565b34801561062b57600080fd5b50610171600160a060020a03600435166112bb565b600154600160a060020a031681565b60076000808093509350935093565b60008060008560ff16111561085457600860019054906101000a9004600160a060020a0316905082600081518110151561069457fe5b90602001906020020151600160a060020a03166000141561073957604080517f04fbef35000000000000000000000000000000000000000000000000000000008152600481018890523260248201524260448201529051600160a060020a038316916304fbef3591606480830192600092919082900301818387803b15801561071c57600080fd5b505af1158015610730573d6000803e3d6000fd5b50505050610854565b600a80546001019055600b54600c54101561077357600a54600b600c5481548110151561076257fe5b6000918252602090912001556107aa565b600a54600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901555b600c54600101600c8190555080600160a060020a03166304fbef35600a548560008151811015156107d757fe5b90602001906020020151896040518463ffffffff1660e060020a0281526004018084815260200183600160a060020a0316600160a060020a031681526020018281526020019350505050600060405180830381600087803b15801561083b57600080fd5b505af115801561084f573d6000803e3d6000fd5b505050505b50600095945050505050565b600954600160a060020a031681565b600254600090600160a060020a03163214806108955750600254600160a060020a031633145b15156108a057600080fd5b600860019054906101000a9004600160a060020a0316905080600160a060020a031663782f1a6f878787876040518563ffffffff1660e060020a028152600401808060200185815260200184815260200180602001838103835287818151815260200191508051906020019080838360005b8381101561092a578181015183820152602001610912565b50505050905090810190601f1680156109575780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561098a578181015183820152602001610972565b50505050905090810190601f1680156109b75780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b1580156109da57600080fd5b505af11580156109ee573d6000803e3d6000fd5b505050507f453384b91e17e6c44d171f27d5d32a864cf9cc9740578ffd6552d323aa97337242876040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a58578181015183820152602001610a40565b50505050905090810190601f168015610a855780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1505050505050565b600854604080517f01a392bf0000000000000000000000000000000000000000000000000000000081526004810185905260ff8416602482015232604482015242606482015290516000926101009004600160a060020a03169182916301a392bf91608480820192879290919082900301818387803b158015610b1d57600080fd5b505af1158015610b31573d6000803e3d6000fd5b506000979650505050505050565b60068290556007819055604080514281526020810184905280820183905290516000917f3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c54919081900360600190a1600860019054906101000a9004600160a060020a0316905080600160a060020a031663c2ccedad6040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610be357600080fd5b505af1158015610bf7573d6000803e3d6000fd5b50505050505050565b60075481565b90565b600254600090600160a060020a0316321480610c2f5750600254600160a060020a031633145b1515610c3a57600080fd5b811515610c4a5742600655610c50565b60068290555b60065460075460408051428152602081019390935282810191909152517f3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c549181900360600190a1600860019054906101000a9004600160a060020a0316905080600160a060020a031663c2ccedad6040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610ced57600080fd5b505af1158015610d01573d6000803e3d6000fd5b505050505050565b600254600160a060020a0316321480610d2c5750600254600160a060020a031633145b1515610d3757600080fd5b600254600160a060020a0316ff5b50600090565b60055481565b6008546101009004600160a060020a031681565b600281565b600154600160a060020a03163214610d8157600080fd5b600160a060020a0381161515610d9657600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60065481565b600090565b600254600160a060020a031681565b60085460ff1681565b600080600860019054906101000a9004600160a060020a0316905080600160a060020a031663c96444f06040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610e4157600080fd5b505af1158015610e55573d6000803e3d6000fd5b50505050606491505b5090565b600254600090600160a060020a0316321480610e885750600254600160a060020a031633145b1515610e9357600080fd5b6008805460ff191660ff84811691909117918290556040805142815292909116602083015280517f6fff8c8938f3906f27a679f8d6b6652c28d82df5e27e55ef5cdc5f96b06dee099281900390910190a1600860019054906101000a9004600160a060020a0316905080600160a060020a0316632b45298e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610f3a57600080fd5b505af1158015610f4e573d6000803e3d6000fd5b505050506040513d6020811015610f6457600080fd5b50505050565b600254600160a060020a0316321480610f8d5750600254600160a060020a031633145b1515610f9857600080fd5b6009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354600160a060020a031681565b600181565b600080600860019054906101000a9004600160a060020a0316905080600160a060020a031663d52e66796040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561103457600080fd5b505af1158015611048573d6000803e3d6000fd5b505050506040513d602081101561105e57600080fd5b50511561106e5760009150610e5e565b600a9150610e5e565b60008115156110895742600755610c50565b6007829055600654604080514281526020810192909252818101849052517f3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c549181900360600190a1600860019054906101000a9004600160a060020a0316905080600160a060020a031663c2ccedad6040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610ced57600080fd5b600092915050565b600854600c546000916101009004600160a060020a0316908210156112195780600160a060020a03166301a392bf600b6001600c540381548110151561117157fe5b60009182526020822001546040805160e060020a63ffffffff8616028152600481019290925260ff89166024830152600160a060020a0388166044830152606482018a9052516084808301939282900301818387803b1580156111d357600080fd5b505af11580156111e7573d6000803e3d6000fd5b50505050600b6001600c54038154811015156111ff57fe5b6000918252602082200155600c80546000190190556112ab565b604080517f01a392bf00000000000000000000000000000000000000000000000000000000815260006004820181905260ff87166024830152600160a060020a038681166044840152606483018990529251928416926301a392bf92608480820193929182900301818387803b15801561129257600080fd5b505af11580156112a6573d6000803e3d6000fd5b505050505b506000949350505050565b600481565b600254600160a060020a03163214806112de5750600254600160a060020a031633145b15156112e957600080fd5b600160a060020a03811615156112fe57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058200a30fa0c4d6c9d9b951c3e4e459669d7d41d1581feaa664e91020a65845c15bc0029a165627a7a72305820dfbe1a838da3cc9517798c705c14670d4d65a794c3b82dd9f8a4504dfb6f34bd0029",
}

// LvRecordableStreamABI is the input ABI used to generate the binding from.
// Deprecated: Use LvRecordableStreamMetaData.ABI instead.
var LvRecordableStreamABI = LvRecordableStreamMetaData.ABI

// Deprecated: Use LvRecordableStreamMetaData.Sigs instead.
// LvRecordableStreamFuncSigs maps the 4-byte function signature to its string representation.
var LvRecordableStreamFuncSigs = LvRecordableStreamMetaData.Sigs

// LvRecordableStreamBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LvRecordableStreamMetaData.Bin instead.
var LvRecordableStreamBin = LvRecordableStreamMetaData.Bin

// DeployLvRecordableStream deploys a new Ethereum contract, binding an instance of LvRecordableStream to it.
func DeployLvRecordableStream(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LvRecordableStream, error) {
	parsed, err := ParsedABI(K_LvRecordableStream)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LvRecordableStreamBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LvRecordableStream{LvRecordableStreamCaller: LvRecordableStreamCaller{contract: contract}, LvRecordableStreamTransactor: LvRecordableStreamTransactor{contract: contract}, LvRecordableStreamFilterer: LvRecordableStreamFilterer{contract: contract}}, nil
}

// LvRecordableStream is an auto generated Go binding around an Ethereum contract.
type LvRecordableStream struct {
	LvRecordableStreamCaller     // Read-only binding to the contract
	LvRecordableStreamTransactor // Write-only binding to the contract
	LvRecordableStreamFilterer   // Log filterer for contract events
}

// LvRecordableStreamCaller is an auto generated read-only Go binding around an Ethereum contract.
type LvRecordableStreamCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LvRecordableStreamTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LvRecordableStreamTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LvRecordableStreamFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LvRecordableStreamFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewLvRecordableStream creates a new instance of LvRecordableStream, bound to a specific deployed contract.
func NewLvRecordableStream(address common.Address, backend bind.ContractBackend) (*LvRecordableStream, error) {
	contract, err := bindLvRecordableStream(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LvRecordableStream{LvRecordableStreamCaller: LvRecordableStreamCaller{contract: contract}, LvRecordableStreamTransactor: LvRecordableStreamTransactor{contract: contract}, LvRecordableStreamFilterer: LvRecordableStreamFilterer{contract: contract}}, nil
}

// NewLvRecordableStreamCaller creates a new read-only instance of LvRecordableStream, bound to a specific deployed contract.
func NewLvRecordableStreamCaller(address common.Address, caller bind.ContractCaller) (*LvRecordableStreamCaller, error) {
	contract, err := bindLvRecordableStream(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamCaller{contract: contract}, nil
}

// NewLvRecordableStreamTransactor creates a new write-only instance of LvRecordableStream, bound to a specific deployed contract.
func NewLvRecordableStreamTransactor(address common.Address, transactor bind.ContractTransactor) (*LvRecordableStreamTransactor, error) {
	contract, err := bindLvRecordableStream(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamTransactor{contract: contract}, nil
}

// NewLvRecordableStreamFilterer creates a new log filterer instance of LvRecordableStream, bound to a specific deployed contract.
func NewLvRecordableStreamFilterer(address common.Address, filterer bind.ContractFilterer) (*LvRecordableStreamFilterer, error) {
	contract, err := bindLvRecordableStream(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamFilterer{contract: contract}, nil
}

// bindLvRecordableStream binds a generic wrapper to an already deployed contract.
func bindLvRecordableStream(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_LvRecordableStream)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() view returns(uint8)
func (_LvRecordableStream *LvRecordableStreamCaller) DEFAULTACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "DEFAULT_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() view returns(uint8)
func (_LvRecordableStream *LvRecordableStreamCaller) DEFAULTCHARGE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "DEFAULT_CHARGE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() view returns(uint8)
func (_LvRecordableStream *LvRecordableStreamCaller) DEFAULTSEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "DEFAULT_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CanRecord is a free data retrieval call binding the contract method 0xd52e6679.
//
// Solidity: function canRecord() view returns(bool)
func (_LvRecordableStream *LvRecordableStreamCaller) CanRecord(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "canRecord")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_LvRecordableStream *LvRecordableStreamCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_LvRecordableStream *LvRecordableStreamCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EndTime is a free data retrieval call binding the contract method 0x3197cbb6.
//
// Solidity: function endTime() view returns(uint256)
func (_LvRecordableStream *LvRecordableStreamCaller) EndTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "endTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Handle is a free data retrieval call binding the contract method 0xfd0da099.
//
// Solidity: function handle() view returns(string)
func (_LvRecordableStream *LvRecordableStreamCaller) Handle(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "handle")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// HasMembership is a free data retrieval call binding the contract method 0xa88db6ad.
//
// Solidity: function hasMembership(address accessor) view returns(bool)
func (_LvRecordableStream *LvRecordableStreamCaller) HasMembership(opts *bind.CallOpts, accessor common.Address) (bool, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "hasMembership", accessor)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRightsHolderPermission is a free data retrieval call binding the contract method 0xaf7e5678.
//
// Solidity: function hasRightsHolderPermission() view returns(bool)
func (_LvRecordableStream *LvRecordableStreamCaller) HasRightsHolderPermission(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "hasRightsHolderPermission")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// MembershipGroups is a free data retrieval call binding the contract method 0x5f7231ab.
//
// Solidity: function membershipGroups(uint256 ) view returns(address)
func (_LvRecordableStream *LvRecordableStreamCaller) MembershipGroups(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "membershipGroups", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MembershipGroupsLength is a free data retrieval call binding the contract method 0xecedf6d7.
//
// Solidity: function membershipGroupsLength() view returns(uint256)
func (_LvRecordableStream *LvRecordableStreamCaller) MembershipGroupsLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "membershipGroupsLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LvRecordableStream *LvRecordableStreamCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RecordingEnabled is a free data retrieval call binding the contract method 0x684e9657.
//
// Solidity: function recordingEnabled() view returns(bool)
func (_LvRecordableStream *LvRecordableStreamCaller) RecordingEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "recordingEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// RecordingStream is a free data retrieval call binding the contract method 0x21130b6d.
//
// Solidity: function recordingStream() view returns(address)
func (_LvRecordableStream *LvRecordableStreamCaller) RecordingStream(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "recordingStream")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RightsHolder is a free data retrieval call binding the contract method 0x81e20e6e.
//
// Solidity: function rightsHolder() view returns(address)
func (_LvRecordableStream *LvRecordableStreamCaller) RightsHolder(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "rightsHolder")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RunAccessInfo is a free data retrieval call binding the contract method 0x0f82c16f.
//
// Solidity: function runAccessInfo(uint8 , bytes32[] , address[] ) view returns(uint8, uint8, uint8, uint256)
func (_LvRecordableStream *LvRecordableStreamCaller) RunAccessInfo(opts *bind.CallOpts, arg0 uint8, arg1 [][32]byte, arg2 []common.Address) (uint8, uint8, uint8, *big.Int, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "runAccessInfo", arg0, arg1, arg2)

	if err != nil {
		return *new(uint8), *new(uint8), *new(uint8), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)
	out2 := *abi.ConvertType(out[2], new(uint8)).(*uint8)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, err

}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) pure returns(bytes32)
func (_LvRecordableStream *LvRecordableStreamCaller) RunDescribeStatus(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "runDescribeStatus", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() view returns(uint256)
func (_LvRecordableStream *LvRecordableStreamCaller) StartTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "startTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_LvRecordableStream *LvRecordableStreamCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LvRecordableStream.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AddMembershipGroup is a paid mutator transaction binding the contract method 0x90657ca0.
//
// Solidity: function addMembershipGroup(address group) returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) AddMembershipGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "addMembershipGroup", group)
}

// AuthorizeRecording is a paid mutator transaction binding the contract method 0xc992f43a.
//
// Solidity: function authorizeRecording(address accessor) returns(bool)
func (_LvRecordableStream *LvRecordableStreamTransactor) AuthorizeRecording(opts *bind.TransactOpts, accessor common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "authorizeRecording", accessor)
}

// DisableRecording is a paid mutator transaction binding the contract method 0xc949eb64.
//
// Solidity: function disableRecording() returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) DisableRecording(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "disableRecording")
}

// EnableRecording is a paid mutator transaction binding the contract method 0x793a648c.
//
// Solidity: function enableRecording() returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) EnableRecording(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "enableRecording")
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "kill")
}

// LogRecordedProgramId is a paid mutator transaction binding the contract method 0x782f1a6f.
//
// Solidity: function logRecordedProgramId(string programId, uint256 programStart, uint256 programEnd, string programTitle) returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) LogRecordedProgramId(opts *bind.TransactOpts, programId string, programStart *big.Int, programEnd *big.Int, programTitle string) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "logRecordedProgramId", programId, programStart, programEnd, programTitle)
}

// LogRecordingAuthorization is a paid mutator transaction binding the contract method 0x9156d1fd.
//
// Solidity: function logRecordingAuthorization(address accessor, bool rightsHolderDecision) returns(bool, bool)
func (_LvRecordableStream *LvRecordableStreamTransactor) LogRecordingAuthorization(opts *bind.TransactOpts, accessor common.Address, rightsHolderDecision bool) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "logRecordingAuthorization", accessor, rightsHolderDecision)
}

// LogRecordingDeletion is a paid mutator transaction binding the contract method 0xc96444f0.
//
// Solidity: function logRecordingDeletion() returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) LogRecordingDeletion(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "logRecordingDeletion")
}

// LogRecordingPlaybackCompleted is a paid mutator transaction binding the contract method 0x01a392bf.
//
// Solidity: function logRecordingPlaybackCompleted(uint256 requestID, uint8 percentPlayed, address originator, uint256 requestTimestamp) returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) LogRecordingPlaybackCompleted(opts *bind.TransactOpts, requestID *big.Int, percentPlayed uint8, originator common.Address, requestTimestamp *big.Int) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "logRecordingPlaybackCompleted", requestID, percentPlayed, originator, requestTimestamp)
}

// LogRecordingPlaybackStarted is a paid mutator transaction binding the contract method 0x04fbef35.
//
// Solidity: function logRecordingPlaybackStarted(uint256 requestID, address originator, uint256 requestTimestamp) returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) LogRecordingPlaybackStarted(opts *bind.TransactOpts, requestID *big.Int, originator common.Address, requestTimestamp *big.Int) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "logRecordingPlaybackStarted", requestID, originator, requestTimestamp)
}

// LogRecordingStatus is a paid mutator transaction binding the contract method 0x2b45298e.
//
// Solidity: function logRecordingStatus() returns(uint8)
func (_LvRecordableStream *LvRecordableStreamTransactor) LogRecordingStatus(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "logRecordingStatus")
}

// LogRecordingTimes is a paid mutator transaction binding the contract method 0xc2ccedad.
//
// Solidity: function logRecordingTimes() returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) LogRecordingTimes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "logRecordingTimes")
}

// RemoveMembershipGroup is a paid mutator transaction binding the contract method 0xe1db5840.
//
// Solidity: function removeMembershipGroup(address group) returns(bool)
func (_LvRecordableStream *LvRecordableStreamTransactor) RemoveMembershipGroup(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "removeMembershipGroup", group)
}

// RunAccess is a paid mutator transaction binding the contract method 0x123e0e80.
//
// Solidity: function runAccess(uint256 , uint8 , bytes32[] , address[] ) payable returns(uint256)
func (_LvRecordableStream *LvRecordableStreamTransactor) RunAccess(opts *bind.TransactOpts, arg0 *big.Int, arg1 uint8, arg2 [][32]byte, arg3 []common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "runAccess", arg0, arg1, arg2, arg3)
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() payable returns(uint256)
func (_LvRecordableStream *LvRecordableStreamTransactor) RunCreate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "runCreate")
}

// RunEdit is a paid mutator transaction binding the contract method 0xc9f3d94c.
//
// Solidity: function runEdit() returns(uint256)
func (_LvRecordableStream *LvRecordableStreamTransactor) RunEdit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "runEdit")
}

// RunFinalize is a paid mutator transaction binding the contract method 0x17685953.
//
// Solidity: function runFinalize(uint256 , uint256 ) payable returns(uint256)
func (_LvRecordableStream *LvRecordableStreamTransactor) RunFinalize(opts *bind.TransactOpts, arg0 *big.Int, arg1 *big.Int) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "runFinalize", arg0, arg1)
}

// RunFinalizeExt is a paid mutator transaction binding the contract method 0xeb81eff0.
//
// Solidity: function runFinalizeExt(uint256 requestID, uint256 score_pct, address originator) payable returns(uint256)
func (_LvRecordableStream *LvRecordableStreamTransactor) RunFinalizeExt(opts *bind.TransactOpts, requestID *big.Int, score_pct *big.Int, originator common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "runFinalizeExt", requestID, score_pct, originator)
}

// RunGrant is a paid mutator transaction binding the contract method 0xe870ed91.
//
// Solidity: function runGrant(uint256 , bool ) payable returns(uint256)
func (_LvRecordableStream *LvRecordableStreamTransactor) RunGrant(opts *bind.TransactOpts, arg0 *big.Int, arg1 bool) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "runGrant", arg0, arg1)
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() payable returns(uint256)
func (_LvRecordableStream *LvRecordableStreamTransactor) RunKill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "runKill")
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) payable returns(int256)
func (_LvRecordableStream *LvRecordableStreamTransactor) RunStatusChange(opts *bind.TransactOpts, proposed_status_code *big.Int) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "runStatusChange", proposed_status_code)
}

// SetRecordingStream is a paid mutator transaction binding the contract method 0x6856ff59.
//
// Solidity: function setRecordingStream(address stream) returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) SetRecordingStream(opts *bind.TransactOpts, stream common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "setRecordingStream", stream)
}

// SetRightsHolder is a paid mutator transaction binding the contract method 0xa1cd0b53.
//
// Solidity: function setRightsHolder(address _rightsHolder) returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) SetRightsHolder(opts *bind.TransactOpts, _rightsHolder common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "setRightsHolder", _rightsHolder)
}

// StartStream is a paid mutator transaction binding the contract method 0x5d39c071.
//
// Solidity: function startStream(string _handle) returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) StartStream(opts *bind.TransactOpts, _handle string) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "startStream", _handle)
}

// StopStream is a paid mutator transaction binding the contract method 0xc01d76d5.
//
// Solidity: function stopStream() returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) StopStream(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "stopStream")
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _LvRecordableStream.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LvRecordableStream *LvRecordableStreamTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _LvRecordableStream.contract.RawTransact(opts, calldata)
}

// LvRecordableStreamAuthorizeRecordingIterator is returned from FilterAuthorizeRecording and is used to iterate over the raw logs and unpacked data for AuthorizeRecording events raised by the LvRecordableStream contract.
type LvRecordableStreamAuthorizeRecordingIterator struct {
	Event *LvRecordableStreamAuthorizeRecording // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamAuthorizeRecordingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamAuthorizeRecording)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamAuthorizeRecording)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamAuthorizeRecordingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamAuthorizeRecordingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamAuthorizeRecording represents a AuthorizeRecording event raised by the LvRecordableStream contract.
type LvRecordableStreamAuthorizeRecording struct {
	Timestamp    *big.Int
	Accessor     common.Address
	RightsHolder bool
	Provider     bool
	Membership   bool
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterAuthorizeRecording is a free log retrieval operation binding the contract event 0xe36c3ab835cea1a8af00f744c77bb77bbbd33d20062bee3f9aceb6518d08e45e.
//
// Solidity: event AuthorizeRecording(uint256 timestamp, address accessor, bool rightsHolder, bool provider, bool membership)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterAuthorizeRecording(opts *bind.FilterOpts) (*LvRecordableStreamAuthorizeRecordingIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "AuthorizeRecording")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamAuthorizeRecordingIterator{contract: _LvRecordableStream.contract, event: "AuthorizeRecording", logs: logs, sub: sub}, nil
}

// WatchAuthorizeRecording is a free log subscription operation binding the contract event 0xe36c3ab835cea1a8af00f744c77bb77bbbd33d20062bee3f9aceb6518d08e45e.
//
// Solidity: event AuthorizeRecording(uint256 timestamp, address accessor, bool rightsHolder, bool provider, bool membership)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchAuthorizeRecording(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamAuthorizeRecording) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "AuthorizeRecording")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamAuthorizeRecording)
				if err := _LvRecordableStream.contract.UnpackLog(event, "AuthorizeRecording", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorizeRecording is a log parse operation binding the contract event 0xe36c3ab835cea1a8af00f744c77bb77bbbd33d20062bee3f9aceb6518d08e45e.
//
// Solidity: event AuthorizeRecording(uint256 timestamp, address accessor, bool rightsHolder, bool provider, bool membership)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseAuthorizeRecording(log types.Log) (*LvRecordableStreamAuthorizeRecording, error) {
	event := new(LvRecordableStreamAuthorizeRecording)
	if err := _LvRecordableStream.contract.UnpackLog(event, "AuthorizeRecording", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamCreateRecordingIterator is returned from FilterCreateRecording and is used to iterate over the raw logs and unpacked data for CreateRecording events raised by the LvRecordableStream contract.
type LvRecordableStreamCreateRecordingIterator struct {
	Event *LvRecordableStreamCreateRecording // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamCreateRecordingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamCreateRecording)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamCreateRecording)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamCreateRecordingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamCreateRecordingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamCreateRecording represents a CreateRecording event raised by the LvRecordableStream contract.
type LvRecordableStreamCreateRecording struct {
	Timestamp   *big.Int
	Accessor    common.Address
	RecObj      common.Address
	RecContract common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterCreateRecording is a free log retrieval operation binding the contract event 0x41b90676ca6c9f288172c8f4f1f0253bfc527115acd3f7a972a5219ea4b0d0c5.
//
// Solidity: event CreateRecording(uint256 timestamp, address accessor, address recObj, address recContract)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterCreateRecording(opts *bind.FilterOpts) (*LvRecordableStreamCreateRecordingIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "CreateRecording")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamCreateRecordingIterator{contract: _LvRecordableStream.contract, event: "CreateRecording", logs: logs, sub: sub}, nil
}

// WatchCreateRecording is a free log subscription operation binding the contract event 0x41b90676ca6c9f288172c8f4f1f0253bfc527115acd3f7a972a5219ea4b0d0c5.
//
// Solidity: event CreateRecording(uint256 timestamp, address accessor, address recObj, address recContract)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchCreateRecording(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamCreateRecording) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "CreateRecording")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamCreateRecording)
				if err := _LvRecordableStream.contract.UnpackLog(event, "CreateRecording", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateRecording is a log parse operation binding the contract event 0x41b90676ca6c9f288172c8f4f1f0253bfc527115acd3f7a972a5219ea4b0d0c5.
//
// Solidity: event CreateRecording(uint256 timestamp, address accessor, address recObj, address recContract)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseCreateRecording(log types.Log) (*LvRecordableStreamCreateRecording, error) {
	event := new(LvRecordableStreamCreateRecording)
	if err := _LvRecordableStream.contract.UnpackLog(event, "CreateRecording", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamDeleteRecordingIterator is returned from FilterDeleteRecording and is used to iterate over the raw logs and unpacked data for DeleteRecording events raised by the LvRecordableStream contract.
type LvRecordableStreamDeleteRecordingIterator struct {
	Event *LvRecordableStreamDeleteRecording // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamDeleteRecordingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamDeleteRecording)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamDeleteRecording)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamDeleteRecordingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamDeleteRecordingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamDeleteRecording represents a DeleteRecording event raised by the LvRecordableStream contract.
type LvRecordableStreamDeleteRecording struct {
	Timestamp   *big.Int
	Accessor    common.Address
	RecObj      common.Address
	RecContract common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterDeleteRecording is a free log retrieval operation binding the contract event 0x9d3bb073bb2ef4d4a880f32fbbc665abfad2b29f532a231d93ab2207396f0b25.
//
// Solidity: event DeleteRecording(uint256 timestamp, address accessor, address recObj, address recContract)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterDeleteRecording(opts *bind.FilterOpts) (*LvRecordableStreamDeleteRecordingIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "DeleteRecording")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamDeleteRecordingIterator{contract: _LvRecordableStream.contract, event: "DeleteRecording", logs: logs, sub: sub}, nil
}

// WatchDeleteRecording is a free log subscription operation binding the contract event 0x9d3bb073bb2ef4d4a880f32fbbc665abfad2b29f532a231d93ab2207396f0b25.
//
// Solidity: event DeleteRecording(uint256 timestamp, address accessor, address recObj, address recContract)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchDeleteRecording(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamDeleteRecording) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "DeleteRecording")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamDeleteRecording)
				if err := _LvRecordableStream.contract.UnpackLog(event, "DeleteRecording", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeleteRecording is a log parse operation binding the contract event 0x9d3bb073bb2ef4d4a880f32fbbc665abfad2b29f532a231d93ab2207396f0b25.
//
// Solidity: event DeleteRecording(uint256 timestamp, address accessor, address recObj, address recContract)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseDeleteRecording(log types.Log) (*LvRecordableStreamDeleteRecording, error) {
	event := new(LvRecordableStreamDeleteRecording)
	if err := _LvRecordableStream.contract.UnpackLog(event, "DeleteRecording", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamDisableRecordingIterator is returned from FilterDisableRecording and is used to iterate over the raw logs and unpacked data for DisableRecording events raised by the LvRecordableStream contract.
type LvRecordableStreamDisableRecordingIterator struct {
	Event *LvRecordableStreamDisableRecording // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamDisableRecordingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamDisableRecording)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamDisableRecording)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamDisableRecordingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamDisableRecordingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamDisableRecording represents a DisableRecording event raised by the LvRecordableStream contract.
type LvRecordableStreamDisableRecording struct {
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDisableRecording is a free log retrieval operation binding the contract event 0x3a5d2272abc5c09c8e771719f0eeca97e31d2fc425f6c34cf1d7a712b5fb6bfd.
//
// Solidity: event DisableRecording(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterDisableRecording(opts *bind.FilterOpts) (*LvRecordableStreamDisableRecordingIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "DisableRecording")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamDisableRecordingIterator{contract: _LvRecordableStream.contract, event: "DisableRecording", logs: logs, sub: sub}, nil
}

// WatchDisableRecording is a free log subscription operation binding the contract event 0x3a5d2272abc5c09c8e771719f0eeca97e31d2fc425f6c34cf1d7a712b5fb6bfd.
//
// Solidity: event DisableRecording(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchDisableRecording(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamDisableRecording) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "DisableRecording")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamDisableRecording)
				if err := _LvRecordableStream.contract.UnpackLog(event, "DisableRecording", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisableRecording is a log parse operation binding the contract event 0x3a5d2272abc5c09c8e771719f0eeca97e31d2fc425f6c34cf1d7a712b5fb6bfd.
//
// Solidity: event DisableRecording(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseDisableRecording(log types.Log) (*LvRecordableStreamDisableRecording, error) {
	event := new(LvRecordableStreamDisableRecording)
	if err := _LvRecordableStream.contract.UnpackLog(event, "DisableRecording", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamEnableRecordingIterator is returned from FilterEnableRecording and is used to iterate over the raw logs and unpacked data for EnableRecording events raised by the LvRecordableStream contract.
type LvRecordableStreamEnableRecordingIterator struct {
	Event *LvRecordableStreamEnableRecording // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamEnableRecordingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamEnableRecording)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamEnableRecording)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamEnableRecordingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamEnableRecordingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamEnableRecording represents a EnableRecording event raised by the LvRecordableStream contract.
type LvRecordableStreamEnableRecording struct {
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterEnableRecording is a free log retrieval operation binding the contract event 0xe1182e14924c528bfb564fb8d4feefe9766244f88b00051f28182e635e9a1ae8.
//
// Solidity: event EnableRecording(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterEnableRecording(opts *bind.FilterOpts) (*LvRecordableStreamEnableRecordingIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "EnableRecording")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamEnableRecordingIterator{contract: _LvRecordableStream.contract, event: "EnableRecording", logs: logs, sub: sub}, nil
}

// WatchEnableRecording is a free log subscription operation binding the contract event 0xe1182e14924c528bfb564fb8d4feefe9766244f88b00051f28182e635e9a1ae8.
//
// Solidity: event EnableRecording(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchEnableRecording(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamEnableRecording) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "EnableRecording")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamEnableRecording)
				if err := _LvRecordableStream.contract.UnpackLog(event, "EnableRecording", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEnableRecording is a log parse operation binding the contract event 0xe1182e14924c528bfb564fb8d4feefe9766244f88b00051f28182e635e9a1ae8.
//
// Solidity: event EnableRecording(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseEnableRecording(log types.Log) (*LvRecordableStreamEnableRecording, error) {
	event := new(LvRecordableStreamEnableRecording)
	if err := _LvRecordableStream.contract.UnpackLog(event, "EnableRecording", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the LvRecordableStream contract.
type LvRecordableStreamLogIterator struct {
	Event *LvRecordableStreamLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamLog represents a Log event raised by the LvRecordableStream contract.
type LvRecordableStreamLog struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterLog(opts *bind.FilterOpts) (*LvRecordableStreamLogIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamLogIterator{contract: _LvRecordableStream.contract, event: "Log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamLog) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamLog)
				if err := _LvRecordableStream.contract.UnpackLog(event, "Log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseLog(log types.Log) (*LvRecordableStreamLog, error) {
	event := new(LvRecordableStreamLog)
	if err := _LvRecordableStream.contract.UnpackLog(event, "Log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the LvRecordableStream contract.
type LvRecordableStreamLogAddressIterator struct {
	Event *LvRecordableStreamLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamLogAddress represents a LogAddress event raised by the LvRecordableStream contract.
type LvRecordableStreamLogAddress struct {
	Label string
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterLogAddress(opts *bind.FilterOpts) (*LvRecordableStreamLogAddressIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamLogAddressIterator{contract: _LvRecordableStream.contract, event: "LogAddress", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamLogAddress) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamLogAddress)
				if err := _LvRecordableStream.contract.UnpackLog(event, "LogAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseLogAddress(log types.Log) (*LvRecordableStreamLogAddress, error) {
	event := new(LvRecordableStreamLogAddress)
	if err := _LvRecordableStream.contract.UnpackLog(event, "LogAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamLogBoolIterator is returned from FilterLogBool and is used to iterate over the raw logs and unpacked data for LogBool events raised by the LvRecordableStream contract.
type LvRecordableStreamLogBoolIterator struct {
	Event *LvRecordableStreamLogBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamLogBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamLogBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamLogBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamLogBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamLogBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamLogBool represents a LogBool event raised by the LvRecordableStream contract.
type LvRecordableStreamLogBool struct {
	Label string
	B     bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBool is a free log retrieval operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterLogBool(opts *bind.FilterOpts) (*LvRecordableStreamLogBoolIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamLogBoolIterator{contract: _LvRecordableStream.contract, event: "LogBool", logs: logs, sub: sub}, nil
}

// WatchLogBool is a free log subscription operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchLogBool(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamLogBool) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamLogBool)
				if err := _LvRecordableStream.contract.UnpackLog(event, "LogBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBool is a log parse operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseLogBool(log types.Log) (*LvRecordableStreamLogBool, error) {
	event := new(LvRecordableStreamLogBool)
	if err := _LvRecordableStream.contract.UnpackLog(event, "LogBool", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the LvRecordableStream contract.
type LvRecordableStreamLogBytes32Iterator struct {
	Event *LvRecordableStreamLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamLogBytes32 represents a LogBytes32 event raised by the LvRecordableStream contract.
type LvRecordableStreamLogBytes32 struct {
	Label string
	B     [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*LvRecordableStreamLogBytes32Iterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamLogBytes32Iterator{contract: _LvRecordableStream.contract, event: "LogBytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamLogBytes32) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamLogBytes32)
				if err := _LvRecordableStream.contract.UnpackLog(event, "LogBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseLogBytes32(log types.Log) (*LvRecordableStreamLogBytes32, error) {
	event := new(LvRecordableStreamLogBytes32)
	if err := _LvRecordableStream.contract.UnpackLog(event, "LogBytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamLogInt256Iterator is returned from FilterLogInt256 and is used to iterate over the raw logs and unpacked data for LogInt256 events raised by the LvRecordableStream contract.
type LvRecordableStreamLogInt256Iterator struct {
	Event *LvRecordableStreamLogInt256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamLogInt256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamLogInt256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamLogInt256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamLogInt256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamLogInt256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamLogInt256 represents a LogInt256 event raised by the LvRecordableStream contract.
type LvRecordableStreamLogInt256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogInt256 is a free log retrieval operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterLogInt256(opts *bind.FilterOpts) (*LvRecordableStreamLogInt256Iterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamLogInt256Iterator{contract: _LvRecordableStream.contract, event: "LogInt256", logs: logs, sub: sub}, nil
}

// WatchLogInt256 is a free log subscription operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchLogInt256(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamLogInt256) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamLogInt256)
				if err := _LvRecordableStream.contract.UnpackLog(event, "LogInt256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt256 is a log parse operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseLogInt256(log types.Log) (*LvRecordableStreamLogInt256, error) {
	event := new(LvRecordableStreamLogInt256)
	if err := _LvRecordableStream.contract.UnpackLog(event, "LogInt256", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamLogPaymentIterator is returned from FilterLogPayment and is used to iterate over the raw logs and unpacked data for LogPayment events raised by the LvRecordableStream contract.
type LvRecordableStreamLogPaymentIterator struct {
	Event *LvRecordableStreamLogPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamLogPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamLogPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamLogPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamLogPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamLogPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamLogPayment represents a LogPayment event raised by the LvRecordableStream contract.
type LvRecordableStreamLogPayment struct {
	Label  string
	Payee  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogPayment is a free log retrieval operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterLogPayment(opts *bind.FilterOpts) (*LvRecordableStreamLogPaymentIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamLogPaymentIterator{contract: _LvRecordableStream.contract, event: "LogPayment", logs: logs, sub: sub}, nil
}

// WatchLogPayment is a free log subscription operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchLogPayment(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamLogPayment) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamLogPayment)
				if err := _LvRecordableStream.contract.UnpackLog(event, "LogPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogPayment is a log parse operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseLogPayment(log types.Log) (*LvRecordableStreamLogPayment, error) {
	event := new(LvRecordableStreamLogPayment)
	if err := _LvRecordableStream.contract.UnpackLog(event, "LogPayment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamLogUint256Iterator is returned from FilterLogUint256 and is used to iterate over the raw logs and unpacked data for LogUint256 events raised by the LvRecordableStream contract.
type LvRecordableStreamLogUint256Iterator struct {
	Event *LvRecordableStreamLogUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamLogUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamLogUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamLogUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamLogUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamLogUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamLogUint256 represents a LogUint256 event raised by the LvRecordableStream contract.
type LvRecordableStreamLogUint256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogUint256 is a free log retrieval operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterLogUint256(opts *bind.FilterOpts) (*LvRecordableStreamLogUint256Iterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamLogUint256Iterator{contract: _LvRecordableStream.contract, event: "LogUint256", logs: logs, sub: sub}, nil
}

// WatchLogUint256 is a free log subscription operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchLogUint256(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamLogUint256) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamLogUint256)
				if err := _LvRecordableStream.contract.UnpackLog(event, "LogUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint256 is a log parse operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseLogUint256(log types.Log) (*LvRecordableStreamLogUint256, error) {
	event := new(LvRecordableStreamLogUint256)
	if err := _LvRecordableStream.contract.UnpackLog(event, "LogUint256", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamMembershipGroupAddedIterator is returned from FilterMembershipGroupAdded and is used to iterate over the raw logs and unpacked data for MembershipGroupAdded events raised by the LvRecordableStream contract.
type LvRecordableStreamMembershipGroupAddedIterator struct {
	Event *LvRecordableStreamMembershipGroupAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamMembershipGroupAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamMembershipGroupAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamMembershipGroupAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamMembershipGroupAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamMembershipGroupAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamMembershipGroupAdded represents a MembershipGroupAdded event raised by the LvRecordableStream contract.
type LvRecordableStreamMembershipGroupAdded struct {
	Timestamp *big.Int
	Group     common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMembershipGroupAdded is a free log retrieval operation binding the contract event 0x467a7c1305f91e354a8a1e9046906d4d1a4852f958a073a392555d809be313a7.
//
// Solidity: event MembershipGroupAdded(uint256 timestamp, address group)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterMembershipGroupAdded(opts *bind.FilterOpts) (*LvRecordableStreamMembershipGroupAddedIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "MembershipGroupAdded")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamMembershipGroupAddedIterator{contract: _LvRecordableStream.contract, event: "MembershipGroupAdded", logs: logs, sub: sub}, nil
}

// WatchMembershipGroupAdded is a free log subscription operation binding the contract event 0x467a7c1305f91e354a8a1e9046906d4d1a4852f958a073a392555d809be313a7.
//
// Solidity: event MembershipGroupAdded(uint256 timestamp, address group)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchMembershipGroupAdded(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamMembershipGroupAdded) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "MembershipGroupAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamMembershipGroupAdded)
				if err := _LvRecordableStream.contract.UnpackLog(event, "MembershipGroupAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMembershipGroupAdded is a log parse operation binding the contract event 0x467a7c1305f91e354a8a1e9046906d4d1a4852f958a073a392555d809be313a7.
//
// Solidity: event MembershipGroupAdded(uint256 timestamp, address group)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseMembershipGroupAdded(log types.Log) (*LvRecordableStreamMembershipGroupAdded, error) {
	event := new(LvRecordableStreamMembershipGroupAdded)
	if err := _LvRecordableStream.contract.UnpackLog(event, "MembershipGroupAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamMembershipGroupRemovedIterator is returned from FilterMembershipGroupRemoved and is used to iterate over the raw logs and unpacked data for MembershipGroupRemoved events raised by the LvRecordableStream contract.
type LvRecordableStreamMembershipGroupRemovedIterator struct {
	Event *LvRecordableStreamMembershipGroupRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamMembershipGroupRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamMembershipGroupRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamMembershipGroupRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamMembershipGroupRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamMembershipGroupRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamMembershipGroupRemoved represents a MembershipGroupRemoved event raised by the LvRecordableStream contract.
type LvRecordableStreamMembershipGroupRemoved struct {
	Timestamp *big.Int
	Group     common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMembershipGroupRemoved is a free log retrieval operation binding the contract event 0x7b4822b1021af568bad37d56a35fbc255dc67153c544aa4116a289632a4e5955.
//
// Solidity: event MembershipGroupRemoved(uint256 timestamp, address group)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterMembershipGroupRemoved(opts *bind.FilterOpts) (*LvRecordableStreamMembershipGroupRemovedIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "MembershipGroupRemoved")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamMembershipGroupRemovedIterator{contract: _LvRecordableStream.contract, event: "MembershipGroupRemoved", logs: logs, sub: sub}, nil
}

// WatchMembershipGroupRemoved is a free log subscription operation binding the contract event 0x7b4822b1021af568bad37d56a35fbc255dc67153c544aa4116a289632a4e5955.
//
// Solidity: event MembershipGroupRemoved(uint256 timestamp, address group)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchMembershipGroupRemoved(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamMembershipGroupRemoved) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "MembershipGroupRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamMembershipGroupRemoved)
				if err := _LvRecordableStream.contract.UnpackLog(event, "MembershipGroupRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMembershipGroupRemoved is a log parse operation binding the contract event 0x7b4822b1021af568bad37d56a35fbc255dc67153c544aa4116a289632a4e5955.
//
// Solidity: event MembershipGroupRemoved(uint256 timestamp, address group)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseMembershipGroupRemoved(log types.Log) (*LvRecordableStreamMembershipGroupRemoved, error) {
	event := new(LvRecordableStreamMembershipGroupRemoved)
	if err := _LvRecordableStream.contract.UnpackLog(event, "MembershipGroupRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamRecordedProgramIdIterator is returned from FilterRecordedProgramId and is used to iterate over the raw logs and unpacked data for RecordedProgramId events raised by the LvRecordableStream contract.
type LvRecordableStreamRecordedProgramIdIterator struct {
	Event *LvRecordableStreamRecordedProgramId // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamRecordedProgramIdIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamRecordedProgramId)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamRecordedProgramId)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamRecordedProgramIdIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamRecordedProgramIdIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamRecordedProgramId represents a RecordedProgramId event raised by the LvRecordableStream contract.
type LvRecordableStreamRecordedProgramId struct {
	Timestamp    *big.Int
	Accessor     common.Address
	RecObj       common.Address
	ProgramId    string
	ProgramStart *big.Int
	ProgramEnd   *big.Int
	ProgramTitle string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRecordedProgramId is a free log retrieval operation binding the contract event 0xe3b30c4da7320d1a542eb57f205a34d2fc36ecd114595f3d50be2a73b3426e6b.
//
// Solidity: event RecordedProgramId(uint256 timestamp, address accessor, address recObj, string programId, uint256 programStart, uint256 programEnd, string programTitle)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterRecordedProgramId(opts *bind.FilterOpts) (*LvRecordableStreamRecordedProgramIdIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "RecordedProgramId")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamRecordedProgramIdIterator{contract: _LvRecordableStream.contract, event: "RecordedProgramId", logs: logs, sub: sub}, nil
}

// WatchRecordedProgramId is a free log subscription operation binding the contract event 0xe3b30c4da7320d1a542eb57f205a34d2fc36ecd114595f3d50be2a73b3426e6b.
//
// Solidity: event RecordedProgramId(uint256 timestamp, address accessor, address recObj, string programId, uint256 programStart, uint256 programEnd, string programTitle)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchRecordedProgramId(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamRecordedProgramId) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "RecordedProgramId")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamRecordedProgramId)
				if err := _LvRecordableStream.contract.UnpackLog(event, "RecordedProgramId", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRecordedProgramId is a log parse operation binding the contract event 0xe3b30c4da7320d1a542eb57f205a34d2fc36ecd114595f3d50be2a73b3426e6b.
//
// Solidity: event RecordedProgramId(uint256 timestamp, address accessor, address recObj, string programId, uint256 programStart, uint256 programEnd, string programTitle)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseRecordedProgramId(log types.Log) (*LvRecordableStreamRecordedProgramId, error) {
	event := new(LvRecordableStreamRecordedProgramId)
	if err := _LvRecordableStream.contract.UnpackLog(event, "RecordedProgramId", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamRecordingPlaybackCompletedIterator is returned from FilterRecordingPlaybackCompleted and is used to iterate over the raw logs and unpacked data for RecordingPlaybackCompleted events raised by the LvRecordableStream contract.
type LvRecordableStreamRecordingPlaybackCompletedIterator struct {
	Event *LvRecordableStreamRecordingPlaybackCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamRecordingPlaybackCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamRecordingPlaybackCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamRecordingPlaybackCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamRecordingPlaybackCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamRecordingPlaybackCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamRecordingPlaybackCompleted represents a RecordingPlaybackCompleted event raised by the LvRecordableStream contract.
type LvRecordableStreamRecordingPlaybackCompleted struct {
	Timestamp         *big.Int
	Accessor          common.Address
	RecObj            common.Address
	RequestID         *big.Int
	PercentPlayed     uint8
	FinalizeTimestamp *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRecordingPlaybackCompleted is a free log retrieval operation binding the contract event 0x208745b583bd0c257eced13411dc4b50e9a3a9c1ef0cc2f95b30a7457ec50cc1.
//
// Solidity: event RecordingPlaybackCompleted(uint256 timestamp, address accessor, address recObj, uint256 requestID, uint8 percentPlayed, uint256 finalizeTimestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterRecordingPlaybackCompleted(opts *bind.FilterOpts) (*LvRecordableStreamRecordingPlaybackCompletedIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "RecordingPlaybackCompleted")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamRecordingPlaybackCompletedIterator{contract: _LvRecordableStream.contract, event: "RecordingPlaybackCompleted", logs: logs, sub: sub}, nil
}

// WatchRecordingPlaybackCompleted is a free log subscription operation binding the contract event 0x208745b583bd0c257eced13411dc4b50e9a3a9c1ef0cc2f95b30a7457ec50cc1.
//
// Solidity: event RecordingPlaybackCompleted(uint256 timestamp, address accessor, address recObj, uint256 requestID, uint8 percentPlayed, uint256 finalizeTimestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchRecordingPlaybackCompleted(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamRecordingPlaybackCompleted) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "RecordingPlaybackCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamRecordingPlaybackCompleted)
				if err := _LvRecordableStream.contract.UnpackLog(event, "RecordingPlaybackCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRecordingPlaybackCompleted is a log parse operation binding the contract event 0x208745b583bd0c257eced13411dc4b50e9a3a9c1ef0cc2f95b30a7457ec50cc1.
//
// Solidity: event RecordingPlaybackCompleted(uint256 timestamp, address accessor, address recObj, uint256 requestID, uint8 percentPlayed, uint256 finalizeTimestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseRecordingPlaybackCompleted(log types.Log) (*LvRecordableStreamRecordingPlaybackCompleted, error) {
	event := new(LvRecordableStreamRecordingPlaybackCompleted)
	if err := _LvRecordableStream.contract.UnpackLog(event, "RecordingPlaybackCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamRecordingPlaybackStartedIterator is returned from FilterRecordingPlaybackStarted and is used to iterate over the raw logs and unpacked data for RecordingPlaybackStarted events raised by the LvRecordableStream contract.
type LvRecordableStreamRecordingPlaybackStartedIterator struct {
	Event *LvRecordableStreamRecordingPlaybackStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamRecordingPlaybackStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamRecordingPlaybackStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamRecordingPlaybackStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamRecordingPlaybackStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamRecordingPlaybackStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamRecordingPlaybackStarted represents a RecordingPlaybackStarted event raised by the LvRecordableStream contract.
type LvRecordableStreamRecordingPlaybackStarted struct {
	Timestamp       *big.Int
	Accessor        common.Address
	RecObj          common.Address
	RequestID       *big.Int
	AccessTimestamp *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterRecordingPlaybackStarted is a free log retrieval operation binding the contract event 0x182a726f966f22c96d651085c2a7143482b8d96fb0964ff2664ab8bdf2b703aa.
//
// Solidity: event RecordingPlaybackStarted(uint256 timestamp, address accessor, address recObj, uint256 requestID, uint256 accessTimestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterRecordingPlaybackStarted(opts *bind.FilterOpts) (*LvRecordableStreamRecordingPlaybackStartedIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "RecordingPlaybackStarted")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamRecordingPlaybackStartedIterator{contract: _LvRecordableStream.contract, event: "RecordingPlaybackStarted", logs: logs, sub: sub}, nil
}

// WatchRecordingPlaybackStarted is a free log subscription operation binding the contract event 0x182a726f966f22c96d651085c2a7143482b8d96fb0964ff2664ab8bdf2b703aa.
//
// Solidity: event RecordingPlaybackStarted(uint256 timestamp, address accessor, address recObj, uint256 requestID, uint256 accessTimestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchRecordingPlaybackStarted(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamRecordingPlaybackStarted) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "RecordingPlaybackStarted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamRecordingPlaybackStarted)
				if err := _LvRecordableStream.contract.UnpackLog(event, "RecordingPlaybackStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRecordingPlaybackStarted is a log parse operation binding the contract event 0x182a726f966f22c96d651085c2a7143482b8d96fb0964ff2664ab8bdf2b703aa.
//
// Solidity: event RecordingPlaybackStarted(uint256 timestamp, address accessor, address recObj, uint256 requestID, uint256 accessTimestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseRecordingPlaybackStarted(log types.Log) (*LvRecordableStreamRecordingPlaybackStarted, error) {
	event := new(LvRecordableStreamRecordingPlaybackStarted)
	if err := _LvRecordableStream.contract.UnpackLog(event, "RecordingPlaybackStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamRunAccessIterator is returned from FilterRunAccess and is used to iterate over the raw logs and unpacked data for RunAccess events raised by the LvRecordableStream contract.
type LvRecordableStreamRunAccessIterator struct {
	Event *LvRecordableStreamRunAccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamRunAccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamRunAccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamRunAccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamRunAccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamRunAccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamRunAccess represents a RunAccess event raised by the LvRecordableStream contract.
type LvRecordableStreamRunAccess struct {
	RequestID *big.Int
	Result    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRunAccess is a free log retrieval operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterRunAccess(opts *bind.FilterOpts) (*LvRecordableStreamRunAccessIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamRunAccessIterator{contract: _LvRecordableStream.contract, event: "RunAccess", logs: logs, sub: sub}, nil
}

// WatchRunAccess is a free log subscription operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchRunAccess(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamRunAccess) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamRunAccess)
				if err := _LvRecordableStream.contract.UnpackLog(event, "RunAccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccess is a log parse operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseRunAccess(log types.Log) (*LvRecordableStreamRunAccess, error) {
	event := new(LvRecordableStreamRunAccess)
	if err := _LvRecordableStream.contract.UnpackLog(event, "RunAccess", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamRunAccessChargeIterator is returned from FilterRunAccessCharge and is used to iterate over the raw logs and unpacked data for RunAccessCharge events raised by the LvRecordableStream contract.
type LvRecordableStreamRunAccessChargeIterator struct {
	Event *LvRecordableStreamRunAccessCharge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamRunAccessChargeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamRunAccessCharge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamRunAccessCharge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamRunAccessChargeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamRunAccessChargeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamRunAccessCharge represents a RunAccessCharge event raised by the LvRecordableStream contract.
type LvRecordableStreamRunAccessCharge struct {
	Level                 uint8
	CalculateAccessCharge *big.Int
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterRunAccessCharge is a free log retrieval operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterRunAccessCharge(opts *bind.FilterOpts) (*LvRecordableStreamRunAccessChargeIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamRunAccessChargeIterator{contract: _LvRecordableStream.contract, event: "RunAccessCharge", logs: logs, sub: sub}, nil
}

// WatchRunAccessCharge is a free log subscription operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchRunAccessCharge(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamRunAccessCharge) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamRunAccessCharge)
				if err := _LvRecordableStream.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccessCharge is a log parse operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseRunAccessCharge(log types.Log) (*LvRecordableStreamRunAccessCharge, error) {
	event := new(LvRecordableStreamRunAccessCharge)
	if err := _LvRecordableStream.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamRunCreateIterator is returned from FilterRunCreate and is used to iterate over the raw logs and unpacked data for RunCreate events raised by the LvRecordableStream contract.
type LvRecordableStreamRunCreateIterator struct {
	Event *LvRecordableStreamRunCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamRunCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamRunCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamRunCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamRunCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamRunCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamRunCreate represents a RunCreate event raised by the LvRecordableStream contract.
type LvRecordableStreamRunCreate struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunCreate is a free log retrieval operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterRunCreate(opts *bind.FilterOpts) (*LvRecordableStreamRunCreateIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamRunCreateIterator{contract: _LvRecordableStream.contract, event: "RunCreate", logs: logs, sub: sub}, nil
}

// WatchRunCreate is a free log subscription operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchRunCreate(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamRunCreate) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamRunCreate)
				if err := _LvRecordableStream.contract.UnpackLog(event, "RunCreate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunCreate is a log parse operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseRunCreate(log types.Log) (*LvRecordableStreamRunCreate, error) {
	event := new(LvRecordableStreamRunCreate)
	if err := _LvRecordableStream.contract.UnpackLog(event, "RunCreate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamRunFinalizeIterator is returned from FilterRunFinalize and is used to iterate over the raw logs and unpacked data for RunFinalize events raised by the LvRecordableStream contract.
type LvRecordableStreamRunFinalizeIterator struct {
	Event *LvRecordableStreamRunFinalize // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamRunFinalizeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamRunFinalize)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamRunFinalize)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamRunFinalizeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamRunFinalizeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamRunFinalize represents a RunFinalize event raised by the LvRecordableStream contract.
type LvRecordableStreamRunFinalize struct {
	RequestID *big.Int
	Result    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRunFinalize is a free log retrieval operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterRunFinalize(opts *bind.FilterOpts) (*LvRecordableStreamRunFinalizeIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamRunFinalizeIterator{contract: _LvRecordableStream.contract, event: "RunFinalize", logs: logs, sub: sub}, nil
}

// WatchRunFinalize is a free log subscription operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchRunFinalize(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamRunFinalize) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamRunFinalize)
				if err := _LvRecordableStream.contract.UnpackLog(event, "RunFinalize", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunFinalize is a log parse operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseRunFinalize(log types.Log) (*LvRecordableStreamRunFinalize, error) {
	event := new(LvRecordableStreamRunFinalize)
	if err := _LvRecordableStream.contract.UnpackLog(event, "RunFinalize", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamRunKillIterator is returned from FilterRunKill and is used to iterate over the raw logs and unpacked data for RunKill events raised by the LvRecordableStream contract.
type LvRecordableStreamRunKillIterator struct {
	Event *LvRecordableStreamRunKill // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamRunKillIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamRunKill)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamRunKill)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamRunKillIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamRunKillIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamRunKill represents a RunKill event raised by the LvRecordableStream contract.
type LvRecordableStreamRunKill struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunKill is a free log retrieval operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterRunKill(opts *bind.FilterOpts) (*LvRecordableStreamRunKillIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamRunKillIterator{contract: _LvRecordableStream.contract, event: "RunKill", logs: logs, sub: sub}, nil
}

// WatchRunKill is a free log subscription operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchRunKill(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamRunKill) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamRunKill)
				if err := _LvRecordableStream.contract.UnpackLog(event, "RunKill", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunKill is a log parse operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseRunKill(log types.Log) (*LvRecordableStreamRunKill, error) {
	event := new(LvRecordableStreamRunKill)
	if err := _LvRecordableStream.contract.UnpackLog(event, "RunKill", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamRunStatusChangeIterator is returned from FilterRunStatusChange and is used to iterate over the raw logs and unpacked data for RunStatusChange events raised by the LvRecordableStream contract.
type LvRecordableStreamRunStatusChangeIterator struct {
	Event *LvRecordableStreamRunStatusChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamRunStatusChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamRunStatusChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamRunStatusChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamRunStatusChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamRunStatusChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamRunStatusChange represents a RunStatusChange event raised by the LvRecordableStream contract.
type LvRecordableStreamRunStatusChange struct {
	ProposedStatusCode *big.Int
	ReturnStatusCode   *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRunStatusChange is a free log retrieval operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterRunStatusChange(opts *bind.FilterOpts) (*LvRecordableStreamRunStatusChangeIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamRunStatusChangeIterator{contract: _LvRecordableStream.contract, event: "RunStatusChange", logs: logs, sub: sub}, nil
}

// WatchRunStatusChange is a free log subscription operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchRunStatusChange(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamRunStatusChange) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamRunStatusChange)
				if err := _LvRecordableStream.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunStatusChange is a log parse operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseRunStatusChange(log types.Log) (*LvRecordableStreamRunStatusChange, error) {
	event := new(LvRecordableStreamRunStatusChange)
	if err := _LvRecordableStream.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamSetRecordingStatusIterator is returned from FilterSetRecordingStatus and is used to iterate over the raw logs and unpacked data for SetRecordingStatus events raised by the LvRecordableStream contract.
type LvRecordableStreamSetRecordingStatusIterator struct {
	Event *LvRecordableStreamSetRecordingStatus // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamSetRecordingStatusIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamSetRecordingStatus)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamSetRecordingStatus)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamSetRecordingStatusIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamSetRecordingStatusIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamSetRecordingStatus represents a SetRecordingStatus event raised by the LvRecordableStream contract.
type LvRecordableStreamSetRecordingStatus struct {
	Timestamp *big.Int
	Accessor  common.Address
	RecObj    common.Address
	RecStatus string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSetRecordingStatus is a free log retrieval operation binding the contract event 0x93ee8bc66b5d08a5dc39e788b1f78aa5f9ff2deda9e1387aa1fe22f9c329ed85.
//
// Solidity: event SetRecordingStatus(uint256 timestamp, address accessor, address recObj, string recStatus)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterSetRecordingStatus(opts *bind.FilterOpts) (*LvRecordableStreamSetRecordingStatusIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "SetRecordingStatus")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamSetRecordingStatusIterator{contract: _LvRecordableStream.contract, event: "SetRecordingStatus", logs: logs, sub: sub}, nil
}

// WatchSetRecordingStatus is a free log subscription operation binding the contract event 0x93ee8bc66b5d08a5dc39e788b1f78aa5f9ff2deda9e1387aa1fe22f9c329ed85.
//
// Solidity: event SetRecordingStatus(uint256 timestamp, address accessor, address recObj, string recStatus)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchSetRecordingStatus(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamSetRecordingStatus) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "SetRecordingStatus")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamSetRecordingStatus)
				if err := _LvRecordableStream.contract.UnpackLog(event, "SetRecordingStatus", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetRecordingStatus is a log parse operation binding the contract event 0x93ee8bc66b5d08a5dc39e788b1f78aa5f9ff2deda9e1387aa1fe22f9c329ed85.
//
// Solidity: event SetRecordingStatus(uint256 timestamp, address accessor, address recObj, string recStatus)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseSetRecordingStatus(log types.Log) (*LvRecordableStreamSetRecordingStatus, error) {
	event := new(LvRecordableStreamSetRecordingStatus)
	if err := _LvRecordableStream.contract.UnpackLog(event, "SetRecordingStatus", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamSetRecordingTimesIterator is returned from FilterSetRecordingTimes and is used to iterate over the raw logs and unpacked data for SetRecordingTimes events raised by the LvRecordableStream contract.
type LvRecordableStreamSetRecordingTimesIterator struct {
	Event *LvRecordableStreamSetRecordingTimes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamSetRecordingTimesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamSetRecordingTimes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamSetRecordingTimes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamSetRecordingTimesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamSetRecordingTimesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamSetRecordingTimes represents a SetRecordingTimes event raised by the LvRecordableStream contract.
type LvRecordableStreamSetRecordingTimes struct {
	Timestamp    *big.Int
	Accessor     common.Address
	RecObj       common.Address
	RecStartTime *big.Int
	RecEndTime   *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSetRecordingTimes is a free log retrieval operation binding the contract event 0x8e6b298cf577550234f0d0de33a4910d4bf1c4e08fe31b1173b2c6232297b3f4.
//
// Solidity: event SetRecordingTimes(uint256 timestamp, address accessor, address recObj, uint256 recStartTime, uint256 recEndTime)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterSetRecordingTimes(opts *bind.FilterOpts) (*LvRecordableStreamSetRecordingTimesIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "SetRecordingTimes")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamSetRecordingTimesIterator{contract: _LvRecordableStream.contract, event: "SetRecordingTimes", logs: logs, sub: sub}, nil
}

// WatchSetRecordingTimes is a free log subscription operation binding the contract event 0x8e6b298cf577550234f0d0de33a4910d4bf1c4e08fe31b1173b2c6232297b3f4.
//
// Solidity: event SetRecordingTimes(uint256 timestamp, address accessor, address recObj, uint256 recStartTime, uint256 recEndTime)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchSetRecordingTimes(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamSetRecordingTimes) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "SetRecordingTimes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamSetRecordingTimes)
				if err := _LvRecordableStream.contract.UnpackLog(event, "SetRecordingTimes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetRecordingTimes is a log parse operation binding the contract event 0x8e6b298cf577550234f0d0de33a4910d4bf1c4e08fe31b1173b2c6232297b3f4.
//
// Solidity: event SetRecordingTimes(uint256 timestamp, address accessor, address recObj, uint256 recStartTime, uint256 recEndTime)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseSetRecordingTimes(log types.Log) (*LvRecordableStreamSetRecordingTimes, error) {
	event := new(LvRecordableStreamSetRecordingTimes)
	if err := _LvRecordableStream.contract.UnpackLog(event, "SetRecordingTimes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamStartStreamIterator is returned from FilterStartStream and is used to iterate over the raw logs and unpacked data for StartStream events raised by the LvRecordableStream contract.
type LvRecordableStreamStartStreamIterator struct {
	Event *LvRecordableStreamStartStream // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamStartStreamIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamStartStream)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamStartStream)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamStartStreamIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamStartStreamIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamStartStream represents a StartStream event raised by the LvRecordableStream contract.
type LvRecordableStreamStartStream struct {
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterStartStream is a free log retrieval operation binding the contract event 0x8d7e6a8f23ccc8845c41fd09bebe570a0885272343268bbdfd71090b878b4b21.
//
// Solidity: event StartStream(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterStartStream(opts *bind.FilterOpts) (*LvRecordableStreamStartStreamIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "StartStream")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamStartStreamIterator{contract: _LvRecordableStream.contract, event: "StartStream", logs: logs, sub: sub}, nil
}

// WatchStartStream is a free log subscription operation binding the contract event 0x8d7e6a8f23ccc8845c41fd09bebe570a0885272343268bbdfd71090b878b4b21.
//
// Solidity: event StartStream(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchStartStream(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamStartStream) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "StartStream")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamStartStream)
				if err := _LvRecordableStream.contract.UnpackLog(event, "StartStream", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStartStream is a log parse operation binding the contract event 0x8d7e6a8f23ccc8845c41fd09bebe570a0885272343268bbdfd71090b878b4b21.
//
// Solidity: event StartStream(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseStartStream(log types.Log) (*LvRecordableStreamStartStream, error) {
	event := new(LvRecordableStreamStartStream)
	if err := _LvRecordableStream.contract.UnpackLog(event, "StartStream", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordableStreamStopStreamIterator is returned from FilterStopStream and is used to iterate over the raw logs and unpacked data for StopStream events raised by the LvRecordableStream contract.
type LvRecordableStreamStopStreamIterator struct {
	Event *LvRecordableStreamStopStream // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordableStreamStopStreamIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordableStreamStopStream)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordableStreamStopStream)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordableStreamStopStreamIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordableStreamStopStreamIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordableStreamStopStream represents a StopStream event raised by the LvRecordableStream contract.
type LvRecordableStreamStopStream struct {
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterStopStream is a free log retrieval operation binding the contract event 0x1b01b687e3428bc184341f729ec8a57bdd569536206cfb59e5d0cecb30dfcb7e.
//
// Solidity: event StopStream(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) FilterStopStream(opts *bind.FilterOpts) (*LvRecordableStreamStopStreamIterator, error) {

	logs, sub, err := _LvRecordableStream.contract.FilterLogs(opts, "StopStream")
	if err != nil {
		return nil, err
	}
	return &LvRecordableStreamStopStreamIterator{contract: _LvRecordableStream.contract, event: "StopStream", logs: logs, sub: sub}, nil
}

// WatchStopStream is a free log subscription operation binding the contract event 0x1b01b687e3428bc184341f729ec8a57bdd569536206cfb59e5d0cecb30dfcb7e.
//
// Solidity: event StopStream(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) WatchStopStream(opts *bind.WatchOpts, sink chan<- *LvRecordableStreamStopStream) (event.Subscription, error) {

	logs, sub, err := _LvRecordableStream.contract.WatchLogs(opts, "StopStream")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordableStreamStopStream)
				if err := _LvRecordableStream.contract.UnpackLog(event, "StopStream", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStopStream is a log parse operation binding the contract event 0x1b01b687e3428bc184341f729ec8a57bdd569536206cfb59e5d0cecb30dfcb7e.
//
// Solidity: event StopStream(uint256 timestamp)
func (_LvRecordableStream *LvRecordableStreamFilterer) ParseStopStream(log types.Log) (*LvRecordableStreamStopStream, error) {
	event := new(LvRecordableStreamStopStream)
	if err := _LvRecordableStream.contract.UnpackLog(event, "StopStream", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordingMetaData contains all meta data concerning the LvRecording contract.
var LvRecordingMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"runAccessInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestID\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"custom_values\",\"type\":\"bytes32[]\"},{\"name\":\"stakeholders\",\"type\":\"address[]\"}],\"name\":\"runAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"programId\",\"type\":\"string\"},{\"name\":\"programStart\",\"type\":\"uint256\"},{\"name\":\"programEnd\",\"type\":\"uint256\"},{\"name\":\"programTitle\",\"type\":\"string\"},{\"name\":\"signature\",\"type\":\"bytes1[]\"}],\"name\":\"logProgramId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestID\",\"type\":\"uint256\"},{\"name\":\"score_pct\",\"type\":\"uint256\"}],\"name\":\"runFinalize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setTimes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposed_status_code\",\"type\":\"int256\"}],\"name\":\"runStatusChange\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"name\":\"runDescribeStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recordingStreamContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runCreate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recordingStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runKill\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recordingStatus\",\"type\":\"uint8\"}],\"name\":\"updateRecordingStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contentAddress\",\"type\":\"address\"}],\"name\":\"setContentAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"name\":\"runGrant\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestID\",\"type\":\"uint256\"},{\"name\":\"score_pct\",\"type\":\"uint256\"},{\"name\":\"originator\",\"type\":\"address\"}],\"name\":\"runFinalizeExt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_CHARGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"SetTimes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"UpdateRecordingStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"programId\",\"type\":\"string\"}],\"name\":\"RecordProgramId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"LogBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"uint256\"}],\"name\":\"LogUint256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"int256\"}],\"name\":\"LogInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunKill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposedStatusCode\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"returnStatusCode\",\"type\":\"int256\"}],\"name\":\"RunStatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"calculateAccessCharge\",\"type\":\"int256\"}],\"name\":\"RunAccessCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunFinalize\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"6af27417": "DEFAULT_ACCESS()",
		"f185db0c": "DEFAULT_CHARGE()",
		"b535b03e": "DEFAULT_SEE()",
		"129b9775": "contentAddress()",
		"af570c04": "contentSpace()",
		"02d05d3f": "creator()",
		"3197cbb6": "endTime()",
		"41c0e1b5": "kill()",
		"172cc921": "logProgramId(string,uint256,uint256,string,bytes1[])",
		"8da5cb5b": "owner()",
		"922386c5": "recordingStatus()",
		"5ebfe071": "recordingStreamContract()",
		"123e0e80": "runAccess(uint256,uint8,bytes32[],address[])",
		"0f82c16f": "runAccessInfo(uint8,bytes32[],address[])",
		"7b1cdb3e": "runCreate()",
		"45080442": "runDescribeStatus(int256)",
		"c9f3d94c": "runEdit()",
		"17685953": "runFinalize(uint256,uint256)",
		"eb81eff0": "runFinalizeExt(uint256,uint256,address)",
		"e870ed91": "runGrant(uint256,bool)",
		"9e99bbea": "runKill()",
		"3513a805": "runStatusChange(int256)",
		"a4a22c59": "setContentAddress(address)",
		"ccb98ffc": "setEndTime(uint256)",
		"3e0a322d": "setStartTime(uint256)",
		"22434836": "setTimes(uint256,uint256)",
		"78e97925": "startTime()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"a3b2d3d5": "updateRecordingStatus(uint8)",
		"54fd4d50": "version()",
	},
	Bin: "",
}

// LvRecordingABI is the input ABI used to generate the binding from.
// Deprecated: Use LvRecordingMetaData.ABI instead.
var LvRecordingABI = LvRecordingMetaData.ABI

// Deprecated: Use LvRecordingMetaData.Sigs instead.
// LvRecordingFuncSigs maps the 4-byte function signature to its string representation.
var LvRecordingFuncSigs = LvRecordingMetaData.Sigs

// LvRecordingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LvRecordingMetaData.Bin instead.
var LvRecordingBin = LvRecordingMetaData.Bin

// DeployLvRecording deploys a new Ethereum contract, binding an instance of LvRecording to it.
func DeployLvRecording(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LvRecording, error) {
	parsed, err := ParsedABI(K_LvRecording)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LvRecordingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LvRecording{LvRecordingCaller: LvRecordingCaller{contract: contract}, LvRecordingTransactor: LvRecordingTransactor{contract: contract}, LvRecordingFilterer: LvRecordingFilterer{contract: contract}}, nil
}

// LvRecording is an auto generated Go binding around an Ethereum contract.
type LvRecording struct {
	LvRecordingCaller     // Read-only binding to the contract
	LvRecordingTransactor // Write-only binding to the contract
	LvRecordingFilterer   // Log filterer for contract events
}

// LvRecordingCaller is an auto generated read-only Go binding around an Ethereum contract.
type LvRecordingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LvRecordingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LvRecordingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LvRecordingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LvRecordingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewLvRecording creates a new instance of LvRecording, bound to a specific deployed contract.
func NewLvRecording(address common.Address, backend bind.ContractBackend) (*LvRecording, error) {
	contract, err := bindLvRecording(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LvRecording{LvRecordingCaller: LvRecordingCaller{contract: contract}, LvRecordingTransactor: LvRecordingTransactor{contract: contract}, LvRecordingFilterer: LvRecordingFilterer{contract: contract}}, nil
}

// NewLvRecordingCaller creates a new read-only instance of LvRecording, bound to a specific deployed contract.
func NewLvRecordingCaller(address common.Address, caller bind.ContractCaller) (*LvRecordingCaller, error) {
	contract, err := bindLvRecording(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LvRecordingCaller{contract: contract}, nil
}

// NewLvRecordingTransactor creates a new write-only instance of LvRecording, bound to a specific deployed contract.
func NewLvRecordingTransactor(address common.Address, transactor bind.ContractTransactor) (*LvRecordingTransactor, error) {
	contract, err := bindLvRecording(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LvRecordingTransactor{contract: contract}, nil
}

// NewLvRecordingFilterer creates a new log filterer instance of LvRecording, bound to a specific deployed contract.
func NewLvRecordingFilterer(address common.Address, filterer bind.ContractFilterer) (*LvRecordingFilterer, error) {
	contract, err := bindLvRecording(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LvRecordingFilterer{contract: contract}, nil
}

// bindLvRecording binds a generic wrapper to an already deployed contract.
func bindLvRecording(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_LvRecording)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() view returns(uint8)
func (_LvRecording *LvRecordingCaller) DEFAULTACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _LvRecording.contract.Call(opts, &out, "DEFAULT_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() view returns(uint8)
func (_LvRecording *LvRecordingCaller) DEFAULTCHARGE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _LvRecording.contract.Call(opts, &out, "DEFAULT_CHARGE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() view returns(uint8)
func (_LvRecording *LvRecordingCaller) DEFAULTSEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _LvRecording.contract.Call(opts, &out, "DEFAULT_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ContentAddress is a free data retrieval call binding the contract method 0x129b9775.
//
// Solidity: function contentAddress() view returns(address)
func (_LvRecording *LvRecordingCaller) ContentAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LvRecording.contract.Call(opts, &out, "contentAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_LvRecording *LvRecordingCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LvRecording.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_LvRecording *LvRecordingCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LvRecording.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EndTime is a free data retrieval call binding the contract method 0x3197cbb6.
//
// Solidity: function endTime() view returns(uint256)
func (_LvRecording *LvRecordingCaller) EndTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LvRecording.contract.Call(opts, &out, "endTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LvRecording *LvRecordingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LvRecording.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RecordingStatus is a free data retrieval call binding the contract method 0x922386c5.
//
// Solidity: function recordingStatus() view returns(uint8)
func (_LvRecording *LvRecordingCaller) RecordingStatus(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _LvRecording.contract.Call(opts, &out, "recordingStatus")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// RecordingStreamContract is a free data retrieval call binding the contract method 0x5ebfe071.
//
// Solidity: function recordingStreamContract() view returns(address)
func (_LvRecording *LvRecordingCaller) RecordingStreamContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LvRecording.contract.Call(opts, &out, "recordingStreamContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RunAccessInfo is a free data retrieval call binding the contract method 0x0f82c16f.
//
// Solidity: function runAccessInfo(uint8 , bytes32[] , address[] ) view returns(uint8, uint8, uint8, uint256)
func (_LvRecording *LvRecordingCaller) RunAccessInfo(opts *bind.CallOpts, arg0 uint8, arg1 [][32]byte, arg2 []common.Address) (uint8, uint8, uint8, *big.Int, error) {
	var out []interface{}
	err := _LvRecording.contract.Call(opts, &out, "runAccessInfo", arg0, arg1, arg2)

	if err != nil {
		return *new(uint8), *new(uint8), *new(uint8), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)
	out2 := *abi.ConvertType(out[2], new(uint8)).(*uint8)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, err

}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) pure returns(bytes32)
func (_LvRecording *LvRecordingCaller) RunDescribeStatus(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _LvRecording.contract.Call(opts, &out, "runDescribeStatus", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() view returns(uint256)
func (_LvRecording *LvRecordingCaller) StartTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LvRecording.contract.Call(opts, &out, "startTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_LvRecording *LvRecordingCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LvRecording.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_LvRecording *LvRecordingTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "kill")
}

// LogProgramId is a paid mutator transaction binding the contract method 0x172cc921.
//
// Solidity: function logProgramId(string programId, uint256 programStart, uint256 programEnd, string programTitle, bytes1[] signature) returns()
func (_LvRecording *LvRecordingTransactor) LogProgramId(opts *bind.TransactOpts, programId string, programStart *big.Int, programEnd *big.Int, programTitle string, signature [][1]byte) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "logProgramId", programId, programStart, programEnd, programTitle, signature)
}

// RunAccess is a paid mutator transaction binding the contract method 0x123e0e80.
//
// Solidity: function runAccess(uint256 requestID, uint8 level, bytes32[] custom_values, address[] stakeholders) payable returns(uint256)
func (_LvRecording *LvRecordingTransactor) RunAccess(opts *bind.TransactOpts, requestID *big.Int, level uint8, custom_values [][32]byte, stakeholders []common.Address) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "runAccess", requestID, level, custom_values, stakeholders)
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() payable returns(uint256)
func (_LvRecording *LvRecordingTransactor) RunCreate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "runCreate")
}

// RunEdit is a paid mutator transaction binding the contract method 0xc9f3d94c.
//
// Solidity: function runEdit() returns(uint256)
func (_LvRecording *LvRecordingTransactor) RunEdit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "runEdit")
}

// RunFinalize is a paid mutator transaction binding the contract method 0x17685953.
//
// Solidity: function runFinalize(uint256 requestID, uint256 score_pct) payable returns(uint256)
func (_LvRecording *LvRecordingTransactor) RunFinalize(opts *bind.TransactOpts, requestID *big.Int, score_pct *big.Int) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "runFinalize", requestID, score_pct)
}

// RunFinalizeExt is a paid mutator transaction binding the contract method 0xeb81eff0.
//
// Solidity: function runFinalizeExt(uint256 requestID, uint256 score_pct, address originator) payable returns(uint256)
func (_LvRecording *LvRecordingTransactor) RunFinalizeExt(opts *bind.TransactOpts, requestID *big.Int, score_pct *big.Int, originator common.Address) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "runFinalizeExt", requestID, score_pct, originator)
}

// RunGrant is a paid mutator transaction binding the contract method 0xe870ed91.
//
// Solidity: function runGrant(uint256 , bool ) payable returns(uint256)
func (_LvRecording *LvRecordingTransactor) RunGrant(opts *bind.TransactOpts, arg0 *big.Int, arg1 bool) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "runGrant", arg0, arg1)
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() payable returns(uint256)
func (_LvRecording *LvRecordingTransactor) RunKill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "runKill")
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) payable returns(int256)
func (_LvRecording *LvRecordingTransactor) RunStatusChange(opts *bind.TransactOpts, proposed_status_code *big.Int) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "runStatusChange", proposed_status_code)
}

// SetContentAddress is a paid mutator transaction binding the contract method 0xa4a22c59.
//
// Solidity: function setContentAddress(address _contentAddress) returns()
func (_LvRecording *LvRecordingTransactor) SetContentAddress(opts *bind.TransactOpts, _contentAddress common.Address) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "setContentAddress", _contentAddress)
}

// SetEndTime is a paid mutator transaction binding the contract method 0xccb98ffc.
//
// Solidity: function setEndTime(uint256 _endTime) returns()
func (_LvRecording *LvRecordingTransactor) SetEndTime(opts *bind.TransactOpts, _endTime *big.Int) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "setEndTime", _endTime)
}

// SetStartTime is a paid mutator transaction binding the contract method 0x3e0a322d.
//
// Solidity: function setStartTime(uint256 _startTime) returns()
func (_LvRecording *LvRecordingTransactor) SetStartTime(opts *bind.TransactOpts, _startTime *big.Int) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "setStartTime", _startTime)
}

// SetTimes is a paid mutator transaction binding the contract method 0x22434836.
//
// Solidity: function setTimes(uint256 _startTime, uint256 _endTime) returns()
func (_LvRecording *LvRecordingTransactor) SetTimes(opts *bind.TransactOpts, _startTime *big.Int, _endTime *big.Int) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "setTimes", _startTime, _endTime)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_LvRecording *LvRecordingTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LvRecording *LvRecordingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "transferOwnership", newOwner)
}

// UpdateRecordingStatus is a paid mutator transaction binding the contract method 0xa3b2d3d5.
//
// Solidity: function updateRecordingStatus(uint8 _recordingStatus) returns()
func (_LvRecording *LvRecordingTransactor) UpdateRecordingStatus(opts *bind.TransactOpts, _recordingStatus uint8) (*types.Transaction, error) {
	return _LvRecording.contract.Transact(opts, "updateRecordingStatus", _recordingStatus)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LvRecording *LvRecordingTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _LvRecording.contract.RawTransact(opts, calldata)
}

// LvRecordingLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the LvRecording contract.
type LvRecordingLogIterator struct {
	Event *LvRecordingLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingLog represents a Log event raised by the LvRecording contract.
type LvRecordingLog struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_LvRecording *LvRecordingFilterer) FilterLog(opts *bind.FilterOpts) (*LvRecordingLogIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return &LvRecordingLogIterator{contract: _LvRecording.contract, event: "Log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_LvRecording *LvRecordingFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *LvRecordingLog) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingLog)
				if err := _LvRecording.contract.UnpackLog(event, "Log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_LvRecording *LvRecordingFilterer) ParseLog(log types.Log) (*LvRecordingLog, error) {
	event := new(LvRecordingLog)
	if err := _LvRecording.contract.UnpackLog(event, "Log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordingLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the LvRecording contract.
type LvRecordingLogAddressIterator struct {
	Event *LvRecordingLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingLogAddress represents a LogAddress event raised by the LvRecording contract.
type LvRecordingLogAddress struct {
	Label string
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_LvRecording *LvRecordingFilterer) FilterLogAddress(opts *bind.FilterOpts) (*LvRecordingLogAddressIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return &LvRecordingLogAddressIterator{contract: _LvRecording.contract, event: "LogAddress", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_LvRecording *LvRecordingFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *LvRecordingLogAddress) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingLogAddress)
				if err := _LvRecording.contract.UnpackLog(event, "LogAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_LvRecording *LvRecordingFilterer) ParseLogAddress(log types.Log) (*LvRecordingLogAddress, error) {
	event := new(LvRecordingLogAddress)
	if err := _LvRecording.contract.UnpackLog(event, "LogAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordingLogBoolIterator is returned from FilterLogBool and is used to iterate over the raw logs and unpacked data for LogBool events raised by the LvRecording contract.
type LvRecordingLogBoolIterator struct {
	Event *LvRecordingLogBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingLogBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingLogBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingLogBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingLogBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingLogBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingLogBool represents a LogBool event raised by the LvRecording contract.
type LvRecordingLogBool struct {
	Label string
	B     bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBool is a free log retrieval operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_LvRecording *LvRecordingFilterer) FilterLogBool(opts *bind.FilterOpts) (*LvRecordingLogBoolIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return &LvRecordingLogBoolIterator{contract: _LvRecording.contract, event: "LogBool", logs: logs, sub: sub}, nil
}

// WatchLogBool is a free log subscription operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_LvRecording *LvRecordingFilterer) WatchLogBool(opts *bind.WatchOpts, sink chan<- *LvRecordingLogBool) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingLogBool)
				if err := _LvRecording.contract.UnpackLog(event, "LogBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBool is a log parse operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_LvRecording *LvRecordingFilterer) ParseLogBool(log types.Log) (*LvRecordingLogBool, error) {
	event := new(LvRecordingLogBool)
	if err := _LvRecording.contract.UnpackLog(event, "LogBool", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordingLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the LvRecording contract.
type LvRecordingLogBytes32Iterator struct {
	Event *LvRecordingLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingLogBytes32 represents a LogBytes32 event raised by the LvRecording contract.
type LvRecordingLogBytes32 struct {
	Label string
	B     [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_LvRecording *LvRecordingFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*LvRecordingLogBytes32Iterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return &LvRecordingLogBytes32Iterator{contract: _LvRecording.contract, event: "LogBytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_LvRecording *LvRecordingFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *LvRecordingLogBytes32) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingLogBytes32)
				if err := _LvRecording.contract.UnpackLog(event, "LogBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_LvRecording *LvRecordingFilterer) ParseLogBytes32(log types.Log) (*LvRecordingLogBytes32, error) {
	event := new(LvRecordingLogBytes32)
	if err := _LvRecording.contract.UnpackLog(event, "LogBytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordingLogInt256Iterator is returned from FilterLogInt256 and is used to iterate over the raw logs and unpacked data for LogInt256 events raised by the LvRecording contract.
type LvRecordingLogInt256Iterator struct {
	Event *LvRecordingLogInt256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingLogInt256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingLogInt256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingLogInt256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingLogInt256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingLogInt256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingLogInt256 represents a LogInt256 event raised by the LvRecording contract.
type LvRecordingLogInt256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogInt256 is a free log retrieval operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_LvRecording *LvRecordingFilterer) FilterLogInt256(opts *bind.FilterOpts) (*LvRecordingLogInt256Iterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return &LvRecordingLogInt256Iterator{contract: _LvRecording.contract, event: "LogInt256", logs: logs, sub: sub}, nil
}

// WatchLogInt256 is a free log subscription operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_LvRecording *LvRecordingFilterer) WatchLogInt256(opts *bind.WatchOpts, sink chan<- *LvRecordingLogInt256) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingLogInt256)
				if err := _LvRecording.contract.UnpackLog(event, "LogInt256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt256 is a log parse operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_LvRecording *LvRecordingFilterer) ParseLogInt256(log types.Log) (*LvRecordingLogInt256, error) {
	event := new(LvRecordingLogInt256)
	if err := _LvRecording.contract.UnpackLog(event, "LogInt256", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordingLogPaymentIterator is returned from FilterLogPayment and is used to iterate over the raw logs and unpacked data for LogPayment events raised by the LvRecording contract.
type LvRecordingLogPaymentIterator struct {
	Event *LvRecordingLogPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingLogPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingLogPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingLogPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingLogPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingLogPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingLogPayment represents a LogPayment event raised by the LvRecording contract.
type LvRecordingLogPayment struct {
	Label  string
	Payee  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogPayment is a free log retrieval operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_LvRecording *LvRecordingFilterer) FilterLogPayment(opts *bind.FilterOpts) (*LvRecordingLogPaymentIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return &LvRecordingLogPaymentIterator{contract: _LvRecording.contract, event: "LogPayment", logs: logs, sub: sub}, nil
}

// WatchLogPayment is a free log subscription operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_LvRecording *LvRecordingFilterer) WatchLogPayment(opts *bind.WatchOpts, sink chan<- *LvRecordingLogPayment) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingLogPayment)
				if err := _LvRecording.contract.UnpackLog(event, "LogPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogPayment is a log parse operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_LvRecording *LvRecordingFilterer) ParseLogPayment(log types.Log) (*LvRecordingLogPayment, error) {
	event := new(LvRecordingLogPayment)
	if err := _LvRecording.contract.UnpackLog(event, "LogPayment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordingLogUint256Iterator is returned from FilterLogUint256 and is used to iterate over the raw logs and unpacked data for LogUint256 events raised by the LvRecording contract.
type LvRecordingLogUint256Iterator struct {
	Event *LvRecordingLogUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingLogUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingLogUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingLogUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingLogUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingLogUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingLogUint256 represents a LogUint256 event raised by the LvRecording contract.
type LvRecordingLogUint256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogUint256 is a free log retrieval operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_LvRecording *LvRecordingFilterer) FilterLogUint256(opts *bind.FilterOpts) (*LvRecordingLogUint256Iterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return &LvRecordingLogUint256Iterator{contract: _LvRecording.contract, event: "LogUint256", logs: logs, sub: sub}, nil
}

// WatchLogUint256 is a free log subscription operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_LvRecording *LvRecordingFilterer) WatchLogUint256(opts *bind.WatchOpts, sink chan<- *LvRecordingLogUint256) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingLogUint256)
				if err := _LvRecording.contract.UnpackLog(event, "LogUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint256 is a log parse operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_LvRecording *LvRecordingFilterer) ParseLogUint256(log types.Log) (*LvRecordingLogUint256, error) {
	event := new(LvRecordingLogUint256)
	if err := _LvRecording.contract.UnpackLog(event, "LogUint256", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordingRecordProgramIdIterator is returned from FilterRecordProgramId and is used to iterate over the raw logs and unpacked data for RecordProgramId events raised by the LvRecording contract.
type LvRecordingRecordProgramIdIterator struct {
	Event *LvRecordingRecordProgramId // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingRecordProgramIdIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingRecordProgramId)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingRecordProgramId)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingRecordProgramIdIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingRecordProgramIdIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingRecordProgramId represents a RecordProgramId event raised by the LvRecording contract.
type LvRecordingRecordProgramId struct {
	Timestamp *big.Int
	ProgramId string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRecordProgramId is a free log retrieval operation binding the contract event 0x453384b91e17e6c44d171f27d5d32a864cf9cc9740578ffd6552d323aa973372.
//
// Solidity: event RecordProgramId(uint256 timestamp, string programId)
func (_LvRecording *LvRecordingFilterer) FilterRecordProgramId(opts *bind.FilterOpts) (*LvRecordingRecordProgramIdIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "RecordProgramId")
	if err != nil {
		return nil, err
	}
	return &LvRecordingRecordProgramIdIterator{contract: _LvRecording.contract, event: "RecordProgramId", logs: logs, sub: sub}, nil
}

// WatchRecordProgramId is a free log subscription operation binding the contract event 0x453384b91e17e6c44d171f27d5d32a864cf9cc9740578ffd6552d323aa973372.
//
// Solidity: event RecordProgramId(uint256 timestamp, string programId)
func (_LvRecording *LvRecordingFilterer) WatchRecordProgramId(opts *bind.WatchOpts, sink chan<- *LvRecordingRecordProgramId) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "RecordProgramId")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingRecordProgramId)
				if err := _LvRecording.contract.UnpackLog(event, "RecordProgramId", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRecordProgramId is a log parse operation binding the contract event 0x453384b91e17e6c44d171f27d5d32a864cf9cc9740578ffd6552d323aa973372.
//
// Solidity: event RecordProgramId(uint256 timestamp, string programId)
func (_LvRecording *LvRecordingFilterer) ParseRecordProgramId(log types.Log) (*LvRecordingRecordProgramId, error) {
	event := new(LvRecordingRecordProgramId)
	if err := _LvRecording.contract.UnpackLog(event, "RecordProgramId", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordingRunAccessIterator is returned from FilterRunAccess and is used to iterate over the raw logs and unpacked data for RunAccess events raised by the LvRecording contract.
type LvRecordingRunAccessIterator struct {
	Event *LvRecordingRunAccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingRunAccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingRunAccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingRunAccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingRunAccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingRunAccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingRunAccess represents a RunAccess event raised by the LvRecording contract.
type LvRecordingRunAccess struct {
	RequestID *big.Int
	Result    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRunAccess is a free log retrieval operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_LvRecording *LvRecordingFilterer) FilterRunAccess(opts *bind.FilterOpts) (*LvRecordingRunAccessIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return &LvRecordingRunAccessIterator{contract: _LvRecording.contract, event: "RunAccess", logs: logs, sub: sub}, nil
}

// WatchRunAccess is a free log subscription operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_LvRecording *LvRecordingFilterer) WatchRunAccess(opts *bind.WatchOpts, sink chan<- *LvRecordingRunAccess) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingRunAccess)
				if err := _LvRecording.contract.UnpackLog(event, "RunAccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccess is a log parse operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_LvRecording *LvRecordingFilterer) ParseRunAccess(log types.Log) (*LvRecordingRunAccess, error) {
	event := new(LvRecordingRunAccess)
	if err := _LvRecording.contract.UnpackLog(event, "RunAccess", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordingRunAccessChargeIterator is returned from FilterRunAccessCharge and is used to iterate over the raw logs and unpacked data for RunAccessCharge events raised by the LvRecording contract.
type LvRecordingRunAccessChargeIterator struct {
	Event *LvRecordingRunAccessCharge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingRunAccessChargeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingRunAccessCharge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingRunAccessCharge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingRunAccessChargeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingRunAccessChargeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingRunAccessCharge represents a RunAccessCharge event raised by the LvRecording contract.
type LvRecordingRunAccessCharge struct {
	Level                 uint8
	CalculateAccessCharge *big.Int
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterRunAccessCharge is a free log retrieval operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_LvRecording *LvRecordingFilterer) FilterRunAccessCharge(opts *bind.FilterOpts) (*LvRecordingRunAccessChargeIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return &LvRecordingRunAccessChargeIterator{contract: _LvRecording.contract, event: "RunAccessCharge", logs: logs, sub: sub}, nil
}

// WatchRunAccessCharge is a free log subscription operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_LvRecording *LvRecordingFilterer) WatchRunAccessCharge(opts *bind.WatchOpts, sink chan<- *LvRecordingRunAccessCharge) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingRunAccessCharge)
				if err := _LvRecording.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccessCharge is a log parse operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_LvRecording *LvRecordingFilterer) ParseRunAccessCharge(log types.Log) (*LvRecordingRunAccessCharge, error) {
	event := new(LvRecordingRunAccessCharge)
	if err := _LvRecording.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordingRunCreateIterator is returned from FilterRunCreate and is used to iterate over the raw logs and unpacked data for RunCreate events raised by the LvRecording contract.
type LvRecordingRunCreateIterator struct {
	Event *LvRecordingRunCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingRunCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingRunCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingRunCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingRunCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingRunCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingRunCreate represents a RunCreate event raised by the LvRecording contract.
type LvRecordingRunCreate struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunCreate is a free log retrieval operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_LvRecording *LvRecordingFilterer) FilterRunCreate(opts *bind.FilterOpts) (*LvRecordingRunCreateIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return &LvRecordingRunCreateIterator{contract: _LvRecording.contract, event: "RunCreate", logs: logs, sub: sub}, nil
}

// WatchRunCreate is a free log subscription operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_LvRecording *LvRecordingFilterer) WatchRunCreate(opts *bind.WatchOpts, sink chan<- *LvRecordingRunCreate) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingRunCreate)
				if err := _LvRecording.contract.UnpackLog(event, "RunCreate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunCreate is a log parse operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_LvRecording *LvRecordingFilterer) ParseRunCreate(log types.Log) (*LvRecordingRunCreate, error) {
	event := new(LvRecordingRunCreate)
	if err := _LvRecording.contract.UnpackLog(event, "RunCreate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordingRunFinalizeIterator is returned from FilterRunFinalize and is used to iterate over the raw logs and unpacked data for RunFinalize events raised by the LvRecording contract.
type LvRecordingRunFinalizeIterator struct {
	Event *LvRecordingRunFinalize // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingRunFinalizeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingRunFinalize)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingRunFinalize)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingRunFinalizeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingRunFinalizeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingRunFinalize represents a RunFinalize event raised by the LvRecording contract.
type LvRecordingRunFinalize struct {
	RequestID *big.Int
	Result    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRunFinalize is a free log retrieval operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_LvRecording *LvRecordingFilterer) FilterRunFinalize(opts *bind.FilterOpts) (*LvRecordingRunFinalizeIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return &LvRecordingRunFinalizeIterator{contract: _LvRecording.contract, event: "RunFinalize", logs: logs, sub: sub}, nil
}

// WatchRunFinalize is a free log subscription operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_LvRecording *LvRecordingFilterer) WatchRunFinalize(opts *bind.WatchOpts, sink chan<- *LvRecordingRunFinalize) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingRunFinalize)
				if err := _LvRecording.contract.UnpackLog(event, "RunFinalize", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunFinalize is a log parse operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_LvRecording *LvRecordingFilterer) ParseRunFinalize(log types.Log) (*LvRecordingRunFinalize, error) {
	event := new(LvRecordingRunFinalize)
	if err := _LvRecording.contract.UnpackLog(event, "RunFinalize", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordingRunKillIterator is returned from FilterRunKill and is used to iterate over the raw logs and unpacked data for RunKill events raised by the LvRecording contract.
type LvRecordingRunKillIterator struct {
	Event *LvRecordingRunKill // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingRunKillIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingRunKill)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingRunKill)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingRunKillIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingRunKillIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingRunKill represents a RunKill event raised by the LvRecording contract.
type LvRecordingRunKill struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunKill is a free log retrieval operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_LvRecording *LvRecordingFilterer) FilterRunKill(opts *bind.FilterOpts) (*LvRecordingRunKillIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return &LvRecordingRunKillIterator{contract: _LvRecording.contract, event: "RunKill", logs: logs, sub: sub}, nil
}

// WatchRunKill is a free log subscription operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_LvRecording *LvRecordingFilterer) WatchRunKill(opts *bind.WatchOpts, sink chan<- *LvRecordingRunKill) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingRunKill)
				if err := _LvRecording.contract.UnpackLog(event, "RunKill", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunKill is a log parse operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_LvRecording *LvRecordingFilterer) ParseRunKill(log types.Log) (*LvRecordingRunKill, error) {
	event := new(LvRecordingRunKill)
	if err := _LvRecording.contract.UnpackLog(event, "RunKill", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordingRunStatusChangeIterator is returned from FilterRunStatusChange and is used to iterate over the raw logs and unpacked data for RunStatusChange events raised by the LvRecording contract.
type LvRecordingRunStatusChangeIterator struct {
	Event *LvRecordingRunStatusChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingRunStatusChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingRunStatusChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingRunStatusChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingRunStatusChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingRunStatusChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingRunStatusChange represents a RunStatusChange event raised by the LvRecording contract.
type LvRecordingRunStatusChange struct {
	ProposedStatusCode *big.Int
	ReturnStatusCode   *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRunStatusChange is a free log retrieval operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_LvRecording *LvRecordingFilterer) FilterRunStatusChange(opts *bind.FilterOpts) (*LvRecordingRunStatusChangeIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return &LvRecordingRunStatusChangeIterator{contract: _LvRecording.contract, event: "RunStatusChange", logs: logs, sub: sub}, nil
}

// WatchRunStatusChange is a free log subscription operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_LvRecording *LvRecordingFilterer) WatchRunStatusChange(opts *bind.WatchOpts, sink chan<- *LvRecordingRunStatusChange) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingRunStatusChange)
				if err := _LvRecording.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunStatusChange is a log parse operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_LvRecording *LvRecordingFilterer) ParseRunStatusChange(log types.Log) (*LvRecordingRunStatusChange, error) {
	event := new(LvRecordingRunStatusChange)
	if err := _LvRecording.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordingSetTimesIterator is returned from FilterSetTimes and is used to iterate over the raw logs and unpacked data for SetTimes events raised by the LvRecording contract.
type LvRecordingSetTimesIterator struct {
	Event *LvRecordingSetTimes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingSetTimesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingSetTimes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingSetTimes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingSetTimesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingSetTimesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingSetTimes represents a SetTimes event raised by the LvRecording contract.
type LvRecordingSetTimes struct {
	Timestamp *big.Int
	StartTime *big.Int
	EndTime   *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSetTimes is a free log retrieval operation binding the contract event 0x3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c54.
//
// Solidity: event SetTimes(uint256 timestamp, uint256 startTime, uint256 endTime)
func (_LvRecording *LvRecordingFilterer) FilterSetTimes(opts *bind.FilterOpts) (*LvRecordingSetTimesIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "SetTimes")
	if err != nil {
		return nil, err
	}
	return &LvRecordingSetTimesIterator{contract: _LvRecording.contract, event: "SetTimes", logs: logs, sub: sub}, nil
}

// WatchSetTimes is a free log subscription operation binding the contract event 0x3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c54.
//
// Solidity: event SetTimes(uint256 timestamp, uint256 startTime, uint256 endTime)
func (_LvRecording *LvRecordingFilterer) WatchSetTimes(opts *bind.WatchOpts, sink chan<- *LvRecordingSetTimes) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "SetTimes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingSetTimes)
				if err := _LvRecording.contract.UnpackLog(event, "SetTimes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetTimes is a log parse operation binding the contract event 0x3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c54.
//
// Solidity: event SetTimes(uint256 timestamp, uint256 startTime, uint256 endTime)
func (_LvRecording *LvRecordingFilterer) ParseSetTimes(log types.Log) (*LvRecordingSetTimes, error) {
	event := new(LvRecordingSetTimes)
	if err := _LvRecording.contract.UnpackLog(event, "SetTimes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvRecordingUpdateRecordingStatusIterator is returned from FilterUpdateRecordingStatus and is used to iterate over the raw logs and unpacked data for UpdateRecordingStatus events raised by the LvRecording contract.
type LvRecordingUpdateRecordingStatusIterator struct {
	Event *LvRecordingUpdateRecordingStatus // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvRecordingUpdateRecordingStatusIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvRecordingUpdateRecordingStatus)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvRecordingUpdateRecordingStatus)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvRecordingUpdateRecordingStatusIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvRecordingUpdateRecordingStatusIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvRecordingUpdateRecordingStatus represents a UpdateRecordingStatus event raised by the LvRecording contract.
type LvRecordingUpdateRecordingStatus struct {
	Timestamp *big.Int
	Status    uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterUpdateRecordingStatus is a free log retrieval operation binding the contract event 0x6fff8c8938f3906f27a679f8d6b6652c28d82df5e27e55ef5cdc5f96b06dee09.
//
// Solidity: event UpdateRecordingStatus(uint256 timestamp, uint8 status)
func (_LvRecording *LvRecordingFilterer) FilterUpdateRecordingStatus(opts *bind.FilterOpts) (*LvRecordingUpdateRecordingStatusIterator, error) {

	logs, sub, err := _LvRecording.contract.FilterLogs(opts, "UpdateRecordingStatus")
	if err != nil {
		return nil, err
	}
	return &LvRecordingUpdateRecordingStatusIterator{contract: _LvRecording.contract, event: "UpdateRecordingStatus", logs: logs, sub: sub}, nil
}

// WatchUpdateRecordingStatus is a free log subscription operation binding the contract event 0x6fff8c8938f3906f27a679f8d6b6652c28d82df5e27e55ef5cdc5f96b06dee09.
//
// Solidity: event UpdateRecordingStatus(uint256 timestamp, uint8 status)
func (_LvRecording *LvRecordingFilterer) WatchUpdateRecordingStatus(opts *bind.WatchOpts, sink chan<- *LvRecordingUpdateRecordingStatus) (event.Subscription, error) {

	logs, sub, err := _LvRecording.contract.WatchLogs(opts, "UpdateRecordingStatus")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvRecordingUpdateRecordingStatus)
				if err := _LvRecording.contract.UnpackLog(event, "UpdateRecordingStatus", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateRecordingStatus is a log parse operation binding the contract event 0x6fff8c8938f3906f27a679f8d6b6652c28d82df5e27e55ef5cdc5f96b06dee09.
//
// Solidity: event UpdateRecordingStatus(uint256 timestamp, uint8 status)
func (_LvRecording *LvRecordingFilterer) ParseUpdateRecordingStatus(log types.Log) (*LvRecordingUpdateRecordingStatus, error) {
	event := new(LvRecordingUpdateRecordingStatus)
	if err := _LvRecording.contract.UnpackLog(event, "UpdateRecordingStatus", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvStreamRightsHolderMetaData contains all meta data concerning the LvStreamRightsHolder contract.
var LvStreamRightsHolderMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"runAccessInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"runAccess\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"runFinalize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stream\",\"type\":\"address\"}],\"name\":\"disableRecording\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"recordingStreams\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposed_status_code\",\"type\":\"int256\"}],\"name\":\"runStatusChange\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"name\":\"runDescribeStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stream\",\"type\":\"address\"}],\"name\":\"enableRecording\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stream\",\"type\":\"address\"},{\"name\":\"accessor\",\"type\":\"address\"}],\"name\":\"authorizeRecording\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_ACCESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runCreate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runKill\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stream\",\"type\":\"address\"}],\"name\":\"registerStream\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_SEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runEdit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"name\":\"runGrant\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestID\",\"type\":\"uint256\"},{\"name\":\"score_pct\",\"type\":\"uint256\"},{\"name\":\"originator\",\"type\":\"address\"}],\"name\":\"runFinalizeExt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_CHARGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stream\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rightsHolder\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"provider\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"membership\",\"type\":\"bool\"}],\"name\":\"AuthorizeRecording\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stream\",\"type\":\"address\"}],\"name\":\"EnableRecording\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stream\",\"type\":\"address\"}],\"name\":\"DisableRecording\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"LogBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"uint256\"}],\"name\":\"LogUint256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"int256\"}],\"name\":\"LogInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunKill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposedStatusCode\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"returnStatusCode\",\"type\":\"int256\"}],\"name\":\"RunStatusChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"calculateAccessCharge\",\"type\":\"int256\"}],\"name\":\"RunAccessCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"RunFinalize\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"6af27417": "DEFAULT_ACCESS()",
		"f185db0c": "DEFAULT_CHARGE()",
		"b535b03e": "DEFAULT_SEE()",
		"6135c504": "authorizeRecording(address,address)",
		"af570c04": "contentSpace()",
		"02d05d3f": "creator()",
		"20abe3ae": "disableRecording(address)",
		"514eecff": "enableRecording(address)",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"250fc29a": "recordingStreams(address)",
		"ad284b12": "registerStream(address)",
		"123e0e80": "runAccess(uint256,uint8,bytes32[],address[])",
		"0f82c16f": "runAccessInfo(uint8,bytes32[],address[])",
		"7b1cdb3e": "runCreate()",
		"45080442": "runDescribeStatus(int256)",
		"c9f3d94c": "runEdit()",
		"17685953": "runFinalize(uint256,uint256)",
		"eb81eff0": "runFinalizeExt(uint256,uint256,address)",
		"e870ed91": "runGrant(uint256,bool)",
		"9e99bbea": "runKill()",
		"3513a805": "runStatusChange(int256)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
	},
	Bin: "0x60806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f436f6e74656e7432303139313231393133343330304d4c0000000000000000006004557f4c765374726d526967687473486c647232303139313032393132313930304d4c60055560018054600160a060020a031990811632908117909255600280549091169091179055610ab8806100a26000396000f3006080604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461014a5780630f82c16f1461017b578063123e0e801461024057806317685953146102df57806320abe3ae146102ed578063250fc29a1461030e5780633513a8051461034357806341c0e1b51461034e5780634508044214610363578063514eecff1461037b57806354fd4d501461039c5780636135c504146103b15780636af27417146103d85780636d2e4b1b146104035780637b1cdb3e146104245780638da5cb5b1461042c5780639e99bbea14610424578063ad284b1214610441578063af570c0414610462578063b535b03e14610477578063c9f3d94c1461048c578063e870ed91146104a1578063eb81eff0146104b1578063f185db0c146104cb578063f2fde38b146104e0575b005b34801561015657600080fd5b5061015f610501565b60408051600160a060020a039092168252519081900360200190f35b34801561018757600080fd5b5060408051602060046024803582810135848102808701860190975280865261021196843560ff1696369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506105109650505050505050565b6040805160ff958616815293851660208501529190931682820152606082019290925290519081900360800190f35b60408051602060046044358181013583810280860185019096528085526102cd958335956024803560ff1696369695606495939492019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061051f9650505050505050565b60408051918252519081900360200190f35b6102cd600435602435610529565b3480156102f957600080fd5b50610148600160a060020a0360043516610531565b34801561031a57600080fd5b5061032f600160a060020a03600435166105be565b604080519115158252519081900360200190f35b6102cd6004356105d3565b34801561035a57600080fd5b506101486105d6565b34801561036f57600080fd5b506102cd600435610612565b34801561038757600080fd5b50610148600160a060020a0360043516610618565b3480156103a857600080fd5b506102cd6106a8565b3480156103bd57600080fd5b5061032f600160a060020a03600435811690602435166106ae565b3480156103e457600080fd5b506103ed610877565b6040805160ff9092168252519081900360200190f35b34801561040f57600080fd5b50610148600160a060020a036004351661087c565b6102cd6108d7565b34801561043857600080fd5b5061015f6108dc565b34801561044d57600080fd5b50610148600160a060020a03600435166108eb565b34801561046e57600080fd5b5061015f6109f3565b34801561048357600080fd5b506103ed610a02565b34801561049857600080fd5b506102cd610a07565b6102cd6004356024351515610529565b6102cd600435602435600160a060020a0360443516610a0c565b3480156104d757600080fd5b506103ed610a15565b3480156104ec57600080fd5b50610148600160a060020a0360043516610a1a565b600154600160a060020a031681565b60076000808093509350935093565b6000949350505050565b600092915050565b600254600160a060020a03163214806105545750600254600160a060020a031633145b151561055f57600080fd5b600160a060020a038116600081815260066020908152604091829020805460ff1916905581514281529081019290925280517faeba60bf43bc8bad9685cf80e62ae6d5cd753813786f1821576545517a3e49cb9281900390910190a150565b60066020526000908152604090205460ff1681565b90565b600254600160a060020a03163214806105f95750600254600160a060020a031633145b151561060457600080fd5b600254600160a060020a0316ff5b50600090565b600254600160a060020a031632148061063b5750600254600160a060020a031633145b151561064657600080fd5b600160a060020a038116600081815260066020908152604091829020805460ff1916600117905581514281529081019290925280517fc9861f7825199418647d352092481fbd508dc7420e7a6e2f0f41be183d6e2c8d9281900390910190a150565b60055481565b600160a060020a03821660008181526006602090815260408083205481517f2310167f0000000000000000000000000000000000000000000000000000000081529151939460ff9091169387938693849384939092632310167f926004808201939182900301818787803b15801561072557600080fd5b505af1158015610739573d6000803e3d6000fd5b505050506040513d602081101561074f57600080fd5b5051604080517f9156d1fd000000000000000000000000000000000000000000000000000000008152600160a060020a038a8116600483015288151560248301528251939650861692639156d1fd926044808401939192918290030181600087803b1580156107bd57600080fd5b505af11580156107d1573d6000803e3d6000fd5b505050506040513d60408110156107e757600080fd5b50805160209182015160408051428152600160a060020a03808e1695820195909552938b16848201528815156060850152821515608085015281151560a08501525191945092507fb72dd3ed580fe54dae87f5560d5617f1425b22e33e0a8e6ca80bf5cca95055359181900360c00190a18480156108625750815b801561086b5750805b98975050505050505050565b600281565b600154600160a060020a0316321461089357600080fd5b600160a060020a03811615156108a857600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600090565b600254600160a060020a031681565b600081905032600160a060020a031681600160a060020a0316638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561095157600080fd5b505af1158015610965573d6000803e3d6000fd5b505050506040513d602081101561097b57600080fd5b5051600160a060020a03161461099057600080fd5b600160a060020a038216600081815260066020908152604091829020805460ff1916600117905581514281529081019290925280517fc9861f7825199418647d352092481fbd508dc7420e7a6e2f0f41be183d6e2c8d9281900390910190a15050565b600354600160a060020a031681565b600181565b606490565b60009392505050565b600481565b600254600160a060020a0316321480610a3d5750600254600160a060020a031633145b1515610a4857600080fd5b600160a060020a0381161515610a5d57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820ce22c3e72273ecdef8ab80d8c9313e60b3e0ff37e6ed0fb00d499c83a9f660d50029",
}

// LvStreamRightsHolderABI is the input ABI used to generate the binding from.
// Deprecated: Use LvStreamRightsHolderMetaData.ABI instead.
var LvStreamRightsHolderABI = LvStreamRightsHolderMetaData.ABI

// Deprecated: Use LvStreamRightsHolderMetaData.Sigs instead.
// LvStreamRightsHolderFuncSigs maps the 4-byte function signature to its string representation.
var LvStreamRightsHolderFuncSigs = LvStreamRightsHolderMetaData.Sigs

// LvStreamRightsHolderBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LvStreamRightsHolderMetaData.Bin instead.
var LvStreamRightsHolderBin = LvStreamRightsHolderMetaData.Bin

// DeployLvStreamRightsHolder deploys a new Ethereum contract, binding an instance of LvStreamRightsHolder to it.
func DeployLvStreamRightsHolder(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LvStreamRightsHolder, error) {
	parsed, err := ParsedABI(K_LvStreamRightsHolder)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LvStreamRightsHolderBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LvStreamRightsHolder{LvStreamRightsHolderCaller: LvStreamRightsHolderCaller{contract: contract}, LvStreamRightsHolderTransactor: LvStreamRightsHolderTransactor{contract: contract}, LvStreamRightsHolderFilterer: LvStreamRightsHolderFilterer{contract: contract}}, nil
}

// LvStreamRightsHolder is an auto generated Go binding around an Ethereum contract.
type LvStreamRightsHolder struct {
	LvStreamRightsHolderCaller     // Read-only binding to the contract
	LvStreamRightsHolderTransactor // Write-only binding to the contract
	LvStreamRightsHolderFilterer   // Log filterer for contract events
}

// LvStreamRightsHolderCaller is an auto generated read-only Go binding around an Ethereum contract.
type LvStreamRightsHolderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LvStreamRightsHolderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LvStreamRightsHolderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LvStreamRightsHolderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LvStreamRightsHolderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewLvStreamRightsHolder creates a new instance of LvStreamRightsHolder, bound to a specific deployed contract.
func NewLvStreamRightsHolder(address common.Address, backend bind.ContractBackend) (*LvStreamRightsHolder, error) {
	contract, err := bindLvStreamRightsHolder(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolder{LvStreamRightsHolderCaller: LvStreamRightsHolderCaller{contract: contract}, LvStreamRightsHolderTransactor: LvStreamRightsHolderTransactor{contract: contract}, LvStreamRightsHolderFilterer: LvStreamRightsHolderFilterer{contract: contract}}, nil
}

// NewLvStreamRightsHolderCaller creates a new read-only instance of LvStreamRightsHolder, bound to a specific deployed contract.
func NewLvStreamRightsHolderCaller(address common.Address, caller bind.ContractCaller) (*LvStreamRightsHolderCaller, error) {
	contract, err := bindLvStreamRightsHolder(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderCaller{contract: contract}, nil
}

// NewLvStreamRightsHolderTransactor creates a new write-only instance of LvStreamRightsHolder, bound to a specific deployed contract.
func NewLvStreamRightsHolderTransactor(address common.Address, transactor bind.ContractTransactor) (*LvStreamRightsHolderTransactor, error) {
	contract, err := bindLvStreamRightsHolder(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderTransactor{contract: contract}, nil
}

// NewLvStreamRightsHolderFilterer creates a new log filterer instance of LvStreamRightsHolder, bound to a specific deployed contract.
func NewLvStreamRightsHolderFilterer(address common.Address, filterer bind.ContractFilterer) (*LvStreamRightsHolderFilterer, error) {
	contract, err := bindLvStreamRightsHolder(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderFilterer{contract: contract}, nil
}

// bindLvStreamRightsHolder binds a generic wrapper to an already deployed contract.
func bindLvStreamRightsHolder(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_LvStreamRightsHolder)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// DEFAULTACCESS is a free data retrieval call binding the contract method 0x6af27417.
//
// Solidity: function DEFAULT_ACCESS() view returns(uint8)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) DEFAULTACCESS(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _LvStreamRightsHolder.contract.Call(opts, &out, "DEFAULT_ACCESS")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// DEFAULTCHARGE is a free data retrieval call binding the contract method 0xf185db0c.
//
// Solidity: function DEFAULT_CHARGE() view returns(uint8)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) DEFAULTCHARGE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _LvStreamRightsHolder.contract.Call(opts, &out, "DEFAULT_CHARGE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// DEFAULTSEE is a free data retrieval call binding the contract method 0xb535b03e.
//
// Solidity: function DEFAULT_SEE() view returns(uint8)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) DEFAULTSEE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _LvStreamRightsHolder.contract.Call(opts, &out, "DEFAULT_SEE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LvStreamRightsHolder.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LvStreamRightsHolder.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LvStreamRightsHolder.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RecordingStreams is a free data retrieval call binding the contract method 0x250fc29a.
//
// Solidity: function recordingStreams(address ) view returns(bool)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) RecordingStreams(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _LvStreamRightsHolder.contract.Call(opts, &out, "recordingStreams", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// RunAccessInfo is a free data retrieval call binding the contract method 0x0f82c16f.
//
// Solidity: function runAccessInfo(uint8 , bytes32[] , address[] ) view returns(uint8, uint8, uint8, uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) RunAccessInfo(opts *bind.CallOpts, arg0 uint8, arg1 [][32]byte, arg2 []common.Address) (uint8, uint8, uint8, *big.Int, error) {
	var out []interface{}
	err := _LvStreamRightsHolder.contract.Call(opts, &out, "runAccessInfo", arg0, arg1, arg2)

	if err != nil {
		return *new(uint8), *new(uint8), *new(uint8), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)
	out2 := *abi.ConvertType(out[2], new(uint8)).(*uint8)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, err

}

// RunDescribeStatus is a free data retrieval call binding the contract method 0x45080442.
//
// Solidity: function runDescribeStatus(int256 ) pure returns(bytes32)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) RunDescribeStatus(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _LvStreamRightsHolder.contract.Call(opts, &out, "runDescribeStatus", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_LvStreamRightsHolder *LvStreamRightsHolderCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LvStreamRightsHolder.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AuthorizeRecording is a paid mutator transaction binding the contract method 0x6135c504.
//
// Solidity: function authorizeRecording(address stream, address accessor) returns(bool)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) AuthorizeRecording(opts *bind.TransactOpts, stream common.Address, accessor common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "authorizeRecording", stream, accessor)
}

// DisableRecording is a paid mutator transaction binding the contract method 0x20abe3ae.
//
// Solidity: function disableRecording(address stream) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) DisableRecording(opts *bind.TransactOpts, stream common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "disableRecording", stream)
}

// EnableRecording is a paid mutator transaction binding the contract method 0x514eecff.
//
// Solidity: function enableRecording(address stream) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) EnableRecording(opts *bind.TransactOpts, stream common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "enableRecording", stream)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "kill")
}

// RegisterStream is a paid mutator transaction binding the contract method 0xad284b12.
//
// Solidity: function registerStream(address stream) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) RegisterStream(opts *bind.TransactOpts, stream common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "registerStream", stream)
}

// RunAccess is a paid mutator transaction binding the contract method 0x123e0e80.
//
// Solidity: function runAccess(uint256 , uint8 , bytes32[] , address[] ) payable returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) RunAccess(opts *bind.TransactOpts, arg0 *big.Int, arg1 uint8, arg2 [][32]byte, arg3 []common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "runAccess", arg0, arg1, arg2, arg3)
}

// RunCreate is a paid mutator transaction binding the contract method 0x7b1cdb3e.
//
// Solidity: function runCreate() payable returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) RunCreate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "runCreate")
}

// RunEdit is a paid mutator transaction binding the contract method 0xc9f3d94c.
//
// Solidity: function runEdit() returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) RunEdit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "runEdit")
}

// RunFinalize is a paid mutator transaction binding the contract method 0x17685953.
//
// Solidity: function runFinalize(uint256 , uint256 ) payable returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) RunFinalize(opts *bind.TransactOpts, arg0 *big.Int, arg1 *big.Int) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "runFinalize", arg0, arg1)
}

// RunFinalizeExt is a paid mutator transaction binding the contract method 0xeb81eff0.
//
// Solidity: function runFinalizeExt(uint256 requestID, uint256 score_pct, address originator) payable returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) RunFinalizeExt(opts *bind.TransactOpts, requestID *big.Int, score_pct *big.Int, originator common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "runFinalizeExt", requestID, score_pct, originator)
}

// RunGrant is a paid mutator transaction binding the contract method 0xe870ed91.
//
// Solidity: function runGrant(uint256 , bool ) payable returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) RunGrant(opts *bind.TransactOpts, arg0 *big.Int, arg1 bool) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "runGrant", arg0, arg1)
}

// RunKill is a paid mutator transaction binding the contract method 0x9e99bbea.
//
// Solidity: function runKill() payable returns(uint256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) RunKill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "runKill")
}

// RunStatusChange is a paid mutator transaction binding the contract method 0x3513a805.
//
// Solidity: function runStatusChange(int256 proposed_status_code) payable returns(int256)
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) RunStatusChange(opts *bind.TransactOpts, proposed_status_code *big.Int) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "runStatusChange", proposed_status_code)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_LvStreamRightsHolder *LvStreamRightsHolderTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _LvStreamRightsHolder.contract.RawTransact(opts, calldata)
}

// LvStreamRightsHolderAuthorizeRecordingIterator is returned from FilterAuthorizeRecording and is used to iterate over the raw logs and unpacked data for AuthorizeRecording events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderAuthorizeRecordingIterator struct {
	Event *LvStreamRightsHolderAuthorizeRecording // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderAuthorizeRecordingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderAuthorizeRecording)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderAuthorizeRecording)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderAuthorizeRecordingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderAuthorizeRecordingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderAuthorizeRecording represents a AuthorizeRecording event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderAuthorizeRecording struct {
	Timestamp    *big.Int
	Stream       common.Address
	Accessor     common.Address
	RightsHolder bool
	Provider     bool
	Membership   bool
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterAuthorizeRecording is a free log retrieval operation binding the contract event 0xb72dd3ed580fe54dae87f5560d5617f1425b22e33e0a8e6ca80bf5cca9505535.
//
// Solidity: event AuthorizeRecording(uint256 timestamp, address stream, address accessor, bool rightsHolder, bool provider, bool membership)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterAuthorizeRecording(opts *bind.FilterOpts) (*LvStreamRightsHolderAuthorizeRecordingIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "AuthorizeRecording")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderAuthorizeRecordingIterator{contract: _LvStreamRightsHolder.contract, event: "AuthorizeRecording", logs: logs, sub: sub}, nil
}

// WatchAuthorizeRecording is a free log subscription operation binding the contract event 0xb72dd3ed580fe54dae87f5560d5617f1425b22e33e0a8e6ca80bf5cca9505535.
//
// Solidity: event AuthorizeRecording(uint256 timestamp, address stream, address accessor, bool rightsHolder, bool provider, bool membership)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchAuthorizeRecording(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderAuthorizeRecording) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "AuthorizeRecording")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderAuthorizeRecording)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "AuthorizeRecording", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorizeRecording is a log parse operation binding the contract event 0xb72dd3ed580fe54dae87f5560d5617f1425b22e33e0a8e6ca80bf5cca9505535.
//
// Solidity: event AuthorizeRecording(uint256 timestamp, address stream, address accessor, bool rightsHolder, bool provider, bool membership)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseAuthorizeRecording(log types.Log) (*LvStreamRightsHolderAuthorizeRecording, error) {
	event := new(LvStreamRightsHolderAuthorizeRecording)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "AuthorizeRecording", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvStreamRightsHolderDisableRecordingIterator is returned from FilterDisableRecording and is used to iterate over the raw logs and unpacked data for DisableRecording events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderDisableRecordingIterator struct {
	Event *LvStreamRightsHolderDisableRecording // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderDisableRecordingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderDisableRecording)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderDisableRecording)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderDisableRecordingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderDisableRecordingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderDisableRecording represents a DisableRecording event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderDisableRecording struct {
	Timestamp *big.Int
	Stream    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDisableRecording is a free log retrieval operation binding the contract event 0xaeba60bf43bc8bad9685cf80e62ae6d5cd753813786f1821576545517a3e49cb.
//
// Solidity: event DisableRecording(uint256 timestamp, address stream)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterDisableRecording(opts *bind.FilterOpts) (*LvStreamRightsHolderDisableRecordingIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "DisableRecording")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderDisableRecordingIterator{contract: _LvStreamRightsHolder.contract, event: "DisableRecording", logs: logs, sub: sub}, nil
}

// WatchDisableRecording is a free log subscription operation binding the contract event 0xaeba60bf43bc8bad9685cf80e62ae6d5cd753813786f1821576545517a3e49cb.
//
// Solidity: event DisableRecording(uint256 timestamp, address stream)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchDisableRecording(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderDisableRecording) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "DisableRecording")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderDisableRecording)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "DisableRecording", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisableRecording is a log parse operation binding the contract event 0xaeba60bf43bc8bad9685cf80e62ae6d5cd753813786f1821576545517a3e49cb.
//
// Solidity: event DisableRecording(uint256 timestamp, address stream)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseDisableRecording(log types.Log) (*LvStreamRightsHolderDisableRecording, error) {
	event := new(LvStreamRightsHolderDisableRecording)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "DisableRecording", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvStreamRightsHolderEnableRecordingIterator is returned from FilterEnableRecording and is used to iterate over the raw logs and unpacked data for EnableRecording events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderEnableRecordingIterator struct {
	Event *LvStreamRightsHolderEnableRecording // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderEnableRecordingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderEnableRecording)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderEnableRecording)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderEnableRecordingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderEnableRecordingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderEnableRecording represents a EnableRecording event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderEnableRecording struct {
	Timestamp *big.Int
	Stream    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterEnableRecording is a free log retrieval operation binding the contract event 0xc9861f7825199418647d352092481fbd508dc7420e7a6e2f0f41be183d6e2c8d.
//
// Solidity: event EnableRecording(uint256 timestamp, address stream)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterEnableRecording(opts *bind.FilterOpts) (*LvStreamRightsHolderEnableRecordingIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "EnableRecording")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderEnableRecordingIterator{contract: _LvStreamRightsHolder.contract, event: "EnableRecording", logs: logs, sub: sub}, nil
}

// WatchEnableRecording is a free log subscription operation binding the contract event 0xc9861f7825199418647d352092481fbd508dc7420e7a6e2f0f41be183d6e2c8d.
//
// Solidity: event EnableRecording(uint256 timestamp, address stream)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchEnableRecording(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderEnableRecording) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "EnableRecording")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderEnableRecording)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "EnableRecording", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEnableRecording is a log parse operation binding the contract event 0xc9861f7825199418647d352092481fbd508dc7420e7a6e2f0f41be183d6e2c8d.
//
// Solidity: event EnableRecording(uint256 timestamp, address stream)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseEnableRecording(log types.Log) (*LvStreamRightsHolderEnableRecording, error) {
	event := new(LvStreamRightsHolderEnableRecording)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "EnableRecording", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvStreamRightsHolderLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogIterator struct {
	Event *LvStreamRightsHolderLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderLog represents a Log event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLog struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterLog(opts *bind.FilterOpts) (*LvStreamRightsHolderLogIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderLogIterator{contract: _LvStreamRightsHolder.contract, event: "Log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderLog) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderLog)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "Log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseLog(log types.Log) (*LvStreamRightsHolderLog, error) {
	event := new(LvStreamRightsHolderLog)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "Log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvStreamRightsHolderLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogAddressIterator struct {
	Event *LvStreamRightsHolderLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderLogAddress represents a LogAddress event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogAddress struct {
	Label string
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterLogAddress(opts *bind.FilterOpts) (*LvStreamRightsHolderLogAddressIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderLogAddressIterator{contract: _LvStreamRightsHolder.contract, event: "LogAddress", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderLogAddress) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderLogAddress)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseLogAddress(log types.Log) (*LvStreamRightsHolderLogAddress, error) {
	event := new(LvStreamRightsHolderLogAddress)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvStreamRightsHolderLogBoolIterator is returned from FilterLogBool and is used to iterate over the raw logs and unpacked data for LogBool events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogBoolIterator struct {
	Event *LvStreamRightsHolderLogBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderLogBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderLogBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderLogBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderLogBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderLogBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderLogBool represents a LogBool event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogBool struct {
	Label string
	B     bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBool is a free log retrieval operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterLogBool(opts *bind.FilterOpts) (*LvStreamRightsHolderLogBoolIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderLogBoolIterator{contract: _LvStreamRightsHolder.contract, event: "LogBool", logs: logs, sub: sub}, nil
}

// WatchLogBool is a free log subscription operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchLogBool(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderLogBool) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderLogBool)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBool is a log parse operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseLogBool(log types.Log) (*LvStreamRightsHolderLogBool, error) {
	event := new(LvStreamRightsHolderLogBool)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogBool", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvStreamRightsHolderLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogBytes32Iterator struct {
	Event *LvStreamRightsHolderLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderLogBytes32 represents a LogBytes32 event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogBytes32 struct {
	Label string
	B     [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*LvStreamRightsHolderLogBytes32Iterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderLogBytes32Iterator{contract: _LvStreamRightsHolder.contract, event: "LogBytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderLogBytes32) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderLogBytes32)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseLogBytes32(log types.Log) (*LvStreamRightsHolderLogBytes32, error) {
	event := new(LvStreamRightsHolderLogBytes32)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogBytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvStreamRightsHolderLogInt256Iterator is returned from FilterLogInt256 and is used to iterate over the raw logs and unpacked data for LogInt256 events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogInt256Iterator struct {
	Event *LvStreamRightsHolderLogInt256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderLogInt256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderLogInt256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderLogInt256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderLogInt256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderLogInt256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderLogInt256 represents a LogInt256 event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogInt256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogInt256 is a free log retrieval operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterLogInt256(opts *bind.FilterOpts) (*LvStreamRightsHolderLogInt256Iterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderLogInt256Iterator{contract: _LvStreamRightsHolder.contract, event: "LogInt256", logs: logs, sub: sub}, nil
}

// WatchLogInt256 is a free log subscription operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchLogInt256(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderLogInt256) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderLogInt256)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogInt256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt256 is a log parse operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseLogInt256(log types.Log) (*LvStreamRightsHolderLogInt256, error) {
	event := new(LvStreamRightsHolderLogInt256)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogInt256", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvStreamRightsHolderLogPaymentIterator is returned from FilterLogPayment and is used to iterate over the raw logs and unpacked data for LogPayment events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogPaymentIterator struct {
	Event *LvStreamRightsHolderLogPayment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderLogPaymentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderLogPayment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderLogPayment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderLogPaymentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderLogPaymentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderLogPayment represents a LogPayment event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogPayment struct {
	Label  string
	Payee  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterLogPayment is a free log retrieval operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterLogPayment(opts *bind.FilterOpts) (*LvStreamRightsHolderLogPaymentIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderLogPaymentIterator{contract: _LvStreamRightsHolder.contract, event: "LogPayment", logs: logs, sub: sub}, nil
}

// WatchLogPayment is a free log subscription operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchLogPayment(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderLogPayment) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "LogPayment")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderLogPayment)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogPayment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogPayment is a log parse operation binding the contract event 0x6a0f12fe24f7c34df8acc096f076bac6e3f1ff225f4fccc7b0f389657bde895a.
//
// Solidity: event LogPayment(string label, address payee, uint256 amount)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseLogPayment(log types.Log) (*LvStreamRightsHolderLogPayment, error) {
	event := new(LvStreamRightsHolderLogPayment)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogPayment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvStreamRightsHolderLogUint256Iterator is returned from FilterLogUint256 and is used to iterate over the raw logs and unpacked data for LogUint256 events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogUint256Iterator struct {
	Event *LvStreamRightsHolderLogUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderLogUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderLogUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderLogUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderLogUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderLogUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderLogUint256 represents a LogUint256 event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderLogUint256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogUint256 is a free log retrieval operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterLogUint256(opts *bind.FilterOpts) (*LvStreamRightsHolderLogUint256Iterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderLogUint256Iterator{contract: _LvStreamRightsHolder.contract, event: "LogUint256", logs: logs, sub: sub}, nil
}

// WatchLogUint256 is a free log subscription operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchLogUint256(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderLogUint256) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderLogUint256)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint256 is a log parse operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseLogUint256(log types.Log) (*LvStreamRightsHolderLogUint256, error) {
	event := new(LvStreamRightsHolderLogUint256)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "LogUint256", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvStreamRightsHolderRunAccessIterator is returned from FilterRunAccess and is used to iterate over the raw logs and unpacked data for RunAccess events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunAccessIterator struct {
	Event *LvStreamRightsHolderRunAccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderRunAccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderRunAccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderRunAccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderRunAccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderRunAccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderRunAccess represents a RunAccess event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunAccess struct {
	RequestID *big.Int
	Result    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRunAccess is a free log retrieval operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterRunAccess(opts *bind.FilterOpts) (*LvStreamRightsHolderRunAccessIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderRunAccessIterator{contract: _LvStreamRightsHolder.contract, event: "RunAccess", logs: logs, sub: sub}, nil
}

// WatchRunAccess is a free log subscription operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchRunAccess(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderRunAccess) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "RunAccess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderRunAccess)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunAccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccess is a log parse operation binding the contract event 0x3e68dc35f88d76818f276322c37f5021ee00e232fe0d27a93c02801aec4d9c58.
//
// Solidity: event RunAccess(uint256 requestID, uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseRunAccess(log types.Log) (*LvStreamRightsHolderRunAccess, error) {
	event := new(LvStreamRightsHolderRunAccess)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunAccess", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvStreamRightsHolderRunAccessChargeIterator is returned from FilterRunAccessCharge and is used to iterate over the raw logs and unpacked data for RunAccessCharge events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunAccessChargeIterator struct {
	Event *LvStreamRightsHolderRunAccessCharge // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderRunAccessChargeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderRunAccessCharge)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderRunAccessCharge)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderRunAccessChargeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderRunAccessChargeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderRunAccessCharge represents a RunAccessCharge event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunAccessCharge struct {
	Level                 uint8
	CalculateAccessCharge *big.Int
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterRunAccessCharge is a free log retrieval operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterRunAccessCharge(opts *bind.FilterOpts) (*LvStreamRightsHolderRunAccessChargeIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderRunAccessChargeIterator{contract: _LvStreamRightsHolder.contract, event: "RunAccessCharge", logs: logs, sub: sub}, nil
}

// WatchRunAccessCharge is a free log subscription operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchRunAccessCharge(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderRunAccessCharge) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "RunAccessCharge")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderRunAccessCharge)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunAccessCharge is a log parse operation binding the contract event 0xffadad18ab3777a19f664019a6261b011ab9405749e01a45950d44fb9360b385.
//
// Solidity: event RunAccessCharge(uint8 level, int256 calculateAccessCharge)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseRunAccessCharge(log types.Log) (*LvStreamRightsHolderRunAccessCharge, error) {
	event := new(LvStreamRightsHolderRunAccessCharge)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunAccessCharge", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvStreamRightsHolderRunCreateIterator is returned from FilterRunCreate and is used to iterate over the raw logs and unpacked data for RunCreate events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunCreateIterator struct {
	Event *LvStreamRightsHolderRunCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderRunCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderRunCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderRunCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderRunCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderRunCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderRunCreate represents a RunCreate event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunCreate struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunCreate is a free log retrieval operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterRunCreate(opts *bind.FilterOpts) (*LvStreamRightsHolderRunCreateIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderRunCreateIterator{contract: _LvStreamRightsHolder.contract, event: "RunCreate", logs: logs, sub: sub}, nil
}

// WatchRunCreate is a free log subscription operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchRunCreate(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderRunCreate) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "RunCreate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderRunCreate)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunCreate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunCreate is a log parse operation binding the contract event 0x9df71221e13c480b974b5d5bd7591b30b7ea3bfff8a56dfa7fde810a14c1c39b.
//
// Solidity: event RunCreate(uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseRunCreate(log types.Log) (*LvStreamRightsHolderRunCreate, error) {
	event := new(LvStreamRightsHolderRunCreate)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunCreate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvStreamRightsHolderRunFinalizeIterator is returned from FilterRunFinalize and is used to iterate over the raw logs and unpacked data for RunFinalize events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunFinalizeIterator struct {
	Event *LvStreamRightsHolderRunFinalize // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderRunFinalizeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderRunFinalize)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderRunFinalize)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderRunFinalizeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderRunFinalizeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderRunFinalize represents a RunFinalize event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunFinalize struct {
	RequestID *big.Int
	Result    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRunFinalize is a free log retrieval operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterRunFinalize(opts *bind.FilterOpts) (*LvStreamRightsHolderRunFinalizeIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderRunFinalizeIterator{contract: _LvStreamRightsHolder.contract, event: "RunFinalize", logs: logs, sub: sub}, nil
}

// WatchRunFinalize is a free log subscription operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchRunFinalize(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderRunFinalize) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "RunFinalize")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderRunFinalize)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunFinalize", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunFinalize is a log parse operation binding the contract event 0xbf0f2215c45c5ee802d4c20bdfc915308c4459b0f6a78f23ad350e6408bf2891.
//
// Solidity: event RunFinalize(uint256 requestID, uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseRunFinalize(log types.Log) (*LvStreamRightsHolderRunFinalize, error) {
	event := new(LvStreamRightsHolderRunFinalize)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunFinalize", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvStreamRightsHolderRunKillIterator is returned from FilterRunKill and is used to iterate over the raw logs and unpacked data for RunKill events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunKillIterator struct {
	Event *LvStreamRightsHolderRunKill // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderRunKillIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderRunKill)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderRunKill)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderRunKillIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderRunKillIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderRunKill represents a RunKill event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunKill struct {
	Result *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRunKill is a free log retrieval operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterRunKill(opts *bind.FilterOpts) (*LvStreamRightsHolderRunKillIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderRunKillIterator{contract: _LvStreamRightsHolder.contract, event: "RunKill", logs: logs, sub: sub}, nil
}

// WatchRunKill is a free log subscription operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchRunKill(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderRunKill) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "RunKill")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderRunKill)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunKill", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunKill is a log parse operation binding the contract event 0x6d0dbfc3805aef247651b04b50fc717599f7e0b66c6b022ae1544406f7bf8f86.
//
// Solidity: event RunKill(uint256 result)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseRunKill(log types.Log) (*LvStreamRightsHolderRunKill, error) {
	event := new(LvStreamRightsHolderRunKill)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunKill", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LvStreamRightsHolderRunStatusChangeIterator is returned from FilterRunStatusChange and is used to iterate over the raw logs and unpacked data for RunStatusChange events raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunStatusChangeIterator struct {
	Event *LvStreamRightsHolderRunStatusChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LvStreamRightsHolderRunStatusChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LvStreamRightsHolderRunStatusChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LvStreamRightsHolderRunStatusChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LvStreamRightsHolderRunStatusChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LvStreamRightsHolderRunStatusChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LvStreamRightsHolderRunStatusChange represents a RunStatusChange event raised by the LvStreamRightsHolder contract.
type LvStreamRightsHolderRunStatusChange struct {
	ProposedStatusCode *big.Int
	ReturnStatusCode   *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterRunStatusChange is a free log retrieval operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) FilterRunStatusChange(opts *bind.FilterOpts) (*LvStreamRightsHolderRunStatusChangeIterator, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.FilterLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return &LvStreamRightsHolderRunStatusChangeIterator{contract: _LvStreamRightsHolder.contract, event: "RunStatusChange", logs: logs, sub: sub}, nil
}

// WatchRunStatusChange is a free log subscription operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) WatchRunStatusChange(opts *bind.WatchOpts, sink chan<- *LvStreamRightsHolderRunStatusChange) (event.Subscription, error) {

	logs, sub, err := _LvStreamRightsHolder.contract.WatchLogs(opts, "RunStatusChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LvStreamRightsHolderRunStatusChange)
				if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRunStatusChange is a log parse operation binding the contract event 0xb6c1c013bb5004fe8e943c6890e300ccedf9bd73dcd4eb291b31b9f96874feff.
//
// Solidity: event RunStatusChange(int256 proposedStatusCode, int256 returnStatusCode)
func (_LvStreamRightsHolder *LvStreamRightsHolderFilterer) ParseRunStatusChange(log types.Log) (*LvStreamRightsHolderRunStatusChange, error) {
	event := new(LvStreamRightsHolderRunStatusChange)
	if err := _LvStreamRightsHolder.contract.UnpackLog(event, "RunStatusChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MetaObjectMetaData contains all meta data concerning the MetaObject contract.
var MetaObjectMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"putMeta\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
	Sigs: map[string]string{
		"af570c04": "contentSpace()",
		"02d05d3f": "creator()",
		"ac55c906": "getMeta(bytes)",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"e542b7cb": "putMeta(bytes,bytes)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
	},
	Bin: "0x60806040527f4f776e61626c6532303139303532383139333830304d4c00000000000000000060005560018054600160a060020a0319908116329081179092556002805490911690911790556107728061005a6000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461009a57806341c0e1b5146100cb57806354fd4d50146100e05780636d2e4b1b146101075780638da5cb5b14610128578063ac55c9061461013d578063af570c041461020b578063e542b7cb14610220578063f2fde38b146102b7575b005b3480156100a657600080fd5b506100af6102d8565b60408051600160a060020a039092168252519081900360200190f35b3480156100d757600080fd5b506100986102e7565b3480156100ec57600080fd5b506100f5610323565b60408051918252519081900360200190f35b34801561011357600080fd5b50610098600160a060020a0360043516610329565b34801561013457600080fd5b506100af610384565b34801561014957600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101969436949293602493928401919081908401838280828437509497506103939650505050505050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101d05781810151838201526020016101b8565b50505050905090810190601f1680156101fd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021757600080fd5b506100af610542565b34801561022c57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261009894369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506105519650505050505050565b3480156102c357600080fd5b50610098600160a060020a0360043516610639565b600154600160a060020a031681565b600254600160a060020a031632148061030a5750600254600160a060020a031633145b151561031557600080fd5b600254600160a060020a0316ff5b60005481565b600154600160a060020a0316321461034057600080fd5b600160a060020a038116151561035557600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b60606000806020845111151561044d57505081518083015160008181526004602090815260409182902080548351601f6002610100600185161502600019019093169290920491820184900484028101840190945280845293949390918301828280156104415780601f1061041657610100808354040283529160200191610441565b820191906000526020600020905b81548152906001019060200180831161042457829003601f168201915b5050505050925061053b565b6005846040518082805190602001908083835b6020831061047f5780518252601f199092019160209182019101610460565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f60026001831615909802909501169590950492830182900482028801820190528187529294509250508301828280156105335780601f1061050857610100808354040283529160200191610533565b820191906000526020600020905b81548152906001019060200180831161051657829003601f168201915b505050505092505b5050919050565b600354600160a060020a031681565b6002546000908190600160a060020a03163214806105795750600254600160a060020a031633145b151561058457600080fd5b83516020106105bd575050815180830151600081815260046020908152604090912084519293926105b7928601906106ab565b50610633565b826005856040518082805190602001908083835b602083106105f05780518252601f1990920191602091820191016105d1565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320845161063195919491909101925090506106ab565b505b50505050565b600254600160a060020a031632148061065c5750600254600160a060020a031633145b151561066757600080fd5b600160a060020a038116151561067c57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106106ec57805160ff1916838001178555610719565b82800160010185558215610719579182015b828111156107195782518255916020019190600101906106fe565b50610725929150610729565b5090565b61074391905b80821115610725576000815560010161072f565b905600a165627a7a72305820319da22b04e24eff0fe8910d3e9594946e749ec11b3055cbcbb2a13bed5d1e970029",
}

// MetaObjectABI is the input ABI used to generate the binding from.
// Deprecated: Use MetaObjectMetaData.ABI instead.
var MetaObjectABI = MetaObjectMetaData.ABI

// Deprecated: Use MetaObjectMetaData.Sigs instead.
// MetaObjectFuncSigs maps the 4-byte function signature to its string representation.
var MetaObjectFuncSigs = MetaObjectMetaData.Sigs

// MetaObjectBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MetaObjectMetaData.Bin instead.
var MetaObjectBin = MetaObjectMetaData.Bin

// DeployMetaObject deploys a new Ethereum contract, binding an instance of MetaObject to it.
func DeployMetaObject(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MetaObject, error) {
	parsed, err := ParsedABI(K_MetaObject)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MetaObjectBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MetaObject{MetaObjectCaller: MetaObjectCaller{contract: contract}, MetaObjectTransactor: MetaObjectTransactor{contract: contract}, MetaObjectFilterer: MetaObjectFilterer{contract: contract}}, nil
}

// MetaObject is an auto generated Go binding around an Ethereum contract.
type MetaObject struct {
	MetaObjectCaller     // Read-only binding to the contract
	MetaObjectTransactor // Write-only binding to the contract
	MetaObjectFilterer   // Log filterer for contract events
}

// MetaObjectCaller is an auto generated read-only Go binding around an Ethereum contract.
type MetaObjectCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetaObjectTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MetaObjectTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetaObjectFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MetaObjectFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewMetaObject creates a new instance of MetaObject, bound to a specific deployed contract.
func NewMetaObject(address common.Address, backend bind.ContractBackend) (*MetaObject, error) {
	contract, err := bindMetaObject(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MetaObject{MetaObjectCaller: MetaObjectCaller{contract: contract}, MetaObjectTransactor: MetaObjectTransactor{contract: contract}, MetaObjectFilterer: MetaObjectFilterer{contract: contract}}, nil
}

// NewMetaObjectCaller creates a new read-only instance of MetaObject, bound to a specific deployed contract.
func NewMetaObjectCaller(address common.Address, caller bind.ContractCaller) (*MetaObjectCaller, error) {
	contract, err := bindMetaObject(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MetaObjectCaller{contract: contract}, nil
}

// NewMetaObjectTransactor creates a new write-only instance of MetaObject, bound to a specific deployed contract.
func NewMetaObjectTransactor(address common.Address, transactor bind.ContractTransactor) (*MetaObjectTransactor, error) {
	contract, err := bindMetaObject(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MetaObjectTransactor{contract: contract}, nil
}

// NewMetaObjectFilterer creates a new log filterer instance of MetaObject, bound to a specific deployed contract.
func NewMetaObjectFilterer(address common.Address, filterer bind.ContractFilterer) (*MetaObjectFilterer, error) {
	contract, err := bindMetaObject(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MetaObjectFilterer{contract: contract}, nil
}

// bindMetaObject binds a generic wrapper to an already deployed contract.
func bindMetaObject(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_MetaObject)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_MetaObject *MetaObjectCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MetaObject.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_MetaObject *MetaObjectCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MetaObject.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetMeta is a free data retrieval call binding the contract method 0xac55c906.
//
// Solidity: function getMeta(bytes key) view returns(bytes)
func (_MetaObject *MetaObjectCaller) GetMeta(opts *bind.CallOpts, key []byte) ([]byte, error) {
	var out []interface{}
	err := _MetaObject.contract.Call(opts, &out, "getMeta", key)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MetaObject *MetaObjectCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MetaObject.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_MetaObject *MetaObjectCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _MetaObject.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_MetaObject *MetaObjectTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "kill")
}

// PutMeta is a paid mutator transaction binding the contract method 0xe542b7cb.
//
// Solidity: function putMeta(bytes key, bytes value) returns()
func (_MetaObject *MetaObjectTransactor) PutMeta(opts *bind.TransactOpts, key []byte, value []byte) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "putMeta", key, value)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_MetaObject *MetaObjectTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MetaObject *MetaObjectTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _MetaObject.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_MetaObject *MetaObjectTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _MetaObject.contract.RawTransact(opts, calldata)
}

// NodeMetaData contains all meta data concerning the Node contract.
var NodeMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"label\",\"type\":\"string\"}],\"name\":\"log\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"LogBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"uint256\"}],\"name\":\"LogUint256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"u\",\"type\":\"int256\"}],\"name\":\"LogInt256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"af570c04": "contentSpace()",
		"02d05d3f": "creator()",
		"41c0e1b5": "kill()",
		"41304fac": "log(string)",
		"8da5cb5b": "owner()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
	},
	Bin: "0x60806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f4e6f646532303139303331353130353130304d4c00000000000000000000000060045560018054600160a060020a0319908116329081179092556002805490911690911790556103f38061007e6000396000f30060806040526004361061008d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461008f57806341304fac146100c057806341c0e1b51461011957806354fd4d501461012e5780636d2e4b1b146101555780638da5cb5b14610176578063af570c041461018b578063f2fde38b146101a0575b005b34801561009b57600080fd5b506100a46101c1565b60408051600160a060020a039092168252519081900360200190f35b3480156100cc57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261008d9436949293602493928401919081908401838280828437509497506101d09650505050505050565b34801561012557600080fd5b5061008d61029a565b34801561013a57600080fd5b506101436102d6565b60408051918252519081900360200190f35b34801561016157600080fd5b5061008d600160a060020a03600435166102dc565b34801561018257600080fd5b506100a4610337565b34801561019757600080fd5b506100a4610346565b3480156101ac57600080fd5b5061008d600160a060020a0360043516610355565b600154600160a060020a031681565b600254600160a060020a03163214806101f35750600254600160a060020a031633145b15156101fe57600080fd5b7fcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab816040518080602001828103825283818151815260200191508051906020019080838360005b8381101561025d578181015183820152602001610245565b50505050905090810190601f16801561028a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a150565b600254600160a060020a03163214806102bd5750600254600160a060020a031633145b15156102c857600080fd5b600254600160a060020a0316ff5b60045481565b600154600160a060020a031632146102f357600080fd5b600160a060020a038116151561030857600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b600354600160a060020a031681565b600254600160a060020a03163214806103785750600254600160a060020a031633145b151561038357600080fd5b600160a060020a038116151561039857600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058208a4aa8e4e08612c61fc5310cf0c518b171d02ca645f980b1bd61ad9e7746c4860029",
}

// NodeABI is the input ABI used to generate the binding from.
// Deprecated: Use NodeMetaData.ABI instead.
var NodeABI = NodeMetaData.ABI

// Deprecated: Use NodeMetaData.Sigs instead.
// NodeFuncSigs maps the 4-byte function signature to its string representation.
var NodeFuncSigs = NodeMetaData.Sigs

// NodeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NodeMetaData.Bin instead.
var NodeBin = NodeMetaData.Bin

// DeployNode deploys a new Ethereum contract, binding an instance of Node to it.
func DeployNode(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Node, error) {
	parsed, err := ParsedABI(K_Node)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NodeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Node{NodeCaller: NodeCaller{contract: contract}, NodeTransactor: NodeTransactor{contract: contract}, NodeFilterer: NodeFilterer{contract: contract}}, nil
}

// Node is an auto generated Go binding around an Ethereum contract.
type Node struct {
	NodeCaller     // Read-only binding to the contract
	NodeTransactor // Write-only binding to the contract
	NodeFilterer   // Log filterer for contract events
}

// NodeCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewNode creates a new instance of Node, bound to a specific deployed contract.
func NewNode(address common.Address, backend bind.ContractBackend) (*Node, error) {
	contract, err := bindNode(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Node{NodeCaller: NodeCaller{contract: contract}, NodeTransactor: NodeTransactor{contract: contract}, NodeFilterer: NodeFilterer{contract: contract}}, nil
}

// NewNodeCaller creates a new read-only instance of Node, bound to a specific deployed contract.
func NewNodeCaller(address common.Address, caller bind.ContractCaller) (*NodeCaller, error) {
	contract, err := bindNode(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodeCaller{contract: contract}, nil
}

// NewNodeTransactor creates a new write-only instance of Node, bound to a specific deployed contract.
func NewNodeTransactor(address common.Address, transactor bind.ContractTransactor) (*NodeTransactor, error) {
	contract, err := bindNode(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodeTransactor{contract: contract}, nil
}

// NewNodeFilterer creates a new log filterer instance of Node, bound to a specific deployed contract.
func NewNodeFilterer(address common.Address, filterer bind.ContractFilterer) (*NodeFilterer, error) {
	contract, err := bindNode(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodeFilterer{contract: contract}, nil
}

// bindNode binds a generic wrapper to an already deployed contract.
func bindNode(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Node)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_Node *NodeCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Node.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_Node *NodeCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Node.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Node *NodeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Node.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_Node *NodeCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Node.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Node *NodeTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "kill")
}

// Log is a paid mutator transaction binding the contract method 0x41304fac.
//
// Solidity: function log(string label) returns()
func (_Node *NodeTransactor) Log(opts *bind.TransactOpts, label string) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "log", label)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Node *NodeTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Node *NodeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Node.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Node *NodeTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Node.contract.RawTransact(opts, calldata)
}

// NodeLogIterator is returned from FilterLog and is used to iterate over the raw logs and unpacked data for Log events raised by the Node contract.
type NodeLogIterator struct {
	Event *NodeLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLog represents a Log event raised by the Node contract.
type NodeLog struct {
	Label string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLog is a free log retrieval operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Node *NodeFilterer) FilterLog(opts *bind.FilterOpts) (*NodeLogIterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return &NodeLogIterator{contract: _Node.contract, event: "Log", logs: logs, sub: sub}, nil
}

// WatchLog is a free log subscription operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Node *NodeFilterer) WatchLog(opts *bind.WatchOpts, sink chan<- *NodeLog) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "Log")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLog)
				if err := _Node.contract.UnpackLog(event, "Log", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLog is a log parse operation binding the contract event 0xcf34ef537ac33ee1ac626ca1587a0a7e8e51561e5514f8cb36afa1c5102b3bab.
//
// Solidity: event Log(string label)
func (_Node *NodeFilterer) ParseLog(log types.Log) (*NodeLog, error) {
	event := new(NodeLog)
	if err := _Node.contract.UnpackLog(event, "Log", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the Node contract.
type NodeLogAddressIterator struct {
	Event *NodeLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogAddress represents a LogAddress event raised by the Node contract.
type NodeLogAddress struct {
	Label string
	A     common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Node *NodeFilterer) FilterLogAddress(opts *bind.FilterOpts) (*NodeLogAddressIterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return &NodeLogAddressIterator{contract: _Node.contract, event: "LogAddress", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Node *NodeFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *NodeLogAddress) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogAddress)
				if err := _Node.contract.UnpackLog(event, "LogAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0x62ddffe5b5108385f7a590f100e1ee414ad9551a31f089e64e82998440785e1e.
//
// Solidity: event LogAddress(string label, address a)
func (_Node *NodeFilterer) ParseLogAddress(log types.Log) (*NodeLogAddress, error) {
	event := new(NodeLogAddress)
	if err := _Node.contract.UnpackLog(event, "LogAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeLogBoolIterator is returned from FilterLogBool and is used to iterate over the raw logs and unpacked data for LogBool events raised by the Node contract.
type NodeLogBoolIterator struct {
	Event *NodeLogBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogBool represents a LogBool event raised by the Node contract.
type NodeLogBool struct {
	Label string
	B     bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBool is a free log retrieval operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Node *NodeFilterer) FilterLogBool(opts *bind.FilterOpts) (*NodeLogBoolIterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return &NodeLogBoolIterator{contract: _Node.contract, event: "LogBool", logs: logs, sub: sub}, nil
}

// WatchLogBool is a free log subscription operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Node *NodeFilterer) WatchLogBool(opts *bind.WatchOpts, sink chan<- *NodeLogBool) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogBool)
				if err := _Node.contract.UnpackLog(event, "LogBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBool is a log parse operation binding the contract event 0x4c34c2f9a78632f29fa59aaed5514cb742fd9fbcfd7ccc2c03c85f2bbc621c47.
//
// Solidity: event LogBool(string label, bool b)
func (_Node *NodeFilterer) ParseLogBool(log types.Log) (*NodeLogBool, error) {
	event := new(NodeLogBool)
	if err := _Node.contract.UnpackLog(event, "LogBool", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the Node contract.
type NodeLogBytes32Iterator struct {
	Event *NodeLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogBytes32 represents a LogBytes32 event raised by the Node contract.
type NodeLogBytes32 struct {
	Label string
	B     [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Node *NodeFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*NodeLogBytes32Iterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return &NodeLogBytes32Iterator{contract: _Node.contract, event: "LogBytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Node *NodeFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *NodeLogBytes32) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogBytes32)
				if err := _Node.contract.UnpackLog(event, "LogBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0x02d93529bba9d141e5e06733c52c7e6fbcb1149586adb5c24064b522ab26f1d7.
//
// Solidity: event LogBytes32(string label, bytes32 b)
func (_Node *NodeFilterer) ParseLogBytes32(log types.Log) (*NodeLogBytes32, error) {
	event := new(NodeLogBytes32)
	if err := _Node.contract.UnpackLog(event, "LogBytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeLogInt256Iterator is returned from FilterLogInt256 and is used to iterate over the raw logs and unpacked data for LogInt256 events raised by the Node contract.
type NodeLogInt256Iterator struct {
	Event *NodeLogInt256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogInt256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogInt256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogInt256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogInt256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogInt256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogInt256 represents a LogInt256 event raised by the Node contract.
type NodeLogInt256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogInt256 is a free log retrieval operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Node *NodeFilterer) FilterLogInt256(opts *bind.FilterOpts) (*NodeLogInt256Iterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return &NodeLogInt256Iterator{contract: _Node.contract, event: "LogInt256", logs: logs, sub: sub}, nil
}

// WatchLogInt256 is a free log subscription operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Node *NodeFilterer) WatchLogInt256(opts *bind.WatchOpts, sink chan<- *NodeLogInt256) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogInt256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogInt256)
				if err := _Node.contract.UnpackLog(event, "LogInt256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogInt256 is a log parse operation binding the contract event 0x3d9b341774178bb033613e3a7a1cadb2244b3bcbb1372905d2ba24dca38aeb22.
//
// Solidity: event LogInt256(string label, int256 u)
func (_Node *NodeFilterer) ParseLogInt256(log types.Log) (*NodeLogInt256, error) {
	event := new(NodeLogInt256)
	if err := _Node.contract.UnpackLog(event, "LogInt256", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeLogUint256Iterator is returned from FilterLogUint256 and is used to iterate over the raw logs and unpacked data for LogUint256 events raised by the Node contract.
type NodeLogUint256Iterator struct {
	Event *NodeLogUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeLogUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeLogUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeLogUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeLogUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeLogUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeLogUint256 represents a LogUint256 event raised by the Node contract.
type NodeLogUint256 struct {
	Label string
	U     *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterLogUint256 is a free log retrieval operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Node *NodeFilterer) FilterLogUint256(opts *bind.FilterOpts) (*NodeLogUint256Iterator, error) {

	logs, sub, err := _Node.contract.FilterLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return &NodeLogUint256Iterator{contract: _Node.contract, event: "LogUint256", logs: logs, sub: sub}, nil
}

// WatchLogUint256 is a free log subscription operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Node *NodeFilterer) WatchLogUint256(opts *bind.WatchOpts, sink chan<- *NodeLogUint256) (event.Subscription, error) {

	logs, sub, err := _Node.contract.WatchLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeLogUint256)
				if err := _Node.contract.UnpackLog(event, "LogUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint256 is a log parse operation binding the contract event 0x31c369d7029afba34b21369bcf9a6ac132fb2621c34558b914859b768d05232d.
//
// Solidity: event LogUint256(string label, uint256 u)
func (_Node *NodeFilterer) ParseLogUint256(log types.Log) (*NodeLogUint256, error) {
	event := new(NodeLogUint256)
	if err := _Node.contract.UnpackLog(event, "LogUint256", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeSpaceMetaData contains all meta data concerning the NodeSpace contract.
var NodeSpaceMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"submitNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"canNodePublish\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numActiveNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"},{\"name\":\"_locator\",\"type\":\"bytes\"}],\"name\":\"addNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeLocators\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingNodeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"removeNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"approveNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numPendingNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locator\",\"type\":\"bytes\"}],\"name\":\"NodeApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"AddNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ownerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"RemoveNode\",\"type\":\"event\"}]",
	Sigs: map[string]string{
		"52f82dd8": "activeNodeAddresses(uint256)",
		"5272ae17": "activeNodeLocators(uint256)",
		"64f0f050": "addNode(address,bytes)",
		"dd4c97a0": "approveNode(address)",
		"26683e14": "canNodePublish(address)",
		"af570c04": "contentSpace()",
		"02d05d3f": "creator()",
		"41c0e1b5": "kill()",
		"43f59ec7": "numActiveNodes()",
		"f41a1587": "numPendingNodes()",
		"8da5cb5b": "owner()",
		"6be9514c": "pendingNodeAddresses(uint256)",
		"69e30ff8": "pendingNodeLocators(uint256)",
		"b2b99ec9": "removeNode(address)",
		"160eee74": "submitNode(bytes)",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
	},
	Bin: "0x60806040527f4f776e61626c6532303139303532383139333830304d4c0000000000000000006000557f4e6f6465537061636532303139303532383137303130304d4c0000000000000060045560018054600160a060020a0319908116329081179092556002805490911690911790556114718061007e6000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f81146100fd578063160eee741461012e57806326683e141461018757806341c0e1b5146101bc57806343f59ec7146101d15780635272ae17146101f857806352f82dd81461028557806354fd4d501461029d57806364f0f050146102b257806369e30ff8146103195780636be9514c146103315780636d2e4b1b146103495780638da5cb5b1461036a578063af570c041461037f578063b2b99ec914610394578063dd4c97a0146103b5578063f2fde38b146103d6578063f41a1587146103f7575b005b34801561010957600080fd5b5061011261040c565b60408051600160a060020a039092168252519081900360200190f35b34801561013a57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100fb94369492936024939284019190819084018382808284375094975061041b9650505050505050565b34801561019357600080fd5b506101a8600160a060020a03600435166107db565b604080519115158252519081900360200190f35b3480156101c857600080fd5b506100fb610839565b3480156101dd57600080fd5b506101e6610875565b60408051918252519081900360200190f35b34801561020457600080fd5b5061021060043561087c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561024a578181015183820152602001610232565b50505050905090810190601f1680156102775780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029157600080fd5b50610112600435610923565b3480156102a957600080fd5b506101e661094b565b3480156102be57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526100fb958335600160a060020a03169536956044949193909101919081908401838280828437509497506109519650505050505050565b34801561032557600080fd5b50610210600435610ba3565b34801561033d57600080fd5b50610112600435610bb1565b34801561035557600080fd5b506100fb600160a060020a0360043516610bbf565b34801561037657600080fd5b50610112610c1a565b34801561038b57600080fd5b50610112610c29565b3480156103a057600080fd5b506100fb600160a060020a0360043516610c38565b3480156103c157600080fd5b506100fb600160a060020a0360043516610d08565b3480156103e257600080fd5b506100fb600160a060020a0360043516610f5b565b34801561040357600080fd5b506101e6610fcd565b600154600160a060020a031681565b610551600780548060200260200160405190810160405280929190818152602001828054801561047457602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610456575b50505050506008805480602002602001604051908101604052809291908181526020016000905b828210156105465760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156105325780601f1061050757610100808354040283529160200191610532565b820191906000526020600020905b81548152906001019060200180831161051557829003601f168201915b50505050508152602001906001019061049b565b505050503384610fd3565b1561055b57600080fd5b61068660058054806020026020016040519081016040528092919081815260200182805480156105b457602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610596575b50505050506006805480602002602001604051908101604052809291908181526020016000905b828210156105465760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156106725780601f1061064757610100808354040283529160200191610672565b820191906000526020600020905b81548152906001019060200180831161065557829003601f168201915b5050505050815260200190600101906105db565b1561069057600080fd5b60075460641161069f57600080fd5b600880546001810180835560009290925282516106e3917ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30190602085019061128a565b50506007805460018101825560009182527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801805473ffffffffffffffffffffffffffffffffffffffff19163390811790915560408051828152602081810183815286519383019390935285517fae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d958794926060850192908601918190849084905b8381101561079d578181015183820152602001610785565b50505050905090810190601f1680156107ca5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150565b6000805b60055481101561082e5782600160a060020a031660058281548110151561080257fe5b600091825260209091200154600160a060020a031614156108265760019150610833565b6001016107df565b600091505b50919050565b600254600160a060020a031632148061085c5750600254600160a060020a031633145b151561086757600080fd5b600254600160a060020a0316ff5b6006545b90565b600680548290811061088a57fe5b600091825260209182902001805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529350909183018282801561091b5780601f106108f05761010080835404028352916020019161091b565b820191906000526020600020905b8154815290600101906020018083116108fe57829003601f168201915b505050505081565b600580548290811061093157fe5b600091825260209091200154600160a060020a0316905081565b60045481565b600254600160a060020a03163214806109745750600254600160a060020a031633145b151561097f57600080fd5b610ab560058054806020026020016040519081016040528092919081815260200182805480156109d857602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116109ba575b50505050506006805480602002602001604051908101604052809291908181526020016000905b82821015610aaa5760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610a965780601f10610a6b57610100808354040283529160200191610a96565b820191906000526020600020905b815481529060010190602001808311610a7957829003601f168201915b5050505050815260200190600101906109ff565b505050508484610fd3565b15610abf57600080fd5b6005805460018082019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385161790556006805491820180825560009190915282519091610b5a917ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90910190602085019061128a565b505060408051338152600160a060020a038416602082015281517f2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4929181900390910190a15050565b600880548290811061088a57fe5b600780548290811061093157fe5b600154600160a060020a03163214610bd657600080fd5b600160a060020a0381161515610beb57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b600354600160a060020a031681565b600254600090600160a060020a0316321480610c5e5750600254600160a060020a031633145b1515610c6957600080fd5b5060005b600554811015610d045781600160a060020a0316600582815481101515610c9057fe5b600091825260209091200154600160a060020a03161415610cfc57610cb88160056006611121565b60408051338152600160a060020a038416602082015281517f41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d929181900390910190a15b600101610c6d565b5050565b6002546000908190600160a060020a0316321480610d305750600254600160a060020a031633145b1515610d3b57600080fd5b5060009050805b600754811015610f4a5782600160a060020a0316600782815481101515610d6557fe5b600091825260209091200154600160a060020a03161415610f42576005600782815481101515610d9157fe5b600091825260208083209091015483546001810185559383529120909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055600880546006919083908110610deb57fe5b60009182526020808320845460018181018088559686529290942092018054610e2f9493909301929091600261010091831615919091026000190190911604611308565b50507fd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54600782815481101515610e6157fe5b60009182526020909120015460088054600160a060020a039092169184908110610e8757fe5b600091825260209182902060408051600160a060020a0386168152938401818152919092018054600260001961010060018416150201909116049284018390529291606083019084908015610f1d5780601f10610ef257610100808354040283529160200191610f1d565b820191906000526020600020905b815481529060010190602001808311610f0057829003601f168201915b5050935050505060405180910390a1610f398160076008611121565b60019150610f4a565b600101610d42565b811515610f5657600080fd5b505050565b600254600160a060020a0316321480610f7e5750600254600160a060020a031633145b1515610f8957600080fd5b600160a060020a0381161515610f9e57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60085490565b60008084518651141515610fe657600080fd5b5060005b855181101561111357826040518082805190602001908083835b602083106110235780518252601f199092019160209182019101611004565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091208851909350889250849150811061105f57fe5b906020019060200201516040518082805190602001908083835b602083106110985780518252601f199092019160209182019101611079565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614806110fd575083600160a060020a031686828151811015156110e857fe5b90602001906020020151600160a060020a0316145b1561110b5760019150611118565b600101610fea565b600091505b50949350505050565b8154831080156111315750805483105b151561113c57600080fd5b81546000190183146112035780548190600019810190811061115a57fe5b90600052602060002001818481548110151561117257fe5b90600052602060002001908054600181600116156101000203166002900461119b929190611308565b508154829060001981019081106111ae57fe5b6000918252602090912001548254600160a060020a03909116908390859081106111d457fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505b80548190600019810190811061121557fe5b90600052602060002001600061122b919061137d565b805461123b8260001983016113c4565b5081548290600019810190811061124e57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916905581546112848360001983016113e8565b50505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106112cb57805160ff19168380011785556112f8565b828001600101855582156112f8579182015b828111156112f85782518255916020019190600101906112dd565b50611304929150611408565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061134157805485556112f8565b828001600101855582156112f857600052602060002091601f016020900482015b828111156112f8578254825591600101919060010190611362565b50805460018160011615610100020316600290046000825580601f106113a357506113c1565b601f0160209004906000526020600020908101906113c19190611408565b50565b815481835581811115610f5657600083815260209020610f56918101908301611422565b815481835581811115610f5657600083815260209020610f569181019083015b61087991905b80821115611304576000815560010161140e565b61087991905b8082111561130457600061143c828261137d565b506001016114285600a165627a7a723058204ef7007d84d1d66d43e10867fad6e1df1ca92725065e49b2250ceab5c5806dbb0029",
}

// NodeSpaceABI is the input ABI used to generate the binding from.
// Deprecated: Use NodeSpaceMetaData.ABI instead.
var NodeSpaceABI = NodeSpaceMetaData.ABI

// Deprecated: Use NodeSpaceMetaData.Sigs instead.
// NodeSpaceFuncSigs maps the 4-byte function signature to its string representation.
var NodeSpaceFuncSigs = NodeSpaceMetaData.Sigs

// NodeSpaceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NodeSpaceMetaData.Bin instead.
var NodeSpaceBin = NodeSpaceMetaData.Bin

// DeployNodeSpace deploys a new Ethereum contract, binding an instance of NodeSpace to it.
func DeployNodeSpace(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *NodeSpace, error) {
	parsed, err := ParsedABI(K_NodeSpace)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NodeSpaceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NodeSpace{NodeSpaceCaller: NodeSpaceCaller{contract: contract}, NodeSpaceTransactor: NodeSpaceTransactor{contract: contract}, NodeSpaceFilterer: NodeSpaceFilterer{contract: contract}}, nil
}

// NodeSpace is an auto generated Go binding around an Ethereum contract.
type NodeSpace struct {
	NodeSpaceCaller     // Read-only binding to the contract
	NodeSpaceTransactor // Write-only binding to the contract
	NodeSpaceFilterer   // Log filterer for contract events
}

// NodeSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodeSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodeSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodeSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodeSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewNodeSpace creates a new instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpace(address common.Address, backend bind.ContractBackend) (*NodeSpace, error) {
	contract, err := bindNodeSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NodeSpace{NodeSpaceCaller: NodeSpaceCaller{contract: contract}, NodeSpaceTransactor: NodeSpaceTransactor{contract: contract}, NodeSpaceFilterer: NodeSpaceFilterer{contract: contract}}, nil
}

// NewNodeSpaceCaller creates a new read-only instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpaceCaller(address common.Address, caller bind.ContractCaller) (*NodeSpaceCaller, error) {
	contract, err := bindNodeSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodeSpaceCaller{contract: contract}, nil
}

// NewNodeSpaceTransactor creates a new write-only instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*NodeSpaceTransactor, error) {
	contract, err := bindNodeSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodeSpaceTransactor{contract: contract}, nil
}

// NewNodeSpaceFilterer creates a new log filterer instance of NodeSpace, bound to a specific deployed contract.
func NewNodeSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*NodeSpaceFilterer, error) {
	contract, err := bindNodeSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodeSpaceFilterer{contract: contract}, nil
}

// bindNodeSpace binds a generic wrapper to an already deployed contract.
func bindNodeSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_NodeSpace)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ActiveNodeAddresses is a free data retrieval call binding the contract method 0x52f82dd8.
//
// Solidity: function activeNodeAddresses(uint256 ) view returns(address)
func (_NodeSpace *NodeSpaceCaller) ActiveNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "activeNodeAddresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ActiveNodeLocators is a free data retrieval call binding the contract method 0x5272ae17.
//
// Solidity: function activeNodeLocators(uint256 ) view returns(bytes)
func (_NodeSpace *NodeSpaceCaller) ActiveNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "activeNodeLocators", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// CanNodePublish is a free data retrieval call binding the contract method 0x26683e14.
//
// Solidity: function canNodePublish(address candidate) view returns(bool)
func (_NodeSpace *NodeSpaceCaller) CanNodePublish(opts *bind.CallOpts, candidate common.Address) (bool, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "canNodePublish", candidate)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_NodeSpace *NodeSpaceCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_NodeSpace *NodeSpaceCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NumActiveNodes is a free data retrieval call binding the contract method 0x43f59ec7.
//
// Solidity: function numActiveNodes() view returns(uint256)
func (_NodeSpace *NodeSpaceCaller) NumActiveNodes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "numActiveNodes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumPendingNodes is a free data retrieval call binding the contract method 0xf41a1587.
//
// Solidity: function numPendingNodes() view returns(uint256)
func (_NodeSpace *NodeSpaceCaller) NumPendingNodes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "numPendingNodes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NodeSpace *NodeSpaceCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingNodeAddresses is a free data retrieval call binding the contract method 0x6be9514c.
//
// Solidity: function pendingNodeAddresses(uint256 ) view returns(address)
func (_NodeSpace *NodeSpaceCaller) PendingNodeAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "pendingNodeAddresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingNodeLocators is a free data retrieval call binding the contract method 0x69e30ff8.
//
// Solidity: function pendingNodeLocators(uint256 ) view returns(bytes)
func (_NodeSpace *NodeSpaceCaller) PendingNodeLocators(opts *bind.CallOpts, arg0 *big.Int) ([]byte, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "pendingNodeLocators", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_NodeSpace *NodeSpaceCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _NodeSpace.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AddNode is a paid mutator transaction binding the contract method 0x64f0f050.
//
// Solidity: function addNode(address _nodeAddr, bytes _locator) returns()
func (_NodeSpace *NodeSpaceTransactor) AddNode(opts *bind.TransactOpts, _nodeAddr common.Address, _locator []byte) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "addNode", _nodeAddr, _locator)
}

// ApproveNode is a paid mutator transaction binding the contract method 0xdd4c97a0.
//
// Solidity: function approveNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceTransactor) ApproveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "approveNode", _nodeAddr)
}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_NodeSpace *NodeSpaceTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "kill")
}

// RemoveNode is a paid mutator transaction binding the contract method 0xb2b99ec9.
//
// Solidity: function removeNode(address _nodeAddr) returns()
func (_NodeSpace *NodeSpaceTransactor) RemoveNode(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "removeNode", _nodeAddr)
}

// SubmitNode is a paid mutator transaction binding the contract method 0x160eee74.
//
// Solidity: function submitNode(bytes _locator) returns()
func (_NodeSpace *NodeSpaceTransactor) SubmitNode(opts *bind.TransactOpts, _locator []byte) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "submitNode", _locator)
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_NodeSpace *NodeSpaceTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NodeSpace *NodeSpaceTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _NodeSpace.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_NodeSpace *NodeSpaceTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _NodeSpace.contract.RawTransact(opts, calldata)
}

// NodeSpaceAddNodeIterator is returned from FilterAddNode and is used to iterate over the raw logs and unpacked data for AddNode events raised by the NodeSpace contract.
type NodeSpaceAddNodeIterator struct {
	Event *NodeSpaceAddNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceAddNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceAddNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceAddNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceAddNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceAddNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceAddNode represents a AddNode event raised by the NodeSpace contract.
type NodeSpaceAddNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAddNode is a free log retrieval operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) FilterAddNode(opts *bind.FilterOpts) (*NodeSpaceAddNodeIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceAddNodeIterator{contract: _NodeSpace.contract, event: "AddNode", logs: logs, sub: sub}, nil
}

// WatchAddNode is a free log subscription operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) WatchAddNode(opts *bind.WatchOpts, sink chan<- *NodeSpaceAddNode) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "AddNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceAddNode)
				if err := _NodeSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddNode is a log parse operation binding the contract event 0x2bb0f9ba138ffddb5a8f974e9885b65a7814d3002654f1cf3f2d3f619a4006c4.
//
// Solidity: event AddNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) ParseAddNode(log types.Log) (*NodeSpaceAddNode, error) {
	event := new(NodeSpaceAddNode)
	if err := _NodeSpace.contract.UnpackLog(event, "AddNode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeSpaceNodeApprovedIterator is returned from FilterNodeApproved and is used to iterate over the raw logs and unpacked data for NodeApproved events raised by the NodeSpace contract.
type NodeSpaceNodeApprovedIterator struct {
	Event *NodeSpaceNodeApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceNodeApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceNodeApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceNodeApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceNodeApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceNodeApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceNodeApproved represents a NodeApproved event raised by the NodeSpace contract.
type NodeSpaceNodeApproved struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeApproved is a free log retrieval operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) FilterNodeApproved(opts *bind.FilterOpts) (*NodeSpaceNodeApprovedIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceNodeApprovedIterator{contract: _NodeSpace.contract, event: "NodeApproved", logs: logs, sub: sub}, nil
}

// WatchNodeApproved is a free log subscription operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) WatchNodeApproved(opts *bind.WatchOpts, sink chan<- *NodeSpaceNodeApproved) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "NodeApproved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceNodeApproved)
				if err := _NodeSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeApproved is a log parse operation binding the contract event 0xd644c8164f225d3b7fdbcc404f279bb1e823ef0d93f88dd4b24e85d0e7bc6a54.
//
// Solidity: event NodeApproved(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) ParseNodeApproved(log types.Log) (*NodeSpaceNodeApproved, error) {
	event := new(NodeSpaceNodeApproved)
	if err := _NodeSpace.contract.UnpackLog(event, "NodeApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeSpaceNodeSubmittedIterator is returned from FilterNodeSubmitted and is used to iterate over the raw logs and unpacked data for NodeSubmitted events raised by the NodeSpace contract.
type NodeSpaceNodeSubmittedIterator struct {
	Event *NodeSpaceNodeSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceNodeSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceNodeSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceNodeSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceNodeSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceNodeSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceNodeSubmitted represents a NodeSubmitted event raised by the NodeSpace contract.
type NodeSpaceNodeSubmitted struct {
	Addr    common.Address
	Locator []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNodeSubmitted is a free log retrieval operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) FilterNodeSubmitted(opts *bind.FilterOpts) (*NodeSpaceNodeSubmittedIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceNodeSubmittedIterator{contract: _NodeSpace.contract, event: "NodeSubmitted", logs: logs, sub: sub}, nil
}

// WatchNodeSubmitted is a free log subscription operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) WatchNodeSubmitted(opts *bind.WatchOpts, sink chan<- *NodeSpaceNodeSubmitted) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "NodeSubmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceNodeSubmitted)
				if err := _NodeSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeSubmitted is a log parse operation binding the contract event 0xae5645569f32b946f7a747113c64094a29a6b84c5ddf55816ef4381ce8a3a46d.
//
// Solidity: event NodeSubmitted(address addr, bytes locator)
func (_NodeSpace *NodeSpaceFilterer) ParseNodeSubmitted(log types.Log) (*NodeSpaceNodeSubmitted, error) {
	event := new(NodeSpaceNodeSubmitted)
	if err := _NodeSpace.contract.UnpackLog(event, "NodeSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodeSpaceRemoveNodeIterator is returned from FilterRemoveNode and is used to iterate over the raw logs and unpacked data for RemoveNode events raised by the NodeSpace contract.
type NodeSpaceRemoveNodeIterator struct {
	Event *NodeSpaceRemoveNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodeSpaceRemoveNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodeSpaceRemoveNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodeSpaceRemoveNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodeSpaceRemoveNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodeSpaceRemoveNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodeSpaceRemoveNode represents a RemoveNode event raised by the NodeSpace contract.
type NodeSpaceRemoveNode struct {
	OwnerAddr common.Address
	NodeAddr  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRemoveNode is a free log retrieval operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) FilterRemoveNode(opts *bind.FilterOpts) (*NodeSpaceRemoveNodeIterator, error) {

	logs, sub, err := _NodeSpace.contract.FilterLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return &NodeSpaceRemoveNodeIterator{contract: _NodeSpace.contract, event: "RemoveNode", logs: logs, sub: sub}, nil
}

// WatchRemoveNode is a free log subscription operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) WatchRemoveNode(opts *bind.WatchOpts, sink chan<- *NodeSpaceRemoveNode) (event.Subscription, error) {

	logs, sub, err := _NodeSpace.contract.WatchLogs(opts, "RemoveNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodeSpaceRemoveNode)
				if err := _NodeSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveNode is a log parse operation binding the contract event 0x41ec5b9efdbf61871df6a18b687e04bea93d5793af5f8c8b4626e155b23dc19d.
//
// Solidity: event RemoveNode(address ownerAddr, address nodeAddr)
func (_NodeSpace *NodeSpaceFilterer) ParseRemoveNode(log types.Log) (*NodeSpaceRemoveNode, error) {
	event := new(NodeSpaceRemoveNode)
	if err := _NodeSpace.contract.UnpackLog(event, "RemoveNode", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OwnableMetaData contains all meta data concerning the Ownable contract.
var OwnableMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contentSpace\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
	Sigs: map[string]string{
		"af570c04": "contentSpace()",
		"02d05d3f": "creator()",
		"41c0e1b5": "kill()",
		"8da5cb5b": "owner()",
		"6d2e4b1b": "transferCreatorship(address)",
		"f2fde38b": "transferOwnership(address)",
		"54fd4d50": "version()",
	},
	Bin: "0x60806040527f4f776e61626c6532303139303532383139333830304d4c00000000000000000060005560018054600160a060020a0319908116329081179092556002805490911690911790556102c58061005a6000396000f3006080604052600436106100825763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461008457806341c0e1b5146100b557806354fd4d50146100ca5780636d2e4b1b146100f15780638da5cb5b14610112578063af570c0414610127578063f2fde38b1461013c575b005b34801561009057600080fd5b5061009961015d565b60408051600160a060020a039092168252519081900360200190f35b3480156100c157600080fd5b5061008261016c565b3480156100d657600080fd5b506100df6101a8565b60408051918252519081900360200190f35b3480156100fd57600080fd5b50610082600160a060020a03600435166101ae565b34801561011e57600080fd5b50610099610209565b34801561013357600080fd5b50610099610218565b34801561014857600080fd5b50610082600160a060020a0360043516610227565b600154600160a060020a031681565b600254600160a060020a031632148061018f5750600254600160a060020a031633145b151561019a57600080fd5b600254600160a060020a0316ff5b60005481565b600154600160a060020a031632146101c557600080fd5b600160a060020a03811615156101da57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b600354600160a060020a031681565b600254600160a060020a031632148061024a5750600254600160a060020a031633145b151561025557600080fd5b600160a060020a038116151561026a57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a7230582023e7c7f4b062e3e2891bacda4af48c706c6b2fe2d44eaec904554039b0c585df0029",
}

// OwnableABI is the input ABI used to generate the binding from.
// Deprecated: Use OwnableMetaData.ABI instead.
var OwnableABI = OwnableMetaData.ABI

// Deprecated: Use OwnableMetaData.Sigs instead.
// OwnableFuncSigs maps the 4-byte function signature to its string representation.
var OwnableFuncSigs = OwnableMetaData.Sigs

// OwnableBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OwnableMetaData.Bin instead.
var OwnableBin = OwnableMetaData.Bin

// DeployOwnable deploys a new Ethereum contract, binding an instance of Ownable to it.
func DeployOwnable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Ownable, error) {
	parsed, err := ParsedABI(K_Ownable)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OwnableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Ownable{OwnableCaller: OwnableCaller{contract: contract}, OwnableTransactor: OwnableTransactor{contract: contract}, OwnableFilterer: OwnableFilterer{contract: contract}}, nil
}

// Ownable is an auto generated Go binding around an Ethereum contract.
type Ownable struct {
	OwnableCaller     // Read-only binding to the contract
	OwnableTransactor // Write-only binding to the contract
	OwnableFilterer   // Log filterer for contract events
}

// OwnableCaller is an auto generated read-only Go binding around an Ethereum contract.
type OwnableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OwnableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OwnableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewOwnable creates a new instance of Ownable, bound to a specific deployed contract.
func NewOwnable(address common.Address, backend bind.ContractBackend) (*Ownable, error) {
	contract, err := bindOwnable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Ownable{OwnableCaller: OwnableCaller{contract: contract}, OwnableTransactor: OwnableTransactor{contract: contract}, OwnableFilterer: OwnableFilterer{contract: contract}}, nil
}

// NewOwnableCaller creates a new read-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableCaller(address common.Address, caller bind.ContractCaller) (*OwnableCaller, error) {
	contract, err := bindOwnable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableCaller{contract: contract}, nil
}

// NewOwnableTransactor creates a new write-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableTransactor(address common.Address, transactor bind.ContractTransactor) (*OwnableTransactor, error) {
	contract, err := bindOwnable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableTransactor{contract: contract}, nil
}

// NewOwnableFilterer creates a new log filterer instance of Ownable, bound to a specific deployed contract.
func NewOwnableFilterer(address common.Address, filterer bind.ContractFilterer) (*OwnableFilterer, error) {
	contract, err := bindOwnable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OwnableFilterer{contract: contract}, nil
}

// bindOwnable binds a generic wrapper to an already deployed contract.
func bindOwnable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Ownable)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ContentSpace is a free data retrieval call binding the contract method 0xaf570c04.
//
// Solidity: function contentSpace() view returns(address)
func (_Ownable *OwnableCaller) ContentSpace(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Ownable.contract.Call(opts, &out, "contentSpace")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Creator is a free data retrieval call binding the contract method 0x02d05d3f.
//
// Solidity: function creator() view returns(address)
func (_Ownable *OwnableCaller) Creator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Ownable.contract.Call(opts, &out, "creator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Ownable.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_Ownable *OwnableCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Ownable.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Kill is a paid mutator transaction binding the contract method 0x41c0e1b5.
//
// Solidity: function kill() returns()
func (_Ownable *OwnableTransactor) Kill(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "kill")
}

// TransferCreatorship is a paid mutator transaction binding the contract method 0x6d2e4b1b.
//
// Solidity: function transferCreatorship(address newCreator) returns()
func (_Ownable *OwnableTransactor) TransferCreatorship(opts *bind.TransactOpts, newCreator common.Address) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "transferCreatorship", newCreator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "transferOwnership", newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() payable returns()
func (_Ownable *OwnableTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Ownable.contract.RawTransact(opts, calldata)
}

// PrecompileMetaData contains all meta data concerning the Precompile contract.
var PrecompileMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"KMS\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"a6ca541e": "KMS()",
	},
	Bin: "0x60a361002f600b82828239805160001a6073146000811461001f57610021565bfe5b5030600052607381538281f300730000000000000000000000000000000000000000301460806040526004361060555763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663a6ca541e8114605a575b600080fd5b60606072565b60408051918252519081900360200190f35b600b815600a165627a7a7230582068adfeccd42656b6754959711a698fedf5d40d88ef50fff71574656602ce99e20029",
}

// PrecompileABI is the input ABI used to generate the binding from.
// Deprecated: Use PrecompileMetaData.ABI instead.
var PrecompileABI = PrecompileMetaData.ABI

// Deprecated: Use PrecompileMetaData.Sigs instead.
// PrecompileFuncSigs maps the 4-byte function signature to its string representation.
var PrecompileFuncSigs = PrecompileMetaData.Sigs

// PrecompileBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PrecompileMetaData.Bin instead.
var PrecompileBin = PrecompileMetaData.Bin

// DeployPrecompile deploys a new Ethereum contract, binding an instance of Precompile to it.
func DeployPrecompile(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Precompile, error) {
	parsed, err := ParsedABI(K_Precompile)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PrecompileBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Precompile{PrecompileCaller: PrecompileCaller{contract: contract}, PrecompileTransactor: PrecompileTransactor{contract: contract}, PrecompileFilterer: PrecompileFilterer{contract: contract}}, nil
}

// Precompile is an auto generated Go binding around an Ethereum contract.
type Precompile struct {
	PrecompileCaller     // Read-only binding to the contract
	PrecompileTransactor // Write-only binding to the contract
	PrecompileFilterer   // Log filterer for contract events
}

// PrecompileCaller is an auto generated read-only Go binding around an Ethereum contract.
type PrecompileCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompileTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PrecompileTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrecompileFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PrecompileFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewPrecompile creates a new instance of Precompile, bound to a specific deployed contract.
func NewPrecompile(address common.Address, backend bind.ContractBackend) (*Precompile, error) {
	contract, err := bindPrecompile(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Precompile{PrecompileCaller: PrecompileCaller{contract: contract}, PrecompileTransactor: PrecompileTransactor{contract: contract}, PrecompileFilterer: PrecompileFilterer{contract: contract}}, nil
}

// NewPrecompileCaller creates a new read-only instance of Precompile, bound to a specific deployed contract.
func NewPrecompileCaller(address common.Address, caller bind.ContractCaller) (*PrecompileCaller, error) {
	contract, err := bindPrecompile(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompileCaller{contract: contract}, nil
}

// NewPrecompileTransactor creates a new write-only instance of Precompile, bound to a specific deployed contract.
func NewPrecompileTransactor(address common.Address, transactor bind.ContractTransactor) (*PrecompileTransactor, error) {
	contract, err := bindPrecompile(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PrecompileTransactor{contract: contract}, nil
}

// NewPrecompileFilterer creates a new log filterer instance of Precompile, bound to a specific deployed contract.
func NewPrecompileFilterer(address common.Address, filterer bind.ContractFilterer) (*PrecompileFilterer, error) {
	contract, err := bindPrecompile(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PrecompileFilterer{contract: contract}, nil
}

// bindPrecompile binds a generic wrapper to an already deployed contract.
func bindPrecompile(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Precompile)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// KMS is a free data retrieval call binding the contract method 0xa6ca541e.
//
// Solidity: function KMS() view returns(int256)
func (_Precompile *PrecompileCaller) KMS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Precompile.contract.Call(opts, &out, "KMS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TransactableMetaData contains all meta data concerning the Transactable contract.
var TransactableMetaData = &bind.MetaData{
	ABI: "[{\"constant\":false,\"inputs\":[{\"name\":\"_guarantor\",\"type\":\"address\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"validateTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"508ad278": "execute(address,uint8,bytes32,bytes32,address,uint256,uint256)",
		"f50b2efe": "validateTimestamp(uint256)",
		"763d5ee6": "validateTransaction(uint8,bytes32,bytes32,address,uint256,uint256)",
	},
}

// TransactableABI is the input ABI used to generate the binding from.
// Deprecated: Use TransactableMetaData.ABI instead.
var TransactableABI = TransactableMetaData.ABI

// Deprecated: Use TransactableMetaData.Sigs instead.
// TransactableFuncSigs maps the 4-byte function signature to its string representation.
var TransactableFuncSigs = TransactableMetaData.Sigs

// Transactable is an auto generated Go binding around an Ethereum contract.
type Transactable struct {
	TransactableCaller     // Read-only binding to the contract
	TransactableTransactor // Write-only binding to the contract
	TransactableFilterer   // Log filterer for contract events
}

// TransactableCaller is an auto generated read-only Go binding around an Ethereum contract.
type TransactableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransactableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TransactableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransactableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TransactableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewTransactable creates a new instance of Transactable, bound to a specific deployed contract.
func NewTransactable(address common.Address, backend bind.ContractBackend) (*Transactable, error) {
	contract, err := bindTransactable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Transactable{TransactableCaller: TransactableCaller{contract: contract}, TransactableTransactor: TransactableTransactor{contract: contract}, TransactableFilterer: TransactableFilterer{contract: contract}}, nil
}

// NewTransactableCaller creates a new read-only instance of Transactable, bound to a specific deployed contract.
func NewTransactableCaller(address common.Address, caller bind.ContractCaller) (*TransactableCaller, error) {
	contract, err := bindTransactable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TransactableCaller{contract: contract}, nil
}

// NewTransactableTransactor creates a new write-only instance of Transactable, bound to a specific deployed contract.
func NewTransactableTransactor(address common.Address, transactor bind.ContractTransactor) (*TransactableTransactor, error) {
	contract, err := bindTransactable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TransactableTransactor{contract: contract}, nil
}

// NewTransactableFilterer creates a new log filterer instance of Transactable, bound to a specific deployed contract.
func NewTransactableFilterer(address common.Address, filterer bind.ContractFilterer) (*TransactableFilterer, error) {
	contract, err := bindTransactable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TransactableFilterer{contract: contract}, nil
}

// bindTransactable binds a generic wrapper to an already deployed contract.
func bindTransactable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Transactable)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// ValidateTimestamp is a free data retrieval call binding the contract method 0xf50b2efe.
//
// Solidity: function validateTimestamp(uint256 _ts) view returns(bool, uint256)
func (_Transactable *TransactableCaller) ValidateTimestamp(opts *bind.CallOpts, _ts *big.Int) (bool, *big.Int, error) {
	var out []interface{}
	err := _Transactable.contract.Call(opts, &out, "validateTimestamp", _ts)

	if err != nil {
		return *new(bool), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// ValidateTransaction is a free data retrieval call binding the contract method 0x763d5ee6.
//
// Solidity: function validateTransaction(uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) view returns(bool)
func (_Transactable *TransactableCaller) ValidateTransaction(opts *bind.CallOpts, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (bool, error) {
	var out []interface{}
	err := _Transactable.contract.Call(opts, &out, "validateTransaction", _v, _r, _s, _dest, _value, _ts)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Execute is a paid mutator transaction binding the contract method 0x508ad278.
//
// Solidity: function execute(address _guarantor, uint8 _v, bytes32 _r, bytes32 _s, address _dest, uint256 _value, uint256 _ts) returns(bool)
func (_Transactable *TransactableTransactor) Execute(opts *bind.TransactOpts, _guarantor common.Address, _v uint8, _r [32]byte, _s [32]byte, _dest common.Address, _value *big.Int, _ts *big.Int) (*types.Transaction, error) {
	return _Transactable.contract.Transact(opts, "execute", _guarantor, _v, _r, _s, _dest, _value, _ts)
}

// UserSpaceMetaData contains all meta data concerning the UserSpace contract.
var UserSpaceMetaData = &bind.MetaData{
	ABI: "[{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"userWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"63e6ffdd": "userWallets(address)",
		"54fd4d50": "version()",
	},
	Bin: "0x60806040527f55736572537061636532303139303530363135353330304d4c0000000000000060005534801561003457600080fd5b50610122806100446000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166354fd4d508114604d57806363e6ffdd146071575b600080fd5b348015605857600080fd5b50605f60c5565b60408051918252519081900360200190f35b348015607c57600080fd5b50609c73ffffffffffffffffffffffffffffffffffffffff6004351660cb565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60005481565b73ffffffffffffffffffffffffffffffffffffffff90811660009081526001602052604090205416905600a165627a7a72305820a7d74769cfbf0acbfd6d57baf1bc7079174b1ebc24a7d85d1b9be5dc51c30e770029",
}

// UserSpaceABI is the input ABI used to generate the binding from.
// Deprecated: Use UserSpaceMetaData.ABI instead.
var UserSpaceABI = UserSpaceMetaData.ABI

// Deprecated: Use UserSpaceMetaData.Sigs instead.
// UserSpaceFuncSigs maps the 4-byte function signature to its string representation.
var UserSpaceFuncSigs = UserSpaceMetaData.Sigs

// UserSpaceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use UserSpaceMetaData.Bin instead.
var UserSpaceBin = UserSpaceMetaData.Bin

// DeployUserSpace deploys a new Ethereum contract, binding an instance of UserSpace to it.
func DeployUserSpace(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *UserSpace, error) {
	parsed, err := ParsedABI(K_UserSpace)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(UserSpaceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UserSpace{UserSpaceCaller: UserSpaceCaller{contract: contract}, UserSpaceTransactor: UserSpaceTransactor{contract: contract}, UserSpaceFilterer: UserSpaceFilterer{contract: contract}}, nil
}

// UserSpace is an auto generated Go binding around an Ethereum contract.
type UserSpace struct {
	UserSpaceCaller     // Read-only binding to the contract
	UserSpaceTransactor // Write-only binding to the contract
	UserSpaceFilterer   // Log filterer for contract events
}

// UserSpaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type UserSpaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserSpaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UserSpaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserSpaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UserSpaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewUserSpace creates a new instance of UserSpace, bound to a specific deployed contract.
func NewUserSpace(address common.Address, backend bind.ContractBackend) (*UserSpace, error) {
	contract, err := bindUserSpace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UserSpace{UserSpaceCaller: UserSpaceCaller{contract: contract}, UserSpaceTransactor: UserSpaceTransactor{contract: contract}, UserSpaceFilterer: UserSpaceFilterer{contract: contract}}, nil
}

// NewUserSpaceCaller creates a new read-only instance of UserSpace, bound to a specific deployed contract.
func NewUserSpaceCaller(address common.Address, caller bind.ContractCaller) (*UserSpaceCaller, error) {
	contract, err := bindUserSpace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UserSpaceCaller{contract: contract}, nil
}

// NewUserSpaceTransactor creates a new write-only instance of UserSpace, bound to a specific deployed contract.
func NewUserSpaceTransactor(address common.Address, transactor bind.ContractTransactor) (*UserSpaceTransactor, error) {
	contract, err := bindUserSpace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UserSpaceTransactor{contract: contract}, nil
}

// NewUserSpaceFilterer creates a new log filterer instance of UserSpace, bound to a specific deployed contract.
func NewUserSpaceFilterer(address common.Address, filterer bind.ContractFilterer) (*UserSpaceFilterer, error) {
	contract, err := bindUserSpace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UserSpaceFilterer{contract: contract}, nil
}

// bindUserSpace binds a generic wrapper to an already deployed contract.
func bindUserSpace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_UserSpace)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// UserWallets is a free data retrieval call binding the contract method 0x63e6ffdd.
//
// Solidity: function userWallets(address _userAddr) view returns(address)
func (_UserSpace *UserSpaceCaller) UserWallets(opts *bind.CallOpts, _userAddr common.Address) (common.Address, error) {
	var out []interface{}
	err := _UserSpace.contract.Call(opts, &out, "userWallets", _userAddr)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(bytes32)
func (_UserSpace *UserSpaceCaller) Version(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _UserSpace.contract.Call(opts, &out, "version")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StringsMetaData contains all meta data concerning the Strings contract.
var StringsMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a723058206e6c14bce8e602c7f0db5f5094177331faff62e07db020bc46a38aa92e09dfb40029",
}

// StringsABI is the input ABI used to generate the binding from.
// Deprecated: Use StringsMetaData.ABI instead.
var StringsABI = StringsMetaData.ABI

// StringsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StringsMetaData.Bin instead.
var StringsBin = StringsMetaData.Bin

// DeployStrings deploys a new Ethereum contract, binding an instance of Strings to it.
func DeployStrings(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Strings, error) {
	parsed, err := ParsedABI(K_Strings)
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StringsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Strings{StringsCaller: StringsCaller{contract: contract}, StringsTransactor: StringsTransactor{contract: contract}, StringsFilterer: StringsFilterer{contract: contract}}, nil
}

// Strings is an auto generated Go binding around an Ethereum contract.
type Strings struct {
	StringsCaller     // Read-only binding to the contract
	StringsTransactor // Write-only binding to the contract
	StringsFilterer   // Log filterer for contract events
}

// StringsCaller is an auto generated read-only Go binding around an Ethereum contract.
type StringsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StringsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StringsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NewStrings creates a new instance of Strings, bound to a specific deployed contract.
func NewStrings(address common.Address, backend bind.ContractBackend) (*Strings, error) {
	contract, err := bindStrings(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Strings{StringsCaller: StringsCaller{contract: contract}, StringsTransactor: StringsTransactor{contract: contract}, StringsFilterer: StringsFilterer{contract: contract}}, nil
}

// NewStringsCaller creates a new read-only instance of Strings, bound to a specific deployed contract.
func NewStringsCaller(address common.Address, caller bind.ContractCaller) (*StringsCaller, error) {
	contract, err := bindStrings(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StringsCaller{contract: contract}, nil
}

// NewStringsTransactor creates a new write-only instance of Strings, bound to a specific deployed contract.
func NewStringsTransactor(address common.Address, transactor bind.ContractTransactor) (*StringsTransactor, error) {
	contract, err := bindStrings(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StringsTransactor{contract: contract}, nil
}

// NewStringsFilterer creates a new log filterer instance of Strings, bound to a specific deployed contract.
func NewStringsFilterer(address common.Address, filterer bind.ContractFilterer) (*StringsFilterer, error) {
	contract, err := bindStrings(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StringsFilterer{contract: contract}, nil
}

// bindStrings binds a generic wrapper to an already deployed contract.
func bindStrings(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ParsedABI(K_Strings)
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}
